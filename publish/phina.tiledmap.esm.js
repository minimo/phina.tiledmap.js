/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/tiledmap/Tiledmap.js":
/*!**********************************!*\
  !*** ./src/tiledmap/Tiledmap.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TiledMap": () => (/* binding */ TiledMap)
/* harmony export */ });
/* harmony import */ var _XMLLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./XMLLoader */ "./src/tiledmap/XMLLoader.js");
/* harmony import */ var phina_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phina.js */ "./node_modules/phina.js/build/phina.esm.js");



class TiledMap extends _XMLLoader__WEBPACK_IMPORTED_MODULE_0__.XMLLoader{
    constructor() {
      super();
      this.image = null;
      this.tilesets = null;
      this.layers = null;
      this.path = "";
    }

    /**
     * マップイメージ取得
     * @param layerName {String}
     * @returns {Texture|null}
     */
    getImage(layerName) {
      if (layerName === undefined) {
        return this.image;
      } else {
        return this._generateImage(layerName);
      }
    }

    /**
     * 指定マップレイヤーを配列として取得
     * @param layerName {String}
     * @returns {null|*}
     */
    getMapData(layerName) {
      //レイヤー検索
      for(let i = 0; i < this.layers.length; i++) {
        if (this.layers[i].name === layerName) {
          //コピーを返す
          return this.layers[i].data.concat();
        }
      }
      return null;
    }

    /**
     * オブジェクトグループを取得（指定が無い場合、全レイヤーを配列にして返す）
     * @param groupName {String}
     * @returns {*[]|any}
     */
    getObjectGroup(groupName) {
      groupName = groupName || null;
      const ls = [];
      const len = this.layers.length;
      for (let i = 0; i < len; i++) {
        if (this.layers[i].type === "objectgroup") {
          if (groupName == null || groupName === this.layers[i].name) {
            //レイヤー情報をクローンする
            const obj = this._cloneObjectLayer(this.layers[i]);
            if (groupName !== null) return obj;
            ls.push(obj);
          }
        }
      }
      return ls;
    }

    /**
     * オブジェクトレイヤーをクローンして返す
     * @param srcLayer {String}
     * @returns {any}
     * @private
     */
    _cloneObjectLayer(srcLayer) {
      const result = $safe.call({}, srcLayer);
      result.objects = [];
      //レイヤー内オブジェクトのコピー
      srcLayer.objects.forEach(obj => {
        const resObj = {
          properties: $safe.call({}, obj.properties),
        }
        $extend.call(resObj, obj);
        if (obj.ellipse) resObj.ellipse = obj.ellipse;
        if (obj.gid) resObj.gid = obj.gid;
        if (obj.polygon) resObj.polygon = obj.polygon.clone();
        if (obj.polyline) resObj.polyline = obj.polyline.clone();
        result.objects.push(resObj);
      });
      return result;
    }

    /**
     * データのパースを行う
     * @param data {XMLDocument}
     * @returns {Promise<void>}
     * @private
     */
    _parse(data) {
      return new Promise(resolve => {
        //タイル属性情報取得
        const map = data.getElementsByTagName('map')[0];
        const attr = this._attrToJSON(map);
        $extend.call(this, attr);
        this.properties = this._propertiesToJSON(map);

        //タイルセット取得
        this.tilesets = this._parseTilesets(data);
        this.tilesets.sort((a, b) => a.firstgid - b.firstgid);

        //レイヤー取得
        this.layers = this._parseLayers(data);

        //イメージデータ読み込み
        this._checkImage()
          .then(() => {
            //マップイメージ生成
            this.image = this._generateImage();
            resolve(this.image);
          });
      })
    }

    /**
     * タイルセットのパース
     * @param xml {XMLDocument}
     * @returns {*[]}
     * @private
     */
    _parseTilesets(xml) {
      const each = Array.prototype.forEach;
      const data = [];
      const tilesets = xml.getElementsByTagName('tileset');
      each.call(tilesets, async tileset => {
        const t = {};
        const attr = this._attrToJSON(tileset);
        if (attr.source) {
          t.isOldFormat = false;
          t.source = this.path + attr.source;
        } else {
          //旧データ形式（未対応）
          t.isOldFormat = true;
          t.data = tileset;
        }
        t.firstgid = attr.firstgid;
        data.push(t);
      });
      return data;
    }

    /**
     * レイヤー情報のパース
     * @param xml {XMLDocument}
     * @returns {*[]}
     * @private
     */
    _parseLayers(xml) {
      const each = Array.prototype.forEach;
      const data = [];

      const map = xml.getElementsByTagName("map")[0];
      const layers = [];
      each.call(map.childNodes, elm => {
        if (elm.tagName === "layer" || elm.tagName === "objectgroup" || elm.tagName === "imagelayer") {
          layers.push(elm);
        }
      });

      layers.forEach(layer => {
        switch (layer.tagName) {
          case "layer":
            {
              //通常レイヤー
              const d = layer.getElementsByTagName('data')[0];
              const encoding = d.getAttribute("encoding");
              const l = {
                  type: "layer",
                  name: layer.getAttribute("name"),
              };

              if (encoding === "csv") {
                  l.data = this._parseCSV(d.textContent);
              } else if (encoding === "base64") {
                  l.data = this._parseBase64(d.textContent);
              }

              const attr = this._attrToJSON(layer);
              $extend.call(l, attr);
              l.properties = this._propertiesToJSON(layer);

              data.push(l);
            }
            break;

          //オブジェクトレイヤー
          case "objectgroup":
            {
              const l = {
                type: "objectgroup",
                objects: [],
                name: layer.getAttribute("name"),
                x: parseFloat(layer.getAttribute("offsetx")) || 0,
                y: parseFloat(layer.getAttribute("offsety")) || 0,
                alpha: layer.getAttribute("opacity") || 1,
                color: layer.getAttribute("color") || null,
                draworder: layer.getAttribute("draworder") || null,
              };
              each.call(layer.childNodes, elm => {
                if (elm.nodeType === 3) return;
                const d = this._attrToJSON(elm);
                d.properties = this._propertiesToJSON(elm);
                //子要素の解析
                if (elm.childNodes.length) {
                  elm.childNodes.forEach(e => {
                    if (e.nodeType === 3) return;
                    //楕円
                    if (e.nodeName === 'ellipse') {
                      d.ellipse = true;
                    }
                    //多角形
                    if (e.nodeName === 'polygon') {
                      d.polygon = [];
                      const attr = this._attrToJSON_str(e);
                      const pl = attr.points.split(" ");
                      pl.forEach(function(str) {
                        const pts = str.split(",");
                        d.polygon.push({x: parseFloat(pts[0]), y: parseFloat(pts[1])});
                      });
                    }
                    //線分
                    if (e.nodeName === 'polyline') {
                      d.polyline = [];
                      const attr = this._attrToJSON_str(e);
                      const pl = attr.points.split(" ");
                      pl.forEach(str => {
                        const pts = str.split(",");
                        d.polyline.push({x: parseFloat(pts[0]), y: parseFloat(pts[1])});
                      });
                    }
                  });
                }
                l.objects.push(d);
              });
              l.properties = this._propertiesToJSON(layer);

              data.push(l);
            }
            break;

          //イメージレイヤー
          case "imagelayer":
            {
              const l = {
                type: "imagelayer",
                name: layer.getAttribute("name"),
                x: parseFloat(layer.getAttribute("offsetx")) || 0,
                y: parseFloat(layer.getAttribute("offsety")) || 0,
                alpha: layer.getAttribute("opacity") || 1,
                visible: (layer.getAttribute("visible") === undefined || layer.getAttribute("visible") !== 0),
              };
              const imageElm = layer.getElementsByTagName("image")[0];
              l.image = {source: imageElm.getAttribute("source")};

              data.push(l);
            }
            break;
          //グループ
          case "group":
            break;
        }
      });
      return data;
    }

    /**
     * アセットに無いイメージデータを読み込み
     * @returns {Promise<void>}
     * @private
     */
    _checkImage() {
      const imageSource = [];
      const loadImage = [];

      //一覧作成
      this.tilesets.forEach(tileset => {
        const obj = {
          isTileset: true,
          image: tileset.source,
        };
        imageSource.push(obj);
      });
      this.layers.forEach(layer => {
        if (layer.image) {
          const obj = {
            isTileset: false,
            image: layer.image.source,
          };
          imageSource.push(obj);
        }
      });

      //アセットにあるか確認
      imageSource.forEach(e => {
        if (e.isTileset) {
          const tsx = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('tsx', e.image);
          if (!tsx) {
            //アセットになかったのでロードリストに追加
            loadImage.push(e);
          }
        } else {
          const image = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('image', e.image);
          if (!image) {
            //アセットになかったのでロードリストに追加
            loadImage.push(e);
          }
        }
      });

      //一括ロード
      //ロードリスト作成
      if (loadImage.length) {
        const assets = { image: [], tsx: [] };
        loadImage.forEach(e => {
          if (e.isTileset) {
            assets.tsx[e.image] = e.image;
          } else {
            //アセットのパスをマップと同じにする
            assets.image[e.image] = this.path + e.image;
          }
        });
        return new Promise(resolve => {
          const loader = new phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetLoader();
          loader.load(assets);
          loader.on('load', () => {
            this.tilesets.forEach(e => {
              e.tsx = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('tsx', e.source);
            });
            resolve();
          });
        });
      } else {
        return Promise.resolve();
      }
    }

    /**
     * マップイメージ作成
     * @param layerName {String}
     * @returns {Texture|null}
     * @private
     */
    _generateImage(layerName) {
      let numLayer = 0;
      for (let i = 0; i < this.layers.length; i++) {
        if (this.layers[i].type === "layer" || this.layers[i].type === "imagelayer") numLayer++;
      }
      if (numLayer === 0) return null;

      const width = this.width * this.tilewidth;
      const height = this.height * this.tileheight;
      const canvas = new phina_js__WEBPACK_IMPORTED_MODULE_1__.Canvas().setSize(width, height);

      for (let i = 0; i < this.layers.length; i++) {
        //マップレイヤー
        if (this.layers[i].type === "layer" && this.layers[i].visible !== "0") {
          if (layerName === undefined || layerName === this.layers[i].name) {
            const layer = this.layers[i];
            const mapdata = layer.data;
            const width = layer.width;
            const height = layer.height;
            const opacity = layer.opacity || 1.0;
            let count = 0;
            for (let y = 0; y < height; y++) {
              for (let x = 0; x < width; x++) {
                const index = mapdata[count];
                if (index !== 0) {
                  //マップチップを配置
                  this._setMapChip(canvas, index, x * this.tilewidth, y * this.tileheight, opacity);
                }
                count++;
              }
            }
          }
        }
        //オブジェクトグループ
        if (this.layers[i].type === "objectgroup" && this.layers[i].visible !== "0") {
          if (layerName === undefined || layerName === this.layers[i].name) {
            const layer = this.layers[i];
            const opacity = layer.opacity || 1.0;
            layer.objects.forEach(function(e) {
              if (e.gid) {
                this._setMapChip(canvas, e.gid, e.x, e.y, opacity);
              }
            }.bind(this));
          }
        }
        //イメージレイヤー
        if (this.layers[i].type === "imagelayer" && this.layers[i].visible !== "0") {
          if (layerName === undefined || layerName === this.layers[i].name) {
            const image = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('image', this.layers[i].image.source);
            canvas.context.drawImage(image.domElement, this.layers[i].x, this.layers[i].y);
          }
        }
      }

      const texture = new phina_js__WEBPACK_IMPORTED_MODULE_1__.Texture();
      texture.domElement = canvas.domElement;
      return texture;
    }

    /**
     * キャンバスの指定した座標にマップチップのイメージをコピーする
     * @param canvas {HTMLCanvasElement}
     * @param index {Number}
     * @param x {Number}
     * @param y {Number}
     * @private
     */
    _setMapChip(canvas, index, x, y) {
      //対象タイルセットの判別
      let tileset;
      for (let i = 0; i < this.tilesets.length; i++) {
        const tsx1 = this.tilesets[i];
        const tsx2 = this.tilesets[i + 1];
        if (!tsx2) {
          tileset = tsx1;
          i = this.tilesets.length;
        } else if (tsx1.firstgid <= index && index < tsx2.firstgid) {
          tileset = tsx1;
          i = this.tilesets.length;
        }
      }
      //タイルセットからマップチップを取得
      const tsx = tileset.tsx;
      const chip = tsx.chips[index - tileset.firstgid];
      const image = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('image', chip.image);
      canvas.context.drawImage(
        image.domElement,
        chip.x + tsx.margin, chip.y + tsx.margin,
        tsx.tilewidth, tsx.tileheight,
        x, y,
        tsx.tilewidth, tsx.tileheight);
    }
}

/**
 * tmxファイル読み込み
 * @param key {String}
 * @param path {String}
 * @returns {Flow}
 */
phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetLoader.assetLoadFunctions.tmx = (key, path) => {
    const tmx = new TiledMap();
    return tmx.load(path);
}


/***/ }),

/***/ "./src/tiledmap/Tileset.js":
/*!*********************************!*\
  !*** ./src/tiledmap/Tileset.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TileSet": () => (/* binding */ TileSet)
/* harmony export */ });
/* harmony import */ var _XMLLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./XMLLoader */ "./src/tiledmap/XMLLoader.js");
/* harmony import */ var phina_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phina.js */ "./node_modules/phina.js/build/phina.esm.js");



class TileSet extends _XMLLoader__WEBPACK_IMPORTED_MODULE_0__.XMLLoader{
    constructor(xml) {
        super();
        this.image = null;
        this.tilewidth = 0;
        this.tileheight = 0;
        this.tilecount = 0;
        this.columns = 0;
        this.path = "";
        if (xml) {
            this.loadFromXML(xml);
        }
    }

    /**
     * XMLファイル読み込み
     * @param xml {XMLDocument}
     * @returns {Promise<void>}
     */
    loadFromXML(xml) {
      return this._parse(xml);
    }

    /**
     *
     * @param data {XMLDocument}
     * @returns {Promise<unknown>}
     * @private
     */
    _parse(data) {
      return new Promise(resolve => {
        //タイルセット取得
        const tileset = data.getElementsByTagName('tileset')[0];
        // const props = this._propertiesToJSON(tileset);

        //タイルセット属性情報取得
        const attr = this._attrToJSON(tileset);
        $safe.call(attr,{
          tilewidth: 32,
          tileheight: 32,
          spacing: 0,
          margin: 0,
        });
        $extend.call(this, attr);
        this.chips = [];

        //ソース画像設定取得
        this.imageName = tileset.getElementsByTagName('image')[0].getAttribute('source');
  
        //透過色設定取得
        const trans = tileset.getElementsByTagName('image')[0].getAttribute('trans');
        if (trans) {
          this.transR = parseInt(trans.substring(0, 2), 16);
          this.transG = parseInt(trans.substring(2, 4), 16);
          this.transB = parseInt(trans.substring(4, 6), 16);
        }
  
        //マップチップリスト作成
        for (let r = 0; r < this.tilecount; r++) {
          this.chips[r] = {
              image: this.imageName,
              x: (r  % this.columns) * (this.tilewidth + this.spacing) + this.margin,
              y: Math.floor(r / this.columns) * (this.tileheight + this.spacing) + this.margin,
          };
        }

        //イメージデータ読み込み
        this._loadImage()
          .then(() => resolve());
      });
    }

    /**
     * アセットに無いイメージデータを読み込み
     * @returns {Promise<unknown>}
     * @private
     */
    _loadImage() {
      return new Promise(resolve => {
        const imageSource = {
          imageName: this.imageName,
          imageUrl: this.path + this.imageName,
          transR: this.transR,
          transG: this.transG,
          transB: this.transB,
        };
        
        let loadImage = null;
        const image = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('image', imageSource.image);
        if (image) {
          this.image = image;
        } else {
          loadImage = imageSource;
        }

        //ロードリスト作成
        const assets = { image: [] };
        assets.image[imageSource.imageName] = imageSource.imageUrl;

        if (loadImage) {
          const loader = new phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetLoader();
          loader.load(assets);
          loader.on('load', () => {
            //透過色設定反映
            this.image = phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetManager.get('image', imageSource.imageUrl);
            if (imageSource.transR !== undefined) {
              const r = imageSource.transR;
              const g = imageSource.transG;
              const b = imageSource.transB;
              this.image.filter((pixel, index, x, y, bitmap) => {
                const data = bitmap.data;
                if (pixel[0] === r && pixel[1] === g && pixel[2] === b) {
                    data[index+3] = 0;
                }
              });
            }
            resolve();
          });
        } else {
          resolve();
        }
      });
    }
}

/**
 * tsxファイル読み込み
 * @param key
 * @param path
 * @returns {Flow}
 */
phina_js__WEBPACK_IMPORTED_MODULE_1__.AssetLoader.assetLoadFunctions.tsx = function(key, path) {
    const tsx = new TileSet();
    return tsx.load(path);
};



/***/ }),

/***/ "./src/tiledmap/XMLLoader.js":
/*!***********************************!*\
  !*** ./src/tiledmap/XMLLoader.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XMLLoader": () => (/* binding */ XMLLoader)
/* harmony export */ });
/* harmony import */ var phina_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js */ "./node_modules/phina.js/build/phina.esm.js");


class XMLLoader extends phina_js__WEBPACK_IMPORTED_MODULE_0__.Asset{
    constructor() {
        super();
        this.path = "";
    }

    loadDummy() { }

    /**
     * XMLファイルのロード
     * @param resolve {function}
     * @protected
     */
    _load(resolve) {
        //パス抜き出し
        this.path = "";
        const last = this.src.lastIndexOf("/");
        if (last > 0) {
            this.path = this.src.substring(0, last + 1);
        }

        //終了関数保存
        this._resolve = resolve;

        // load
        const xml = new XMLHttpRequest();
        xml.open('GET', this.src);
        xml.onreadystatechange = () => {
            if (xml.readyState === 4) {
                if ([200, 201, 0].indexOf(xml.status) !== -1) {
                    const data = (new DOMParser()).parseFromString(xml.responseText, "text/xml");
                    this.dataType = "xml";
                    this.data = data;
                    this._parse(data)
                        .then(() => this._resolve(this));
                }
            }
        };
        xml.send(null);
    }

    /**
     * XMLプロパティをJSONに変換
     * @param elm {XMLDocument}
     * @returns {{}}
     * @protected
     */
    _propertiesToJSON(elm) {
        const properties = elm.getElementsByTagName("properties")[0];
        const obj = {};
        if (properties === undefined) return obj;

        for (let k = 0; k < properties.childNodes.length; k++) {
            const p = properties.childNodes[k];
            if (p.tagName === "property") {
                let value = p.getAttribute('value');
                if (!value) value = p.textContent;
                //propertyにtype指定があったら変換
                const type = p.getAttribute('type');
                if (type === "int") {
                    obj[p.getAttribute('name')] = parseInt(value, 10);
                } else if (type === "float") {
                    obj[p.getAttribute('name')] = parseFloat(value);
                } else if (type === "bool" ) {
                    obj[p.getAttribute('name')] = value === "true";
                } else {
                    obj[p.getAttribute('name')] = value;
                }
            }
        }
        return obj;
    }

    /**
     * XML属性をJSONに変換
     * @param source
     * @returns {{}}
     * @protected
     */
    _attrToJSON(source) {
        const obj = {};
        for (let i = 0; i < source.attributes.length; i++) {
            let val = source.attributes[i].value;
            val = isNaN(parseFloat(val))? val: parseFloat(val);
            obj[source.attributes[i].name] = val;
        }
        return obj;
    }

    /**
     * XML属性をJSONに変換（Stringで返す）
     * @param source
     * @returns {{}}
     * @protected
     */
    _attrToJSON_str(source) {
        const obj = {};
        for (let i = 0; i < source.attributes.length; i++) {
            obj[source.attributes[i].name] = source.attributes[i].value;
        }
        return obj;
    }

    /**
     * CSVパース
     * @param data {string}
     * @returns {*[]}
     * @protected
     */
    _parseCSV(data) {
        const layer = [];
        const dataList = data.split(',');
        dataList.forEach(elm => {
            const num = parseInt(elm, 10);
            layer.push(num);
        });
        return layer;
    }

    /**
     * BASE64パース
     * http://thekannon-server.appspot.com/herpity-derpity.appspot.com/pastebin.com/75Kks0WH
     * @param data {string}
     * @returns {*[]}
     * @protected
     */
    _parseBase64(data) {
        const rst = [];
        const dataList = atob(data.trim()).split('').map(e => e.charCodeAt(0));
        for (let i = 0, len = dataList.length / 4; i < len; ++i) {
            const n = dataList[i * 4].toString();
            rst[i] = parseInt(n, 10);
        }
        return rst;
    }
}

/***/ }),

/***/ "./node_modules/phina.js/build/phina.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/phina.js/build/phina.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Accelerometer": () => (/* binding */ Accelerometer),
/* harmony export */   "Accessory": () => (/* binding */ Accessory),
/* harmony export */   "Ajax": () => (/* binding */ Ajax),
/* harmony export */   "ArrayEx": () => (/* binding */ arrayExtensions),
/* harmony export */   "ArrayExStatic": () => (/* binding */ arrayStaticExtensions),
/* harmony export */   "Asset": () => (/* binding */ Asset),
/* harmony export */   "AssetLoader": () => (/* binding */ AssetLoader),
/* harmony export */   "AssetManager": () => (/* binding */ AssetManager),
/* harmony export */   "BaseApp": () => (/* binding */ BaseApp),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "Canvas": () => (/* binding */ Canvas),
/* harmony export */   "CanvasApp": () => (/* binding */ CanvasApp),
/* harmony export */   "CanvasLayer": () => (/* binding */ CanvasLayer),
/* harmony export */   "CanvasRenderer": () => (/* binding */ CanvasRenderer),
/* harmony export */   "ChangeDispatcher": () => (/* binding */ ChangeDispatcher),
/* harmony export */   "Circle": () => (/* binding */ Circle),
/* harmony export */   "CircleGauge": () => (/* binding */ CircleGauge),
/* harmony export */   "CircleShape": () => (/* binding */ CircleShape),
/* harmony export */   "Collision": () => (/* binding */ Collision),
/* harmony export */   "Color": () => (/* binding */ Color),
/* harmony export */   "CountScene": () => (/* binding */ CountScene),
/* harmony export */   "DisplayElement": () => (/* binding */ DisplayElement),
/* harmony export */   "DisplayScene": () => (/* binding */ DisplayScene),
/* harmony export */   "DomApp": () => (/* binding */ DomApp),
/* harmony export */   "Draggable": () => (/* binding */ Draggable),
/* harmony export */   "Element": () => (/* binding */ Element),
/* harmony export */   "EventDispatcher": () => (/* binding */ EventDispatcher),
/* harmony export */   "File": () => (/* binding */ File),
/* harmony export */   "Flickable": () => (/* binding */ Flickable),
/* harmony export */   "Flow": () => (/* binding */ Flow),
/* harmony export */   "Font": () => (/* binding */ Font),
/* harmony export */   "FrameAnimation": () => (/* binding */ FrameAnimation),
/* harmony export */   "GameApp": () => (/* binding */ GameApp),
/* harmony export */   "Gamepad": () => (/* binding */ PhinaGamepad),
/* harmony export */   "GamepadManager": () => (/* binding */ GamepadManager),
/* harmony export */   "Gauge": () => (/* binding */ Gauge),
/* harmony export */   "Grid": () => (/* binding */ Grid),
/* harmony export */   "HeartShape": () => (/* binding */ HeartShape),
/* harmony export */   "Input": () => (/* binding */ Input),
/* harmony export */   "Interactive": () => (/* binding */ Interactive),
/* harmony export */   "Keyboard": () => (/* binding */ Keyboard),
/* harmony export */   "Label": () => (/* binding */ Label),
/* harmony export */   "LabelArea": () => (/* binding */ LabelArea),
/* harmony export */   "Layer": () => (/* binding */ Layer),
/* harmony export */   "LoadingScene": () => (/* binding */ LoadingScene),
/* harmony export */   "ManagerScene": () => (/* binding */ ManagerScene),
/* harmony export */   "MathEx": () => (/* binding */ mathExtensions),
/* harmony export */   "Matrix33": () => (/* binding */ Matrix33),
/* harmony export */   "Mouse": () => (/* binding */ Mouse),
/* harmony export */   "NumberEx": () => (/* binding */ numberExtensions),
/* harmony export */   "Object2D": () => (/* binding */ Object2D),
/* harmony export */   "ObjectEx": () => (/* binding */ objectExtensions),
/* harmony export */   "PathShape": () => (/* binding */ PathShape),
/* harmony export */   "PauseScene": () => (/* binding */ PauseScene),
/* harmony export */   "Physical": () => (/* binding */ Physical),
/* harmony export */   "PlainElement": () => (/* binding */ PlainElement),
/* harmony export */   "PolygonShape": () => (/* binding */ PolygonShape),
/* harmony export */   "QueryString": () => (/* binding */ QueryString),
/* harmony export */   "Random": () => (/* binding */ Random),
/* harmony export */   "Rect": () => (/* binding */ Rect),
/* harmony export */   "RectangleShape": () => (/* binding */ RectangleShape),
/* harmony export */   "ResultScene": () => (/* binding */ ResultScene),
/* harmony export */   "Scene": () => (/* binding */ Scene),
/* harmony export */   "Script": () => (/* binding */ Script),
/* harmony export */   "Shape": () => (/* binding */ Shape),
/* harmony export */   "Sound": () => (/* binding */ Sound),
/* harmony export */   "SoundManager": () => (/* binding */ SoundManager),
/* harmony export */   "SplashScene": () => (/* binding */ SplashScene),
/* harmony export */   "Sprite": () => (/* binding */ Sprite),
/* harmony export */   "SpriteSheet": () => (/* binding */ SpriteSheet),
/* harmony export */   "StarShape": () => (/* binding */ StarShape),
/* harmony export */   "StringEx": () => (/* binding */ stringExtensions),
/* harmony export */   "Support": () => (/* binding */ Support),
/* harmony export */   "Texture": () => (/* binding */ Texture),
/* harmony export */   "ThreeLayer": () => (/* binding */ ThreeLayer),
/* harmony export */   "Ticker": () => (/* binding */ Ticker),
/* harmony export */   "TitleScene": () => (/* binding */ TitleScene),
/* harmony export */   "Touch": () => (/* binding */ Touch$1),
/* harmony export */   "TouchList": () => (/* binding */ TouchList),
/* harmony export */   "TriangleShape": () => (/* binding */ TriangleShape),
/* harmony export */   "Tween": () => (/* binding */ Tween),
/* harmony export */   "Tweener": () => (/* binding */ Tweener),
/* harmony export */   "Twitter": () => (/* binding */ Twitter),
/* harmony export */   "Updater": () => (/* binding */ Updater),
/* harmony export */   "Vector2": () => (/* binding */ Vector2),
/* harmony export */   "Vector3": () => (/* binding */ Vector3),
/* harmony export */   "Wave": () => (/* binding */ Wave),
/* harmony export */   "dateEx": () => (/* binding */ dateExtensions),
/* harmony export */   "dateExStatic": () => (/* binding */ dateStaticExtensions),
/* harmony export */   "extendBuiltInObject": () => (/* binding */ extendBuiltInObject),
/* harmony export */   "extendEventObject": () => (/* binding */ extendEventObject),
/* harmony export */   "phina": () => (/* binding */ phina)
/* harmony export */ });
/*!
 * phina.js v0.2.3
 * Released under the MIT license
 *
 * Copyright (C) phi
 */
/**
 * @class global.String
 * # 拡張した String クラス
 */

/**
 * @method format
 * フォーマットに引数を適用した文字列を返します。
 *
 * 引数がオブジェクトの場合、"{プロパティ名}" がオブジェクトのプロパティの値に置き換わります。
 * 指定したプロパティがオブジェクトにない場合は空文字列になります。
 *
 * 第1引数がオブジェクトでなかった場合、"{整数}" が各引数に置き換わります。
 * 指定した値の引数がなかった場合は空文字列になります。
 *
 * ### Example
 *     obj = {r: 128, g: 0, b: 255};
 *     "color: rgb({r}, {g}, {b});".format(obj); // => "color: rgb(128, 0, 255);"
 *
 *     "{0} + {1} = {2}".format(5, 8, (5+8)); // => "5 + 8 = 13"
 *
 * @this String
 * @param {Object} arg パラメータとなるオブジェクト
 * @return {String} 生成した文字列
 */
function format(arg) {
// String.prototype.$method("format", function(arg) {
  // 置換ファンク
  var rep_fn = undefined;
  
  // オブジェクトの場合
  if (typeof arg == "object") {
    /** @ignore */
    rep_fn = function(m, k) {
      if (arg[k] === undefined) {
        return '';
      }
      else {
        return arg[k];
      }
    };
  }
  // 複数引数だった場合
  else {
    var args = arguments;
    /** @ignore */
    rep_fn = function(m, k) {
      var v = args[ parseInt(k) ];
      if (v !== undefined && v !== null) {
        return v;
      }
      else {
        return '';
      }
    };
  }
  
  return this.replace( /\{(\w+)\}/g, rep_fn );
}


/**
 * @method each
 * 各文字を順番に渡しながら関数を繰り返し実行します。
 *
 * ### Example
 *     str = 'abc';
 *     str.each(function(ch) {
 *       console.log(ch);
 *     });
 *     // => 'a'
 *     //    'b'
 *     //    'c'
 *
 * @this String
 * @param {Function} _callback 各要素に対して実行するコールバック関数
 * @param {Object} [_self=this] callback 内で this として参照される値
 */
function each(_callback, _self) {
// String.prototype.$method("each", function() {
  Array.prototype.forEach.apply(this, arguments);
  return this;
}

// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @method trim
 * 文字列先頭と末尾の空白文字を全て取り除いた文字列を返します。
 *
 * ###Reference
 * - [String Functions for Javascript – trim, to camel case, to dashed, and to underscore](http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/)
 *
 * ### Example
 *     "  Hello, world!  ".trim(); // => "Hello, world!"
 * 
 * @this String
 * @return {String} トリムした結果の文字列
 */
function trim() {
// String.prototype.$method("trim", function() {
  return this.replace(/^\s+|\s+$/g, "");
}

/**
 * @method capitalize
 * キャピタライズした文字列、すなわち、すべての単語の先頭を大文字にした文字列を返します。
 *
 * 単語の先頭以外は小文字化されます。
 *
 * ###Reference
 * - [キャピタライズ(単語の先頭の大文字化)を行う - oct inaodu](http://d.hatena.ne.jp/brazil/20051212/1134369083)  
 * - [デザインとプログラムの狭間で: javascriptでキャピタライズ（一文字目を大文字にする）](http://design-program.blogspot.com/2011/02/javascript.html)
 *
 * ### Example
 *     "i aM a pen.".capitalize(); // => "I Am A Pen."
 *
 * @this String
 * @return {String} キャピタライズした文字列
 */
function capitalize() {
// String.prototype.$method("capitalize", function() {
  return this.replace(/\w+/g, function(word){
    return capitalizeFirstLetter.call(word);
    // return word.capitalizeFirstLetter();
  });
}

/**
 * @method capitalizeFirstLetter
 * 先頭の文字を大文字にして、それ以外を小文字にした文字列を返します。
 *
 * ### Example
 *     "i aM a pen.".capitalizeFirstLetter(); // "I am a pen."
 *
 * @this String
 * @return {String} 先頭の文字を大文字にして、それ以外を小文字にした文字列
 */
function capitalizeFirstLetter() {
// String.prototype.$method("capitalizeFirstLetter", function() {
  return this.charAt(0).toUpperCase() + this.substr(1).toLowerCase();
}

/**
 * @method toDash
 * 文字列内の大文字を「"-" + 小文字」に変換します。
 *
 * css2properties（element.style）の各プロパティ名を CSS のプロパティ名に変換する場合に便利です。
 *
 * ### Example
 *     "borderTopColor".toDash(); // => "border-top-color"
 *
 * @this String
 * @return {String} 変換後の文字列
 */
function toDash() {
// String.prototype.$method("toDash", function() {
  return this.replace(/([A-Z])/g, function(m){ return '-'+m.toLowerCase(); });
}


/**
 * @method toHash
 * ハッシュ値を生成して返します。
 *
 * ### Example
 *     "phina.js".toHash(); // => 2676327394
 *
 * @this String
 * @return {Number} CRC32ハッシュ値
 */
function toHash() {
// String.prototype.$method("toHash", function() {
  return toCRC32.call(this);
  // return this.toCRC32();
}


/**
 * @method padding
 * 左に文字を埋めて指定した桁にします。this の文字列は右寄せされます。
 *
 * ### Example
 *     "1234".padding(10);      // => "      1234"
 *     "1234".padding(10, '0'); // => "0000001234"
 *
 * @this String
 * @param {Number} n 桁数
 * @param {String} [ch=" "] 埋める文字
 * @return {String} 指定した桁の文字列
 */
function padding(n, ch) {
// String.prototype.$method("padding", function(n, ch) {
  var str = this.toString();
  n  = n-str.length;
  ch = (ch || ' ')[0];
  
  while(n-- > 0) { str = ch + str; }
  
  return str;
}
/**
 * @method paddingLeft
 * 左に文字を埋めて指定した桁にします。this の文字列を右寄せされます。
 *
 * @this String
 * {@link #padding} と同じです。
 * @inheritdoc #padding
 */
function paddingLeft(n, ch) {
// String.prototype.$method("paddingLeft", function(n, ch) {
  var str = this.toString();
  n  = n-str.length;
  ch = (ch || ' ')[0];
  
  while(n-- > 0) { str = ch + str; }
  
  return str;
}

/**
 * @method paddingRight
 * 右に文字を埋めて指定した桁にします。this の文字列は左寄せされます。
 *
 * ### Example
 *     "1234".paddingRight(10);      // => "1234      "
 *     "1234".paddingRight(10, '0'); // => "1234000000"
 *
 * @this String
 * @param {Number} n 桁数
 * @param {String} [ch=" "] 埋める文字
 * @return {String} 指定した桁の文字列
 */
function paddingRight(n, ch) {
// String.prototype.$method("paddingRight", function(n, ch) {
  var str = this.toString();
  n  = n-str.length;
  ch = (ch || ' ')[0];
  
  while(n-- > 0) { str = str + ch; }
  
  return str;
}
  
/**
 * @method quotemeta
 * 正規表現のメタ文字をクォートします。
 *
 * ### Example
 *     "Hello world. (can you hear me?)".quotemeta(); // => "Hello\\ world\\.\\ \\(can\\ you\\ hear\\ me\\?\\)"
 *
 * @this String
 * @return {String} クォートされた文字列
 */
function quotemeta(n) {
// String.prototype.$method("quotemeta", function(n) {
  return this.replace(/([^0-9A-Za-z_])/g, '\\$1');
}
  
/**
 * @method repeat
 * 自分自身を指定した回数だけ繰り返した文字列を返します。
 *
 * ### Example
 *     "Abc".repeat(4); // => "AbcAbcAbcAbc"
 *
 * @this String
 * @param {Number} n 繰り返し回数
 * @return {String} 文字列
 */
function repeat(n) {
// String.prototype.$method("repeat", function(n) {
  // TODO: 確認する
  var arr = Array(n);
  for (var i=0; i<n; ++i) arr[i] = this;
  return arr.join('');
}

/**
 * @method count
 * 指定した文字列が何個入っているかをカウントして返します。
 *
 * 大文字・小文字は区別されます。
 *
 * ### Example
 *     "This is a string. Isn't it?".count("is"); // => 2
 *
 * @this String
 * @param {String} str 調べる文字列
 * @return {Number} this に str が入っている個数
 */
function count(str) {
// String.prototype.$method("count", function(str) {
  var re = new RegExp(str, 'gm');
  return this.match(re).length;
}

/**
 * @method include
 * 指定した文字列が含まれているかどうかを返します。
 *
 * 大文字・小文字は区別されます。
 *
 * ### Example
 *     "This is a string.".include("is"); // => true
 *     "This is a string.".include("was"); // => false
 *
 * @this String
 * @param {String} str 調べる文字列
 * @return {Boolean} 含まれているかどうか
 */
function include(str) {
// String.prototype.$method("include", function(str) {
  return this.indexOf(str) != -1;
}

/**
 * @method toArray
 * 1文字ずつ分解した配列を返します。
 *
 * ### Example
 *     "12345".toArray(); // => ["1", "2", "3", "4", "5"]
 *     "あいうえお".toArray(); // => "あ", "い", "う", "え", "お"]
 *
 * @this String
 * @return {String[]} 配列
 */
function toArray() {
// String.prototype.$method("toArray", function() {
  var arr = [];
  for (var i=0,len=this.length; i<len; ++i) {
    arr.push(this[i]);
  }
  return arr;
}

/**
 * @method toObject
 * キーと値の組み合わせが連結された文字列からオブジェクトを生成します。
 *
 * 値は Number、Boolean、String のいずれかの型として評価されます。
 *
 * ### Example
 *     obj1 = "num=128.5&flag1=true&flag2=false&str=hoge";
 *     obj1.toObject(); // => {num: 128.5, flag1: true, flag2: false, str: "hoge" }
 *     
 *     obj2 = "num:-64.5|flag1:false|flag2:true|str:foo";
 *     obj2.toObject('|', ':'); // => {num: -64.5, flag1: false, flag2: true, str: "foo" }
 *
 * @this String
 * @param {String} [sep="&"] セパレータ文字
 * @param {String} [eq=""] キーと値の組み合わせを表す文字
 * @return {Object} オブジェクト
 */
function toObject(sep, eq) {
// String.prototype.$method("toObject", function(sep, eq) {
  sep = sep || '&';
  eq  = eq || '=';

  var obj = {};
  var params = this.split(sep);
  params.forEach(function(str, i) {
  // params.each(function(str, i) {
    var pos = str.indexOf(eq);
    if (pos > 0) {
      var key = str.substring(0, pos);
      /** @type string|number|boolean */
      var val = str.substring(pos+1);
      var num = Number(val);

      if (!isNaN(num)) {
        val = num;
      }
      else if (val === 'true') {
        val = true;
      }
      else if (val === 'false') {
        val = false;
      }

      obj[key] = val;
    }
  });

  return obj;
}


var table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D".split(' ');

/**
 * @method toCRC32
 * 文字列の CRC32 を計算します。
 *
 * ### Example
 *     "phina.js".toCRC32(); // => 2676327394
 *
 * @this String
 * @return {Number} CRC32 ハッシュ値
 */
function toCRC32() {
// String.prototype.$method("toCRC32", function() {
  var crc = 0, x=0, y=0;
  
  crc = crc ^ (-1);
  for (var i=0, iTop=this.length; i<iTop; ++i) {
    y = (crc ^ this.charCodeAt(i)) & 0xff;
    x = Number("0x" + table[y]);
    crc = (crc >>> 8) ^ x;
  }
  
  return (crc ^ (-1)) >>> 0;
}

var stringExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  format: format,
  each: each,
  trim: trim,
  capitalize: capitalize,
  capitalizeFirstLetter: capitalizeFirstLetter,
  toDash: toDash,
  toHash: toHash,
  padding: padding,
  paddingLeft: paddingLeft,
  paddingRight: paddingRight,
  quotemeta: quotemeta,
  repeat: repeat,
  count: count,
  include: include,
  toArray: toArray,
  toObject: toObject,
  toCRC32: toCRC32
});

/**
 * @class global.Object
 * Objectの拡張
 */

/**
 * 関数を追加
 * 
 * @param   {String} name name
 * @param   {Function} fn
 */
function $method(name, fn) {
  Object.defineProperty(this, name, {
    value: fn,
    enumerable: false,
    writable: true
  });
}

/**
 * @method setter
 * セッターを定義する
 * 
 * @param {string | number | symbol} name
 * @param {any} fn
 */
// Object.prototype.$method("setter", function(name, fn){
function setter(name, fn) {
  Object.defineProperty(this, name, {
    set: fn,
    enumerable: false,
    configurable: true,
  });
}

/**
 * @method getter
 * ゲッターを定義する
 * 
 * @this {Object}
 * @param {string | number | symbol} name
 * @param {any} fn
 */
// Object.prototype.$method("getter", function(name, fn){
function getter(name, fn) {
  Object.defineProperty(this, name, {
    get: fn,
    enumerable: false,
    configurable: true,
  });
}

/**
 * @method accessor
 * アクセッサ(セッター/ゲッター)を定義する
 * 
 * @this Object
 * @param {string | number | symbol} name
 * @param {import('../phina').AccessorExtendObject} param
 */
// Object.prototype.$method("accessor", function(name, param) {
function accessor(name, param) {
  Object.defineProperty(this, name, {
    set: param["set"],
    get: param["get"],
    enumerable: false,
    configurable: true,
  });
}

/**
 * @method forIn
 * オブジェクト用ループ処理
 * 
 * @param {Function} fn
 * @param {any} self
 */
function forIn(fn, self) {
  self = self || this;

  Object.keys(this).forEach(function(key, index) {
    var value = this[key];

    fn.call(self, key, value, index);
  }, this);

  return this;
}

/**
 * @method  $extend
 * 他のライブラリと競合しちゃうので extend -> $extend としました
 */
function $extend() {
// Object.prototype.$method("$extend", function() {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method  $safe
 * 安全拡張
 * 上書きしない
 */
function $safe(source) {
// Object.prototype.$method("$safe", function(source) {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      if (this[property] === undefined) this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method $watch
 * 
 * @param  {string} key       [description]
 * @param  {function} callback  [description]
 * @return {void}           [description]
 */
function $watch(key, callback) {
// Object.prototype.$method('$watch', function(key, callback) {
  var target = this;
  var descriptor = null;

  while(target) {
    descriptor = Object.getOwnPropertyDescriptor(target, key);
    if (descriptor) {
      break;
    }
    target = Object.getPrototypeOf(target);
  }

  // すでにアクセッサーとして存在する場合
  if (descriptor) {
    // データディスクリプタの場合
    if (descriptor.value !== undefined) {
      var tempKey = '__' + key;
      var tempValue = this[key];

      this[tempKey] = tempValue;

      accessor.call(this, key, {
      // this.accessor(key, {
        get: function() {
          return this[tempKey];
        },
        set: function(v) {
          var old = this[tempKey];
          this[tempKey] = v;
          callback.call(this, v, old);
        },
      });
    }
    // アクセサディスクリプタの場合
    else {
      accessor.call(this, key, {
      // this.accessor(key, {
        get: function() {
          return descriptor.get.call(this);
        },
        set: function(v) {
          var old = descriptor.get.call(this);
          descriptor.set.call(this, v);
          callback.call(this, v, old);
        },
      });
    }
  }
  else {
    var accesskey = '__' + key;

    accessor.call(this, key, {
    // this.accessor(key, {
      get: function() {
        return this[accesskey];
      },
      set: function(v) {
        var old = this[accesskey];
        this[accesskey] = v;
        callback.call(this, v, old);
      },
    });
  }
}

// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @method property
 * 変数を追加
 * 
 * @param   {String} name name
 * @param   {Object} val
 */
function property(name, val) {
  Object.defineProperty(this, name, {
    value: val,
    enumerable: true,
    writable: true
  });
}

/**
 * @method $get
 * パス指定で値を取得
 * 
 * @param {string} key
 */
function $get(key) {
// Object.prototype.$method('$get', function(key) {
  return key.split('.').reduce(function(t, v) {
    return t && t[v];
  }, this);
}

/**
 * @method $set
 * パス指定で値を設定
 * 
 * @param {string} key
 * @param {any} value
 */
function $set(key, value) {
// Object.prototype.$method('$set', function(key, value) {
  key.split('.').reduce(function(t, v, i, arr) {
    if (i === (arr.length-1)) {
      t[v] = value;
    }
    else {
      if (!t[v]) t[v] = {};
      return t[v];
    }
  }, this);
}

/**
 * @method $has
 * そのプロパティを持っているかを判定する
 * 
 * @param {any} key
 */
function $has(key) {
// Object.prototype.$method("$has", function(key) {
  return this.hasOwnProperty(key);
}

/**
 * @method  $strict
 * 厳格拡張
 * すでにあった場合は警告
 */
function $strict(source) {
// Object.prototype.$method("$strict", function(source) {
  Array.prototype.forEach.call(arguments, function(source) {
    for (var property in source) {
      console.assert(!this[property], format.call("tm error: {0} is Already", property));
      // console.assert(!this[property], "tm error: {0} is Already".format(property));
      this[property] = source[property];
    }
  }, this);
  return this;
}

/**
 * @method  $pick
 * ピック
 */
function $pick() {
// Object.prototype.$method("$pick", function() {
  var temp = {};

  Array.prototype.forEach.call(arguments, function(key) {
    if (key in this) temp[key] = this[key];
  }, this);

  return temp;
}

/**
 * @method  $omit
 * オミット
 */
function $omit() {
// Object.prototype.$method("$omit", function() {
  var temp = {};

  for (var key in this) {
    if (Array.prototype.indexOf.call(arguments, key) == -1) {
      temp[key] = this[key];
    }
  }

  return temp;
}

/**
 * @method  $toArray
 * 配列化
 */
function $toArray() {
// Object.prototype.$method("$toArray", function() {
  return Array.prototype.slice.call(this);
}

/**
 * [observe description]
 * @param  {any}   obj      [description]
 * @param  {Function} callback [description]
 * @return {void}            [description]
 */
function observe(obj, callback) {
// Object.$method('observe', function(obj, callback) {
  if (Object['observe']) return Object['observe'].call(obj, callback); // add
  var keys = Object.keys(obj);
  keys.forEach(function(key) {
    var tempKey = '__' + key;
    var tempValue = obj[key];
    obj[tempKey] = tempValue;
    
    accessor.call(obj, key, {
    // obj.accessor(key, {
      get: function() {
        return this[tempKey];
      },
      set: function(v) {
        this[tempKey] = v;
        callback();
      },
    });
  });
}

/**
 * [unobserve description]
 * @param  {any}   obj      [description]
 * @param  {Function} callback [description]
 * @return {void}            [description]
 */
function unobserve(obj, callback) {
// Object.$method('unobserve', function(obj, callback) {
  if (Object['unobserve']) return Object['unobserve'].call(obj, callback); // add
  console.assert(false);
}

var objectExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $method: $method,
  setter: setter,
  getter: getter,
  accessor: accessor,
  forIn: forIn,
  $extend: $extend,
  $safe: $safe,
  $watch: $watch,
  property: property,
  $get: $get,
  $set: $set,
  $has: $has,
  $strict: $strict,
  $pick: $pick,
  $omit: $omit,
  $toArray: $toArray,
  observe: observe,
  unobserve: unobserve
});

/**
 * @class global.Math
 * # 拡張した Math クラス
 * 数学的な処理を扱う Math クラスを拡張しています。
 * 
 * 全てstaticメンバーです。
 */

/**
 * @static
 * @method clamp
 * 指定した値を指定した範囲に収めた結果を返します。
 *
 * ### Example
 *     Math.clamp(120, 0, 640); // => 120
 *     Math.clamp(980, 0, 640); // => 640
 *     Math.clamp(-80, 0, 640); // => 0
 *
 * @param {Number} value 値
 * @param {Number} min  範囲の下限
 * @param {Number} max  範囲の上限
 * @return {Number} 丸めた結果の値
 */
function clamp(value, min, max) {
  return (value < min) ? min : ( (value > max) ? max : value );
}

/**
 * @property DEG_TO_RAD
 * 度をラジアンに変換するための定数です。
 */
var DEG_TO_RAD = Math.PI/180;

/**
 * @property RAD_TO_DEG
 * ラジアンを度に変換するための定数です。
 */
var RAD_TO_DEG = 180/Math.PI;


// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @property PHI
 * 黄金比です。
 */
var PHI = (1 + Math.sqrt(5)) / 2;

/**
 * @static
 * @method degToRad
 * 度をラジアンに変換します。
 *
 * ### Example
 *     Math.degToRad(180); // => 3.141592653589793
 *
 * @param {Number} deg 度
 * @return {Number} ラジアン
 */
function degToRad(deg) {
// Math.degToRad = function(deg) {
  return deg * DEG_TO_RAD;
}

/**
 * @static
 * @method radToDeg
 * ラジアンを度に変換します。
 *
 * ### Example
 *     Math.radToDeg(Math.PI/4); // => 45
 *
 * @param {Number} rad ラジアン
 * @return {Number} 度
 */
function radToDeg(rad) {
// Math.radToDeg = function(rad) {
  return rad * RAD_TO_DEG;
}

/**
 * @static
 * @method inside
 * 指定した値が指定した値の範囲にあるかどうかを返します。
 *
 * ### Example
 *     Math.inside(980, 0, 640); // => false
 *     Math.inside(120, 0, 640); // => true
 *
 * @param {Number} value チェックする値
 * @param {Number} min  範囲の下限
 * @param {Number} max  範囲の上限
 * @return {Boolean} 範囲内に値があるかないか
 */
function inside(value, min, max) {
// Math.$method("inside", function(value, min, max) {
  return (value >= min) && (value) <= max;
}

/**
 * @static
 * @method randint
 * 指定された範囲内でランダムな整数値を生成します。
 *
 * ### Example
 *     Math.randint(-4, 4); // => -4、0、3、4 など
 *
 * @param {Number} min  範囲の最小値
 * @param {Number} max  範囲の最大値
 * @return {Number} ランダムな整数値
 */
function randint(min, max) {
// Math.$method("randint", function(min, max) {
  return Math.floor( Math.random()*(max-min+1) ) + min;
}

/**
 * @static
 * @method randfloat
 * 指定された範囲内でランダムな数値を生成します。
 *
 * ### Example
 *     Math.randfloat(-4, 4); // => -2.7489193824000937 など
 *
 * @param {Number} min  範囲の最小値
 * @param {Number} max  範囲の最大値
 * @return {Number} ランダムな数値
 */
function randfloat(min, max) {
// Math.$method("randfloat", function(min, max) {
  return Math.random()*(max-min)+min;
}

/**
 * @static
 * @method randbool
 * ランダムに真偽値を生成します。
 * 引数で百分率を指定する事もできます。
 *
 * ### Example
 *     Math.randbool();   // => true または false
 *     Math.randbool(80); // => 80% の確率で true
 *
 * @param {Number} percent  真になる百分率
 * @return {Boolean} ランダムな真偽値
 */
function randbool(percent) {
// Math.$method("randbool", function(percent) {
  return Math.random() < (percent === undefined ? 50 : percent) / 100;
}

var mathExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  clamp: clamp,
  DEG_TO_RAD: DEG_TO_RAD,
  RAD_TO_DEG: RAD_TO_DEG,
  PHI: PHI,
  degToRad: degToRad,
  radToDeg: radToDeg,
  inside: inside,
  randint: randint,
  randfloat: randfloat,
  randbool: randbool
});

/*
 * array.js
 */

/**
 * @type {import('../phina').AccessorExtendObject} first
 * 最初の要素を返す、もしくはそこにセットする
 *
 * ### Example
 *     arr = [6, 5, 2, 3, 1, 4];
 *     arr.first; // => 6
 */
const first = {
// Array.prototype.accessor("first", {
  /** @this Array */
  "get": function()   { return this[0]; },
  /** @this Array */
  "set": function(v)  { this[0] = v; }
};

/**
 * @type {import('../phina').AccessorExtendObject} last
 * 最後の要素を返す、もしくはそこにセットする
 *
 * ### Example
 *     arr = [6, 5, 2, 3, 1, 4];
 *     arr.last; // => 4
 */
const last = {
// Array.prototype.accessor("last", {
  /** @this Array */
  "get": function()   { return this[this.length-1]; },
  /** @this Array */
  "set": function(v)  { this[this.length-1] = v; }
};


/**
 * @method at
 * 指定したインデックスの要素を返します（ループ・負数の指定可）。
 *
 * 添字が負数の場合は末尾からのオフセットとみなします。末尾の要素が -1 番目になります。  
 * 添字の絶対値が Array.length 以上の場合はループします。
 *
 * ### Example
 *     arr = ['a', 'b', 'c', 'd', 'e', 'f'];
 *     arr.at(0);  // => 'a'
 *     arr.at(6);  // => 'a'
 *     arr.at(13); // => 'b'
 *     arr.at(-1); // => 'f'
 *     arr.at(-8); // => 'e'
 *
 * @this Array
 * @param {Number} i 添字
 * @return {Object} 添字で指定された要素
 */
function at(i) {
// Array.prototype.$method("at", function(i) {
  i%=this.length;
  i+=this.length;
  i%=this.length;
  return this[i];
}

/**
 * @method erase
 * @chainable
 * 指定したオブジェクトと一致した最初の要素を削除します。
 *
 * ### Example
 *     arr1 = ['a', 'b', 'b', 'c'];
 *     arr2 = arr1.erase('b'); // => ['a', 'b', 'c']
 *     arr1 === arr2;          // => true
 *
 * @this Array
 * @param {Object} elm 削除したいオブジェクト
 */
function erase(elm) {
// Array.prototype.$method("erase", function(elm) {
  var index  = this.indexOf(elm);
  if (index >= 0) {
    this.splice(index, 1);
  }
  return this;
}


/**
 * @method clear
 * @chainable
 * 自身を空の配列にします。
 *
 * ### Example
 *     arr = [1, 2, [3, 4]];
 *     arr.clear(); // => []
 * 
 * @this Array
 */
function clear(deep) {
// Array.prototype.$method("clear", function() {
  this.length = 0;
  return this;
}

/**
 * @method contains
 * 指定した要素が配列に含まれているかをチェックします。
 *
 * 比較には厳密な同値（三重イコール演算子 === で使われるのと同じ方法）を用います。
 *
 * ### Example
 *     arr = [6, 5, 2, 3, 1, 4];
 *     arr.contains(3);     // => true
 *     arr.contains(3, 4);  // => false
 *     arr.contains(3, -4); // => true
 *     arr.contains("6");   // => false
 *
 * @this Array
 * @param {Object} item チェックするオブジェクト
 * @param {Number} [fromIndex=0] 検索を始める位置。負数を指定した場合は末尾からのオフセットと見なします。
 * @return {Boolean} チェックの結果
 */
function contains(item, fromIndex) {
// Array.prototype.$method("contains", function(item, fromIndex) {
  return this.indexOf(item, fromIndex) != -1;
}

/**
 * @method clone
 * 自身のコピーを生成して返します。
 *
 * ### Example
 *     arr1 = [1, 2, [3, 4]];
 *     arr2 = arr1.clone();      // => [1, 2, [3, 4]]
 *     arr1[2] === arr2[2];      // => true
 *     arr1[2][0] = 9;
 *     arr2;                     // => [1, 2, [9, 4]]
 *     arr1 = [1, 2, [3, 4]];
 *     arr2 = arr1.clone(true);  // => [1, 2, [3, 4]]
 *     arr1[2] === arr2[2];      // => false
 *     arr1[2][0] = 9;
 *     arr2;                     // => [1, 2, [3, 4]]
 *
 * @this Array
 * @param {Boolean} [deep=false] 配列のネストをたどって複製するかどうか
 * @return {Array} 新しい配列
 */
function clone(deep) {
// Array.prototype.$method("clone", function(deep) {
  if (deep === true) ;
  else {
    return Array.prototype.slice.apply(this);
  }
}

/**
 * @method range
 * @chainable
 * 自身を等差数列（一定間隔の整数値の列）とします。
 *
 * - 引数が1つの場合、0～end（end含まず）の整数の配列です。  
 * - 引数が2つの場合、start～end（end含まず）の整数の配列です。  
 * - 引数が3つの場合、start～end（end含まず）かつ start + n * step (nは整数)を満たす整数の配列です。
 *
 * ### Example
 *     arr = [];
 *     arr.range(4);        // => [0, 1, 2, 3]
 *     arr.range(2, 5);     // => [2, 3, 4]
 *     arr.range(2, 14, 5); // => [2, 7, 12]
 *     arr.range(2, -3);    // => [2, 1, 0, -1, -2]
 *
 * @this Array
 * @param {Number} start 最初の値（デフォルトは 0）
 * @param {Number} end 最後の値（省略不可）
 * @param {Number} [step] 間隔。デフォルト値は1または-1
 */
function range(start, end, step) {
// Array.prototype.$method("range", function(start, end, step) {
  clear.call(this);
  // this.clear();
  
  if (arguments.length == 1) {
    for (var i=0; i<start; ++i) this[i] = i;
  }
  else if (start < end) {
    step = step || 1;
    if (step > 0) {
      for (var i=start, index=0; i<end; i+=step, ++index) {
        this[index] = i;
      }
    }
  }
  else {
    step = step || -1;
    if (step < 0) {
      for (var i=start, index=0; i>end; i+=step, ++index) {
        this[index] = i;
      }
    }
  }
  
  return this;
}


// ==========
// 以下ライブラリ内では未使用
// ==========


/**
 * @method equals
 * 渡された配列と等しいかどうかをチェックします。
 *
 * 要素同士を === で比較します。要素に配列が含まれている場合は {@link #deepEquals} を使用してください。
 *
 * ### Example
 *     arr1 = [6, 5, 2, 3, 1, 4];
 *     arr1.equals([6, 5, 2, 3, 1, 4]);       // => true
 *     arr2 = [6, 5, 2, [3, 1], 4];
 *     arr2.equals([6, 5, 2, [3, 1], 4]);     // => false
 *     arr2.deepEquals([6, 5, 2, [3, 1], 4]); // => true
 *
 * @this Array
 * @param {Array} arr 比較する対象の配列
 * @return {Boolean} チェックの結果
 */
function equals(arr) {
// Array.prototype.$method("equals", function(arr) {
  // 長さチェック
  if (this.length !== arr.length) return false;
  
  for (var i=0,len=this.length; i<len; ++i) {
    if (this[i] !== arr[i]) {
      return false;
    }
  }

  return true;
}

/**
 * @method deepEquals
 * ネストされている配列を含め、渡された配列と等しいかどうかをチェックします。
 *
 * ※equalsDeep にするか検討. (Java では deepEquals なのでとりあえず合わせとく)
 *
 * ### Example
 *     arr = [6, 5, 2, [3, 1], 4];
 *     arr.equals([6, 5, 2, [3, 1], 4]);     // => false
 *     arr.deepEquals([6, 5, 2, [3, 1], 4]); // => true
 *
 * @this Array
 * @param {Array} arr 比較する対象の配列
 * @return {Boolean} チェックの結果
 */
function deepEquals(arr) {
// Array.prototype.$method("deepEquals", function(arr) {
  // 長さチェック
  if (this.length !== arr.length) return false;
  
  for (var i=0,len=this.length; i<len; ++i) {
    var result = (this[i].deepEquals) ? this[i].deepEquals(arr[i]) : (this[i] === arr[i]);
    if (result === false) {
      return false;
    }
  }
  return true;
}

/**
 * @method swap
 * @chainable
 * a 番目の要素 と b 番目の要素を入れ替えます。
 *
 * ### Example
 *     arr1 = ['a', 'b', 'c', 'd'];
 *     arr2 = arr1.swap(0, 3); // => ['d', 'b', 'c', 'a']
 *     arr1 === arr2;          // => true
 *
 * @this Array
 * @param {Number} a  インデックス
 * @param {Number} b  インデックス
 */
function swap(a, b) {
// Array.prototype.$method("swap", function(a, b) {
  var temp = this[a];
  this[a] = this[b];
  this[b] = temp;
  
  return this;
}

/**
 * @method eraseAll
 * @chainable
 * 指定したオブジェクトと一致したすべての要素を削除します。
 *
 * ### Example
 *     arr1 = ['a', 'b', 'b', 'c'];
 *     arr2 = arr1.eraseAll('b'); // => ['a', 'c']
 *     arr1 === arr2;             // => true
 *
 * @this Array
 * @param {Object} elm 削除したいオブジェクト
 */
function eraseAll(elm) {
// Array.prototype.$method("eraseAll", function(elm) {
  for (var i=0,len=this.length; i<len; ++i) {
    if (this[i] == elm) {
      this.splice(i--, 1);
    }
  }
  return this;
}

/**
 * @method eraseIf
 * @chainable
 * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初の要素を削除します。
 *
 * どの要素もマッチしなければ何も起きません。
 *
 * ### Example
 *     arr = ['foo', 'bar', 'hoge', 'fuga'];
 *     arr.eraseIf( function(elm) {
 *       return elm.indexOf('o') >= 0;
 *     });
 *     // => ['bar', 'hoge', 'fuga']
 *
 * @this Array
 * @param {Function} fn 各要素に対して実行するコールバック関数
 */
function eraseIf(fn) {
// Array.prototype.$method("eraseIf", function(fn) {
  for (var i=0,len=this.length; i<len; ++i) {
    if ( fn(this[i], i, this) ) {
      this.splice(i, 1);
      break;
    }
  }
  return this;
}

/**
 * @method eraseIfAll
 * @chainable
 * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）すべての要素を削除します。
 *
 * どの要素もマッチしなければ何も起きません。
 *
 * ### Example
 *     arr = ['foo', 'bar', 'hoge', 'fuga'];
 *     arr.eraseIfAll( function(elm) {
 *       return elm.indexOf('o') >= 0;
 *     });
 *     // => ['bar', 'fuga']
 *
 * @this Array
 * @param {Function} fn 各要素に対して実行するコールバック関数
 */
function eraseIfAll(fn) {
// Array.prototype.$method("eraseIfAll", function(fn) {
  for (var i=0,len=this.length; i<len; ++i) {
    if ( fn(this[i], i, this) ) {
      this.splice(i--, 1);
      len--;
    }
  }
  return this;
}

/**
 * @method random
 * 配列からランダムに1つ取り出した要素を返します。
 *
 * 取り出す範囲をインデックスで指定することもできます。  
 * {@link #pickup}、{@link #lot} と同じです。  
 *
 * ### Example
 *     arr = ['foo', 'bar', 'hoge', 'fuga'];
 *     arr.random(2, 3);  // => 'hoge' または 'fuga'
 *
 * @this Array
 * @param {Number} [min=0] インデックスの下限
 * @param {Number} [max=配列の最大インデックス] インデックスの上限
 * @return {Object} ランダムに1つ取り出した要素
 */
function random(min, max) {
// Array.prototype.$method("random", function(min, max) {
  min = min || 0;
  max = max || this.length-1;
  return this[randint(min, max) ];
}

/**
 * @method pickup
 * 配列からランダムで1つ取り出した要素を返します。
 * 
 * {@link #random}、{@link #lot} と同じです。
 * @inheritdoc #random
 * 
 * @this {Array}
 * @param {number} min
 * @param {number} max
 */
function pickup(min, max) {
// Array.prototype.$method("pickup", function(min, max) {
  min = min || 0;
  max = max || this.length-1;
  return this[randint(min, max) ];
}

/**
 * @method lot
 * 配列からランダムで1つ取り出した要素を返します。
 * 
 * {@link #random}、{@link #pickup} と同じです。
 * @inheritdoc #random
 * 
 * @this {Array}
 * @param {number} min
 * @param {number} max
 */
function lot(min, max) {
// Array.prototype.$method("lot", function(min, max) {
  min = min || 0;
  max = max || this.length-1;
  return this[randint(min, max) ];
}

/**
 * @method uniq
 * 要素の重複を取り除いた配列を生成して返します。
 *
 * 自分自身は破壊されません。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 3, 2];
 *     arr.uniq(); // => [1, 2, 3, 4]
 *
 * @this Array
 * @param {Number} [deep] 未使用
 * @return {Object} 新しい配列
 */
function uniq(deep) {
// Array.prototype.$method("uniq", function(deep) {
  return this.filter(function(value, index, self) {
    return self.indexOf(value) === index;
  });
}


/**
 * @method flatten
 * 自身を再帰的に平滑化した配列を生成して返します。
 *
 * level を指定しなければ深さの際限なく完全に平滑化します。
 *
 * ### Example
 *     arr = [1, 2, [3, [4, 5]]];
 *     arr.flatten();  // => [1, 2, 3, 4, 5]
 *     arr.flatten(1); // => [1, 2, 3, [4, 5]]
 *
 * @this Array<Array>
 * @param {Number} [level=0]  平滑化の再帰の深さ
 * @return {Object} 平滑化した配列
 */
function flatten(level) {
// Array.prototype.$method("flatten", function(level) {
  var arr = null;

  if (level) {
    arr = this;
    for (var i=0; i<level; ++i) {
      arr = Array.prototype.concat.apply([], arr);
    }
  }
  else {
    // 完全フラット
    arr = this.reduce(function (previousValue, curentValue) {
      return Array.isArray(curentValue) ?
        // previousValue.concat(curentValue.flatten()) : previousValue.concat(curentValue);
        previousValue.concat(flatten.call(curentValue)) : previousValue.concat(curentValue);
    }, []);
  }

  return arr;
}

/**
 * @method fill
 * @chainable
 * 自身の一部の要素を特定の値で埋めます。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5];
 *     arr.fill("x");       // => ["x", "x", "x", "x", "x"]
 *     arr.fill("x", 2, 4); // => [1, 2, "x", "x", 5]
 *
 * @this Array
 * @param {Object} value 埋める値
 * @param {Number} [start=0] 値を埋める最初のインデックス
 * @param {Number} [end=自身の配列の長さ] 値を埋める最後のインデックス+1
 */
function fill(value, start, end) {
// Array.prototype.$method("fill", function(value, start, end) {
  start = start || 0;
  end   = end   || (this.length);
  
  for (var i=start; i<end; ++i) {
    this[i] = value;
  }
  
  return this;
}


/**
 * @method shuffle
 * @chainable
 * 自身の要素をランダムにシャッフルします。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5];
 *     arr.shuffle(); // => [5, 1, 4, 2, 3] など
 * 
 * @this Array
 */
function shuffle() {
// Array.prototype.$method("shuffle", function() {
  for (var i=0,len=this.length; i<len; ++i) {
    var j = randint(0, len-1);
    
    if (i != j) {
      // this.swap(i, j);
      swap.call(this, i, j);
    }
  }
  
  return this;
}

/**
 * @method sum
 * 要素の合計値を返します。
 *
 * 要素に数値以外が含まれる場合の挙動は不定です。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5, 6];
 *     arr.sum(); // => 21
 *
 * @this Array
 * @return {Number} 合計
 */
function sum() {
// Array.prototype.$method("sum", function() {
  var sum = 0;
  for (var i=0,len=this.length; i<len; ++i) {
    sum += this[i];
  }
  return sum;
}

/**
 * @method average
 * 要素の平均値を返します。
 *
 * 要素に数値以外が含まれる場合の挙動は不定です。
 *
 * ### Example
 *     arr = [1, 2, 3, 4, 5, 6]
 *     arr.average(); // => 3.5
 *
 * @this Array
 * @return {Number} 平均値
 */
function average() {
// Array.prototype.$method("average", function() {
  var sum = 0;
  var len = this.length;
  for (var i=0; i<len; ++i) {
    sum += this[i];
  }
  return sum/len;
}

/**
 * @method each
 * @chainable
 * 要素を順番に渡しながら関数を繰り返し実行します。
 *
 * メソッドチェーンに対応していますが、このメソッドによって自分自身は変化しません。
 *
 * ###Reference
 * - [Array.prototype.forEach() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
 *
 * ### Example
 *     arr = [1, 2, 3];
 *     arr.each( function(elm) {
 *       console.log(elm * elm)
 *     });
 *     // => 1
 *     //    4
 *     //    9
 *
 * @this Array
 * @param {Function} callback 各要素に対して実行するコールバック関数
 * @param {Object} [self] callback 内で this として参照される値
 */
function each$1(callback, self) {
  this.forEach.call(this, callback, self || this);
  return this;
}
// Array.prototype.$method("each", function() {
//   this.forEach.apply(this, arguments);
//   return this;
// }

// /**
//  * @method toULElement
//  * ULElement に変換します（未実装）
//  */
// Array.prototype.$method("toULElement", function(){
//     // TODO: 
// });

// /**
//  * @method toOLElement
//  * OLElement に変換します（未実装）
//  */
// Array.prototype.$method("toOLElement", function(){
//     // TODO:
// });

/**
 * @method most
 * 指定した関数の返り値が最小となる要素と最大となる要素をまとめて返します。
 *
 * 空の配列に対して実行すると {max: Infinity, min: -Infinity} を返します。
 *
 * ### Example
 *     [5,1,4,1,9,2,-10].most(); // => {max:9, min: -10}
 *
 *     points = [ {x:0, y:0}, {x:640, y:960}, {x:-80, y:100} ];
 *     points.most(function(e){return e.x;}).min; // => [x:-80, y:100]
 *     points.most(function(e){return e.y;}).max; // => [x:640, y:960]
 * 
 * @typedef {Object} ArrayMostReturnValue max と min をキーに持つオブジェクト
 * @property {number} min - 関数の返り値が最小となる要素
 * @property {number} max - 関数の返り値が最大となる要素
 *
 * @this Array<number>
 * @param {Function} [func] 各要素に対して実行するコールバック関数
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 * @return {ArrayMostReturnValue}
 */
function most(func, self) {
// Array.prototype.$method("most", function(func, self) {
  if(this.length < 1){
    return {
      max: -Infinity,
      min: Infinity,
    };
  }
  if(func){
    var maxValue = -Infinity;
    var minValue = Infinity;
    var maxIndex = 0;
    var minIndex = 0;
    
    if(typeof self === 'undefined'){self = this;}
    
    for (var i = 0, len = this.length; i < len; ++i) {
      var v = func.call(self, this[i], i, this);
      if(maxValue < v){
        maxValue = v;
        maxIndex = i;
      }
      if(minValue > v){
        minValue = v;
        minIndex = i;
      }
    }
    return {
      max: this[maxIndex],
      min: this[minIndex],
    };
  }
  else {
    var max = -Infinity;
    var min = Infinity;
    for (var i = 0, len = this.length;i < len; ++i) {
      if(max<this[i]){max=this[i];}
      if(min>this[i]){min=this[i];}
    }
    return {
      max: max,
      min: min,
    };
  }
  
}  


// ==========
// 以下はes2015以降に存在するため、保留
// ==========


// /**
//  * @method find
//  * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初の要素を返します。
//  *
//  * どの要素もマッチしなければ undefined を返します。
//  *
//  * ### Example
//  *     arr = ['foo', 'bar', 'hoge', 'fuga'];
//  *     arr.find( function(elm) {
//  *       return elm.indexOf('a') >= 0;
//  *     });
//  *     // => 'bar'
//  *
//  * @param {Function} callback 各要素に対して実行するコールバック関数
//  * @param {Object} [self=this] callback 内で this として参照される値。デフォルトは呼び出し時の this。
//  * @return {Object} 条件にマッチした最初の要素、または undefined
//  */
// Array.prototype.$method("find", function(fn, self) {
//   var target = null;

//   this.some(function(elm, i) {
//     if (fn.call(self, elm, i, this)) {
//       target = elm;
//       return true;
//     }
//   });

//   return target;
// });

// /**
//  * @method findIndex
//  * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初のインデックスを返します。
//  *
//  * どの要素もマッチしなければ -1 を返します。
//  *
//  * ### Example
//  *     arr = ['foo', 'bar', 'hoge', 'fuga'];
//  *     arr.findIndex( function(elm) {
//  *       return elm.indexOf('a') >= 0;
//  *     });
//  *     // => 1
//  *
//  * @param {Function} callback 各要素に対して実行するコールバック関数
//  * @param {Object} [self=this] callback 内で this として参照される値。デフォルトは呼び出し時の this。
//  * @return {Object} 条件にマッチした最初のインデックス、または -1
//  */
// Array.prototype.$method("findIndex", function(fn, self) {
//   var target = -1;

//   this.some(function(elm, i) {
//     if (fn.call(self, elm, i, this)) {
//       target = i;
//       return true;
//     }
//   });

//   return target;
// });

/**
 * @method of
 * @static
 * ES6 準拠の of 関数です。可変長引数をとって Array オブジェクトにして返します。
 *
 * ### Example
 *     Array.of();        // => []
 *     Array.of(1, 2, 3); // => [1, 2, 3]
 *
 * @param {Object} elementN 生成する配列の要素
 * @return {Array} 生成した配列
 */
// Array.$method("of", function() {
//   return Array.prototype.slice.call(arguments);
// });

/**
 * @method from
 * @static
 * ES6 準拠の from 関数です。array-like オブジェクトかiterable オブジェクトから新しい配列を生成します。
 *
 * array-like オブジェクトとは、length プロパティを持ち、数字の添字でアクセス可能なオブジェクトのことです。
 * 通常の配列のほか、String、arguments、NodeList なども array-like オブジェクトです。
 *
 * iterable オブジェクトとは、Symbol.iterator プロパティを持つオブジェクトのことです。
 * 通常の配列のほか、String、arguments、NodeList なども iterable オブジェクトです。
 *
 * ### Example
 *     Array.from([1, 2, 3], function(elm){ return elm * elm} ); // => [1, 4, 9]
 *     Array.from("foo");                                        // => ["f", "o", "o"]
 *     Array.from( document.querySelectorAll("span"))            // => [Element, Element, Element,...]
 *
 * @param {Object} arrayLike 配列に変換する array-like オブジェクト
 * @param {Function} [callback] arrayLike のすべての要素に対して実行するマップ関数
 * @param {Object} [context] callback 内で this として参照される値
 * @return {Array} 生成した配列
 */
// Array.$method("from", function(arrayLike, callback, context) {
//   if (!Object(arrayLike).length) return [];

//   var result = [];
//   if (Symbol && Symbol.iterator && arrayLike[Symbol.iterator]) {
//       var iterator = arrayLike[Symbol.iterator]();
//       while (true) {
//           var iteratorResult = iterator.next();
//           if (iteratorResult.done) break;

//           var value = typeof callback === 'function' ? callback.bind(context || this)(iteratorResult.value) : iteratorResult.value;
//           result.push(value);
//       }
//       return result;
//   }

//   for (var i = 0, len = arrayLike.length; i < len; i++) {
//       result.push(arrayLike[i]);
//   }
//   return result.map(typeof callback == 'function' ? callback : function(item) {
//     return item;
//   }, context);
// });

var arrayExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  first: first,
  last: last,
  at: at,
  erase: erase,
  clear: clear,
  contains: contains,
  clone: clone,
  range: range,
  equals: equals,
  deepEquals: deepEquals,
  swap: swap,
  eraseAll: eraseAll,
  eraseIf: eraseIf,
  eraseIfAll: eraseIfAll,
  random: random,
  pickup: pickup,
  lot: lot,
  uniq: uniq,
  flatten: flatten,
  fill: fill,
  shuffle: shuffle,
  sum: sum,
  average: average,
  each: each$1,
  most: most
});

/**
 * アクセサ拡張用オブジェクト
 * @typedef {{get: ()=> any, set: (v:any)=> void}} AccessorExtendObject
 */

/**
 * @typedef {{
 *   _creator: any
 *   _hierarchies: PhinaClass[]
 *   init: function
 *   superClass?: any
 *   superInit?: function
 *   superMethod?: (methodName: string, ...args:any) => any // スーパーメソッドの結果
 *   constructor?: any
 *   [k: string]: any // その他のプロパティ
 * }} PhinaClassPrototype
 */

/**
 * @typedef {{
 *   prototype: PhinaClassPrototype
 *   [k: string]: any // その他のstaticプロパティ
 * }} PhinaClass
 */

/**
 * @typedef {Object} CreateClassParam
 * @property {Function & {owner: any}} params.init クラス初期化関数
 * @property {PhinaClass} [params.superClass] スーパークラス
 * @property {{[k: string]: AccessorExtendObject}} [params._accessor] アクセサを付与
 * @property {{[k: string]: any}} [params._static] staticプロパティを付与
 * @property {Function} [params._defined] 定義時に実行したい関数
 */

var _classDefinedCallback = {};

var phina = {
  /**
   * @property {String} VERSION
   * @memberof phina
   * @static
   * phina.js のバージョンです。
   */
  VERSION: "0.2.3",

  /**
   * @method isNode
   * Node.js の module かどうかをチェックします。
   * @memberof phina
   * @static
   */
  isNode: function () {
    return "object" !== "undefined";
  },

  /**
   * @method namespace
   * 引数は関数で、その関数内での this は phina になります。
   * @memberof phina
   * @static
   *
   * @param {Function} fn 関数
   */
  namespace: function (fn) {
    fn.call(this);
  },

  /**
   * @method testUA
   * 引数の RegExp オブジェクトとユーザーエージェントを比較して返します。
   * @memberof phina
   * @static
   *
   * @param {RegExp} regExp
   * @return {Boolean}
   */
  testUA: function (regExp) {
    if (!this.global.navigator) return false;
    var ua = this.global.navigator.userAgent;
    return regExp.test(ua);
  },

  /**
   * @method isAndroid
   * Android かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} Android かどうか
   */
  isAndroid: function () {
    return this.testUA(/Android/);
  },

  /**
   * @method isIPhone
   * iPhone かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} iPhone かどうか
   */
  isIPhone: function () {
    return this.testUA(/iPhone/);
  },

  /**
   * @method isIPad
   * iPad かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} iPad かどうか
   */
  isIPad: function () {
    return this.testUA(/iPad/);
  },

  /**
   * @method isIOS
   * iOS かどうかを返します。
   * @memberof phina
   * @static
   *
   * @return {Boolean} iOS かどうか
   */
  isIOS: function () {
    return this.testUA(/iPhone|iPad/);
  },

  /**
   * @method isMobile
   * モバイルかどうかを返します。具体的には Android, iPhone, iPad のいずれかだと true になります。
   * @memberof phina
   * @static
   *
   * @return {Boolean} モバイルかどうか
   */
  isMobile: function () {
    return this.testUA(/iPhone|iPad|Android/);
  },

  /**
   * @method createClass
   * クラスを作成する関数です。
   * 親クラスの指定は文字列でも可能です。
   * 何も継承しない場合 superClass の指定は不要です。また、親クラスを継承している場合、コンストラクタ内で this.superInit() を実行して親クラスを初期化することが必須です。
   * @memberof phina
   * @static
   *
   * @example
   * var Class = phina.createClass({
   *   superClass: namespace.Super,//親クラス継承
   *
   *   //メンバ変数
   *   member1: 100,
   *   member2: 'test',
   *   member3: null,
   *
   *   // コンストラクタ
   *   // Class()を呼び出したとき実行される
   *   init: function(a, b){
   *     //スーパークラス(継承したクラス)のinit
   *     this.superInit(a, b);
   *     this.a = a;
   *     this.b = b;
   *   },
   *
   *   //メソッド
   *   method1: function(){},
   *   method2: function(){},
   *
   * });
   *
   * @param {CreateClassParam} params
   * @return {PhinaClass} phinaクラス
   */
  createClass: function (params) {

    /** @type {PhinaClass} */
    var _class = function () {
      var instance = new _class.prototype._creator();
      _class.prototype.init.apply(instance, arguments);
      return instance;
    };

    if (params.superClass) {
      _class.prototype = Object.create(params.superClass.prototype);
      params.init.owner = _class;
      _class.prototype.superInit = function () {
        this.__counter = this.__counter || 0;

        var superClass = this._hierarchies[this.__counter++];
        var superInit = superClass.prototype.init;
        superInit.apply(this, arguments);

        this.__counter = 0;
      };
      _class.prototype.superMethod = function () {
        var args = Array.prototype.slice.call(arguments, 0);
        var name = args.shift();
        this.__counters = this.__counters || {};
        this.__counters[name] = this.__counters[name] || 0;

        var superClass = this._hierarchies[this.__counters[name]++];
        var superMethod = superClass.prototype[name];
        var rst = superMethod.apply(this, args);

        this.__counters[name] = 0;

        return rst;
      };
      _class.prototype.constructor = _class;
    }

    // //
    // params.forIn(function(key, value) {
    //   if (typeof value === 'function') {
    //     _class.$method(key, value);
    //   }
    //   else {
    //     _class.prototype[key] = value;
    //   }
    // });
    // 継承
    $extend.call(_class.prototype, params);
    // _class.prototype.$extend(params);

    // 継承用
    _class.prototype._hierarchies = [];
    var _super = _class.prototype.superClass;
    while (_super) {
      _class.prototype._hierarchies.push(_super);
      _super = _super.prototype.superClass;
    }

    // accessor
    if (params._accessor) {
      // params._accessor.forIn(
      forIn.call(
        params._accessor,
        /**
         * @param {string} key
         * @param {AccessorExtendObject} value
         */
        function (key, value) {
          accessor.call(_class.prototype, key, value);
          // _class.prototype.accessor(key, value);
        }
      );
      // _class.prototype = Object.create(_class.prototype, params._accessor);
    }

    _class.prototype._creator = function () {
      return this;
    };
    _class.prototype._creator.prototype = _class.prototype;

    // static property/method
    if (params._static) {
      $extend.call(_class, params._static);
      // _class.$extend(params._static);
    }

    if (params._defined) {
      params._defined.call(_class, _class);
    }

    return _class;
  },

  /**
   * @method using
   * 文字列で定義したパスを使ってオブジェクトを取り出します。パスは , . / \ :: で区切ることができます。
   * {@link #phina.register} で登録したオブジェクトを取り出すときなどに使うと便利な関数です。
   * @memberof phina
   * @static
   *
   * @example
   * hoge = {
   *   foo: {
   *     bar: {
   *       num: 100
   *     }
   *   }
   * };
   * var bar = phina.using('hoge.foo.bar');
   * console.log(bar.num); // => 100
   *
   * @param {String} path オブジェクトへのパス
   * @return {Object} 取り出したオブジェクト
   */
  using: function (path) {
    if (!path) {
      return this.global;
    }

    var pathes = path.split(/[,.\/ ]|::/);
    var current = this.global;

    pathes.forEach(function (p) {
      current = current[p] || (current[p] = {});
    });

    return current;
  },

  /**
   * @method register
   * パス指定でオブジェクトを登録する関数です。パスは , . / \ :: で区切ることができます。
   * @memberof phina
   * @static
   *
   * @example
   * phina.register('hoge.foo.bar', {
   *   num: 100,
   * });
   * console.log(hoge.foo.bar.num); // => 100
   *
   * @param {String} path 登録するオブジェクトのパス
   * @param {Object} _class 登録するオブジェクト
   * @return {Object} 登録したオブジェクト
   */
  register: function (path, _class) {
    var pathes = path.split(/[,.\/ ]|::/);
    // var className = pathes.last;
    var className = last.get.call(pathes);
    // FIXME: ここを直さないとピリオド区切り以外は無効？
    var parentPath = path.substring(0, path.lastIndexOf("."));
    var parent = this.using(parentPath);

    parent[className] = _class;

    return _class;
  },

  /**
   * @method define
   * クラスを定義する関数です。使い方は {@link #createClass} とほとんど同じです。
   * ただし、引数は2つあり、第一引数は定義するクラスのパスを文字列で渡します。第二引数のオブジェクトは {@link #createClass} の引数と同じようにします。
   * {@link #createClass} と違い、変数に代入する必要がなく、パス指定でクラスを定義できます。
   * 内部的には {@link #register}, {@link #using} を使用しているため、パスは , . / \ :: で区切ることができます。
   * @memberof phina
   * @static
   *
   * @example
   * phina.define('namespace.Class', {
   *   superClass: 'namespace.Super',//親クラス継承
   *
   *   //メンバ変数
   *   member1: 100,
   *   member2: 'test',
   *   member3: null,
   *
   *   //コンストラクタ
   *   //Class()を呼び出したとき実行される
   *   init: function(a, b){
   *     //スーパークラス(継承したクラス)のinit
   *     this.superInit(a, b);
   *     this.a = a;
   *     this.b = b;
   *   },
   *
   *   //メソッド
   *   method1: function(){},
   *   method2: function(){},
   * });
   *
   * @param {String} path パス
   * @param {Object} params
   * @param {Function & {owner: any}} params.init クラス初期化関数
   * @param {string | PhinaClass} [params.superClass] スーパークラス
   * @param {{[k: string]: AccessorExtendObject}} [params._accessor] アクセサを付与
   * @param {{[k: string]: any}} [params._static] staticプロパティを付与
   * @param {Function} [params._defined] 定義時に実行したい関数
   * @return {PhinaClass} 定義したクラス
   */
  define: function (path, params) {
    if (params.superClass) {
      if (typeof params.superClass === "string") {
        var _superClass = this.using(params.superClass);
        if (typeof _superClass != "function") {
          if (!_classDefinedCallback[params.superClass]) {
            _classDefinedCallback[params.superClass] = [];
          }
          _classDefinedCallback[params.superClass].push(function () {
            this.define(path, params);
          });

          return;
        } else {
          params.superClass = _superClass;
        }
      } else {
        params.superClass = params.superClass;
      }
    }

    var _class = this.createClass(/** @type CreateClassParam */ (params));
    // _class.prototype.accessor('className', {
    accessor.call(_class.prototype, "className", {
      get: function () {
        return path;
      },
    });

    this.register(path, _class);

    if (_classDefinedCallback[path]) {
      _classDefinedCallback[path].forEach(function (callback) {
        callback();
      });
      _classDefinedCallback[path] = null;
    }

    return _class;
  },

  /**
   * @method globalize
   * phina.js が用意している全てのクラスをグローバルに展開します。（具体的には phina が持つオブジェクトが一通りグローバルに展開されます。）
   * この関数を実行することで、いちいち global からたどっていかなくても phina.js の用意しているクラスをクラス名だけで呼び出すことができます。
   * @memberof phina
   * @static
   *
   * @example
   * var sprite1 = phina.display.Sprite("piyo"); 
   * phina.globalize();
   * var sprite2 = Sprite("piyo"); // sprite1と等価
   *
   */
  globalize: function () {
    // phina.forIn(
    forIn.call(this, function (key, value) {

      if (typeof value !== "object") return;

      // value.forIn(function(key, value) {
      forIn.call(value, function (key, value) {
        // if (phina.global[key]) {
        //   console.log(ns, key);
        //   phina.global['_' + key] = value;
        // }
        // else {
        //   phina.global[key] = value;
        // }
        this.global[key] = value;
      });
    });
  },

  /** @private */
  _mainListeners: [],
  /** @private */
  _mainLoaded: false,

  /**
   * @method main
   * phina.js でプログラミングする際、メインの処理を記述するための関数です。
   * 基本的に phina.js でのプログラミングではこの中にプログラムを書いていくことになります。
   * @memberof phina
   * @static
   *
   * @example
   * phina.main(function() {
   *   //ここにメインの処理を書く
   * });
   *
   * @param {Function} func メインの処理
   */
  main: function (func) {
    if (this._mainLoaded) {
      func();
    } else {
      this._mainListeners.push(func);
    }
  },

  /**
   * @memberof phina
   * Node.js なら global、 ブラウザなら window を返します。
   * ゲッターのみ定義されています。
   */
  get global() {
    return GLOBAL;
  },
};

var GLOBAL = phina.isNode() ? __webpack_require__.g : window;

var doc = phina.global.document;
if (phina.global.addEventListener && doc && doc.readyState !== "complete") {
  phina.global.addEventListener("load", function () {
    var run = function () {
      var listeners = clone.call(phina._mainListeners);
      // var listeners = phina._mainListeners.clone();
      clear.call(phina._mainListeners);
      // phina._mainListeners.clear();
      listeners.forEach(function (func) {
        // listeners.each(function(func) {
        func();
      });

      // main 内で main を追加している場合があるのでそのチェック
      if (phina._mainListeners.length > 0) {
        run();
        // run(0);
      } else {
        phina._mainLoaded = true;
      }
    };
    // ちょっと遅延させる(画面サイズ問題)
    setTimeout(run);
  });
} else {
  phina._mainLoaded = true;
}

/**
 * Arrayクラスのstatic拡張
 */

/**
 * @method range
 * @static
 * インスタンスメソッドの {@link #range} と同じです。
 *
 * ### Example
 *     Array.range(2, 14, 5); // => [2, 7, 12]
 */
function range$1(start, end, step) {
  return range.apply([], arguments);
}
// Array.$method("range", function(start, end, step) {
//   return Array.prototype.range.apply([], arguments);
// });

var arrayStaticExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  range: range$1
});

/**
 * @class global.Number
 * # 拡張した Number クラス
 * 数値を扱う Number クラスを拡張しています。
 */

/**
 * @method times
 * 0 から自分自身の数-1まで、カウンタをインクリメントしながら関数を繰り返し実行します。
 *
 * ### Example
 *     arr = [];
 *     (5).times(function(i){
 *       arr.push(i);
 *     }); // => [0, 1, 2, 3, 4]
 *
 * @this Number
 * @param {Function} fn コールバック関数
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function times(fn, self) {
// Number.prototype.$method("times",  function(fn, self) {
  self = self || this;
  for (var i=0; i<this; ++i) {
    fn.call(self, i, this);
  }
  return this;
}

/**
 * @method step
 * 自分自身の値から指定した数まで、カウンタを増分させながら関数を繰り返し実行します。
 *
 * 上限値や増分値は float 型を指定することができます。
 *
 * ### Example
 *     var arr = [];
 *     (2.4).step(5.3, 0.8, function(n) {
 *       arr.push(n);
 *      }); // => [2.4, 3.2, 4.0, 4.8]
 *
 * @this Number
 * @param {Number} limit カウンタの上限値
 * @param {Number} step カウンタを増分する量
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function step(limit, step, fn, self) {
// Number.prototype.$method("step",  function(limit, step, fn, self) {
  self = self || this;
  for (var i=+this; i<=limit; i+=step) {
    fn.call(self, i, this);
  }
  return this;
}


// ==========
// 以下ライブラリ内では未使用
// ==========

/**
 * @method round
 * 指定した小数の位を四捨五入した値を返します。
 *
 * 負の値を指定すると整数部の位を四捨五入できます。
 *
 * ### Example
 *     (13.87).round(); // => 14
 *     (-1.87).round(); // => -2
 *     (-1.27).round(); // => -1
 *     
 *     (2.345).round(); // => 2
 *     (2.345).round(1); // => 2.3
 *     (2.345).round(2); // => 2.35
 *
 *     (12345.67).round(-3); // => 12000
 *
 * @this Number
 * @param {Number} [figure=0] 四捨五入する位
 * @return {Number} 小数第 figure 位で四捨五入した値
 */
function round(figure) {
// Number.prototype.$method("round", function(figure) {
  figure = figure || 0;
  var base = Math.pow(10, figure);
  var temp = this * base;
  temp = Math.round(temp);
  return temp/base;
}

/**
 * @method ceil
 * 指定した小数の位を切り上げた値を返します。
 *
 * 負の値を指定すると整数部の位を切り上げられます。
 *
 * ### Example
 *     (-1.27).ceil(); // => -1
 *     (-1.87).ceil(); // => -1
 *     
 *     (2.345).ceil(); // => 3
 *     (2.345).ceil(1); // => 2.4
 *     (2.345).ceil(2); // => 2.35
 *
 *     (12345.67).ceil(-3); // => 13000
 *
 * @this Number
 * @param {Number} [figure=0] 切り上げる位
 * @return {Number} 小数第 figure 位で切り上げた値
 */
function ceil(figure) {
// Number.prototype.$method("ceil",  function(figure) {
  figure = figure || 0;
  var base = Math.pow(10, figure);
  var temp = this * base;
  temp = Math.ceil(temp);
  return temp/base;
}

/**
 * @method floor
 * 指定した小数の位を切り下げた値を返します。
 *
 * 負の値を指定すると整数部の位を切り下げられます。
 *
 * ### Example
 *     (-1.27).floor(); // => -2
 *     (-1.87).floor(); // => -2
 *     
 *     (2.345).floor(); // => 2
 *     (2.345).floor(1); // => 2.3
 *     (2.345).floor(2); // => 2.34
 *
 *     (12345.67).floor(-3); // => 12000
 *
 * @this Number
 * @param {Number} [figure=0] 切り下げる位
 * @return {Number} 小数第 figure 位で切り下げた値
 */
function floor(figure) {
// Number.prototype.$method("floor",  function(figure) {
  figure = figure || 0;
  var base = Math.pow(10, figure);
  var temp = this * base;
  temp = Math.floor(temp);
  
  // ~~this
  // this|0
  
  return temp/base;
}

/**
 * @method toInt
 * 数値を整数に変換します。
 *
 * ### Example
 *     (42.195).toInt(); // => 42
 *
 * @this Number
 * @return {Number} 整数値
 */
function toInt() {
// Number.prototype.$method("toInt",  function() {
  return (this | 0);
}

/**
 * @method toHex
 * 数値を16進数表記にした文字列を返します。
 *
 * ### Example
 *     (26).toHex(); // => "1a"
 *     (-26).toHex(); // => "-1a"
 *     (26.25).toHex(); // => "1a.4"
 *
 * @this Number
 * @return {String} 16進数表記の文字列
 */
function toHex() {
// Number.prototype.$method("toHex",  function() {
  return this.toString(16);
}

/**
 * @method toBin
 * 数値を2進数表記にした文字列を返します。
 *
 * ### Example
 *     (6).toBin(); // => "110"
 *     (-6).toBin(); // => "-110"
 *     (0xA3).toBin(); // => "10100011"
 *     (6.25).toHex(); // => "110.01"
 *
 * @this Number
 * @return {String} 2進数表記の文字列
 */
function toBin() {
// Number.prototype.$method("toBin",  function() {
  return this.toString(2);
}


/**
 * @method toUnsigned
 * 数値を unsigned int 型に変換します。
 *
 * 数値を符号無し整数として評価した値を返します。  
 * Javascriptのビット演算では数値を符号付きの32bit整数として扱うため、RGBA を
 * 整数値で表現して演算する場合、期待通りの結果が得られない場合があります。
 * そこで本関数で unsigned int 型に変換することで期待通りの値を得ることができます。
 *
 * ### Example
 *     rgba = 0xfeffffff & 0xff000000; // => -33554432
 *     rgba.toHex(); // => "-2000000"
 *     rgba.toUnsigned().toHex(); // => "fe000000"
 *
 * @this Number
 * @return {Number} unsigned int 型に変換した値
 */
function toUnsigned() {
// Number.prototype.$method("toUnsigned",  function() {
  return this >>> 0;
}

/**
 * @method padding
 * 指定した桁になるように文字を埋めます。
 *
 * ### Example
 *     (123).padding(5); // => "00123"
 *     (123).padding(5, "_"); // => "__123"
 *     (-12).padding(5); // => "-0012"
 *
 * @this Number
 * @param {Number} n 桁数
 * @param {String} [ch="0"] 埋める文字
 * @return {String} 桁数を揃えた文字列
 */
function padding$1(n, ch) {
// Number.prototype.$method("padding",  function(n, ch) {
  var str = this+'';
  n  = n-str.length;
  ch = (ch || '0')[0];
  
  while(n-- > 0) { str = ch + str; }
  
  if (str.indexOf("-") >= 0) {
    str = "-" + str.replace("-", "");
  }

  return str;
}

/**
 * @method upto
 * 自分自身の数から指定した数まで、カウンタをインクリメントしながら関数を繰り返し実行します。
 *
 * 指定した数が自分自身の数より小さい場合は関数は実行されません。
 *
 * ### Example
 *     arr = [];
 *     (6).upto(8, function(i){
 *       arr.push(i);
 *     });
 *     arr; // => [6, 7, 8]
 *
 *     (3).upto(0, function(i){
 *       arr.push(i);
 *     });
 *     arr; // => [6, 7, 8]
 *
 * @this Number
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function upto(t, fn, self) {
// Number.prototype.$method("upto",  function(t, fn, self) {
  self = self || this;
  for (var i=+this; i<=t; ++i) {
    fn.call(self, i, this);
  }
  return this;
}

/**
 * @method downto
 * 自分自身の数から指定した数まで、カウンタをデクリメントしながら関数を繰り返し実行します。
 *
 * 指定した数が自分自身の数より大きい場合は関数は実行されません。
 *
 * ### Example
 *     arr = [];
 *     (7).downto(4, function(i){
 *       arr.push(i);
 *     }); // => [7, 6, 5, 4]
 *
 * @this Number
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 */
function downto(t, fn, self) {
// Number.prototype.$method("downto",  function(t, fn, self) {
  self = self || this;
  for (var i=+this; i>=t; --i) {
    fn.call(self, i, this);
  }
  return this;
}


/**
 * @method map
 * 0から自分自身の値-1までカウンタをインクリメントさせながらコールバック関数を繰り返し実行し、
 * その返り値を要素とする配列を生成します。
 *
 * ### Example
 *     (5).map(function(i) {
 *       return i*i;
 *     }); // => [0, 1, 4, 9, 16]
 *
 * @this Number
 * @param {Function} fn コールバック関数。引数にカウンタが渡される。
 * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。
 * @return {Array} 生成した配列
 */
function map(fn, self) {
// Number.prototype.$method("map",  function(fn, self) {
  self = self || this;

  var results = [];
  for (var i=0; i<this; ++i) {
    var r = fn.call(self, i);
    results.push(r);
  }
  return results;
}

/**
 * @method abs
 * 絶対値を返します。
 *
 * ### Example
 *     (-5).abs(); // => 5
 *     (+5).abs(); // => 5
 *
 * @this Number
 * @return {Number} 絶対値
 */
function abs() { return Math.abs(this) }
// Number.prototype.$method("abs", function() { return Math.abs(this) });

/**
 * @method acos
 * アークコサイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (0).asin(); // => 0
 *     (1).asin(); // => 1.5707963267948966
 *
 * @this Number
 * @return {Number} アークコサイン
 */
function acos() { return Math.acos(this) }
// Number.prototype.$method("acos", function() { return Math.acos(this) });

/**
 * @method asin
 * アークサイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (1).acos(); // => 0
 *     (-1).acos(); // => 3.141592653589793
 *
 * @this Number
 * @return {Number} アークサイン
 */
function asin() { return Math.asin(this) }
// Number.prototype.$method("asin", function() { return Math.asin(this) });

/**
 * @method atan
 * アークタンジェント（ラジアン単位）を返します。
 *
 * ### Example
 *     (0).atan(); // => 0
 *     (1).atan(); // => 0.7853981633974483
 *
 * @this Number
 * @return {Number} アークタンジェント
 */
function atan() { return Math.atan(this) }
// Number.prototype.$method("atan", function() { return Math.atan(this) });

/**
 * @method cos
 * コサイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (Math.PI/3).cos(); // => 0.5
 *
 * @this Number
 * @return {Number} コサイン
 */
function cos() { return Math.cos(this) }
// Number.prototype.$method("cos", function() { return Math.cos(this) });

/**
 * @method exp
 * e<sup>this</sup> を返します。ここで e は自然対数の底であるネイピア数（オイラー数）です。
 *
 * ### Example
 *     (2).exp(); // => e<sup>2</sup>
 *     (0).exp(); // => 1
 *
 * @this Number
 * @return {Number} e<sup>x</sup>
 */
function exp() { return Math.exp(this) }
// Number.prototype.$method("exp", function() { return Math.exp(this) });

/**
 * @method log
 * 自然対数を返します。
 *
 * ### Example
 *     (Math.E * Math.E * Math.E).log(); // => 3
 *     (1).log(); // => 0
 *     (0).log(); // => -Infinity
 *
 * @this Number
 * @return {Number} 自然対数
 */
function log() { return Math.log(this) }
// Number.prototype.$method("log", function() { return Math.log(this) });

/**
 * @method max
 * 自分自身と引数の値を比べ、大きい方の値を返します。
 *
 * ### Example
 *     (15).max(10); // => 15
 *     (15).max(90); // => 90
 *
 * @this Number
 * @param {Number} value 比較する値
 * @return {Number} 最大値
 */
function max(value) { return Math.max(this, value) }
// Number.prototype.$method("max", function(value) { return Math.max(this, value) });

/**
 * @method min
 * 自分自身と引数の値を比べ、小さい方の値を返します。
 *
 * ### Example
 *     (15).min(10); // => 10
 *     (15).min(90); // => 15
 *
 * @this Number
 * @param {Number} value 比較する値
 * @return {Number} 最小値
 */
function min(value) { return Math.min(this, value) }
// Number.prototype.$method("min", function(value) { return Math.min(this, value) });

/**
 * @method clamp
 * 指定した範囲に収めた値を返します。
 *
 * ### Example
 *     (200).clamp(0, 640); // => 200
 *     (-15).clamp(0, 640); // => 0
 *     (999).clamp(0, 640); // => 640
 *
 * @this Number
 * @param {Number} min 範囲の下限
 * @param {Number} max 範囲の上限
 * @return {Number} 範囲内に収めた値
 */
function clamp$1(min, max) { return clamp(this, min, max) }
// Number.prototype.$method("clamp", function(min, max) { return Math.clamp(this, min, max) });

/**
 * @method pow
 * 自分自身を exponent 乗した値、つまり this<sup>exponent</sup> の値を返します。
 *
 * ### Example
 *     (3).pow(2); // => 9
 *
 * @this Number
 * @param {Number} exponent 累乗する指数
 * @return {Number} 累乗した結果の値
 */
function pow(exponent) { return Math.pow(this, exponent) }
// Number.prototype.$method("pow", function(exponent) { return Math.pow(this, exponent) });

/**
 * @method sin
 * サイン（ラジアン単位）を返します。
 *
 * ### Example
 *     (Math.PI/4).sin(); // => 0.7071067811865476
 *
 * @this Number
 * @return {Number} サイン
 */
function sin() { return Math.sin(this) }
// Number.prototype.$method("sin", function() { return Math.sin(this) });

/**
 * @method sqrt
 * 平方根を返します。
 *
 * ### Example
 *     (49).sqrt(); // => 7
 *
 * @this Number
 * @return {Number} 平方根
 */
function sqrt() { return Math.sqrt(this) }
// Number.prototype.$method("sqrt", function() { return Math.sqrt(this) });

/**
 * @method tan
 * タンジェント（ラジアン単位）を返します。
 *
 * ### Example
 *     (Math.PI/4).tan(); // => 1.0
 *
 * @this Number
 * @return {Number} タンジェント
 */
function tan() { return Math.tan(this) }
// Number.prototype.$method("tan", function() { return Math.tan(this) });

/**
 * @method toDegree
 * ラジアンを度に変換します。
 *
 * ### Example
 *     Math.radToDeg(Math.PI/4); // => 45
 *
 * @this Number
 * @return {Number} 度
 */
function toDegree() { return (this * RAD_TO_DEG); }
// Number.prototype.$method("toDegree", function() { return (this*Math.RAD_TO_DEG); });

/**
 * @method toRadian
 * 度をラジアンに変換します。
 *
 * ### Example
 *     (180).toRadian(); // => 3.141592653589793
 *
 * @this Number
 * @return {Number} ラジアン
 */
function toRadian() { return this * DEG_TO_RAD; }
// Number.prototype.$method("toRadian", function() { return this*Math.DEG_TO_RAD; });

var numberExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  times: times,
  step: step,
  round: round,
  ceil: ceil,
  floor: floor,
  toInt: toInt,
  toHex: toHex,
  toBin: toBin,
  toUnsigned: toUnsigned,
  padding: padding$1,
  upto: upto,
  downto: downto,
  map: map,
  abs: abs,
  acos: acos,
  asin: asin,
  atan: atan,
  cos: cos,
  exp: exp,
  log: log,
  max: max,
  min: min,
  clamp: clamp$1,
  pow: pow,
  sin: sin,
  sqrt: sqrt,
  tan: tan,
  toDegree: toDegree,
  toRadian: toRadian
});

/**
 * @class global.Date
 * # 拡張した Date クラス
 * 日付を扱う Date クラスを拡張しています。
 */

var MONTH = [
  'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
];

var WEEK = [
  'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
];

/**
 * @method format
 * 指定したフォーマットに従って日付を文字列化します。
 *
 * <table border="1">
 *   <tr><td>変換指定文字列</td><td>意味</td></tr>
 *   <tr><td>yyyy</td><td>西暦年（4桁）</td></tr>
 *   <tr><td>yy</td><td>西暦年（2桁）</td></tr>
 *   <tr><td>y</td><td>西暦年</td></tr>
 *   <tr><td>MMMM</td><td>月（英語名）</td></tr>
 *   <tr><td>MMM</td><td>月（英語省略名）</td></tr>
 *   <tr><td>MM</td><td>月（2桁数字）</td></tr>
 *   <tr><td>M</td><td>月</td></tr>
 *   <tr><td>dd</td><td>日（2桁）</td></tr>
 *   <tr><td>d</td><td>日</td></tr>
 *   <tr><td>EEEE</td><td>曜日（英語名）</td></tr>
 *   <tr><td>EEE</td><td>曜日（英語省略名）</td></tr>
 *   <tr><td>HH</td><td>時（24時間表記・2桁）</td></tr>
 *   <tr><td>H</td><td>時（24時間表記）</td></tr>
 *   <tr><td>mm</td><td>分（2桁）</td></tr>
 *   <tr><td>m</td><td>分</td></tr>
 *   <tr><td>ss</td><td>秒（2桁）</td></tr>
 *   <tr><td>s</td><td>秒</td></tr>
 * </table>
 * 桁数が指定されているものは0パディングされます。
 *
 * ### Example
 *     (new Date()).format("yyyy-MM-dd(EEE)"); // => "2016-04-05(Tue)" など
 *
 * @this Date
 * @param {String} pattern フォーマット文字列
 * @return {String} フォーマット文字列に従って生成された文字列
 */
function format$1(pattern) {
// Date.prototype.$method('format', function(pattern) {
  var year    = this.getFullYear();
  var month   = this.getMonth();
  var date    = this.getDate();
  var day     = this.getDay();
  var hours   = this.getHours();
  var minutes = this.getMinutes();
  var seconds = this.getSeconds();
  var millseconds = this.getMilliseconds();
  
  var patterns = {
    'yyyy': padding.call(String(year), 4, '0'),
    // 'yyyy': String(year).padding(4, '0'),
    'yy': year.toString().substr(2, 2),
    'y': year,

    'MMMM': MONTH[month],
    'MMM': MONTH[month].substr(0, 3),
    'MM': padding.call(String(month+1), 2, '0'),
    // 'MM': String(month+1).padding(2, '0'),
    'M': (month+1),

    'dd': padding.call(String(date), 2, '0'),
    // 'dd': String(date).padding(2, '0'),
    'd': date,

    'EEEE': WEEK[day],
    'EEE': WEEK[day].substr(0, 3),

    'HH': padding.call(String(hours), 2, '0'),
    // 'HH': String(hours).padding(2, '0'),
    'H': hours,

    'mm': padding.call(String(minutes), 2, '0'),
    // 'mm': String(minutes).padding(2, '0'),
    'm': minutes,

    'ss': padding.call(String(seconds), 2, '0'),
    // 'ss': String(seconds).padding(2, '0'),
    's': seconds,
    
    // // date
    // 'd': String('00' + date).slice(-2),
    // 'D': WEEK[day].substr(0, 3),
    // 'j': date,
    // 'l': WEEK[day],
    
    // // month
    // 'm': String('00' + (month+1)).slice(-2),
    // 'M': MONTH[month].substr(0, 3),
    // 'n': (month+1),
    // 'F': MONTH[month],
    
    // // year
    // 'y': year.toString().substr(2, 2),
    // 'Y': year,
    
    // // time
    // 'G': hours,
    // 'H': String('00' + hours).slice(-2),
    // 'i': String('00' + minutes).slice(-2),
    // 's': String('00' + seconds).slice(-2),
    // 'S': String('000' + millseconds).slice(-3),
  };

  var regstr = '(' + Object.keys(patterns).join('|') + ')';
  var re = new RegExp(regstr, 'g');

  return pattern.replace(re, function(str) {
    return patterns[str];
  });
}

var dateExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  format: format$1
});

/**
 * @class global.Date
 * Dateクラスのstatic拡張
 */

/**
 * @method calculateAge
 * @static
 * 指定した誕生日から、現在または指定した日付における年齢を計算します。
 *
 * ###Reference
 * - [Javascriptで誕生日から現在の年齢を算出](http://qiita.com/n0bisuke/items/dd537bd4cbe9ab501ce8)
 *
 * ### Example
 *     Date.calculateAge("1990-01-17"); // => 26 など
 *
 * @param {String|Date} birthday 誕生日
 * @param {String|Date} [when=本日] 基準の日付
 * @return {Number} 年齢
 */
function calculateAge(birthday, when) {
// Date.$method('calculateAge', function(birthday, when) {
  // birthday
  if (typeof birthday === 'string') {
    birthday = new Date(birthday);
  }
  // when
  if (!when) {
    when = new Date();
  }
  else if (typeof when === 'string') {
    when = new Date(when);
  }

  var bn = new Date(birthday.getTime()).setFullYear(256);
  var wn = new Date(when.getTime()).setFullYear(256);
  var step = (wn < bn) ? 1 : 0;

  return (when.getFullYear() - birthday.getFullYear()) - step;
}

var dateStaticExtensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  calculateAge: calculateAge
});

/**
 * MouseEvent/Touch拡張
 * マウスのX座標.
 */
var pointX = {
  /** @this {MouseEvent|Touch} */
  get: function() {
    return this.clientX - /** @type {HTMLElement} */(this.target).getBoundingClientRect().left;
  }
};

/**
 * MouseEvent/Touch拡張
 * マウスのY座標.
 */
var pointY = {
  /** @this {MouseEvent|Touch} */
  get: function() {
    return this.clientY - /** @type {HTMLElement} */(this.target).getBoundingClientRect().top;
  }
};

/**
 * TouchEvent拡張
 * タッチイベントのX座標.
 */
var touchPointX = {
  /** @this {TouchEvent} */
  get: function() {
    return this.touches[0].clientX - /** @type {HTMLElement} */(this.target).getBoundingClientRect().left;
    // return this.touches[0].pageX - this.target.getBoundingClientRect().left - tm.global.scrollX;
  }
};

/**
 * TouchEvent拡張
 * タッチイベントのY座標.
 */
var touchPointY = {
  /** @this {TouchEvent} */
  get: function() {
    return this.touches[0].clientY - /** @type {HTMLElement} */(this.target).getBoundingClientRect().top;
    // return this.touches[0].pageY - this.target.getBoundingClientRect().top - tm.global.scrollY;
  }
};

/**
 * global.Event
 * 既存のEventオブジェクト拡張
 */

/**
 * @method stop
 * イベントのデフォルト処理 & 伝達を止める
 */
function stop() {
  // イベントキャンセル
  this.preventDefault();
  // イベント伝達を止める
  this.stopPropagation();
}


// ;(function() {

  // if (!phina.global.Event) return ;

  /**
   * @class global.Event
   * 既存のEventオブジェクト拡張
   */
    
  // /**
  //  * @method stop
  //  * イベントのデフォルト処理 & 伝達を止める
  //  */
  // Event.prototype.stop = function() {
  //   // イベントキャンセル
  //   this.preventDefault();
  //   // イベント伝達を止める
  //   this.stopPropagation();
  // };

// })();


// (function() {

//   if (!phina.global.MouseEvent) return ;

//   /**
//    * @class global.MouseEvent
//    * MouseEvent クラス
//    */
  
//   /**
//    * @method    pointX
//    * マウスのX座標.
//    */
//   MouseEvent.prototype.getter("pointX", function() {
//     return this.clientX - this.target.getBoundingClientRect().left;
//     // return this.pageX - this.target.getBoundingClientRect().left - window.scrollX;
//   });
  
//   /**
//    * @method    pointY
//    * マウスのY座標.
//    */
//   MouseEvent.prototype.getter("pointY", function() {
//     return this.clientY - this.target.getBoundingClientRect().top;
//     // return this.pageY - this.target.getBoundingClientRect().top - window.scrollY;
//   });
    
// })();


// (function() {
    
//   if (!phina.global.TouchEvent) return ;
  
  
//   /**
//    * @class global.TouchEvent
//    * TouchEvent クラス
//    */
  
//   /**
//    * @method    pointX
//    * タッチイベント.
//    */
//   TouchEvent.prototype.getter("pointX", function() {
//       return this.touches[0].clientX - this.target.getBoundingClientRect().left;
//       // return this.touches[0].pageX - this.target.getBoundingClientRect().left - tm.global.scrollX;
//   });
  
//   /**
//    * @method    pointY
//    * タッチイベント.
//    */
//   TouchEvent.prototype.getter("pointY", function() {
//       return this.touches[0].clientY - this.target.getBoundingClientRect().top;
//       // return this.touches[0].pageY - this.target.getBoundingClientRect().top - tm.global.scrollY;
//   });  
    
// })();


// (function() {
    
//   if (!phina.global.Touch) return ;
  
//   /**
//    * @class global.Touch
//    * TouchEvent クラス
//    */
  
//   /**
//    * @method    pointX
//    * タッチイベント.
//    */
//   Touch.prototype.getter("pointX", function() {
//       return this.clientX - this.target.getBoundingClientRect().left;
//   });

//   /**
//    * @method    pointY
//    * タッチイベント.
//    */
//   Touch.prototype.getter("pointY", function() {
//       return this.clientY - this.target.getBoundingClientRect().top;
//   });
    
// })();

/** @typedef {"Object"|"Array"|"ArrayStatic"|"Math"|"String"|"Number"|"Date"|"DateStatic"} ExtendableObjectType */
/** @typedef {{ [key in ExtendableObjectType]: any } } ObjectTypeMapForExtension */
/** @typedef {{ [key in ExtendableObjectType]: Function | import('./phina').AccessorExtendObject | number | string }} ExtensionMethodMap */

/**
 * カスタムメソッドを定義
 * @param {any} obj
 * @param {string} methodName
 * @param {function} func
 */
function _defineMethod(obj, methodName, func) {
  return $method.call(obj, methodName, func);
  // Object.defineProperty(obj, methodName, {
  //   value: func,
  //   enumerable: false,
  //   writable: true
  // })
}

/**
 * カスタムアクセサを定義
 * @param {any} obj
 * @param {string} accessorName
 * @param {import('./phina').AccessorExtendObject} extendObj
 */
function _defineAccessor(obj, accessorName, extendObj) {
  return accessor.call(obj, accessorName, extendObj);
}

/**
 * 汎用オブジェクト拡張関数
 * @param {any} targetObj 対象ビルトインオブジェクト ex) Array.prototype
 * @param {ExtensionMethodMap} extensionMap
 */
function _extend(targetObj, extensionMap) {
  Object.keys(extensionMap).forEach((key) => {
    var value = extensionMap[key];
    if (typeof value === "function") {
      _defineMethod(targetObj, key, value);
    } else if (typeof value === "object" && (value.get || value.set)) {
      _defineAccessor(targetObj, key, value);
    } else {
      // その他static値、Math.DEG_TO_RADなど
      targetObj[key] = value;
    }
  });
}

/**
 * オブジェクト名称 <-> 実際のオブジェクト
 * @type {ObjectTypeMapForExtension}
 */
var ExtendableObjectTypeMap = {
  Object: Object.prototype,
  Array: Array.prototype,
  ArrayStatic: Array,
  Math: Math, // MathはStaticのみ
  String: String.prototype,
  Number: Number.prototype,
  Date: Date.prototype,
  DateStatic: Date,
};

/**
 * オブジェクト名称 <-> 拡張メソッドマップ
 * @type {ObjectTypeMapForExtension}
 * */
var ExtensionTypeMap = {
  Object: objectExtensions,
  Array: arrayExtensions,
  ArrayStatic: arrayStaticExtensions,
  Math: mathExtensions,
  String: stringExtensions,
  Number: numberExtensions,
  Date: dateExtensions,
  DateStatic: dateStaticExtensions,
};

/**
 * Objectなどの標準組み込みオブジェクトの拡張を行う
 * - 引数無指定では全ての拡張を行う
 * - 拡張したいオブジェクト、メソッドを文字列で指定することも可能
 *
 * @example
 * // 全拡張（従来のphina.jsの状態）
 * extendBuiltInObject();
 *
 * // Numberオブジェクトの一部メソッドだけ拡張
 * extendBuiltInObject("Number", ["clamp", "upto"]);
 *
 * @param {ExtendableObjectType} [objectType] "Array"などの対象オブジェクト文字列
 * @param {string[]} [methodNameList] メソッド名文字列
 * @returns {void}
 */
function extendBuiltInObject(objectType, methodNameList) {
  if (!objectType) {
    // 拡張全てを一括で行う
    Object.keys(ExtendableObjectTypeMap).forEach((objType) => {
      _extend(ExtendableObjectTypeMap[objType], ExtensionTypeMap[objType]);
    });
    // _extend(Object.prototype, objectExtensions);
    // _extend(Array.prototype, arrayExtensions);
    // _extend(Array, arrayStaticExtensions);
    // _extend(String.prototype, stringExtensions);
    // _extend(Number.prototype, numberExtensions);
    // _extend(Math, mathExtensions);
    // _extend(Date.prototype, dateExtensions);
    // _extend(Date, dateStaticExtensions);
  } else {
    // 個別拡張
    var targetObject = ExtendableObjectTypeMap[objectType];
    if (!targetObject) {
      // `${objectType}は拡張可能対象ではありません`
      return;
    }
    if (methodNameList) {
      const exts = ExtensionTypeMap[objectType];

      /** @type ExtensionMethodMap */
      const methodMap = Object.create(null);
      methodNameList.forEach((methodName) => {
        if (!exts[methodName]) {
          // TODO: no method error
          return;
        }
        methodMap[methodName] = exts[methodName];
      });

      _extend(targetObject, methodMap);
    } else {
      // targetObjectの拡張全てを行う
      const exts = ExtensionTypeMap[objectType];
      _extend(targetObject, exts);
    }
  }
}

/**
 * dom/Event 一括拡張用メソッド
 */
function extendEventObject() {
  const getter$1 = getter;

  [MouseEvent, Touch].forEach((eventObject) => {
    getter$1.call(eventObject.prototype, "pointX", pointX.get);
    getter$1.call(eventObject.prototype, "pointY", pointY.get);
  });

  getter$1.call(TouchEvent.prototype, "pointX", touchPointX.get);
  getter$1.call(TouchEvent.prototype, "pointY", touchPointY.get);

  _defineMethod(Event.prototype, "stop", stop);
}

/**
 * カスタムイベントの基本パラメータ  
 * @typedef {Object} BasicEventObject
 * @property {string} type イベント名
 * @property {any} [target] イベント対象
 */

/**
 * イベントリスナとなる関数  
 * thisの参照は呼び出したオブジェクト自身となる
 * @callback PhinaEventHandler
 * @param {BasicEventObject & {[key:string]:any}} event BasicEventObjectに加え、自身で付け加えたデータをパラメータとして渡すことができる
 * @typedef {PhinaEventHandler} PhinaEventListener
 */

/**
 * @class phina.util.EventDispatcher
 * 
 * # イベントを扱うためのクラス
 * イベントを扱うためのメソッドやプロパティを定義しているクラスです。
 * phina.js が提供するクラスの多くはこの EventDispatcher クラスのサブクラスとなっているため、
 * ほとんどのクラスで容易にイベントを扱うことができます。
 *
 * 当クラスに`onhoge`のように`on~`という名前でメソッドを定義することで
 * イベントリスナを設定することもできるが、あまり推奨されない。
 * 呼び出される順序は、まずon~関数が呼び出され、その後 `on`メソッド で登録した順番。
 * 
 * @memberof phina
 */
class EventDispatcher {

  constructor() {
    /**
     * @private
     * @type {{[k: string]: PhinaEventHandler[]}}
     */
    this._listeners = {};
  }

  /**
   * イベントリスナを登録します。
   * 登録したイベントリスナは{@link #flare} や {@link #fire}を
   * 介して実行（発火）することができます。
   *
   * １つのイベントに対するイベントリスナはいくつでも登録することができます。
   *
   * いくつかのサブクラスについてはライブラリが特定条件下で発火するイベントがあります。
   * 例えば {@link #Object2D} クラスを継承したクラスではユーザーインタラクションに対して
   * "pointstart"などのイベントが発火されます。
   *
   * @example
   * const myObj = new EventDispatcher();
   * myObj.on("myevent", ()=> {
   *   console.log("Event 1");
   * });
   * myObj.on("myevent", ()=> {
   *   console.log("Event 2");
   * });
   * // イベント発火
   * myObj.flare("myevent"); // "Event 1" "Event 2"
   * 
   * @example
   * // thisはアクティブなSceneクラスのインスタンス
   * const shape = new CircleShape()
   *   .addChildTo(this)
   *   .setInteractive(true) // interactiveプロパティをtrueにする
   *   .setPosition(50, 50);
   * shape.on("pointstart", function(e) {
   *   console.log("Pointed shape");
   * });
   *
   * @chainable
   * 
   * @param {string} type イベントの種類
   * @param {PhinaEventHandler} listener イベントリスナとなる関数
   * @returns {this}
   */
  on(type, listener) {
    if (this._listeners[type] === undefined) {
      this._listeners[type] = [];
    }

    this._listeners[type].push(listener);
    return this;
  }

  /**
   * イベントリスナを削除します。
   * 
   * ある種類のイベントに対するイベントリスナをすべて削除するには {@link #clearEventListener} を使用してください。
   * 
   * @example
   * const myObj = new EventDispatcher();
   * const eventHandler = ()=> {
   *   console.log("Event fired!");
   * })
   * myObj.on("myevent", eventHandler);
   * 
   * // イベント発火
   * myObj.flare("myevent"); // "Event fired!"
   * 
   * // イベント削除
   * myObj.off("myevent", eventHandler);
   * 
   * @chainable
   * 
   * @param {string} type イベントの種類
   * @param {PhinaEventHandler} listener イベントリスナ関数
   * @returns {this}
   */
  off(type, listener) {
    var listeners = this._listeners[type];
    var index = listeners.indexOf(listener);
    if (index != -1) {
      listeners.splice(index,1);
    }
    return this;
  }

  /**
   * イベントパラメータオブジェクトを指定してイベントを発火します。
   * {@link #flare} の内部処理で使用、単独で使用することは稀
   * 
   * @example
   * const myObj = new EventDispatcher();
   * const fireParam = {type: "myevent"}
   * myObj.on("myevent", (e)=> {
   *   console.log(e); // {type: "myevent", target: myObj}
   *   console.log(e === fireParam); // -> true
   * });
   * 
   * myObj.fire(fireParam)
   * 
   * @chainable
   *
   * @param {BasicEventObject} e イベントパラメータオブジェクト
   * @returns {this}
   */
   fire(e) {
    e.target = this;
    var oldEventName = 'on' + e.type;
    if (this[oldEventName]) this[oldEventName](e);

    var listeners = this._listeners[e.type];
    if (listeners) {
      // var temp = listeners.clone();
      var temp = listeners.slice(0);
      for (var i=0,len=temp.length; i<len; ++i) {
          temp[i].call(this, e);
      }
    }

    return this;
  }

  /**
   * イベント名を指定してカスタムイベントを発火します。
   *
   * param 引数を指定することによりカスタムイベントに任意のプロパティを設定することができます。
   * これにより、呼び出し元がイベントリスナに任意の値を渡すことができます。
   * （ただし target プロパティには必ず自分自身が格納されます。）
   *
   * @example
   * const myObj = new EventDispatcher();
   * myObj.on("myevent", (e)=> {
   *   console.log(e); // {type: "myevent", target: myObj, foo: "foo"}
   * });
   * 
   * myObj.flare("myevent", {foo: "foo"});
   * 
   * @chainable
   *
   * @param {string} type カスタムイベントの名前
   * @param {any} [param] カスタムイベントにプロパティを設定するためのオブジェクト
   * @returns {this}
  */
  flare(type, param) {
    var e = {type:type};
    if (param) {
      forIn.call(param, function(key, val) {
      // param.forIn(function(key, val) {
        e[key] = val;
      });
    }
    this.fire(e);

    return this;
  }

  /**
   * 一度だけ実行されるイベントリスナを登録します。
   * 指定したイベントリスナが一度実行されると、そのイベントリスナは削除されます。
   * それ以外の挙動は {@link #on} と同じです。
   * 
   * @example
   * const myObj = new EventDispatcher();
   * myObj.one("fireonce", (e)=> {
   *   console.log("Event fired!");
   * });
   * 
   * myObj.flare("fireonce"); // "Event fired!"
   * myObj.flare("fireonce"); // イベントリスナは削除されているため、何も起きません
   * 
   * @chainable
   *
   * @param {string} type イベントの種類
   * @param {PhinaEventHandler} listener イベントリスナとなる関数
   * @returns {this}
   */
  one(type, listener) {
    var self = this;

    var func = function() {
      var result = listener.apply(self, arguments);
      self.off(type, func);
      return result;
    };

    this.on(type, func);

    return this;
  }

  /**
   * イベントリスナが登録されているかどうかを調べます。
   * 
   * 指定したイベントの種類に対するイベントリスナが登録されている場合は true、
   * そうでない場合は false を返します。
   *
   * @example
   * const myObj = new EventDispatcher();
   * myObj.on("myevent", (e)=> {
   *   console.log("Event fired!");
   * });
   * 
   * myObj.has("myevent"); // true
   * myObj.has("otherevent"); // false
   * 
   * @param {string} type イベントの種類
   * @return {boolean} 指定したイベントのイベントリスナが登録されているかどうか
   */
  has(type) {
    return (this._listeners[type] !== undefined && this._listeners[type].length !== 0) || !!this['on' + type];
  }

  /**
   * ある種類のイベントに対するイベントリスナをすべて削除します。
   *
   * 特定のイベントリスナのみを削除するには {@link #off} を使用してください。
   * 
   * @example
   * const myObj = new EventDispatcher();
   * myObj.on("myevent", (e)=> {
   *   console.log("Event fired!");
   * });
   * 
   * myObj.clearEventListener("myevent");
   * myObj.flare("myevent"); // イベントリスナは削除されているため、何も起きません
   * 
   * @chainable
   * 
   * @param {string} type イベントの種類
   * @returns {this}
   */
  clearEventListener(type) {
    var oldEventName = 'on' + type;
    if (this[oldEventName]) delete this[oldEventName];
    this._listeners[type] = [];
    return this;
  }
}

/**
 * 従来のclearメソッドも追加定義
 * サブクラス（Tweenerクラス等）でclearがオーバーライドされる場合、clearListenersを使用する
 */
$method.call(EventDispatcher.prototype, "clear", function(type) {
  // deprecatedメッセージ表示？
  return this.clearEventListener(type);
});

/**
 * @method addEventListener
 * {@link #on} のエイリアスです。
 */
/**
 * @method removeEventListener
 * {@link #off} のエイリアスです。
 */
/**
 * @method clearEventListener
 * {@link #clear} のエイリアスです。
 */
/**
 * @method hasEventListener
 * {@link #has} のエイリアスです。
 */
/**
 * @method dispatchEvent
 * {@link #fire} のエイリアスです。
 */
/**
 * @method dispatchEventByType
 * {@link #flare} のエイリアスです。
 */
const methodMap = {
  addEventListener: 'on',
  removeEventListener: 'off',
  hasEventListener: 'has',
  dispatchEvent: 'fire',
  dispatchEventByType: 'flare',
};
// methodMap.forIn(function(old, name) {
forIn.call(methodMap, function(old, name) {
  // EventDispatcher.prototype.$method(old, phina.util.EventDispatcher.prototype[name]);
  $method.call(EventDispatcher.prototype, old, EventDispatcher.prototype[name]);
});

/**
 * @class phina.util.Flow
 * tick management class
 * _extends phina.util.EventDispatcher
 */
class Flow extends EventDispatcher {

  /**
   * @constructor
   * @param {{ (resolve: Function, reject: Function): void; }} func
   * @param {boolean} [wait]
   */
  constructor(func, wait) {
    super();

    /** @type {"pending" | "resolved" | "rejected"} */
    this.status = 'pending';

    /** @type {any} */
    this.resultValue = null;

    /** @type {Function[]} */
    this._queue = [];

    this.func = func;

    if (wait !== true) {
      var self = this;
      var resolve = function() {
        self.resolve.apply(self, arguments);
        self.status = 'resolved';
      };
      var reject = function() {
        self.reject.apply(self, arguments);
        self.status = 'rejected';
      };

      this.func(resolve, reject);
    }
  }

  /**
   * @private おそらく
   * 成功
   */
  resolve(arg) {
    this.resultValue = arg;

    // キューに積まれた関数を実行
    this._queue.forEach(function(func) {
      func(this.resultValue);
    }, this);
    // this._queue.clear();
    clear.call(this._queue);
  }

  /**
   * @private おそらく
   * 失敗
   */
  reject() {

  }

  /**
   * 非同期終了時の処理を登録
   * @param {{(result: any): any}} func
   * @returns {Flow}
   */
  then(func) {
    // 成功ステータスだった場合は即実行
    if (this.status === 'resolved') {
      var value = func(this.resultValue);
      return Flow.resolve(value);
    }
    else {
      var flow = new Flow(function(resolve) {
        resolve();
      }, true);

      this._queue.push(function(arg) {
        var resultValue = func(arg);

        if (resultValue instanceof Flow) {
          resultValue.then(function(value) {
            flow.resolve(value);
          });
        }
        else {
          flow.resolve(resultValue);
        }
      });

      return flow;
    }
  }

  /**
   * @param {Flow | any} value
   * @returns {Flow}
   */
  static resolve(value) {
    if (value instanceof Flow) {
      return value;
    }
    else {
      var flow = new Flow(function(resolve) {
        resolve(value);
      });
      return flow;
    }
  }

  /**
   * @param {Flow[]} flows
   * @returns {Flow}
   */
  static all(flows) {
    return new Flow(function(resolve) {
      var count = 0;

      var args = [];

      flows.forEach(function(flow) {
        flow.then(function(d) {
          ++count;
          args.push(d);

          if (count >= flows.length) {
            resolve(args);
          }
        });
      });
    });
  }

}

/**
 * @class phina.util.Ticker
 * tick management class
 * _extends phina.util.EventDispatcher
 */
class Ticker extends EventDispatcher {

  // /** 経過フレーム数 */
  // frame = null

  // /** 1フレームの経過時間 */
  // deltaTime = null
  
  // /** 全体の経過時間 */
  // elapsedTime = null

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * @private
     * @type {number}
     */
    this._fps;

    this.fps = 30;
    this.frame = 0;
    this.deltaTime = 0;
    this.elapsedTime = 0;
    this.isPlaying = true;
    this.runner = Ticker.runner;
  }

  /**
   * ティック処理毎に実行されるイベントハンドラを設定
   * @param {import("./eventdispatcher").PhinaEventListener} func 
   */
  tick(func) {
    this.on('tick', func);
  }

  /**
   * イベントハンドラを解除
   * @param {import("./eventdispatcher").PhinaEventListener} func 
   */
  untick(func) {
    this.off('tick', func);
  }

  /**
   * 経過時間を計測・記録しながらティック処理（アプリ更新処理）を行う
   * @returns {number} 次の更新処理までの待ち時間
   */
  run() {
    var now = (new Date()).getTime();
    // 1フレームに掛かった時間
    this.deltaTime = now - this.currentTime;
    // 全体の経過時間
    this.elapsedTime = now - this.startTime;

    var start = this.currentTime = now;
    this.flare('tick');
    var end = (new Date()).getTime();

    // フレームを更新
    this.frame += 1;

    // calculate elapsed time
    var elapsed = end-start;

    // calculate next waiting time
    var delay = Math.max(this.frameTime-elapsed, 0);

    return delay;
  }

  start() {
    var self = this;
    this.isPlaying = true;
    this.startTime = this.currentTime = (new Date()).getTime();
    var fn = function() {
      if (self.isPlaying) {
        var delay = self.run();
        self.runner(fn, delay);
      }
    };
    fn();

    return this;
  }

  resume() {
    // TODO: 
  }

  stop() {
    this.isPlaying = false;
    return this;
  }

  rewind() {
    // TODO: 
  }

  get fps() { return this._fps; }
  set fps(v) {
    this._fps = v;
    this.frameTime = 1000/this._fps;
  }

  /**
   * @param {TimerHandler} run
   * @param {number} delay
   */
  static runner(run, delay) {
    setTimeout(run, delay);
  }
  
}

/**
 * @class phina.util.Random
 * # 乱数を扱うためのクラス
 * 乱数を扱うためのメソッドやプロパティを定義しているクラスです。
 */
class Random {

  /**
   * @constructor
   * コンストラクタです。引数で {@link #seed} を設定できます。
   * 
   * @param {Number} [seed = (Date.now()) || 1] シード
   */
  constructor(seed) {
    /**
     * @private
     * @type {number}
     */
    this._seed;

    /**
     * @property {Number} [seed = 1]
     * 乱数のシードです。
     */
    this.seed = seed || (Date.now()) || 1;
  }

  /**
   * @method random
   * 0~1の乱数を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @return {Number} 0~1 の乱数
   */
  random() {
    var seed = this.seed;
    seed = seed ^ (seed << 13);
    seed = seed ^ (seed >>> 17);
    seed = (seed ^ (seed << 5));

    this.seed = seed;

    return (seed >>> 0) / Random.MAX;
  }

  /**
   * @method randint
   * 指定された範囲内でランダムな整数値を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな整数値
   */
  randint(min, max) {
    return Math.floor( this.random()*(max-min+1) ) + min;
  }

  /**
   * @method randfloat
   * 指定された範囲内でランダムな数値を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな数値
   */
  randfloat(min, max) {
    return this.random()*(max-min)+min;
  }

  /**
   * @method randbool
   * ランダムな真偽値を返します。引数で百分率を指定できます。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} [percent = 50] 真になる百分率
   * @return {Boolean} ランダムな真偽値
   */
  randbool(percent) {
    return this.random() < (percent === undefined ? 50 : percent) / 100;
  }

  /**
   * @method randarray
   * 任意の範囲でランダムな整数値を格納した任意の長さの配列を返します。実行すると {@link #seed} は変わってしまいます。
   * 
   * @param {Number} [len = 100] 配列の長さ
   * @param {Number} [min = 0] 範囲の最小値
   * @param {Number} [max = 100] 範囲の最大値
   * @return {Number} ランダムな整数値の入った配列
   */
  randarray(len, min, max) {
    len = len || 100;
    min = min || 0;
    max = max || 100;

    return map.call(len, function() {
    // return (len).map(function() {
      return this.randint(min, max);
    }, this);
  }

  get seed() { return this._seed; }
  set seed(v) { this._seed = (v >>> 0) || 1; }

  /**
   * @method getSeed 
   * {@link #seed} の値を取得します。
   * 
   * @return {Number} シード
   * @static
   */
  static getSeed() {
    return this.seed;
  }

  /**
   * @method setSeed
   * {@link #seed} の値をセットします。
   * 
   * @param {Number} [seed = 1] シード
   * @static
   * @chainable
   */
  static setSeed(seed) {
    this.seed = (seed >>> 0) || 1;
    return this;
  }

  /**
   * @method random
   * 0~1の乱数を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #random} と同じです。
   * 
   * @return {Number} 0~1 の乱数
   * @static
   */
  static random() {
    this.seed = this.xor32(this.seed);
    return (this.seed >>> 0) / this.MAX;
  }

  /**
   * @method randint
   * 指定された範囲内でランダムな整数値を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randint} と同じです。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな整数値
   * @static
   */
  static randint(min, max) {
    return phina.global.Math.floor( this.random()*(max-min+1) ) + min;
  }

  /**
   * @method randfloat
   * 指定された範囲内でランダムな数値を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randfloat} と同じです。
   * 
   * @param {Number} min 範囲の最小値
   * @param {Number} max 範囲の最大値
   * @return {Number} ランダムな数値
   * @static
   */
  static randfloat(min, max) {
    return this.random()*(max-min)+min;
  }

  /**
   * @method randbool
   * ランダムな真偽値を返します。引数で百分率を指定できます。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randbool} と同じです。
   * 
   * @param {Number} [percent = 50] 真になる百分率
   * @return {Boolean} ランダムな真偽値
   * @static
   */
  static randbool(percent) {
    return this.randint(0, 99) < (percent || 50);
  }

  /**
   * @method randarray
   * 任意の範囲でランダムな整数値を格納した任意の長さの配列を返します。実行すると {@link #seed} は変わってしまいます。
   * インスタンスメソッドの {@link #randarray} と同じです。
   * 
   * @param {Number} [len = 100] 配列の長さ
   * @param {Number} [min = 0] 範囲の最小値
   * @param {Number} [max = 100] 範囲の最大値
   * @return {Number} ランダムな整数値の入った配列
   * @static
   */
  static randarray(len, min, max) {
    len = len || 100;
    min = min || 0;
    max = max || 100;

    return map.call(len, function() {
    // return (len).map(function() {
      return this.randint(min, max);
    }, this);
  }


  /**
   * @method xor32
   * xorshift を用いて疑似乱数列を生成します。
   * 
   * @param {Number} seed
   * @return {Number} 疑似乱数列
   * @static
   */
  static xor32(seed) {
    seed = seed ^ (seed << 13);
    seed = seed ^ (seed >>> 17);
    seed = (seed ^ (seed << 5));

    return seed;
  }

  /**
   * @method uuid
   * uuid を生成して返します。
   * 
   * @return {String} uuid
   * @static
   */
  //http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
  static uuid() {
    var d = new Date().getTime();
    if(phina.global.performance && typeof phina.global.performance.now === 'function'){
      d += performance.now(); //use high-precision timer if available
    }
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = (d + Math.random()*16)%16 | 0;
      d = Math.floor(d/16);
      return (c=='x' ? r : (r&0x3|0x8)).toString(16);
    });
    return uuid;
  }

}

/**
 * @property {Number} MAX
 * 内部的に使用される定数です。
 * 
 * @static
 */
Random.MAX = 4294967295;

/**
 * @property {Number} [seed = (Date.now())] シード
 * static メソッドの乱数のシードです。
 * 
 * @static
 */
Random.seed = (Date.now());


// prototype拡張はしない
// Math.$method("randint", function(min, max) {
//   return phina.util.Random.randint(min, max);
// });

// Math.$method("randfloat", function(min, max) {
//   return phina.util.Random.randfloat(min, max);
// });

/**
 * @class phina.util.Support
 * 
 */
class Support {}Support.canvas = !!phina.global.CanvasRenderingContext2D;
Support.webGL = (function() {
  return !!phina.global.CanvasRenderingContext2D && !!document.createElement('canvas').getContext('webgl');
})();
Support.webAudio = !!phina.global.AudioContext || !!phina.global['webkitAudioContext'] || !!phina.global['mozAudioContext'];

/**
 * @typedef {{
 *  width?: number;
 *  columns?: number;
 *  loop?: boolean;
 *  offset?: number;
 * }} GridOptions
 */

/**
 * @class phina.util.Grid
 */
class Grid {

  /**
   * @constructor
   * @param {GridOptions | number} _optionsOrWidth
   * @param {number} [_col]
   * @param {boolean} [_loop]
   * @param {number} [_offset]
   */
  constructor(_optionsOrWidth, _col, _loop, _offset) {
    var width, columns, loop, offset;
    if (typeof arguments[0] === 'object') {
      /** @type {GridOptions} */
      var param = arguments[0];
      width = param.width || 640;
      columns = param.columns || 12;
      loop = param.loop || false;
      offset = param.offset || 0;
    }
    else {
      width   = arguments[0] || 640;
      columns = arguments[1] || 12;
      loop    = arguments[2] || false;
      offset = arguments[3] || 0;
    }

    /** @type {number} 幅 */
    this.width = width;

    /** @type {number} 列数 */
    this.columns = columns;

    /** @type {boolean} span指定時にループするかどうか */
    this.loop = loop;

    /** @type {number} オフセット値 */
    this.offset = offset;

    /** @type {number} グリッド単位値 */
    this.unitWidth = this.width/this.columns;
  }

  /**
   * スパン指定で値を取得(負数もok)
   * @param {number} index
   * @returns {number}
   */
  span(index) {
    if (this.loop) {
      index += this.columns;
      index %= this.columns;
    }
    return this.unitWidth * index + this.offset;
  }

  /**
   * グリッド単位を返す
   * @returns {number}
   */
  unit() {
    return this.unitWidth;
  }

  /**
   * @param {number} [offset] 中心からのずれを単位数で指定
   * @returns {number}
   */
  center(offset) {
    var index = offset || 0;
    return (this.width/2) + (this.unitWidth * index);
  }

}

/**
 * @typedef {keyof Tween.EASING} TweenEasingType イージングの種類を表す文字列
 */

/**
 * @class phina.util.Tween
 * _extends phina.util.EventDispatcher
 * 
 */
class Tween extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * @type {number}
     * tween経過時間
     */
    this.time = 0;

    /**
     * @private
     * @type {function|string}
     * 内部イージング関数
     * easingアクセサを介して使用  
     * setterがstring型を受け付けるのに対し、
     * getterはfunction型を返すため、とりあえず共用体とする
     */
    this._easing;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} beginProps
   * @param {{ [k: string]: any; }} finishProps
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  fromTo(target, beginProps, finishProps, duration, easing) {
    this.target = target;
    this.beginProps = beginProps;
    this.finishProps = finishProps;
    this.duration = duration || 1000;
    this.easing = easing;

    // setup
    this.changeProps = {};
    for (var key in beginProps) {
        this.changeProps[key] = finishProps[key] - beginProps[key];
    }

    return this;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} finishProps
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  to(target, finishProps, duration, easing) {
    var beginProps = {};

    for (var key in finishProps) {
      beginProps[key] = target[key];
    }

    this.fromTo(target, beginProps, finishProps, duration, easing);

    return this;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} beginProps
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  from(target, beginProps, duration, easing) {
      var finishProps = {};

      for (var key in beginProps) {
        finishProps[key] = target[key];
        target[key] = beginProps[key];
      }

      this.fromTo(target, beginProps, finishProps, duration, easing);

      return this;
  }

  /**
   * @param {any} target
   * @param {{ [k: string]: any; }} props
   * @param {number} duration
   * @param {TweenEasingType} easing
   * @returns {this}
   */
  by(target, props, duration, easing) {
    var beginProps = {};
    var finishProps = {};

    for (var key in props) {
      beginProps[key] = target[key];
      finishProps[key] = target[key] + props[key];
    }

    this.fromTo(target, beginProps, finishProps, duration, easing);

    return this;
  }

  /**
   * TODO
   */
  yoyo() {
    var temp = this.beginProps;
    this.beginProps = this.finishProps;
    this.finishProps = temp;
    // this.changeProps.forIn(function(key, value, index) {
    forIn.call(this.changeProps, function(key, value, _index) {
      this.changeProps[key] = -value;
      this.target[key] = this.beginProps[key];
    }, this);
    // TODO: easing も反転させる
    // this.easing = easing;
    return this;
  }

  /**
   * 指定値分、時間を進める
   * @alias forward
   * @param {number} time
   */
  gain(time) {
    this.seek(this.time + time);
  }

  /**
   * 指定値分、時間を進める
   * @alias gain
   * @param {number} time
   */
  forward(time) {
    this.seek(this.time + time);
  }

  /**
   * 指定値分、時間を戻す
   * @param {number} time
   */
  backward(time) {
    this.seek(this.time - time);
  }

  /**
   * 時間に応じてパラメータを更新
   * @param {number} time
   * @returns {this}
   */
  seek(time) {
    // this.time = Math.clamp(time, 0, this.duration);
    this.time = clamp(time, 0, this.duration);

    // this.beginProps.forIn(
    forIn.call(this.beginProps, 
    /** @this Tween */
    function(key, value) {
      var v = /** @type function */(this.easing)(this.time, value, this.changeProps[key], this.duration);
      this.target[key] = v;
    }, this);

    return this;
  }

  get easing() { return this._easing; }
  set easing(v) {
    this._easing = Tween.EASING[/**@type {string}*/(v)] || Tween.EASING.default;
  }

}

/**
 * @static
 * イージング
 * ### Reference
 * - <http://coderepos.org/share/wiki/JSTweener>
 * - <http://coderepos.org/share/browser/lang/javascript/jstweener/trunk/src/JSTweener.js>
 * - <http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js>
 * - <http://hosted.zeh.com.br/tweener/docs/en-us/misc/transitions.html>
 */
Tween.EASING = {

  /** default */
  "default": function(t, b, c, d) {
    return c*t/d + b;
  },
  /** linear */
  linear: function(t, b, c, d) {
    return c*t/d + b;
  },
  /** swing */
  swing: function(t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  },
  /** easeInQuad */
  easeInQuad: function(t, b, c, d) {
    return c*(t/=d)*t + b;
  },
  /** easeOutQuad */
  easeOutQuad: function(t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  },
  /** easeInOutQuad */
  easeInOutQuad: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t + b;
    return -c/2 *((--t)*(t-2) - 1) + b;
  },
  /** defeInCubic */
  easeInCubic: function(t, b, c, d) {
    return c*(t/=d)*t*t + b;
  },
  /** easeOutCubic */
  easeOutCubic: function(t, b, c, d) {
    return c*((t=t/d-1)*t*t + 1) + b;
  },
  /** easeInOutCubic */
  easeInOutCubic: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t*t + b;
    return c/2*((t-=2)*t*t + 2) + b;
  },
  /** easeOutInCubic */
  easeOutInCubic: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutCubic(t*2, b, c/2, d);
    return Tween.EASING.easeInCubic((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInQuart */
  easeInQuart: function(t, b, c, d) {
    return c*(t/=d)*t*t*t + b;
  },
  /** easeOutQuart */
  easeOutQuart: function(t, b, c, d) {
    return -c *((t=t/d-1)*t*t*t - 1) + b;
  },
  /** easeInOutQuart */
  easeInOutQuart: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t*t*t + b;
    return -c/2 *((t-=2)*t*t*t - 2) + b;
  },
  /** easeOutInQuart */
  easeOutInQuart: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutQuart(t*2, b, c/2, d);
    return Tween.EASING.easeInQuart((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInQuint */
  easeInQuint: function(t, b, c, d) {
    return c*(t/=d)*t*t*t*t + b;
  },
  /** easeOutQuint */
  easeOutQuint: function(t, b, c, d) {
    return c*((t=t/d-1)*t*t*t*t + 1) + b;
  },
  /** easeInOutQuint */
  easeInOutQuint: function(t, b, c, d) {
    if((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
    return c/2*((t-=2)*t*t*t*t + 2) + b;
  },
  /** easeOutInQuint */
  easeOutInQuint: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutQuint(t*2, b, c/2, d);
    return Tween.EASING.easeInQuint((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInSine */
  easeInSine: function(t, b, c, d) {
    return -c * Math.cos(t/d *(Math.PI/2)) + c + b;
  },
  /** easeOutSine */
  easeOutSine: function(t, b, c, d) {
    return c * Math.sin(t/d *(Math.PI/2)) + b;
  },
  /** easeInOutSine */
  easeInOutSine: function(t, b, c, d) {
    return -c/2 *(Math.cos(Math.PI*t/d) - 1) + b;
  },
  /** easeOutInSine */
  easeOutInSine: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutSine(t*2, b, c/2, d);
    return Tween.EASING.easeInSine((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInExpo */
  easeInExpo: function(t, b, c, d) {
    return (t==0) ? b : c * Math.pow(2, 10 *(t/d - 1)) + b - c * 0.001;
  },
  /** easeOutExpo */
  easeOutExpo: function(t, b, c, d) {
    return (t==d) ? b+c : c * 1.001 *(-Math.pow(2, -10 * t/d) + 1) + b;
  },
  /** easeInOutExpo */
  easeInOutExpo: function(t, b, c, d) {
    if(t==0) return b;
    if(t==d) return b+c;
    if((t/=d/2) < 1) return c/2 * Math.pow(2, 10 *(t - 1)) + b - c * 0.0005;
    return c/2 * 1.0005 *(-Math.pow(2, -10 * --t) + 2) + b;
  },
  /** easeOutInExpo */
  easeOutInExpo: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutExpo(t*2, b, c/2, d);
    return Tween.EASING.easeInExpo((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInCirc */
  easeInCirc: function(t, b, c, d) {
    return -c *(Math.sqrt(1 -(t/=d)*t) - 1) + b;
  },
  /** easeOutCirc */
  easeOutCirc: function(t, b, c, d) {
    return c * Math.sqrt(1 -(t=t/d-1)*t) + b;
  },
  /** easeInOutCirc */
  easeInOutCirc: function(t, b, c, d) {
    if((t/=d/2) < 1) return -c/2 *(Math.sqrt(1 - t*t) - 1) + b;
    return c/2 *(Math.sqrt(1 -(t-=2)*t) + 1) + b;
  },
  /** easeOutInCirc */
  easeOutInCirc: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutCirc(t*2, b, c/2, d);
    return Tween.EASING.easeInCirc((t*2)-d, b+c/2, c/2, d);
  },
  /** easeInElastic */
  easeInElastic: function(t, b, c, d, a, p) {
    var s;
    if(t==0) return b;  if((t/=d)==1) return b+c;  if(!p) p=d*.3;
    if(!a || a < Math.abs(c)) { a=c; s=p/4; } else s = p/(2*Math.PI) * Math.asin(c/a);
    return -(a*Math.pow(2,10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )) + b;
  },
  /** easeOutElastic */
  easeOutElastic: function(t, b, c, d, a, p) {
    var s;
    if(t==0) return b;  if((t/=d)==1) return b+c;  if(!p) p=d*.3;
    if(!a || a < Math.abs(c)) { a=c; s=p/4; } else s = p/(2*Math.PI) * Math.asin(c/a);
    return(a*Math.pow(2,-10*t) * Math.sin((t*d-s)*(2*Math.PI)/p ) + c + b);
  },
  /** easeInOutElastic */
  easeInOutElastic: function(t, b, c, d, a, p) {
    var s;
    if(t==0) return b;  if((t/=d/2)==2) return b+c;  if(!p) p=d*(.3*1.5);
    if(!a || a < Math.abs(c)) { a=c; s=p/4; }       else s = p/(2*Math.PI) * Math.asin(c/a);
    if(t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )) + b;
    return a*Math.pow(2,-10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )*.5 + c + b;
  },
  /** easeOutInElastic */
  easeOutInElastic: function(t, b, c, d, a, p) {
    if(t < d/2) return Tween.EASING.easeOutElastic(t*2, b, c/2, d, a, p);
    return Tween.EASING.easeInElastic((t*2)-d, b+c/2, c/2, d, a, p);
  },
  /** easeInBack */
  easeInBack: function(t, b, c, d, s) {
    if(s == undefined) s = 1.70158;
    return c*(t/=d)*t*((s+1)*t - s) + b;
  },
  /** easeOutBack */
  easeOutBack: function(t, b, c, d, s) {
    if(s == undefined) s = 1.70158;
    return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
  },
  /** easeInOutBack */
  easeInOutBack: function(t, b, c, d, s) {
    if(s == undefined) s = 1.70158;
    if((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
    return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
  },
  /** easeOutInBack */
  easeOutInBack: function(t, b, c, d, s) {
    if(t < d/2) return Tween.EASING.easeOutBack(t*2, b, c/2, d, s);
    return Tween.EASING.easeInBack((t*2)-d, b+c/2, c/2, d, s);
  },
  /** easeInBounce */
  easeInBounce: function(t, b, c, d) {
    return c - Tween.EASING.easeOutBounce(d-t, 0, c, d) + b;
  },
  /** easeOutBounce */
  easeOutBounce: function(t, b, c, d) {
    if((t/=d) <(1/2.75)) {
      return c*(7.5625*t*t) + b;
    } else if(t <(2/2.75)) {
      return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
    } else if(t <(2.5/2.75)) {
      return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
    } else {
      return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
    }
  },
  /** easeInOutBounce */
  easeInOutBounce: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeInBounce(t*2, 0, c, d) * .5 + b;
    else return Tween.EASING.easeOutBounce(t*2-d, 0, c, d) * .5 + c*.5 + b;
  },
  /** easeOutInBounce */
  easeOutInBounce: function(t, b, c, d) {
    if(t < d/2) return Tween.EASING.easeOutBounce(t*2, b, c/2, d);
    return Tween.EASING.easeInBounce((t*2)-d, b+c/2, c/2, d);
  }

};

/**
 * @class phina.util.QueryString
 * 
 */
class QueryString {

  /**
   * @param {string} [text] 無指定のときは現在ページのURLを対象とする
   * @param {string} [sep="&"] セパレータ
   * @param {string} [eq="="] 
   * @param {boolean} [isDecode] decodeURIComponentによるデコードを行うかどうか
   * @returns {Object}
   */
  static parse(text, sep, eq, isDecode) {
    text = text || location.search.substr(1);
    sep = sep || '&';
    eq = eq || '=';
    var decode = (isDecode) ? decodeURIComponent : function(a) { return a; };
    return text.split(sep).reduce(function(obj, v) {
      var pair = v.split(eq);
      obj[pair[0]] = decode(pair[1]);
      return obj;
    }, {});
  }

  /**
   * @param {Object} value
   * @param {string} [sep="&"]
   * @param {string} [eq="="]
   * @param {boolean} [isEncode] encodeURIComponentによるエンコードを行うかどうか
   * @returns {string}
   */
  static stringify(value, sep, eq, isEncode) {
    sep = sep || '&';
    eq = eq || '=';
    var encode = (isEncode) ? encodeURIComponent : function(a) { return a; };
    return Object.keys(value).map(function(key) {
      return key + eq + encode(value[key]);
    }).join(sep);
  }
  
}

/**
 * @class phina.util.Color
 * カラークラス
 */
class Color {

  /**
   * @param {number} _r
   * @param {number} _g
   * @param {number} _b
   * @param {number} _a
   */
  constructor(_r, _g, _b, _a) {
    /** @type {number} R値 */
    this.r = 255;

    /** @type {number} G値 */
    this.g = 255;

    /** @type {number} B値 */
    this.b = 255;

    /** @type {number} A値 */
    this.a = 1.0;

    this.set.apply(this, arguments);
  }

  /**
   * セッター.
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @returns {this}
   */
  set(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = (a !== undefined) ? a : 1.0;
    return this;
  }

  /**
   * 数値によるセッター.
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @returns {this}
   */
  setFromNumber(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = (a !== undefined) ? a : 1.0;
    return this;
  }

  /**
   * 配列によるセッター
   * @param {number[]} arr
   * @returns {this}
   */
  setFromArray(arr) {
    return this.set.apply(this, arr);
  }

  /**
   * オブジェクトによるセッター
   * @param {{ r: number; g: number; b: number; a: number; }} obj
   * @returns {this}
   */
  setFromObject(obj) {
    return this.set(obj.r, obj.g, obj.b, obj.a);
  }

  /**
   * 文字列によるセッター
   * @param {string} str
   * @returns {this}
   */
  setFromString(str) {
    var color = Color.stringToNumber(str);
    return this.set(color[0], color[1], color[2], color[3]);
  }

  /**
   * 賢いセッター
   * @returns {this}
   */
  setSmart() {
    var arg = arguments[0];
    if (arguments.length >= 3) {
      this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
    } else if (arg instanceof Array) {
      this.setFromArray(arg);
    } else if (arg instanceof Object) {
      this.setFromObject(arg);
    } else if (typeof(arg) == "string") {
      this.setFromString(arg);
    }
    return this;
  }

  /**
   * CSS 用 16進数文字列に変換
   * @returns {string}
   */
  toStyleAsHex() {
    return format.call("#{0}{1}{2}",
    // return "#{0}{1}{2}".format(
      padding.call(this.r.toString(16), 2, '0'),
      padding.call(this.g.toString(16), 2, '0'),
      padding.call(this.b.toString(16), 2, '0')
      // this.r.toString(16).padding(2, '0'),
      // this.g.toString(16).padding(2, '0'),
      // this.b.toString(16).padding(2, '0')
    );
  }

  /**
   * CSS 用 RGB文字列に変換
   * @returns {string}
   */
  toStyleAsRGB() {
    return format.call("rgb({r},{g},{b})", {
    // return "rgb({r},{g},{b})".format({
      r: ~~this.r,
      g: ~~this.g,
      b: ~~this.b
    });
  }


  /**
   * CSS 用 RGBA文字列に変換
   * @returns {string}
   */
  toStyleAsRGBA() {
    return format.call("rgba({r},{g},{b},{a})", {
    // return "rgba({r},{g},{b},{a})".format({
      r: ~~this.r,
      g: ~~this.g,
      b: ~~this.b,
      a: this.a
    });
  }

  /**
   * CSS 用 RGBA 文字列に変換
   * @returns {string}
   */
  toStyle() {
    return format.call("rgba({r},{g},{b},{a})", {
    // return "rgba({r},{g},{b},{a})".format({
      r: ~~this.r,
      g: ~~this.g,
      b: ~~this.b,
      a: this.a
    });
  }

  /**
   * @static
   * @member phina.util.Color
   * @method strToNum
   * @param {string} str
   * @returns {number[]}
   */
  static strToNum(str) {
    return this.stringToNumber(str);
  }

  /**
   * @param {string} str
   * @returns {number[]}
   */
  static stringToNumber(str) {
    var value = null;
    var type = null;

    if (str[0] === '#') {
      type = (str.length == 4) ? "hex111" : "hex222";
    } else if (str[0] === 'r' && str[1] === 'g' && str[2] === 'b') {
      type = (str[3] == 'a') ? "rgba" : "rgb";
    } else if (str[0] === 'h' && str[1] === 's' && str[2] === 'l') {
      type = (str[3] == 'a') ? "hsla" : "hsl";
    }

    if (type) {
      var match_set = MATCH_SET_LIST[type];
      var m = str.match(match_set.reg);
      value = match_set.exec(m);
    } else if (Color.COLOR_LIST[str]) {
      value = Color.COLOR_LIST[str];
    }

    return value;
  }

  /**
   * @static
   * @method
   * hsl を rgb に変換
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @returns {number[]} rgb数値配列
   */
  static HSLtoRGB(h, s, l) {
    var r, g, b;

    h %= 360;
    h += 360;
    h %= 360;
    s *= 0.01;
    l *= 0.01;

    if (s === 0) {
      l = Math.round(l * 255);
      return [l, l, l];
    }
    var m2 = (l < 0.5) ? l * (1 + s) : l + s - l * s;
    var m1 = l * 2 - m2;

    // red
    var temp = (h + 120) % 360;
    if (temp < 60) {
      r = m1 + (m2 - m1) * temp / 60;
    } else if (temp < 180) {
      r = m2;
    } else {
      r = m1;
    }

    // green
    temp = h;
    if (temp < 60) {
      g = m1 + (m2 - m1) * temp / 60;
    } else if (temp < 180) {
      g = m2;
    } else if (temp < 240) {
      g = m1 + (m2 - m1) * (240 - temp) / 60;
    } else {
      g = m1;
    }

    // blue
    temp = ((h - 120) + 360) % 360;
    if (temp < 60) {
      b = m1 + (m2 - m1) * temp / 60;
    } else if (temp < 180) {
      b = m2;
    } else if (temp < 240) {
      b = m1 + (m2 - m1) * (240 - temp) / 60;
    } else {
      b = m1;
    }

    return [
      Math.floor(r * 255),
      Math.floor(g * 255),
      Math.floor(b * 255)
    ];
  }

  /**
   * @static
   * @method
   * hsla を rgba に変換
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @param {number} a
   * @returns {number[]} rgba数値配列
   */
  static HSLAtoRGBA(h, s, l, a) {
    var temp = Color.HSLtoRGB(h, s, l);
    temp[3] = a;
    return temp;
  }

  /**
   * @static
   * @method
   * rgb 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @returns {string}
   */
  static createStyleRGB(r, g, b) {
    return "rgba(" + r + "," + g + "," + b + ")";
  }

  /**
   * @static
   * @method
   * rgba 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} r
   * @param {number} g
   * @param {number} b
   * @param {number} a
   * @returns {string}
   */
  static createStyleRGBA(r, g, b, a) {
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  }

  /**
   * @static
   * @method
   * hsl 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @returns {string}
   */
  static createStyleHSL(h, s, l) {
    return "hsl(" + h + "," + s + "%," + l + "%)";
  }

  /**
   * @static
   * @method
   * hsla 値からCSS colorデータ型準拠の文字列を生成
   * 
   * @param {number} h
   * @param {number} s
   * @param {number} l
   * @param {number} a
   * @returns {string}
   */
  static createStyleHSLA(h, s, l, a) {
    return "hsla(" + h + "," + s + "%," + l + "%," + a + ")";
  }

}

/**
 * @static
 * @enum {number[]}
 * カラーリスト
 */
Color.COLOR_LIST = {
  /** @property black */
  "black": [0x00, 0x00, 0x00],
  /** @property silver */
  "silver": [0xc0, 0xc0, 0xc0],
  /** @property gray */
  "gray": [0x80, 0x80, 0x80],
  /** @property white */
  "white": [0xff, 0xff, 0xff],
  /** @property maroon */
  "maroon": [0x80, 0x00, 0x00],
  /** @property red */
  "red": [0xff, 0x00, 0x00],
  /** @property purple */
  "purple": [0x80, 0x00, 0x80],
  /** @property fuchsia */
  "fuchsia": [0xff, 0x00, 0xff],
  /** @property green */
  "green": [0x00, 0x80, 0x00],
  /** @property lime */
  "lime": [0x00, 0xff, 0x00],
  /** @property olive */
  "olive": [0x80, 0x80, 0x00],
  /** @property yellow */
  "yellow": [0xff, 0xff, 0x00],
  /** @property navy */
  "navy": [0x00, 0x00, 0x80],
  /** @property blue */
  "blue": [0x00, 0x00, 0xff],
  /** @property teal */
  "teal": [0x00, 0x80, 0x80],
  /** @property aqua */
  "aqua": [0x00, 0xff, 0xff],
};

/**
 * 色文字列をnumber型配列に変換するための正規表現と関数のセット
 * @enum {{reg: RegExp, exec: (m:number[])=> number[]}}
 */
var MATCH_SET_LIST = {
  "hex111": {
    reg: /^#(\w{1})(\w{1})(\w{1})$/,
    exec: function(m) {
      return [
        parseInt(m[1] + m[1], 16),
        parseInt(m[2] + m[2], 16),
        parseInt(m[3] + m[3], 16)
      ];
    }
  },
  "hex222": {
    reg: /^#(\w{2})(\w{2})(\w{2})$/,
    exec: function(m) {
      return [
        parseInt(m[1], 16),
        parseInt(m[2], 16),
        parseInt(m[3], 16)
      ];
    }
  },
  "rgb": {
    reg: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
    exec: function(m) {
      return [
        parseInt(m[1]),
        parseInt(m[2]),
        parseInt(m[3])
      ];
    }
  },
  "rgba": {
    reg: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1}(\.{1}\d+)?)\)$/,
    exec: function(m) {
      return [
        parseInt(m[1]),
        parseInt(m[2]),
        parseInt(m[3]),
        parseFloat(m[4])
      ];
    }
  },
  "hsl": {
    reg: /^hsl\((\d{1,3}),\s*(\d{1,3})%,\s*(\d{1,3})%\)$/,
    exec: function(m) {
      return Color.HSLtoRGB(m[1], m[2], m[3]);
    }
  },
  "hsla": {
    reg: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1}(\.{1}\d+)?)\)$/,
    exec: function(m) {
      return Color.HSLAtoRGBA(m[1], m[2], m[3], m[4]);
    }
  }
};

// 監視オブジェクト
// register で key を登録 (デフォルト値も一緒に？)
// event dispatcher を継承
// event dispatcher って util じゃね？
// register で登録した値を変更したら change イベントが走る


// 名前候補
//  middleman(仲立人)


/**
 * @class phina.util.ChangeDispatcher
 * _extends phina.util.EventDispatcher
 */
class ChangeDispatcher extends EventDispatcher {

  constructor() {
    super();

    this._observe = true;
  }

  /**
   * @param {string} key
   * @param {any} defaultValue
   */
  register(key, defaultValue) {
    if (arguments.length === 1) {
      var obj = arguments[0];
      forIn.call(obj, function(key, value) {
      // obj.forIn(function(key, value) {
        this.register(key, value);
      }, this);
    }
    else {
      var tempKey = '__' + key;
      this[tempKey] = defaultValue;
      accessor.call(this, key, {
      // this.accessor(key, {
        get: function() {
          return this[tempKey];
        },
        set: function(v) {
          this[tempKey] = v;
          if (this._observe) {
            this.flare('change');
          }
        },
      });
    }
    return this;
  }

  observe() {
    this._observe = true;
  }
  unobserve() {
    this._observe = false;
  }
}

/**
 * @typedef {Object} AjaxRequestOptions Ajaxクラス初期化オプション
 * @property {'GET'|'POST'|'PUT'|'DELETE'} type 
 * @property {string} url 
 * @property {string} [contentType] 
 * @property {string} [responseType] 
 * @property {any} [data] 未使用？
 */

 /**
 * @class phina.util.Ajax
 * 
 */
class Ajax {

  /**
   * @param {AjaxRequestOptions} options
   */
  static request(options) {
    var data = $safe.call({}, options, Ajax.defaults);
    // var data = ({}).$safe(options, this.defaults);

    var xhr = new XMLHttpRequest();
    var flow = new Flow(function(resolve) {
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          if ([200, 201, 0].indexOf(xhr.status) !== -1) {
            resolve(xhr.response);
          }
        }
      };

      xhr.open(data.type, data.url);
      xhr.responseType = data.responseType;
      xhr.send(null);
    });

    return flow;
  }
  static get(url) {
    return Ajax.request({
      type: 'GET',
      url: url,
    });
  }
  static post(url) {
    return Ajax.request({
      type: 'POST',
      url: url,
    });
  }
  static put(url) {
    return Ajax.request({
      type: 'PUT',
      url: url,
    });
  }
  static del(url) {
    return Ajax.request({
      type: 'DELETE',
      url: url,
    });
  }

}

/** 
 * @static
 * @type {AjaxRequestOptions}
 */
Ajax.defaults = {
  type: 'GET',
  contentType: 'application/x-www-form-urlencoded',
  responseType: 'json',
  data: null,
  url: '',
};

/**
 * @typedef {Object} PrimitiveVector2 x,yプロパティのみの原始的なVector2
 * @property {number} x
 * @property {number} y
 */

/**
 * @class phina.geom.Vector2
 * @extends PrimitiveVector2
 * # 2次元ベクトルクラス
 * 2次元のベクトルや座標を表すクラスです。
 * 
 * @example
 * v = phina.geom.Vector2(3, 4);
 *
 */
class Vector2 {

  /**
   * @param {Number} [x=0] ベクトルの x 座標
   * @param {Number} [y=0] ベクトルの y 座標
   */
  constructor(x=0, y=0) {

    /**
     * x座標
     * @type {Number}
     */
    this.x = x;

    /**
     * y座標
     * @type {Number}
     */
    this.y = y;
  }

  /**
   * @method clone
   * this のコピーを生成して返します。
   *
   * @example
   * v = phina.geom.Vector2(3, 4);
   * v2 = v.clone();
   * v2.x == v.x; // => true
   *
   * @returns {Vector2} 生成したベクトル
   */
  clone() {
    return new Vector2(this.x, this.y);
  }

  /**
   * @method equals
   * this の各要素がすべて other と等しいかどうかを返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(5, 6);
   * v1.equals(v2); // => false
   *
   * @param {PrimitiveVector2} v 比較する対象のベクトル
   * @return {Boolean} 等しいかどうか
   */
  equals(v) {
    return (this.x === v.x && this.y === v.y);
  }

  /**
   * @method set
   * this の各要素の値を再設定します。
   *
   * @example
   * v = phina.geom.Vector2(3, 4);
   * v.set(5, 6);
   *
   * @chainable
   * @param {Number} x ベクトルの x 座標
   * @param {Number} y ベクトルの y 座標
   */
  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * @method add
   * @chainable
   * this に other を加えます。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(5, 6);
   * v1.add(v2); // => phina.geom.Vector(8, 10)
   *
   * @param {PrimitiveVector2} v ベクトル
   */
  add(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  }

  /**
   * @method sub
   * @chainable
   * this から other を減じます。
   *
   * ベクトルが座標を表す場合は、指定した座標から自分自身へと向かうベクトルが得られます。
   * 
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(1, 5);
   * v1.sub(v2); // => phina.geom.Vector(2, -1)
   *
   * @param {PrimitiveVector2} v ベクトル
   */
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  }

  /**
   * @method mul
   * @chainable
   * this の各要素に数値 n を乗じます。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v1.mul(3) // => phina.geom.Vector(9, 12)
   *
   * @param {Number} n 乗じる値
   */
  mul(n) {
    this.x *= n;
    this.y *= n;
    return this;
  }

  /**
   * @method div
   * @chainable
   * this の各要素を数値 n で割ります。
   *
   * @example
   * v1 = phina.geom.Vector2(8, 16);
   * v1.div(2) // => phina.geom.Vector(4, 8)
   *
   * @param {Number} n 割る値
   */
  div(n) {
    //console.assert(n != 0, "0 division!!");
    n = n || 0.01;
    this.x /= n;
    this.y /= n;
    return this;
  }
  /**
   * @method negate
   * @chainable
   * this の各要素の正負を反転します。
   *
   * this と同じ大きさで方向が逆のベクトルが得られます。
   *
   * @example
   * v1 = phina.geom.Vector2(3, -4);
   * v1.negate() // => phina.geom.Vector(-3, 4)
   *
   */
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    
    return this;
  }

  /**
   * @method dot
   * other との内積を返します。
   *
   * 投影ベクトルを求めたり、類似度の計算に利用することができます。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(-2, 2);
   * v1.dot(v2) // => 2
   *
   * @param {PrimitiveVector2} v ベクトル
   * @return {Number} 内積
   */
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }

  /**
   * @method cross
   * other との外積（クロス積）を返します。
   *
   * 2次元ベクトルでの外積はベクトルでなく数値を返すことに注意してください。
   * other より this 時計回りにあるときは正の値になり、反時計回りにあるときは負の値になります。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(3, 1);
   * v1.cross(v2) // => -8
   *
   * @param {PrimitiveVector2} v ベクトル
   * @return {Number} 外積
   */
  cross(v) {
    return (this.x*v.y) - (this.y*v.x);
  }

  /**
   * @method length
   * this の大きさを返します。
   *
   * (memo) magnitude って名前の方が良いかも. 検討中.
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v1.length(); // => 5
   *
   * @return {Number} ベクトルの大きさ
   */
  length() {
    return Math.sqrt(this.x*this.x + this.y*this.y);
  }
  
  /**
   * @method lengthSquared
   * this の大きさの自乗を返します。
   *
   * C# の名前を引用（or lengthSquare or lengthSqrt）
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v1.lengthSquared(); // => 25
   *
   * @return {Number} ベクトルの大きさの自乗
   */
  lengthSquared() {
    return this.x*this.x + this.y*this.y;
  }
  
  /**
   * @method distance
   * this と other を座標とみなしたときの2点間の距離を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * v1.distance(v2); // => 5
   *
   * @param {PrimitiveVector2} v 座標を表すベクトル
   * @return {Number} 2点間の距離
   */
  distance(v) {
    return Math.sqrt( Math.pow(this.x-v.x, 2) + Math.pow(this.y-v.y, 2) );
  }
  
  /**
   * @method distanceSquared
   * this と other を座標とみなしたときの2点間の距離の自乗を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * v1.distanceSquared(v2); // => 25
   *
   * @param {PrimitiveVector2} v 座標を表すベクトル
   * @return {Number} 2点間の距離の自乗
   */
  distanceSquared(v) {
    return Math.pow(this.x-v.x, 2) + Math.pow(this.y-v.y, 2);
  }

  /**
   * @method random
   * @chainable
   * 自身を角度が min から max の範囲（度単位）で大きさが len のランダムなベクトルに変換して返します。
   *
   * @example
   * phina.geom.Vector2().random(90, 180, 1); // => phina.geom.Vector2(-0.5, 0.866) など
   *
   * @param {Number} [min=0] 角度（度単位）の下限値
   * @param {Number} [max=360] 角度（度単位）の上限値
   * @param {Number} [len=1] 大きさ
   * @returns {this}
   */
  random(min, max, len) {
    var degree = Random.randfloat(min || 0, max || 360);
    var rad = degree*DEG_TO_RAD;
    var len = len || 1;

    this.x = Math.cos(rad)*len;
    this.y = Math.sin(rad)*len;

    return this;
  }
  
  /**
   * @method normalize
   * @chainable
   * this を正規化します。すなわち、this と同じ方向で大きさが1のベクトルを返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v1.normalize(); // => phina.geom.Vector2(0.6, 0.8)
   *
   * @returns {this}
   */
  normalize() {
    this.div(this.length());
    return this;
  }

  /**
   * @method toString
   * this を JSON 形式で表現した文字列を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v1.toString(); // => "{x:3, y:4}"
   *
   * @return {String} JSON 文字列
   */
  toString() {
    return format.call("{x:{x}, y:{y}}", this);
    // return "{x:{x}, y:{y}}".format(this);
  }

  /**
   * @method getDirection
   * this のおおよその方向を示した文字列を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v1.getDirection(); // => "up"
   *
   * @return {String} 方向を表す文字列（"up", "right", "down", "left"）
   */
  getDirection() {
    var angle = this.toDegree();
    if (angle < 45) {
      return "right";
    } else if (angle < 135) {
      return "down";
    } else if (angle < 225) {
      return "left"
    } else if (angle < 315) {
      return "up";
    } else {
      return "right";
    }
  }

  /**
   * @method toAngle
   * this と x 軸との角度（ラジアン単位）を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(-2, 0);
   * v1.toAngle(); // => 3.14159
   *
   * @return {Number} ベクトルの角度（ラジアン単位）
   */
  toAngle() {
    var rad = Math.atan2(this.y, this.x);
    return (rad + Math.PI*2)%(Math.PI*2);
  }
  
  /**
   * @method fromAngle
   * @chainable
   * 角度（ラジアン単位）と大きさを指定してベクトルを設定します。
   *
   * @example
   * phina.geom.Vector2().fromAngle(Math.PI/4, 2); // => phina.geom.Vector2(1.4142, 1.4142)
   *
   * @param {Number} rad 角度（ラジアン単位）
   * @param {Number} [len=1] 大きさ
   * @returns {this}
   */
  fromAngle(rad, len) {
    len = len || 1;
    this.x = Math.cos(rad)*len;
    this.y = Math.sin(rad)*len;
    
    return this;
  }

  /**
   * @method toDegree
   * this と x 軸との角度（度単位）を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(-2, 2);
   * v1.toAngle(); // => 135
   *
   * @return {Number} ベクトルの角度（度単位）
   */
  toDegree() {
    return toDegree.call(this.toAngle());
    // return this.toAngle().toDegree();
  }
  
  /**
   * @method fromDegree
   * @chainable
   * 角度（度単位）と大きさを指定してベクトルを設定します。
   *
   * @example
   * phina.geom.Vector2().fromDegree(60, 2); // => phina.geom.Vector2(1, 1.732)
   *
   * @param {Number} deg 角度（度単位）
   * @param {Number} [len=1] 大きさ
   * @returns {this}
   */
  fromDegree(deg, len) {
    // return this.fromAngle(deg.toRadian(), len);
    return this.fromAngle(toRadian.call(deg), len);
  }

  /**
   * @method rotate
   * @chainable
   * this を回転します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * v1.rotate(Math.PI/2); // => phina.geom.Vector2(-1, 3);
   *
   * @param {Number} rad 角度（ラジアン単位）
   * @param {PrimitiveVector2} [center=Vector2(0, 0)] 回転の中心座標
   * @returns {this}
   */
  rotate(rad, center) {
    center = center || new Vector2(0, 0);

    var x1 = this.x - center.x;
    var y1 = this.y - center.y;
    var x2 = x1 * Math.cos(rad) - y1 * Math.sin(rad);
    var y2 = x1 * Math.sin(rad) + y1 * Math.cos(rad);
    this.set( center.x + x2, center.y + y2 );

    return this;
  }

  /**
   * @method min
   * @static
   * v1 と v2 の各要素に対し、より小さい方を要素とする新しいベクトルを生成して返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * v2 = phina.geom.Vector2(-3, 2);
   * phina.geom.Vector2.min(v1, v2); // phina.geom.Vector2(-3, 1);
   *
   * @param {PrimitiveVector2} a ベクトル
   * @param {PrimitiveVector2} b ベクトル
   * @return {Vector2} 生成したベクトル
   */
  static min(a, b) {
    return new Vector2(
      (a.x < b.x) ? a.x : b.x,
      (a.y < b.y) ? a.y : b.y
    );
  }

  /**
   * @method max
   * @static
   * 2次元ベクトル v1 と v2 の各要素に対し、より大きい方を要素とする新しいベクトルを生成して返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * v2 = phina.geom.Vector2(-3, 2);
   * phina.geom.Vector2.max(v1, v2); // phina.geom.Vector2(3, 2);
   *
   * @param {PrimitiveVector2} a ベクトル
   * @param {PrimitiveVector2} b ベクトル
   * @return {Vector2} 生成したベクトル
   */
  static max(a, b) {
    return new Vector2(
      (a.x > b.x) ? a.x : b.x,
      (a.y > b.y) ? a.y : b.y
    );
  }

  /**
   * @method add
   * @static
   * v1 に v2 を加算した新しいベクトルを生成して返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * v2 = phina.geom.Vector2(-3, 2);
   * phina.geom.Vector2.add(v1, v2); // phina.geom.Vector2(0, 3);
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Vector2} 加算した結果
   */
  static add(lhs, rhs) {
    return new Vector2(lhs.x+rhs.x, lhs.y+rhs.y);
  }
  
  /**
   * @method sub
   * @static
   * 2次元ベクトル v1 から v2 を減じた新しいベクトルを生成して返します。
   *
   * ベクトルが座標を表す場合、2つ目の座標から1つ目の座標へと向かうベクトルが得られます。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * v2 = phina.geom.Vector2(-3, 2);
   * phina.geom.Vector2.sub(v1, v2); // phina.geom.Vector2(6, -1);
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Vector2} 減算した結果
   */
  static sub(lhs, rhs) {
    return new Vector2(lhs.x-rhs.x, lhs.y-rhs.y);
  }
  
  /**
   * @method mul
   * @static
   * 2次元ベクトル v の各要素に n を乗じた新しいベクトルを生成して返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * phina.geom.Vector2.mul(v1, 2); // phina.geom.Vector2(6, 2)
   *
   * @param {PrimitiveVector2} v ベクトル
   * @param {Number} n 乗じる値
   * @return {Vector2} 乗算した結果
   */
  static mul(v, n) {
    return new Vector2(v.x*n, v.y*n);
  }
  
  /**
   * @method div
   * @static
   * 2次元ベクトル v の各要素を n で割った新しいベクトルを生成して返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * phina.geom.Vector2.div(v1, 2); // phina.geom.Vector2(1.5, 0.5)
   *
   * @param {PrimitiveVector2} v ベクトル
   * @param {Number} n 割る値
   * @return {Vector2} 除算した結果
   */
  static div(v, n) {
    return new Vector2(v.x/n, v.y/n);
  }
  
  /**
   * @method negate
   * @static
   * 2次元ベクトル v を反転した新しいベクトルを生成して返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 1);
   * phina.geom.Vector2.negate(); // phina.geom.Vector2(-3, -1)
   *
   * @param {PrimitiveVector2} v ベクトル
   * @return {Vector2} 反転したベクトル
   */
  static negate(v) {
    return new Vector2(-v.x, -v.y);
  }
  
  /**
   * @method dot
   * @static
   * 2次元ベクトル v1 と v2 の内積を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(-2, 2);
   * phina.geom.Vector2.dot(v1, v2) // => 2
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Number} 内積
   */
  static dot(lhs, rhs) {
    return lhs.x * rhs.x + lhs.y * rhs.y;
  }
  
  /**
   * @method cross
   * @static
   * 2次元ベクトル v1 と v2 の外積（クロス積）を返します。
   *
   * 2次元ベクトルでの外積はベクトルでなく数値を返すことに注意してください。
   * 1つ目のベクトルが2つ目のベクトルより時計回りにあるときは正の値になり、反時計回りにあるときは負の値になります。
   *
   * @example
   * v1 = phina.geom.Vector2(3, 4);
   * v2 = phina.geom.Vector2(3, 1);
   * phina.geom.Vector2.cross(v1, v2); // => -8
   *
   * @param {PrimitiveVector2} lhs ベクトル
   * @param {PrimitiveVector2} rhs ベクトル
   * @return {Number} 外積
   */
  static cross(lhs, rhs) {
    return (lhs.x*rhs.y) - (lhs.y*rhs.x);
  }
  
  /**
   * @method distance
   * @static
   * v1 と v2 を座標とみなしたときの2点間の距離を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * phina.geom.Vector2.distance(v1, v2); // => 5
   *
   * @param {PrimitiveVector2} lhs 座標を表すベクトル
   * @param {PrimitiveVector2} rhs 座標を表すベクトル
   * @return {Number} 2点間の距離
   */
  static distance(lhs, rhs) {
    return Math.sqrt( Math.pow(lhs.x-rhs.x, 2) + Math.pow(lhs.y-rhs.y, 2) );
  }

  /**
   * @method distanceSquared
   * @static
   * v1 と v2 を座標とみなしたときの2点間の距離の自乗を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * phina.geom.Vector2.distanceSquared(v1, v2); // => 25
   *
   * @param {PrimitiveVector2} lhs 座標を表すベクトル
   * @param {PrimitiveVector2} rhs 座標を表すベクトル
   * @return {Number} 2点間の距離の自乗
   */
  static distanceSquared(lhs, rhs) {
    return Math.pow(lhs.x-rhs.x, 2) + Math.pow(lhs.y-rhs.y, 2);
  }

  /**
   * @method manhattanDistance
   * @static
   * v1 と v2 を座標とみなしたときの2点間のマンハッタン距離（軸に平行に進むときの最短距離）を返します。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * phina.geom.Vector2.manhattanDistance(v1, v2); // => 7
   *
   * @param {PrimitiveVector2} lhs 座標を表すベクトル
   * @param {PrimitiveVector2} rhs 座標を表すベクトル
   * @return {Number} 2点間のマンハッタン距離
   */
  static manhattanDistance(lhs, rhs) {
    return Math.abs(lhs.x-rhs.x) + Math.abs(lhs.y-rhs.y);
  }
  
  /**
   * @method normal
   * @static
   * v1 と v2 を座標とみなしたときの、v2 から v1 に向かうベクトルに対する法線ベクトルを返します。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * phina.geom.Vector2.normal(v1, v2); // => phina.geom.Vector2(4, -3)
   *
   * @param {PrimitiveVector2} a 座標を表すベクトル
   * @param {PrimitiveVector2} b 座標を表すベクトル
   * @return {Vector2} 法線ベクトル
   */
  static normal(a, b) {
    var temp = Vector2.sub(a, b);

    return new Vector2(-temp.y, temp.x);
  }

  /**
   * @method reflect
   * @static
   * 2次元ベクトル v を壁への入射ベクトルとして、壁に反射した際のベクトル（反射ベクトル）を返します。
   *
   * 壁の向きは法線ベクトル normal によって表します。
   *
   * @example
   * v1 = phina.geom.Vector2(4, 3);
   * normal = phina.geom.Vector2(-1, 1);
   * phina.geom.Vector2.reflect(v1, normal); // => phina.geom.Vector2(2, 5)
   *
   * @param {PrimitiveVector2} v 入射ベクトル
   * @param {PrimitiveVector2} normal 壁の法線ベクトル
   * @return {Vector2} 反射ベクトル
   */
  static reflect(v, normal) {
    var len = Vector2.dot(v, normal);
    var temp= Vector2.mul(normal, 2*len);
    
    return Vector2.sub(v, temp);
  }
  
  /**
   * @method wall
   * @static
   * 2次元ベクトル v を壁への入射ベクトルとして、壁に沿ったベクトル（壁ずりクトル）を返します。
   *
   * 壁の向きは法線ベクトル normal によって表します。
   *
   * @example
   * v1 = phina.geom.Vector2(4, 3);
   * normal = phina.geom.Vector2(-1, 1);
   * phina.geom.Vector2.wall(v1, normal); // => phina.geom.Vector2(3, 4)
   *
   * @param {PrimitiveVector2} v 入射ベクトル
   * @param {PrimitiveVector2} normal 壁の法線ベクトル
   * @return {Vector2} 壁ずりベクトル
   */
  static wall(v, normal) {
    var len = Vector2.dot(v, normal);
    var temp= Vector2.mul(normal, len);
    
    return Vector2.sub(v, temp);
  }
  
  /**
   * @method lerp
   * @static
   * v1 と v2 を媒介変数 t で線形補間します。
   * t=0.5 で v1 と v2 の中間ベクトルを求めることができます。
   *
   * @example
   * v1 = phina.geom.Vector2(1, 2);
   * v2 = phina.geom.Vector2(4, 6);
   * phina.geom.Vector2.lerp(v1, v2, 0.5); // => (2.5, 4)
   * phina.geom.Vector2.lerp(v1, v2, 0); // => (1, 2)
   * phina.geom.Vector2.lerp(v1, v2, 1); // => (4, 6)
   * 
   * @param {PrimitiveVector2} a ベクトル
   * @param {PrimitiveVector2} b ベクトル
   * @param {Number} t 媒介変数
   * @return {Vector2} 線形補間の結果
   */
  static lerp(a, b, t) {
    return new Vector2(
      a.x + (b.x-a.x)*t,
      a.y + (b.y-a.y)*t
    );
  }
  
  /**
   * @method slerp
   * @static
   * @todo
   * 補間（未実装）
   */
  static slerp(lhs, rhs, t) {
      // TODO:
      // cos...
  }

  /**
   * @method random
   * @static
   * 角度が min から max の範囲（度単位）で大きさが len のランダムなベクトルを生成して返します。
   *
   * @example
   * phina.geom.Vector2.random(90, 180, 1); // => phina.geom.Vector2(-0.5, 0.866) など
   *
   * @param {Number} [min=0] 角度（度単位）の下限値
   * @param {Number} [max=360] 角度（度単位）の上限値
   * @param {Number} [len=1] 大きさ
   * @return {Vector2} 生成したベクトル
   */
  static random(min, max, len) {
    return new Vector2().random(min, max).mul(len||1);
  }

  /**
   * @property {Vector2} ZERO ゼロベクトル
   */
  static get ZERO() { return ZERO; }

  /**
   * @property {Vector2} LEFT 左方向の単位ベクトル
   */
  static get LEFT() { return LEFT; }

  /**
   * @property {Vector2} RIGHT 右方向の単位ベクトル
   */
  static get RIGHT() { return RIGHT; }

  /**
   * @property {Vector2} UP 上方向の単位ベクトル
   */
  static get UP() { return UP; }

  /**
   * @property {Vector2} DOWN 下方向の単位ベクトル
   */
  static get DOWN() { return DOWN; }
}

var ZERO = new Vector2(0, 0);
var LEFT = new Vector2(-1, 0);
var RIGHT = new Vector2(1, 0);
var UP = new Vector2(0, -1);
var DOWN = new Vector2(0, 1);

// import { Rect } from "./rect";

/**
 * @class phina.geom.Circle
 * # 円領域を表すクラス
 * キャンバス上の円領域を扱うクラスです。
 * 
 */
class Circle {

  /**
   * @property {Number} x
   * 円の中心の x 座標
   */
  // x: 0,
  /**
   * @property {Number} y
   * 円の中心の y 座標
   */
  // y: 0,
  /**
   * @property {Number} radius
   * 円の半径
   */
  // radius: 32,

  /**
   * @method init
   * 円領域のコンストラクタです。
   *
   * ### Example
   *     circle = phina.geom.Circle(32, 64, 128);
   *
   * @param {Number} x 円の中心の x 座標
   * @param {Number} y 円の中心の y 座標
   * @param {Number} radius 半径
   */
  constructor(x, y, radius) {
    this.x = 0;
    this.y = 0;
    this.radius = 32;
    this.set(x, y, radius);
  }

  /**
   * @method set
   * @chainable
   * this の各値を再設定します。
   *
   * ### Example
   *     circle = phina.geom.Circle(32, 64, 128);
   *     circle.set(100, 200, 32);
   *
   * @param {Number} x 円を囲う矩形の左上頂点の x 座標
   * @param {Number} y 円を囲う矩形の左上頂点の x 座標
   * @param {Number} radius 半径
   * @returns {this}
   */
  set(x, y, radius) {
    this.x = x;
    this.y = y;
    this.radius = radius;

    return this;
  }

  /**
   * @method moveTo
   * @chainable
   * 円領域を座標 (x, y) に移動します。(x, y) は円の中心を表します。
   *
   * ### Example
   *     circle = phina.geom.Circle(300, 300, 40);
   *     circle.left; // => 260
   *     circle.moveTo(100, 100);
   *     circle.left; // => 60
   *
   * @param {Number} x 移動先の x 座標
   * @param {Number} y 移動先の y 座標
   * @returns {this}
   */
  moveTo(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * @method moveBy
   * @chainable
   * 円領域を (x, y) だけ移動します。
   *
   * ### Example
   *     circle = phina.geom.Circle(300, 300, 40);
   *     circle.left; // => 260
   *     circle.moveBy(100, 100);
   *     circle.left; // => 460
   *
   * @param {Number} x 移動量の x 座標
   * @param {Number} y 移動量の y 座標
   * @returns {this}
   */
  moveBy(x, y) {
    this.x += x;
    this.y += y;
    return this;
  }

  /**
   * @method contains
   * 座標 (x, y) が円領域の中に含まれるかどうかを返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(300, 300, 100);
   *     circle.contains(350, 350); // =>  true
   *     circle.contains(350, 400); // => false
   *
   * @param {Number} x 判定する対象の x 座標
   * @param {Number} y 判定する対象の y 座標
   * @return {Boolean} 指定した座標が円領域の中に含まれるかどうか
   */
  contains(x, y) {
    var lenX = this.x-x;
    var lenY = this.y-y;
    var lenSquared = (lenX*lenX)+(lenY*lenY);

    return lenSquared <= this.radius*this.radius;
  }

  /**
   * @method clone
   * this のコピーを生成して返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(50, 100, 40);
   *     circle2 = circle.clone();
   *     circle2.x == circle.x; // => true
   *
   * @return {Circle} 生成した円領域
   */
  clone() {
    return new Circle(this.x, this.y, this.radius);
  }

  /**
   * @method toRect
   * 円に外接する正方形を表す矩形領域を生成して返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(50, 100, 40);
   *     rect = circle.toRect();
   *     rect.x; // => 10
   *     rect.y; // => 60
   *     rect.width; // => 80
   * 
   * @return {Object} 生成した矩形領域
   */
  toRect() {
    // 循環参照回避のため、Rect側で定義
    // var size = this.size;
    // return new Rect(this.x - this.radius, this.y - this.radius, size, size);
  }

  /**
   * @method toArray
   * this の各値を要素とする配列を生成して返します。
   *
   * ### Example
   *     circle = phina.geom.Circle(50, 100, 40);
   *     rect.toArray(); // => [50, 100, 40]
   *
   * @return {Number[]} 生成した配列
   */
  toArray() {
    return [this.x, this.y, this.radius];
  }

  /**
   * @property {Number} left
   * キャンバス左端から円の左端までの距離
   *
   * 現時点では読み取り専用です。
   *
   * ### Example
   *     circle = phina.geom.Circle(200, 300, 100);
   *     circle.left; // => 100
   *     circle.top; // => 200
   *     circle.right; // => 300
   *     circle.bottom; // => 400
   */
  get left()   { return this.x - this.radius; }
  set left(v)  {
    // TODO: 
  }

  /**
   * @property {Number} top
   * キャンバス上端から円の上端までの距離
   *
   * 現時点では読み取り専用です。
   */
  get top()   { return this.y - this.radius; }
  set top(v)  {
    // TODO: 
  }

  /**
   * @property {Number} right
   * キャンバス右端から円の右端までの距離
   *
   * 現時点では読み取り専用です。
   */
  get right()   { return this.x + this.radius; }
  set right(v)  {
    // TODO: 
  }

  /**
   * @property {Number} bottom
   * キャンバス下端から円の下端までの距離
   *
   * 現時点では読み取り専用です。
   */
  get bottom()   { return this.y + this.radius; }
  set bottom(v)  {
    // TODO: 
  }
    
  /**
   * @property {Number} size
   * 円の直径
   *
   * 現時点では読み取り専用です。
   */
  get size()   { return this.radius*2; }
  set size(v)  {
    // TODO: 検討中
  }
}

/**
 * @class phina.geom.Rect
 * # 矩形領域を表すクラス
 * キャンバス上の矩形領域を扱うクラスです。
 * 
 * ### Example
 *     rect = phina.geom.Rect(8, 16, 32, 64);
 */
class Rect {

  /**
   * @param {Number} [x] 矩形の左上頂点の x 座標
   * @param {Number} [y] 矩形の左上頂点の y 座標
   * @param {Number} [width] 幅
   * @param {Number} [height] 高さ
   */
  constructor(x, y, width, height) {
    /**
     * @property {Number} x
     * 矩形の左上頂点の x 座標
     */
    this.x = 0;
    
    /**
     * @property {Number} y
     * 矩形の左上頂点の y 座標
     */
    this.y = 0;

    /**
     * @property {Number} width
     * 矩形の幅
     */
    this.width = 32;

    /**
     * @property {Number} hight
     * 矩形の高さ
     */
    this.height = 32;

    this.set(x, y, width, height);
  }

  /**
   * @method set
   * @chainable
   * this の各値を再設定します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.set(0, 16, 32, 64);
   *
   * @param {Number} x 矩形の左上頂点の x 座標
   * @param {Number} y 矩形の左上頂点の y 座標
   * @param {Number} width 幅
   * @param {Number} height 高さ
   * @returns {this}
   */
  set(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;

    return this;
  }

  /**
   * @method moveTo
   * @chainable
   * 矩形領域を座標 (x, y) に移動します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.centerX; // => 24
   *     rect.moveTo(0, 0);
   *     rect.centerX; // => 16
   *
   * @param {Number} x 移動先の x 座標
   * @param {Number} y 移動先の y 座標
   * @returns {this}
   */
  moveTo(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }

  /**
   * @method moveBy
   * @chainable
   * 矩形領域を (x, y) だけ移動します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.moveBy(10, -10);
   *     rect.x; // => 18
   *     rect.y; // => 6
   *
   * @param {Number} x 移動量の x 座標
   * @param {Number} y 移動量の y 座標
   * @returns {this}
   */
  moveBy(x, y) {
    this.x += x;
    this.y += y;
    return this;
  }

  /**
   * @method setSizse
   * @chainable
   * 矩形領域の幅と高さを変更します。
   *
   * ### Example
   *     rect = phina.geom.Rect(8, 16, 32, 64);
   *     rect.setSize(10, 20);
   *     rect.width; // => 10
   *     rect.height; // => 20
   *
   * @param {Number} w 幅
   * @param {Number} h 高さ
   * @returns {this}
   */
  setSize(w, h) {
    this.width = w;
    this.height = h;
    return this;
  }

  /**
   * @method padding
   * @chainable
   * 矩形領域の中にパディング領域を設定します。
   *
   * 矩形領域自体のサイズはパディング領域の分だけ小さくなります。  
   * 幅の指定方法は CSS の padding 指定と同じように時計回りです。  
   * 引数が1つの場合は上下左右の値、引数が2つの場合は上下と左右の値、引数が３つの場合は上、左右、下の値と解釈します。
   *
   * ### Example
   *     rect = phina.geom.Rect(50, 100, 150, 200);
   *     rect.padding(10);
   *     rect.x; // => 60
   *     rect.y; // => 110
   *     rect.width; // => 130
   *     rect.height; // => 180
   *
   * @param {Number} top 上辺のパディング幅
   * @param {Number} right 右辺のパディング幅
   * @param {Number} bottom 下辺のパディング幅
   * @param {Number} left 左辺のパディング幅
   * @returns {this}
   */
  padding(top, right, bottom, left) {
    // css の padding に合わせて時計回りにパラメータ調整
    switch (arguments.length) {
      case 1:
        top = right = bottom = left = arguments[0];
        break;
      case 2:
        top     = bottom = arguments[0];
        right   = left   = arguments[1];
        break;
      case 3:
        top     = arguments[0];
        right   = left = arguments[1];
        bottom  = arguments[2];
        break;
    }
    
    this.x += left;
    this.y += top;
    this.width -= left+right;
    this.height-= top +bottom;
    
    return this;
  }

  /**
   * @method contains
   * 座標 (x, y) が 矩形領域の中に含まれるかどうかを返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(50, 100, 150, 200);
   *     rect.contains(35, 68); // =>  true
   *     rect.contains(200, 68); // => false
   *
   * @param {Number} x 判定する対象の x 座標
   * @param {Number} y 判定する対象の y 座標
   * @return {Boolean} 指定した座標が矩形領域の中に含まれるかどうか
   */
  contains(x, y) {
    return this.left <= x && x <= this.right && this.top <= y && y <= this.bottom;
  }

  /**
   * @method clone
   * this のコピーを生成して返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(50, 100, 150, 200);
   *     rect2 = rect.clone();
   *     rect2.x == rect.x; // => true
   *
   * @return {Rect} 生成した矩形領域
   */
  clone() {
    return new Rect(this.x, this.y, this.width, this.height);
  }

  /**
   * @method toCircle
   * 矩形領域内に収まる最大の円領域を生成して返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(32, 64, 100, 200);
   *     circle = rect.toCircle();
   *     circle.x; // => 82
   *     circle.y; // => 164
   *     circle.radius; // => 50
   *
   * @return {Circle} 生成した円領域
   */
  toCircle() {
    var radius = ((this.width < this.height) ? this.width : this.height)/2;
    return new Circle(this.centerX, this.centerY, radius);
  }

  /**
   * @method toArray
   * this の各値を要素とする配列を生成して返します。
   *
   * ### Example
   *     rect = phina.geom.Rect(32, 64, 100, 200);
   *     rect.toArray(); // => [32, 64, 100, 200]
   *
   * @return {Number[]} 生成した配列
   */
  toArray() {
    return [this.x, this.y, this.width, this.height];
  }

  /**
   * @property {Number} left
   * キャンバス左端から矩形領域の左辺までの距離
   *
   * left を変更すると矩形領域の幅（width）が自動的に調整されます。
   *
   * ### Example
   *     rect = phina.geom.Rect(32, 64, 100, 200);
   *     rect.left; // => 32
   *     rect.width; // => 100
   *     rect.right; // => 132
   *     
   *     rect.left = 42;
   *     rect.width; // => 90
   */
  get left()   { return this.x; }
  set left(v)  { this.width -= v-this.x; this.x = v; }

  /**
   * @property {Number} top
   * キャンバス上端から矩形領域の上辺までの位置
   *
   * top を変更すると矩形領域の高さ（height）が自動的に調整されます。
   */
  get top()   { return this.y; }
  set top(v)  { this.height -= v-this.y; this.y = v; }

  /**
   * @property {Number} right
   * キャンバス左端から矩形領域の右辺までの距離
   *
   * right を変更すると矩形領域の幅（width）が自動的に調整されます。
   */
  get right()   { return this.x + this.width; }
  set right(v)  { this.width += v-this.right; }

  /**
   * @property {Number} bottom
   * キャンバス上端から矩形領域の下辺までの位置
   *
   * bottom を変更すると矩形領域の高さ（height）が自動的に調整されます。
   */
  get bottom()   { return this.y + this.height; }
  set bottom(v)  { this.height += v-this.bottom; }
  
  /**
   * @property {Number} centerX
   * 矩形領域の x 座標
   *
   * 現時点では読み取り専用です。
   */
  get centerX()   { return this.x + this.width/2; }
  set centerX(v)  {
    // TODO: 検討中
  }
  /**
   * @property {Number} centerY
   * 矩形領域の y 座標
   *
   * 現時点では読み取り専用です。
   */
  get centerY()   { return this.y + this.height/2; }
  set centerY(v)  {
    // TODO: 検討中
  }

}

/**
 * Circle.toRect
 * 循環参照を回避するため、ここで定義
 */
Circle.prototype.toRect = function() {
  var size = this.size;
  return new Rect(this.x - this.radius, this.y - this.radius, size, size);
};

/**
 * @class phina.geom.Matrix33
 * # 行列クラス
 * 3x3の行列を表すクラスです。
 * 
 * <pre>
 * | m00 m01 m02 |
 * | m10 m11 m12 |
 * | m20 m21 m22 |
 * </pre>
 */
class Matrix33 {

  /**
   * @method init
   * マトリックスクラスのコンストラクタです。
   *
   * 引数は m00, m01, m02, m10, m11, m12, m20, m21, m22 の順に指定します。
   * 引数が9個に満たない場合は単位行列を生成します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = phina.geom.Matrix33();
   *     mat1.m00 + mat2.m00; // => 2
   *     mat1.m01 - mat2.m01; // => 2
   *
   * @param {...number} m00, m01,... 各要素の値
   */
  constructor() {
    /** @type {number} */
    this.m00;
    /** @type {number} */
    this.m01;
    /** @type {number} */
    this.m02;

    /** @type {number} */
    this.m10;
    /** @type {number} */
    this.m11;
    /** @type {number} */
    this.m12;

    /** @type {number} */
    this.m20;
    /** @type {number} */
    this.m21;
    /** @type {number} */
    this.m22;

    if (arguments.length >= 9) {
      this.set.apply(this, arguments);
    }
    else {
      this.identity();
    }
  }

  /**
   * @method set
   * @chainable this の各要素の値を再設定します。
   * 
   * ### Example
   *   mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *   mat2 = phina.geom.Matrix33();
   *   mat2.set(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *   mat1.toString() == mat2.toString(); // => true
   * 
   * @param {number} m00
   * @param {number} m01
   * @param {number} m02
   * @param {number} m10
   * @param {number} m11
   * @param {number} m12
   * @param {number} m20
   * @param {number} m21
   * @param {number} m22
   * @returns {this}
   */
  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    this.m00 = m00; this.m01 = m01; this.m02 = m02;
    this.m10 = m10; this.m11 = m11; this.m12 = m12;
    this.m20 = m20; this.m21 = m21; this.m22 = m22;

    return this;
  }

  /**
   * @method identity
   * @chainable
   * 自身を単位行列にして返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = phina.geom.Matrix33();
   *     mat1.identity().toString() == mat2.toString(); // => true
   *
   * @returns {this}
   */
  identity() {
    this.m00 = 1; this.m01 = 0; this.m02 = 0;
    this.m10 = 0; this.m11 = 1; this.m12 = 0;
    this.m20 = 0; this.m21 = 0; this.m22 = 1;
    return this;
  }

  /**
   * @method clone
   * 自身のコピーを生成して返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = mat1.clone();
   *     mat1.toString() == mat2.toString(); // => true
   *     mat1 == mat2; // => false
   *
   * @return {Matrix33} 行列オブジェクト
   */
  clone() {
    return new Matrix33(
      this.m00, this.m01, this.m02,
      this.m10, this.m11, this.m12,
      this.m20, this.m21, this.m22
    );
  }

  /**
   * @method determinant
   * 行列式を返します
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(0, -2, 0, -1, 3, 1, 4, 2, 1);
   *     mat1.determinant(); // => -10
   *     mat1.identity().determinant(); // => 1
   *
   * @return {Number} 行列式
   */
  determinant() {
    var m00 = this.m00; var m01 = this.m01; var m02 = this.m02;
    var m10 = this.m10; var m11 = this.m11; var m12 = this.m12;
    var m20 = this.m20; var m21 = this.m21; var m22 = this.m22;
    
    return m00*m11*m22 + m10*m21*m02 + m01*m12*m20 - m02*m11*m20 - m01*m10*m22 - m12*m21*m00;
  }

  /**
   * @method transpose
   * @chainable
   * 自身を転置行列にして返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat2 = phina.geom.Matrix33(1, 4, 7, 2, 5, 8, 3, 6, 9);
   *     mat1.transpose().toString() == mat2.toString(); // => true
   *
   * @returns {this}
   */
  transpose() {
    var swap = function(a, b) {
      var temp = this[a];
      this[a] = this[b];
      this[b] = temp;
    }.bind(this);

    swap('m01', 'm10');
    swap('m02', 'm20');
    swap('m12', 'm21');
    
    return this;
  }

  /**
   * @method invert
   * @chainable
   * 自身を逆行列にして返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);
   *     mat2 = mat1.clone().invert();
   *     mat3 = mat1.clone().multiply(mat2);
   *     mat3.toString() == phina.geom.Matrix33.IDENTITY.toString(); // => true
   *
   * @returns {this}
   */
  invert() {
    var m00 = this.m00; var m01 = this.m01; var m02 = this.m02;
    var m10 = this.m10; var m11 = this.m11; var m12 = this.m12;
    var m20 = this.m20; var m21 = this.m21; var m22 = this.m22;

    var det = this.determinant();

    // |m00, m01, m02|
    // |m10, m11, m12|
    // |m20, m21, m22|
    this.m00 = (m11*m22-m12*m21)/det;
    this.m01 = (m10*m22-m12*m20)/det*-1;
    this.m02 = (m10*m21-m11*m20)/det;
    
    this.m10 = (m01*m22-m02*m21)/det*-1;
    this.m11 = (m00*m22-m02*m20)/det;
    this.m12 = (m00*m21-m01*m20)/det*-1;
    
    this.m20 = (m01*m12-m02*m11)/det;
    this.m21 = (m00*m12-m02*m10)/det*-1;
    this.m22 = (m00*m11-m01*m10)/det;
    
    this.transpose();
    
    return this;

  }

  /**
   * @method multiply
   * @chainable
   * 自身に別の行列を乗じます。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);
   *     mat2 = mat1.clone().invert();
   *     mat3 = mat1.clone().multiply(mat2);
   *     mat3.toString() == phina.geom.Matrix33.IDENTITY.toString(); // => true
   *
   * @param {Matrix33} mat 乗じる行列
   * @returns {this}
   */
  multiply(mat) {
    var a00 = this.m00, a01 = this.m01, a02 = this.m02;
    var a10 = this.m10, a11 = this.m11, a12 = this.m12;
    var a20 = this.m20, a21 = this.m21, a22 = this.m22;
    var b00 = mat.m00, b01 = mat.m01, b02 = mat.m02;
    var b10 = mat.m10, b11 = mat.m11, b12 = mat.m12;
    var b20 = mat.m20, b21 = mat.m21, b22 = mat.m22;

    this.m00 = a00*b00 + a01*b10 + a02*b20;
    this.m01 = a00*b01 + a01*b11 + a02*b21;
    this.m02 = a00*b02 + a01*b12 + a02*b22;

    this.m10 = a10*b00 + a11*b10 + a12*b20;
    this.m11 = a10*b01 + a11*b11 + a12*b21;
    this.m12 = a10*b02 + a11*b12 + a12*b22;

    this.m20 = a20*b00 + a21*b10 + a22*b20;
    this.m21 = a20*b01 + a21*b11 + a22*b21;
    this.m22 = a20*b02 + a21*b12 + a22*b22;
    
    return this;
  }

  /**
   * @method multiplyVector2
   * 自身に2次元ベクトル v を乗じます。
   * 2次元ベクトルは (x, y, 1) として乗算します。
   *
   * ### Example
   *     mat = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);
   *     v = phina.geom.Vector2(2, 4)
   *     mat.multiplyVector2(v) // => {x: -3, y: 12}
   *
   * @param {import("./vector2").PrimitiveVector2} v 乗じるベクトル
   * @return {Vector2} 乗算結果のベクトル
   */
  multiplyVector2(v) {
    var vx = this.m00*v.x + this.m01*v.y + this.m02;
    var vy = this.m10*v.x + this.m11*v.y + this.m12;
    
    // return phina.geom.Vector2(vx, vy);
    return new Vector2(vx, vy);
  }

  // 行
  /**
   * @method getRow
   * row 番目の行を配列で返します。row が 0、1、2 のいずれかでなければ null を返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat1.getRow(0); // [1, 2, 3]
   *     mat1.getRow(1); // [4, 5, 6]
   *     mat1.getRow(9); // null
   *
   * @param {0|1|2} row 行番号
   * @return {Number[]|null} 行を表す配列
   */
  getRow(row) {
    if ( row === 0 ) {
      return [ this.m00, this.m01, this.m02 ];
    }
    else if ( row === 1 ) {
      return [ this.m10, this.m11, this.m12 ];
    }
    else if ( row === 2 ) {
      return [ this.m20, this.m21, this.m22 ];
    }
    else {
      return null;
    }
  }

  /**
   * @method getCol
   * col 番目の列を配列で返します。col が 0、1、2 のいずれかでなければ null を返します。
   *
   * ### Example
   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);
   *     mat1.getCol(0); // [1, 4, 7]
   *     mat1.getCol(1); // [2, 5, 8]
   *     mat1.getRow(-1); // null
   *
   * @param {0|1|2} col 列番号
   * @return {Number[]|null} 列を表す配列
   */
  getCol(col) {
    if ( col === 0 ) {
      return [ this.m00, this.m10, this.m20 ];
    }
    else if ( col === 1 ) {
      return [ this.m01, this.m11, this.m21 ];
    }
    else if ( col === 2 ) {
      return [ this.m02, this.m12, this.m22 ];
    }
    else {
      return null;
    }
  }

  /**
   * @method toString
   * 行列を JSON 形式で表現した文字列を返します。
   *
   * ### Example
   *     v = phina.geom.Vector2(3, 4);
   *     v2 = v.clone();
   *     v2.x == v.x; // => true
   *
   * @return {String} JSON 文字列
   */
  toString() {
    return format.call("|{m00}, {m01}, {m02}|\n|{m10}, {m11}, {m12}|\n|{m20}, {m21}, {m22}|", this);
    // return "|{m00}, {m01}, {m02}|\n|{m10}, {m11}, {m12}|\n|{m20}, {m21}, {m22}|".format(this);
  }

  /**
   * デフォルト単位行列を返す
   */
  static get IDENTITY() {
    return IDENTITY
  }
}

var IDENTITY = new Matrix33().identity();

/**
* @class phina.geom.Collision
* # 衝突判定用クラス
* 衝突判定のためのクラスです。すべてのメソッドがスタティックメソッドです。
* 
*/
class Collision {

  /**
   * @method testCircleCircle
   * @static
   * 2つの円領域が重なっているかどうかを判定します
   *
   * ### Example
   *     circle1 = phina.geom.Circle(100, 100, 30);
   *     circle2 = phina.geom.Circle(130, 140, 30);
   * phina.geom.Collision.testCircleCircle(circle1, circle2); // => true
   *
   * @param {Circle} circle0 円領域オブジェクト
   * @param {Circle} circle1 円領域オブジェクト
   * @return {Boolean} 領域が重なっているかどうか
   */
  static testCircleCircle(circle0, circle1) {
    var distanceSquared = Vector2.distanceSquared(circle0, circle1);
    return distanceSquared <= Math.pow(circle0.radius + circle1.radius, 2);
  }
  /**
   * @method testRectRect
   * @static
   * 2つの矩形領域が重なっているかどうかを判定します
   *
   * ### Example
   *     rect1 = phina.geom.Rect(100, 100, 30, 40);
   *     rect2 = phina.geom.Rect(200, 200, 10, 10);
   *     phina.geom.Collision.testRectRect(rect1, rect2); // => false
   *
   * @param {Rect} rect0 矩形領域オブジェクト
   * @param {Rect} rect1 矩形領域オブジェクト
   * @return {Boolean} 領域が重なっているかどうか
   */
  static testRectRect(rect0, rect1) {
    return (rect0.left < rect1.right) && (rect0.right > rect1.left) &&
      (rect0.top < rect1.bottom) && (rect0.bottom > rect1.top);
  }
  /**
   * @method testCircleRect
   * @static
   * 円領域と矩形領域が重なっているかどうかかを判定します
   *
   * ### Example
   *     circle = phina.geom.Circle(100, 100, 30);
   *     rect = phina.geom.Rect(100, 100, 30, 40);
   *     phina.geom.Collision.testCircleRect(circle, rect); // => true
   *
   * @param {Circle} circle 円領域オブジェクト
   * @param {Rect} rect 矩形領域オブジェクト
   * @return {Boolean} 領域が重なっているかどうか
   */
  static testCircleRect(circle, rect) {
    // まずは大きな矩形で判定(高速化)
    var bigRect = new Rect(rect.left-circle.radius, rect.top-circle.radius, rect.width+circle.radius*2, rect.height+circle.radius*2);
    if (bigRect.contains(circle.x, circle.y) === false) {
      return false;
    }
    
    // 2種類の矩形と衝突判定
    var r = new Rect(rect.left-circle.radius, rect.top, rect.width+circle.radius*2, rect.height);
    if (r.contains(circle.x, circle.y)) {
      return true;
    }
    r.set(rect.left, rect.top-circle.radius, rect.width, rect.height+circle.radius*2);
    if (r.contains(circle.x, circle.y)) {
      return true;
    }
    
    // 円と矩形の４点の判定
    var c = new Circle(circle.x, circle.y, circle.radius);
    // left top
    if (c.contains(rect.left, rect.top)) {
      return true;
    }
    // right top
    if (c.contains(rect.right, rect.top)) {
      return true;
    }
    // right bottom
    if (c.contains(rect.right, rect.bottom)) {
      return true;
    }
    // left bottom
    if (c.contains(rect.left, rect.bottom)) {
      return true;
    }
    
    return false;
  }
  /**
   * @method testCircleLine
   * @static
   * 円領域と線分が重なっているかどうかを判定します
   *
   * ### Example
   *     circle = phina.geom.Circle(100, 100, 20);
   *     p1 = phina.geom.Vector2(0, 0);
   *     p2 = phina.geom.Vector2(300, 400);
   *     phina.geom.Collision.testCircleLine(circle, p1, p2); // => true
   *
   * @param {Circle} circle 円領域オブジェクト
   * @param {import("./vector2").PrimitiveVector2} p1 線分の端の座標
   * @param {import("./vector2").PrimitiveVector2} p2 線分の端の座標
   * @return {Boolean} 円領域と線分が重なっているかどうか
   */
  static testCircleLine (circle, p1, p2) {
    // 先に線分端との判定
    if (circle.contains(p1.x, p1.y) || circle.contains(p2.x, p2.y)) return true;
    // 半径の2乗
    var r2 = circle.radius * circle.radius;
    // 円の中心座標
    var p3 = new Vector2(circle.x, circle.y);
    // 各ベクトル
    var p1p2 = Vector2.sub(p1, p2);
    var p1p3 = Vector2.sub(p1, p3);
    var p2p3 = Vector2.sub(p2, p3);
    // 外積
    var cross = Vector2.cross(p1p2, p1p3);
    // 外積の絶対値の2乗
    var cross2 = cross * cross;
    // p1p2の長さの2乗
    var length2 = p1p2.lengthSquared();
    // 円の中心から線分までの垂線の距離の2乗
    var d2 = cross2 / length2;
    // 円の半径の2乗より小さいなら重複
    if (d2 <= r2) {
      var dot1 = Vector2.dot(p1p3, p1p2);
      var dot2 = Vector2.dot(p2p3, p1p2);
      // 通常は内積の乗算
      if (dot1 * dot2 <= 0) return true;
    }
    return false;
  }
  /**
   * @method testLineLine
   * @static
   * 2つの線分が重なっているかどうかを判定します
   * 参考：http://www5d.biglobe.ne.jp/~tomoya03/shtml/algorithm/Intersection.htm
   *
   * ### Example
   *     p1 = phina.geom.Vector2(100, 100);
   *     p2 = phina.geom.Vector2(200, 200);
   *     p3 = phina.geom.Vector2(150, 240);
   *     p4 = phina.geom.Vector2(200, 100);
   * phina.geom.Collision.testLineLine(p1, p2, p3, p4); // => true
   *
   * @param {import("./vector2").PrimitiveVector2} p1 線分1の端の座標
   * @param {import("./vector2").PrimitiveVector2} p2 線分1の端の座標
   * @param {import("./vector2").PrimitiveVector2} p3 線分2の端の座標
   * @param {import("./vector2").PrimitiveVector2} p4 線分2の端の座標
   * @return {Boolean} 線分1と線分2が重なっているかどうか
   */
  static testLineLine (p1, p2, p3, p4) {
    //同一ＸＹ軸上に乗ってる場合の誤判定回避
    if (p1.x == p2.x && p1.x == p3.x && p1.x == p4.x) {
      var min = Math.min(p1.y, p2.y);
      var max = Math.max(p1.y, p2.y);
      if (min <= p3.y && p3.y <= max || min <= p4.y && p4.y <= max) return true;
      return false;
    }
    if (p1.y == p2.y && p1.y == p3.y && p1.y == p4.y) {
      var min = Math.min(p1.x, p2.x);
      var max = Math.max(p1.x, p2.x);
      if (min <= p3.x && p3.x <= max || min <= p4.x && p4.x <= max) return true;
      return false;
    }
    //通常判定
    var a = (p1.x - p2.x) * (p3.y - p1.y) + (p1.y - p2.y) * (p1.x - p3.x);
    var b = (p1.x - p2.x) * (p4.y - p1.y) + (p1.y - p2.y) * (p1.x - p4.x);
    var c = (p3.x - p4.x) * (p1.y - p3.y) + (p3.y - p4.y) * (p3.x - p1.x);
    var d = (p3.x - p4.x) * (p2.y - p3.y) + (p3.y - p4.y) * (p3.x - p2.x);
    return a * b <= 0 && c * d <= 0;
  }
  /**
   * @method testRectLine
   * @static
   * 矩形と線分が重なっているかどうかを判定します
   *
   * ### Example
   *     rect = phina.geom.Rect(120, 130, 40, 50);
   *     p1 = phina.geom.Vector2(100, 100);
   *     p2 = phina.geom.Vector2(200, 200);
   * phina.geom.Collision.testRectLine(rect, p1, p2); // => true
   *
   * @param {Rect} rect 矩形領域オブジェクト
   * @param {import("./vector2").PrimitiveVector2} p1 線分の端の座標
   * @param {import("./vector2").PrimitiveVector2} p2 線分の端の座標
   * @return {Boolean} 矩形と線分が重なっているかどうか
   */
  static testRectLine (rect, p1, p2) {
      //包含判定(p1が含まれてれば良いのでp2の判定はしない）
      if (rect.left <= p1.x && p1.x <= rect.right && rect.top <= p1.y && p1.y <= rect.bottom ) return true;

      //矩形の４点
      var r1 = new Vector2(rect.left, rect.top);     //左上
      var r2 = new Vector2(rect.right, rect.top);    //右上
      var r3 = new Vector2(rect.right, rect.bottom); //右下
      var r4 = new Vector2(rect.left, rect.bottom);  //左下

      //矩形の４辺をなす線分との接触判定
      if (Collision.testLineLine(p1, p2, r1, r2)) return true;
      if (Collision.testLineLine(p1, p2, r2, r3)) return true;
      if (Collision.testLineLine(p1, p2, r3, r4)) return true;
      if (Collision.testLineLine(p1, p2, r1, r4)) return true;
      return false;
  }

}

/**
 * @class phina.geom.Vector3
 * # 3次元ベクトルクラス（未実装）
 * 3次元のベクトルや座標を表すクラスです。
 */
class Vector3 {

  /**
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [z=0]
   */
  constructor(x, y, z) {
    /**
     * x座標
     * @type {number}
     */
    this.x = x || 0;

    /**
     * y座標
     * @type {number}
     */
    this.y = y || 0;

    /**
     * z座標
     * @type {number}
     */
    this.z = z || 0;

    /**
     * z軸回転角度
     */
    this.alpha = 0;

    /**
     * x軸回転角度
     */
    this.beta = 0;

    /**
     * y軸回転角度
     */
    this.gamma = 0;
  }

}

/**
 * Canvasのfillstyle/strokeStyleの値として使用できる型。文字列の場合、CSS colorデータ型に準拠するもの
 * @typedef {string | CanvasGradient | CanvasPattern} CanvasStyle
 */

/**
 * @class phina.graphics.Canvas
 * キャンバス拡張クラス
 */
class Canvas {

  /**
   * @param {string | HTMLCanvasElement} [canvas] ベースとなるcanvas要素。文字列で指定するときは`#phina`のようにセレクタ形式にする。指定しなかった場合は新規作成される
   */
  constructor(canvas) {
    /** @type HTMLCanvasElement */
    this.canvas;
    if (typeof canvas === 'string') {
      this.canvas = document.querySelector(canvas);
    } else {
      this.canvas = canvas || document.createElement('canvas');
    }

    /** @type HTMLCanvasElement */
    this.domElement = this.canvas;

    /** @type CanvasRenderingContext2D */
    this.context = this.canvas.getContext('2d');
    this.context.lineCap = 'round';
    this.context.lineJoin = 'round';
  }

  /**
   * サイズをセット
   * @param {number} width
   * @param {number} height
   * @returns {this}
   */
  setSize(width, height) {
    this.canvas.width   = width;
    this.canvas.height  = height;
    return this;
  }

  /**
   * サイズを画面（ウィンドウサイズ）に合わせてリセット
   * @returns {this}
   */
  setSizeToScreen() {
    this.canvas.style.position  = "fixed";
    this.canvas.style.margin    = "0px";
    this.canvas.style.padding   = "0px";
    this.canvas.style.left      = "0px";
    this.canvas.style.top       = "0px";
    return this.setSize(window.innerWidth, window.innerHeight);
  }

  /**
   * 比率を維持しながらサイズを画面（ウィンドウサイズ）に合わせる
   * @param {boolean} [isEver=true] ウィンドウリサイズで変更が必要になるたびにリサイズ処理をするかどうか
   * @returns {void}
   */
  fitScreen(isEver) {
    isEver = isEver === undefined ? true : isEver;

    var _fitFunc = function() {
      var e = this.domElement;
      var s = e.style;
      
      s.position = "absolute";
      s.margin = "auto";
      s.left = "0px";
      s.top  = "0px";
      s.bottom = "0px";
      s.right = "0px";

      var rateWidth = e.width/window.innerWidth;
      var rateHeight= e.height/window.innerHeight;
      var rate = e.height/e.width;
      
      if (rateWidth > rateHeight) {
        s.width  = Math.floor(innerWidth)+"px";
        s.height = Math.floor(innerWidth*rate)+"px";
      }
      else {
        s.width  = Math.floor(innerHeight/rate)+"px";
        s.height = Math.floor(innerHeight)+"px";
      }
    }.bind(this);
    
    // 一度実行しておく
    _fitFunc();

    // リサイズ時のリスナとして登録しておく
    if (isEver) {
      phina.global.addEventListener("resize", _fitFunc, false);
    }
  }

  /**
   * クリア
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [width]
   * @param {number} [height]
   * @returns {this}
   */
  clear(x, y, width, height) {
    x = x || 0;
    y = y || 0;
    width = width || this.width;
    height= height|| this.height;
    this.context.clearRect(x, y, width, height);
    return this;
  }

  /**
   * @param {CanvasStyle} fillStyle
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [width]
   * @param {number} [height]
   * @returns {this}
   */
  clearColor(fillStyle, x, y, width, height) {
    x = x || 0;
    y = y || 0;
    width = width || this.width;
    height= height|| this.height;

    var context = this.context;

    context.save();
    context.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0); // 行列初期化
    context.fillStyle = fillStyle;     // 塗りつぶしスタイルセット
    context.fillRect(x, y, width, height);
    context.restore();

    return this;
  }


  /**
   * パスを開始(リセット)
   * @returns {this}
   */
  beginPath() {
    this.context.beginPath();
    return this;
  }

  /**
   * パスを閉じる
   * @returns {this}
   */
  closePath() {
    this.context.closePath();
    return this;
  }


  /**
   * 新規パス生成
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  moveTo(x, y) {
    this.context.moveTo(x, y);
    return this;
  }

  /**
   * パスに追加
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  lineTo(x, y) {
    this.context.lineTo(x, y);
    return this;
  }

  /**
   * 
   * @returns {this}
   */
  quadraticCurveTo() {
    this.context.quadraticCurveTo.apply(this.context, arguments);
    return this;
  }

  /**
   * 
   * @returns {this}
   */
  bezierCurveTo() {
    this.context.bezierCurveTo.apply(this.context, arguments);
    return this;
  }

  /**
   * パス内を塗りつぶす
   * @returns {this}
   */
  fill() {
    this.context.fill();
    return this;
  }

  /**
   * パス上にラインを引く
   * @returns {this}
   */
  stroke() {
    this.context.stroke();
    return this;
  }

  /**
   * クリップ
   * @returns {this}
   */
  clip() {
    this.context.clip();
    return this;
  }

      
  /**
   * 点描画
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  drawPoint(x, y) {
    return this.strokeRect(x, y, 1, 1);
  }

  /**
   * ラインパスを作成
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @returns {this}
   */
  line(x0, y0, x1, y1) {
    return this.moveTo(x0, y0).lineTo(x1, y1);
  }
  
  /**
   * ラインを描画
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @returns {this}
   */
  drawLine(x0, y0, x1, y1) {
    return this.beginPath().line(x0, y0, x1, y1).stroke();
  }

  /**
   * ダッシュラインを描画
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {string|number} pattern
   * @returns {this}
   */
  drawDashLine(x0, y0, x1, y1, pattern) {
    var patternTable = null;
    if (typeof(pattern) == "string") {
      patternTable = pattern;
    }
    else {
      pattern = pattern || 0xf0f0;
      patternTable = pattern.toString(2);
    }
    // patternTable = patternTable.padding(16, '1');
    patternTable = padding.call(patternTable, 16, '1');
    
    var vx = x1-x0;
    var vy = y1-y0;
    var len = Math.sqrt(vx*vx + vy*vy);
    vx/=len; vy/=len;
    
    var x = x0;
    var y = y0;
    for (var i=0; i<len; ++i) {
      if (patternTable[i%16] == '1') {
        this.drawPoint(x, y);
        // this.fillRect(x, y, this.context.lineWidth, this.context.lineWidth);
      }
      x += vx;
      y += vy;
    }
    
    return this;
  }

  /**
   * v0(x0, y0), v1(x1, y1) から角度を求めて矢印を描画
   * http://hakuhin.jp/as/rotation.html
   * @param {number} x0
   * @param {number} y0
   * @param {number} x1
   * @param {number} y1
   * @param {number} arrowRadius
   * @returns {this}
   */
  drawArrow(x0, y0, x1, y1, arrowRadius) {
    var vx = x1-x0;
    var vy = y1-y0;
    var angle = Math.atan2(vy, vx)*180/Math.PI;
    
    this.drawLine(x0, y0, x1, y1);
    this.fillPolygon(x1, y1, arrowRadius || 5, 3, angle);
    
    return this;
  }


  /**
   * lines
   * @returns {this}
   */
  lines() {
    this.moveTo(arguments[0], arguments[1]);
    for (var i=1,len=arguments.length/2; i<len; ++i) {
      this.lineTo(arguments[i*2], arguments[i*2+1]);
    }
    return this;
  }

  /**
   * ラインストローク描画
   * @returns {this}
   */
  strokeLines() {
    this.beginPath();
    this.lines.apply(this, arguments);
    this.stroke();
    return this;
  }

  /**
   * ライン塗りつぶし描画
   * @returns {this}
   */
  fillLines() {
    this.beginPath();
    this.lines.apply(this, arguments);
    this.fill();
    return this;
  }
  
  /**
   * 四角形パスを作成する
   * @param {number} _x
   * @param {number} _y
   * @param {number} _width
   * @param {number} _height
   * @returns {this}
   */
  rect(_x, _y, _width, _height) {
    this.context.rect.apply(this.context, arguments);
    return this;
  }
  
  /**
   * 四角形塗りつぶし描画
   * @returns {this}
   */
  fillRect() {
    this.context.fillRect.apply(this.context, arguments);
    return this;
  }
  
  /**
   * 四角形ライン描画
   * @returns {this}
   */
  strokeRect() {
    this.context.strokeRect.apply(this.context, arguments);
    return this;
  }
  
  /**
   * 角丸四角形パス
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} radius
   * @returns {this}
   */
  roundRect(x, y, width, height, radius) {
    var l = x + radius;
    var r = x + width - radius;
    var t = y + radius;
    var b = y + height - radius;
    
    /*
    var ctx = this.context;
    ctx.moveTo(l, y);
    ctx.lineTo(r, y);
    ctx.quadraticCurveTo(x+width, y, x+width, t);
    ctx.lineTo(x+width, b);
    ctx.quadraticCurveTo(x+width, y+height, r, y+height);
    ctx.lineTo(l, y+height);
    ctx.quadraticCurveTo(x, y+height, x, b);
    ctx.lineTo(x, t);
    ctx.quadraticCurveTo(x, y, l, y);
    /**/
    
    this.context.arc(l, t, radius,     -Math.PI, -Math.PI*0.5, false);  // 左上
    this.context.arc(r, t, radius, -Math.PI*0.5,            0, false);  // 右上
    this.context.arc(r, b, radius,            0,  Math.PI*0.5, false);  // 右下
    this.context.arc(l, b, radius,  Math.PI*0.5,      Math.PI, false);  // 左下
    this.closePath();
    
    return this;
  }

  /**
   * 角丸四角形塗りつぶし
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} radius
   * @returns {this}
   */
  fillRoundRect(x, y, width, height, radius) {
    return this.beginPath().roundRect(x, y, width, height, radius).fill();
  }

  /**
   * 角丸四角形ストローク描画
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @param {number} radius
   * @returns {this}
   */
  strokeRoundRect(x, y, width, height, radius) {
    return this.beginPath().roundRect(x, y, width, height, radius).stroke();
  }

  /**
   * 円のパスを設定
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @returns {this}
   */
  circle(x, y, radius) {
    this.context.arc(x, y, radius, 0, Math.PI*2, false);
    return this;
  }
  
  /**
   * 塗りつぶし円を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @returns {this}
   */
  fillCircle(x, y, radius) {
    var c = this.context;
    c.beginPath();
    c.arc(x, y, radius, 0, Math.PI*2, false);
    c.closePath();
    c.fill();
    return this;
  }
  
  /**
   * ストローク円を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @returns {this}
   */
  strokeCircle(x, y, radius) {
    var c = this.context;
    c.beginPath();
    c.arc(x, y, radius, 0, Math.PI*2, false);
    c.closePath();
    c.stroke();
    return this;
  }

  /**
   * 円弧のパスを設定
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  arc(x, y, radius, startAngle, endAngle, anticlockwise) {
    this.context.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    return this;
  }
  
  /**
   * 塗りつぶし円弧を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  fillArc(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().arc(x, y, radius, startAngle, endAngle, anticlockwise).fill();
  }
  
  /**
   * ストローク円弧を描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  strokeArc(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().arc(x, y, radius, startAngle, endAngle, anticlockwise).stroke();
  }


  /**
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  pie(x, y, radius, startAngle, endAngle, anticlockwise) {
    var context = this.context;
    context.beginPath();
    context.moveTo(0, 0);
    context.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    context.closePath();
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  fillPie(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().pie(x, y, radius, startAngle, endAngle, anticlockwise).fill();
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} startAngle
   * @param {number} endAngle
   * @param {boolean} [anticlockwise]
   * @returns {this}
   */
  strokePie(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.beginPath().pie(x, y, radius, startAngle, endAngle, anticlockwise).stroke();
  }

  
  /**
   * ポリゴンパス
   * @param {number} x
   * @param {number} y
   * @param {number} size
   * @param {number} sides
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  polygon(x, y, size, sides, offsetAngle) {
    var radDiv = (Math.PI*2)/sides;
    var radOffset = (offsetAngle!==undefined) ? offsetAngle*Math.PI/180 : -Math.PI/2;
    
    this.moveTo(x + Math.cos(radOffset)*size, y + Math.sin(radOffset)*size);
    for (var i=1; i<sides; ++i) {
      var rad = radDiv*i+radOffset;
      this.lineTo(
        x + Math.cos(rad)*size,
        y + Math.sin(rad)*size
      );
    }
    this.closePath();
    return this;
  }

  /**
   * ポリゴン塗りつぶし
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} sides
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  fillPolygon(x, y, radius, sides, offsetAngle) {
    return this.beginPath().polygon(x, y, radius, sides, offsetAngle).fill();
  }

  /**
   * ポリゴンストローク描画
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} sides
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  strokePolygon(x, y, radius, sides, offsetAngle) {
    return this.beginPath().polygon(x, y, radius, sides, offsetAngle).stroke();
  }
  
  /**
   * star
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {number} [radius=64]
   * @param {number} [sides=5]
   * @param {any} [sideIndent=0.38]
   * @param {number} [offsetAngle]
   */
  star(x, y, radius, sides, sideIndent, offsetAngle) {
    x = x || 0;
    y = y || 0;
    radius = radius || 64;
    sides = sides || 5;
    var sideIndentRadius = radius * (sideIndent || 0.38);
    var radOffset = (offsetAngle) ? offsetAngle*Math.PI/180 : -Math.PI/2;
    var radDiv = (Math.PI*2)/sides/2;

    this.moveTo(
      x + Math.cos(radOffset)*radius,
      y + Math.sin(radOffset)*radius
    );
    for (var i=1; i<sides*2; ++i) {
      var rad = radDiv*i + radOffset;
      var len = (i%2) ? sideIndentRadius : radius;
      this.lineTo(
        x + Math.cos(rad)*len,
        y + Math.sin(rad)*len
      );
    }
    this.closePath();

    return this;
  }

  /**
   * 星を塗りつぶし描画
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [radius]
   * @param {number} [sides]
   * @param {any} [sideIndent]
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  fillStar(x, y, radius, sides, sideIndent, offsetAngle) {
    this.beginPath().star(x, y, radius, sides, sideIndent, offsetAngle).fill();
    return this;
  }

  /**
   * 星をストローク描画
   * @param {number} [x]
   * @param {number} [y]
   * @param {number} [radius]
   * @param {number} [sides]
   * @param {any} [sideIndent]
   * @param {number} [offsetAngle]
   * @returns {this}
   */
  strokeStar(x, y, radius, sides, sideIndent, offsetAngle) {
    this.beginPath().star(x, y, radius, sides, sideIndent, offsetAngle).stroke();
    return this;
  }

  /**
   * heart
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {this}
   */
  heart(x, y, radius, angle) {
    var half_radius = radius*0.5;
    // var rad = (angle === undefined) ? Math.PI/4 : Math.degToRad(angle);
    var rad = (angle === undefined) ? Math.PI/4 : degToRad(angle);

    // 半径 half_radius の角度 angle 上の点との接線を求める
    var p = Math.cos(rad)*half_radius;
    var q = Math.sin(rad)*half_radius;

    // 円の接線の方程式 px + qy = r^2 より y = (r^2-px)/q
    var x2 = -half_radius;
    var y2 = (half_radius*half_radius-p*x2)/q;

    // 中心位置調整
    var height = y2 + half_radius;
    var offsetY = half_radius-height/2;

    // パスをセット
    this.moveTo(0+x, y2+y+offsetY);

    this.arc(-half_radius+x, 0+y+offsetY, half_radius, Math.PI-rad, Math.PI*2);
    this.arc(half_radius+x, 0+y+offsetY, half_radius, Math.PI, rad);
    this.closePath();

    return this;
  }

  /**
   * fill heart
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {this}
   */
  fillHeart(x, y, radius, angle) {
    return this.beginPath().heart(x, y, radius, angle).fill();
  }

  /**
   * stroke heart
   * @param {number} x
   * @param {number} y
   * @param {number} radius
   * @param {number} angle
   * @returns {this}
   */
  strokeHeart(x, y, radius, angle) {
    return this.beginPath().heart(x, y, radius, angle).stroke();
  }

 /**
  * http://stackoverflow.com/questions/14169234/the-relation-of-the-bezier-curve-and-ellipse
  * @param {number} x
  * @param {number} y
  * @param {number} w
  * @param {number} h
  * @returns {this}
  */
  ellipse(x, y, w, h) {
    var ctx = this.context;
    var kappa = 0.5522848;

    var ox = (w / 2) * kappa; // control point offset horizontal
    var oy = (h / 2) * kappa; // control point offset vertical
    var xe = x + w;           // x-end
    var ye = y + h;           // y-end
    var xm = x + w / 2;       // x-middle
    var ym = y + h / 2;       // y-middle

    ctx.moveTo(x, ym);
    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
    // ctx.closePath();

    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @returns {this}
   */
  fillEllipse(x, y, width, height) {
    return this.beginPath().ellipse(x, y, width, height).fill();
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} width
   * @param {number} height
   * @returns {this}
   */
  strokeEllipse(x, y, width, height) {
    return this.beginPath().ellipse(x, y, width, height).stroke();
  }

  /**
   * 
   * @returns {this}
   */
  fillText() {
    this.context.fillText.apply(this.context, arguments);
    return this;
  }

  /**
   * 
   * @returns {this}
   */
  strokeText() {
    this.context.strokeText.apply(this.context, arguments);
    return this;
  }

  /**
   * 画像を描画
   * @returns {void} this返し忘れ？
   */
  drawImage() {
    this.context.drawImage.apply(this.context, arguments);
  }

  /**
   * 行列をセット
   * @param {number} m11
   * @param {number} m12
   * @param {number} m21
   * @param {number} m22
   * @param {number} dx
   * @param {number} dy
   * @returns {this}
   */
  setTransform(m11, m12, m21, m22, dx, dy) {
    this.context.setTransform(m11, m12, m21, m22, dx, dy);
    return this;
  }

  /**
   * 行列をリセット
   * @returns {this}
   */
  resetTransform() {
    this.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
    return this;
  }
  /**
   * 中心に移動
   * @returns {this}
   */
  transformCenter() {
    this.context.setTransform(1, 0, 0, 1, this.width/2, this.height/2);
    return this;
  }

  /**
   * 移動
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  translate(x, y) {
    this.context.translate(x, y);
    return this;
  }
  
  /**
   * 回転
   * @param {number} rotation
   * @returns {this}
   */
  rotate(rotation) {
    this.context.rotate(rotation);
    return this;
  }
  
  /**
   * スケール
   * @param {number} scaleX
   * @param {number} scaleY
   * @returns {this}
   */
  scale(scaleX, scaleY) {
    this.context.scale(scaleX, scaleY);
    return this;
  }

  /**
   * 状態を保存
   * @returns {this}
   */
  save() {
    this.context.save();
    return this;
  }

  /**
   * 状態を復元
   * @returns {this}
   */
  restore() {
    this.context.restore();
    return this;
  }

  /**
   * 画像として保存
   * @param {string} [mime_type="image/png"]
   * @returns {void}
   */
  saveAsImage(mime_type) {
    mime_type = mime_type || "image/png";
    var data_url = this.canvas.toDataURL(mime_type);
    // data_url = data_url.replace(mime_type, "image/octet-stream");
    window.open(data_url, "save");
    
    // toDataURL を使えば下記のようなツールが作れるかも!!
    // TODO: プログラムで絵をかいて保存できるツール
  }

  /**
   * 幅
   */
  get width()   { return this.canvas.width; }
  set width(v)  { this.canvas.width = v; }

  /**
   * 高さ
   */
  get height()   { return this.canvas.height; }
  set height(v)  { this.canvas.height = v; }

  get fillStyle()   { return this.context.fillStyle; }
  set fillStyle(v)  { this.context.fillStyle = v; }

  get strokeStyle()   { return this.context.strokeStyle; }
  set strokeStyle(v)  { this.context.strokeStyle = v; }

  get globalAlpha()   { return this.context.globalAlpha; }
  set globalAlpha(v)  { this.context.globalAlpha = v; }

  get globalCompositeOperation()   { return this.context.globalCompositeOperation; }
  set globalCompositeOperation(v)  { this.context.globalCompositeOperation = v; }

  get shadowBlur()   { return this.context.shadowBlur; }
  set shadowBlur(v)  { this.context.shadowBlur = v; }

  get shadowColor()   { return this.context.shadowColor; }
  set shadowColor(v)  { this.context.shadowColor = v; }

  get shadowOffsetX()   { return this.context.shadowOffsetX; }
  set shadowOffsetX(v)  { this.context.shadowOffsetX = v; }

  get shadowOffsetY()   { return this.context.shadowOffsetY; }
  set shadowOffsetY(v)  { this.context.shadowOffsetY = v; }

  get lineCap()   { return this.context.lineCap; }
  set lineCap(v)  { this.context.lineCap = v; }

  get lineJoin()   { return this.context.lineJoin; }
  set lineJoin(v)  { this.context.lineJoin = v; }

  get miterLimit()   { return this.context.miterLimit; }
  set miterLimit(v)  { this.context.miterLimit = v; }

  get lineWidth()   { return this.context.lineWidth; }
  set lineWidth(v)  { this.context.lineWidth = v; }

  get font()   { return this.context.font; }
  set font(v)  { this.context.font = v; }

  get textAlign()   { return this.context.textAlign; }
  set textAlign(v)  { this.context.textAlign = v; }

  get textBaseline()   { return this.context.textBaseline; }
  set textBaseline(v)  { this.context.textBaseline = v; }

  get imageSmoothingEnabled()   { return this.context.imageSmoothingEnabled; }
  set imageSmoothingEnabled(v)  {
    this.context.imageSmoothingEnabled = v;
    this.context['webkitImageSmoothingEnabled'] = v;
    this.context['mozImageSmoothingEnabled'] = v;
  }

  /**
   * テキストの長さを計測
   * @param {string} font
   * @param {string} text
   * @returns {TextMetrics}
   */
  static measureText(font, text) {
    this._context.font = font;
    return this._context.measureText(text);
  }

  /**
   * 線形グラデーションを生成
   * @returns {CanvasGradient}
   */
  static createLinearGradient() {
    return this._context.createLinearGradient.apply(this._context, arguments);
  }

  /**
   * 円形グラデーションを生成
   * @returns {CanvasGradient}
   */
  static createRadialGradient() {
    return this._context.createRadialGradient.apply(this._context, arguments);
  }

}

/**
 * デフォルトのプライベートCanvasコンテキスト  
 * Staticメソッド用
 */
Canvas._context = (function() {
  if (Support.canvas) {
    return document.createElement('canvas').getContext('2d');
  }
  else {
    return null;
  }
})();

// import { first, last, clear } from "../core/array"

/**
 * @class phina.input.Input
 * _extends phina.util.EventDispatcher
 */
class Input extends EventDispatcher {

  /**
   * @constructor
   * @param {HTMLCanvasElement | HTMLDocument} domElement KeyBoardサブクラスではHTMLDocument、それ以外のサブクラスではHTMLCanvasElement
   */
  constructor(domElement) {
    super();

    this.domElement = domElement || window.document;

    this.position = new Vector2(0, 0);
    this.startPosition = new Vector2(0, 0);
    this.deltaPosition = new Vector2(0, 0);
    this.prevPosition = new Vector2(0, 0);
    this._tempPosition = new Vector2(0, 0);

    this.maxCacheNum = Input.defaults.maxCacheNum;
    this.minDistance = Input.defaults.minDistance;
    this.maxDistance = Input.defaults.maxDistance;
    this.cachePositions = [];
    this.flickVelocity = new Vector2(0, 0);

    this.flags = 0;
    
    /**
     * KeyBoardクラス拡張時の型エラー対策のためunion型とするが、本クラスではnumberとして使用
     * @type {number | {[k: string]: number}}
     */
    this.last;
  }

  /**
   * 更新
   * @returns {void}
   */
  update() {
    this.last = this.now;
    this.now = this.flags;
    this.start = (this.now ^ this.last) & this.now;
    this.end   = (this.now ^ this.last) & this.last;

    // 変化値を更新
    this.deltaPosition.x = this._tempPosition.x - this.position.x;
    this.deltaPosition.y = this._tempPosition.y - this.position.y;

    if (this.deltaPosition.x === 0 && this.deltaPosition.y === 0) {
      this._moveFlag = false;
    }
    else {
      this._moveFlag = true;
    }

    if (this.start) {
      this.startPosition.set(this.position.x, this.position.y);
    }

    // 前回の座標を更新
    this.prevPosition.set(this.position.x, this.position.y);

    // 現在の位置を更新
    this.position.set(this._tempPosition.x, this._tempPosition.y);

    if (this.cachePositions.length > this.maxCacheNum) {
      this.cachePositions.shift();
    }
    this.cachePositions.push(this.position.clone());
  }

  /**
   * @param {number} x
   * @param {number} y
   * @param {number} [flag=1] デフォルトは1(true)
   * @returns {void}
   */
  _start(x, y, flag) {
    flag = (flag !== undefined) ? flag : 1;
    // console.log('start', x, y);
    this._move(x, y);

    this.flags |= flag;

    x = this._tempPosition.x;
    y = this._tempPosition.y;
    this.position.set(x, y);
    this.prevPosition.set(x, y);

    this.flickVelocity.set(0, 0);
    // this.cachePositions.clear();
    this.cachePositions.length = 0;
  }

  /**
   * @param {number} [flag=1]
   * @returns {void}
   */
  _end(flag) {
    flag = (flag !== undefined) ? flag : 1;
    this.flags &= ~(flag);

    if (this.cachePositions.length < 2) return;

    // var first = this.cachePositions.first;
    // var last = this.cachePositions.last;
    var first = this.cachePositions[0];
    var last = this.cachePositions[this.cachePositions.length-1];

    var v = Vector2.sub(last, first);

    var len = v.length();

    if (len > this.minDistance) {
      // var normalLen = len.clamp(this.minDistance, this.maxDistance);
      var normalLen = clamp(len, this.minDistance, this.maxDistance);
      v.div(len).mul(normalLen);
      this.flickVelocity.set(v.x, v.y);
    }

    // this.cachePositions.clear();
    this.cachePositions.length = 0;
  }

  /**
   * スケールを考慮して位置を移動
   * @param {number} x
   * @param {number} y
   * @returns {void}
   */
  _move(x, y) {
    this._tempPosition.x = x;
    this._tempPosition.y = y;

    // adjust scale
    var elm = /** @type {HTMLCanvasElement} */(this.domElement);
    var rect = elm.getBoundingClientRect();
    if (rect.width) {
      this._tempPosition.x *= elm.width / rect.width;
    }
    if (rect.height) {
      this._tempPosition.y *= elm.height / rect.height;
    }
  }

  /**
   * @property    x
   * x座標値
   */
  get x() { return this.position.x; }
  set x(v) { this.position.x = v; }

  /**
   * @property    y
   * y座標値
   */
  get y() { return this.position.y; }
  set y(v) { this.position.y = v; }

  /**
   * @property    dx
   * dx値
   */
  get dx() { return this.deltaPosition.x; }
  set dx(v) { this.deltaPosition.x = v; }

  /**
   * @property    dy
   * dy値
   */
  get dy() { return this.deltaPosition.y; }
  set dy(v) { this.deltaPosition.y = v; }

  /**
   * @property    fx
   * fx値
   */
  get fx() { return this.flickVelocity.x; }
  set fx(v) { this.flickVelocity.x = v; }

  /**
   * @property    fy
   * fy値
   */
  get fy() { return this.flickVelocity.y; }
  set fy(v) { this.flickVelocity.y = v; }

}

Input.defaults = {
  maxCacheNum: 3,
  minDistance: 10,
  maxDistance: 100,
};

/**
 * @class phina.input.Keyboard
 * _extends phina.input.Input
 */
class Keyboard extends Input {

  /**
   * @constructor
   * @param {Document} domElement
   */
  constructor(domElement) {
    super(domElement);

    /** @type {HTMLDocument} */
    this.domElement;

    /** @type {{[k: number]: boolean}} */
    this.key = {};
    /** @type {{[k: number]: any}} true|false or 1|0 */
    this.press  = {};
    /** @type {{[k: number]: any}} */
    this.down   = {};
    /** @type {{[k: number]: any}} */
    this.up     = {};
    /** @type {{[k: number]: any}} */
    this.last   = {};

    /** @type {number | null} */
    this._keydown = null;
    /** @type {number | null} */
    this._keyup = null;
    /** @type {number | null} */
    this._keypress = null;

    var self = this;
    this.domElement.addEventListener('keydown', function(e) {
      self.key[e.keyCode] = true;
      self._keydown = e.keyCode;
    });

    this.domElement.addEventListener('keyup', function(e) {
      self.key[e.keyCode] = false;
      self._keyup = e.keyCode;
    });
    this.domElement.addEventListener('keypress', function(e) {
      self._keypress = e.keyCode;
    });
  }

  /**
   * 情報更新処理
   * 毎フレーム呼んで下さい.
   * @returns {this}
   */
  update() {
    // TODO: 一括ビット演算で行うよう修正する
    for (var k in this.key) {
      this.last[k]    = this.press[k];
      this.press[k]   = this.key[k];
      
      this.down[k] = (this.press[k] ^ this.last[k]) & this.press[k];
      this.up[k] = (this.press[k] ^ this.last[k]) & this.last[k];
    }

    if (this._keydown) {
      this.flare('keydown', { keyCode: this._keydown });
      this._keydown = null;
    }
    if (this._keyup) {
      this.flare('keyup', { keyCode: this._keyup });
      this._keyup = null;
    }
    if (this._keypress) {
      this.flare('keypress', { keyCode: this._keypress });
      this._keypress = null;
    }
    
    return this;
  }

  /**
   * キーを押しているかをチェック
   * @param   {number|keyof typeof Keyboard.KEY_CODE} key keyCode or keyName
   * @returns {Boolean}   チェック結果
   */
  getKey(key) {
    if (typeof(key) === "string") {
      key = Keyboard.KEY_CODE[key];
    }
    return !!this.press[key] === true;
  }
  
  /**
   * キーを押したかをチェック
   * @param   {number|keyof typeof Keyboard.KEY_CODE} key keyCode or keyName
   * @returns {Boolean}   チェック結果
   */
  getKeyDown(key) {
    if (typeof(key) == "string") {
      key = Keyboard.KEY_CODE[key];
    }
    return this.down[key] == true;
  }
  
  /**
   * キーを離したかをチェック
   * @param   {number|keyof typeof Keyboard.KEY_CODE} key keyCode or keyName
   * @returns {Boolean}   チェック結果
   */
  getKeyUp(key) {
    if (typeof(key) == "string") {
      key = Keyboard.KEY_CODE[key];
    }
    return this.up[key] == true;
  }
  
  /**
   * キーの方向を Angle(Degree) で取得
   * @returns {Boolean}   角度(Degree)
   */
  getKeyAngle() {
    var angle = null;
    var arrowBit =
      // (this.getKey("left")   << 3) | // 1000
      // (this.getKey("up")     << 2) | // 0100
      // (this.getKey("right")  << 1) | // 0010
      // (this.getKey("down"));         // 0001
      (this.getKey("left") ? 1 : 0   << 3) | // 1000
      (this.getKey("up") ? 1 : 0     << 2) | // 0100
      (this.getKey("right") ? 1 : 0  << 1) | // 0010
      (this.getKey("down") ? 1 : 0);         // 0001
    
    if (arrowBit !== 0 && Keyboard.ARROW_BIT_TO_ANGLE_TABLE.hasOwnProperty(arrowBit)) {
      angle = Keyboard.ARROW_BIT_TO_ANGLE_TABLE[arrowBit];
    }
    
    return angle;
  }

  /**
   * キーの押している向きを取得
   * 正規化されている
   * @returns {Vector2}
   */
  getKeyDirection() {
    var direction = new Vector2(0, 0);

    if (this.getKey("left")) {
      direction.x = -1;
    }
    else if (this.getKey("right")) {
      direction.x = 1;
    }
    if (this.getKey("up")) {
      direction.y = -1;
    }
    else if (this.getKey("down")) {
      direction.y = 1;
    }

    if (direction.x && direction.y) {
      direction.div(Math.SQRT2);
    }

    return direction;
  }
  
  /**
   * キーの状態を設定する
   * @param {string | number} key
   * @param {boolean} flag
   * @returns {this}
   */
  setKey(key, flag) {
    if (typeof(key) == "string") {
      key = Keyboard.KEY_CODE[key];
    }
    this.key[key] = flag;
    
    return this;
  }

  /**
   * キーを全て離したことにする
   * @returns {this}
   */
  clearKey() {
    this.key = {};
    
    return this;
  }

}


/**
 * @static
 * @enum {number}
 * 方向のアングル jsduckでは数字をプロパティに指定できない？
 */
Keyboard.ARROW_BIT_TO_ANGLE_TABLE = {
  /* @property 下 */
  0x01: 270,
  /* @property 右 */
  0x02:   0,
  /* @property 上 */
  0x04:  90,
  /* @property 左 */
  0x08: 180,

  /* @property 右上 */
  0x06:  45,
  /* @property 右下 */
  0x03: 315,
  /* @property 左上 */
  0x0c: 135,
  /* @property 左下 */
  0x09: 225,

  // 三方向同時押し対応
  // 想定外の操作だが対応しといたほうが無難
  /* @property 右上左 */
  0x0e:  90,
  /* @property 上左下 */
  0x0d: 180,
  /* @property 左下右 */
  0x0b: 270,
  /* @property 下右上 */
  0x07:   0,
};

/**
 * @static
 * @enum {number}
 * キー番号
 */
Keyboard.KEY_CODE = {
  /* @property */
  "backspace" : 8,
  /* @property */
  "tab"       : 9,
  /* @property */
  "enter"     : 13,
  /* @property */
  "return"    : 13,
  /* @property */
  "shift"     : 16,
  /* @property */
  "ctrl"      : 17,
  /* @property */
  "alt"       : 18,
  /* @property */
  "pause"     : 19,
  /* @property */
  "capslock"  : 20,
  /* @property */
  "escape"    : 27,
  /* @property */
  "pageup"    : 33,
  /* @property */
  "pagedown"  : 34,
  /* @property */
  "end"       : 35,
  /* @property */
  "home"      : 36,
  /* @property */
  "left"      : 37,
  /* @property */
  "up"        : 38,
  /* @property */
  "right"     : 39,
  /* @property */
  "down"      : 40,
  /* @property */
  "insert"    : 45,
  /* @property */
  "delete"    : 46,
  
  /* @property */
  "0" : 48,
  /* @property */
  "1" : 49,
  /* @property */
  "2" : 50,
  /* @property */
  "3" : 51,
  /* @property */
  "4" : 52,
  /* @property */
  "5" : 53,
  /* @property */
  "6" : 54,
  /* @property */
  "7" : 55,
  /* @property */
  "8" : 56,
  /* @property */
  "9" : 57,
  /* @property */
  
  "a" : 65,
  /* @property */
  "A" : 65,
  /* @property */
  "b" : 66,
  /* @property */
  "B" : 66,
  /* @property */
  "c" : 67,
  /* @property */
  "C" : 67,
  /* @property */
  "d" : 68,
  /* @property */
  "D" : 68,
  /* @property */
  "e" : 69,
  /* @property */
  "E" : 69,
  /* @property */
  "f" : 70,
  /* @property */
  "F" : 70,
  /* @property */
  "g" : 71,
  /* @property */
  "G" : 71,
  /* @property */
  "h" : 72,
  /* @property */
  "H" : 72,
  /* @property */
  "i" : 73,
  /* @property */
  "I" : 73,
  /* @property */
  "j" : 74,
  /* @property */
  "J" : 74,
  /* @property */
  "k" : 75,
  /* @property */
  "K" : 75,
  /* @property */
  "l" : 76,
  /* @property */
  "L" : 76,
  /* @property */
  "m" : 77,
  /* @property */
  "M" : 77,
  /* @property */
  "n" : 78,
  /* @property */
  "N" : 78,
  /* @property */
  "o" : 79,
  /* @property */
  "O" : 79,
  /* @property */
  "p" : 80,
  /* @property */
  "P" : 80,
  /* @property */
  "q" : 81,
  /* @property */
  "Q" : 81,
  /* @property */
  "r" : 82,
  /* @property */
  "R" : 82,
  /* @property */
  "s" : 83,
  /* @property */
  "S" : 83,
  /* @property */
  "t" : 84,
  /* @property */
  "T" : 84,
  /* @property */
  "u" : 85,
  /* @property */
  "U" : 85,
  /* @property */
  "v" : 86,
  /* @property */
  "V" : 86,
  /* @property */
  "w" : 87,
  /* @property */
  "W" : 87,
  /* @property */
  "x" : 88,
  /* @property */
  "X" : 88,
  /* @property */
  "y" : 89,
  /* @property */
  "Y" : 89,
  /* @property */
  "z" : 90,
  /* @property */
  "Z" : 90,
  
  /* @property */
  "numpad0" : 96,
  /* @property */
  "numpad1" : 97,
  /* @property */
  "numpad2" : 98,
  /* @property */
  "numpad3" : 99,
  /* @property */
  "numpad4" : 100,
  /* @property */
  "numpad5" : 101,
  /* @property */
  "numpad6" : 102,
  /* @property */
  "numpad7" : 103,
  /* @property */
  "numpad8" : 104,
  /* @property */
  "numpad9" : 105,
  /* @property */
  "multiply"      : 106,
  /* @property */
  "add"           : 107,
  /* @property */
  "subtract"      : 109,
  /* @property */
  "decimalpoint"  : 110,
  /* @property */
  "divide"        : 111,

  /* @property */
  "f1"    : 112,
  /* @property */
  "f2"    : 113,
  /* @property */
  "f3"    : 114,
  /* @property */
  "f4"    : 115,
  /* @property */
  "f5"    : 116,
  /* @property */
  "f6"    : 117,
  /* @property */
  "f7"    : 118,
  /* @property */
  "f8"    : 119,
  /* @property */
  "f9"    : 120,
  /* @property */
  "f10"   : 121,
  /* @property */
  "f11"   : 122,
  /* @property */
  "f12"   : 123,
  
  /* @property */
  "numlock"   : 144,
  /* @property */
  "scrolllock": 145,
  /* @property */
  "semicolon" : 186,
  /* @property */
  "equalsign" : 187,
  /* @property */
  "comma"     : 188,
  /* @property */
  "dash"      : 189,
  /* @property */
  "period"    : 190,
  /* @property */
  "forward slash" : 191,
  /* @property */
  "/": 191,
  /* @property */
  "grave accent"  : 192,
  /* @property */
  "open bracket"  : 219,
  /* @property */
  "back slash"    : 220,
  /* @property */
  "close bracket"  : 221,
  /* @property */
  "single quote"  : 222,
  /* @property */
  "space"         : 32

};

/**
 * @class phina.input.Mouse
 * _extends phina.input.Input
 */
class Mouse extends Input {

  /**
   * @constructor
   * @param {HTMLCanvasElement} domElement
   */
  constructor(domElement) {
    super(domElement);

    this.id = 0;

    /** @type {HTMLCanvasElement} */
    this.domElement;

    var self = this;
    this.domElement.addEventListener('mousedown', function(e) {
      self._start(pointX.get.call(e), pointY.get.call(e), 1<<e.button);
      // self._start(e.pointX, e.pointY, 1<<e.button);
    });

    this.domElement.addEventListener('mouseup', function(e) {
      self._end(1<<e.button);
    });
    this.domElement.addEventListener('mousemove', function(e) {
      self._move(pointX.get.call(e), pointY.get.call(e));
      // self._move(e.pointX, e.pointY);
    });

    // マウスがキャンバス要素の外に出た場合の対応
    this.domElement.addEventListener('mouseout', function(e)  {
      self._end(1);
    });
  }

  /**
   * ボタン取得
   * @param {string | number} button
   * @returns {boolean}
   */
  getButton(button) {
    if (typeof(button) == "string") {
      button = BUTTON_MAP[button];
    }
    
    return (this.now & button) != 0;
  }

  /**
   * ボタンダウン取得
   * @param {string | number} button
   * @returns {boolean}
   */
  getButtonDown(button) {
    if (typeof(button) === 'string') {
      button = BUTTON_MAP[button];
    }

    return (this.start & button) != 0;
  }
      
  /**
   * ボタンアップ取得
   * @param {string | number} button
   * @returns {boolean}
   */
  getButtonUp(button) {
    if (typeof(button) == "string") {
      button = BUTTON_MAP[button];
    }
    
    return (this.end & button) != 0;
  }

}

/** @static @property */
Mouse.BUTTON_LEFT = 0x1;
/** @static @property */
Mouse.BUTTON_MIDDLE = 0x2;
/** @static @property */
Mouse.BUTTON_RIGHT = 0x4;

/**
 * @type {{[k: string]: number}}
 */
var BUTTON_MAP = {
  "left"  : Mouse.BUTTON_LEFT,
  "middle": Mouse.BUTTON_MIDDLE,
  "right" : Mouse.BUTTON_RIGHT
};

Mouse.prototype.getPointing = function() { return this.getButton("left"); };
Mouse.prototype.getPointingStart = function() { return this.getButtonDown("left"); };
Mouse.prototype.getPointingEnd = function() { return this.getButtonUp("left"); };

/**
 * @class phina.input.Touch
 * _extends phina.input.Input
 */
class Touch$1 extends Input {

  /**
   * @constructor
   * @param {HTMLCanvasElement} domElement
   * @param {boolean} [isMulti]
   */
  constructor(domElement, isMulti) {
    super(domElement);

    this.id = null;

    /** @type {boolean} */
    this.released = undefined;

    if (isMulti === true) {
      return ;
    }

    var self = this;
    this.domElement.addEventListener('touchstart', function(e) {
      self._start(touchPointX.get.call(e), touchPointY.get.call(e));
      // self._start(e.pointX, e.pointY, true);
    });

    this.domElement.addEventListener('touchend', function(e) {
      self._end();
    });
    this.domElement.addEventListener('touchmove', function(e) {
      self._move(touchPointX.get.call(e), touchPointY.get.call(e));
      // self._move(e.pointX, e.pointY);
    });
  }

  /**
   * タッチしているかを判定
   * @returns {boolean}
   */
  getTouch() {
    return this.now != 0;
  }
  
  /**
   * タッチ開始時に true
   * @returns {boolean}
   */
  getTouchStart() {
    return this.start != 0;
  }
  
  /**
   * タッチ終了時に true
   * @returns {boolean}
   */
  getTouchEnd() {
    return this.end != 0;
  }

}

/**
 * @method
 * ポインティング状態取得(mouse との差異対策)
 */
Touch$1.prototype.getPointing        = Touch$1.prototype.getTouch;
/**
 * @method
 * ポインティングを開始したかを取得(mouse との差異対策)
 */
Touch$1.prototype.getPointingStart   = Touch$1.prototype.getTouchStart;
/**
 * @method
 * ポインティングを終了したかを取得(mouse との差異対策)
 */
Touch$1.prototype.getPointingEnd     = Touch$1.prototype.getTouchEnd;


/**
 * @class phina.input.TouchList
 */
class TouchList {

  /**
   * @param {HTMLCanvasElement} domElement
   */
  constructor(domElement) {
    this.domElement = domElement;

    /** @type {Touch[]} */
    this.touches = [];

    /** @type {{[id:number]: Touch}} */
    var touchMap = this.touchMap = {};

    // 32bit 周期でIDをループさせる
    this._id = new Uint32Array(1);

    var self = this;
    var each = Array.prototype.forEach;
    this.domElement.addEventListener('touchstart', function(e) {
      each.call(e.changedTouches, function(t) {
        var touch = self.getEmpty();
        touchMap[t.identifier] = touch;
        touch._start(pointX.get.call(t), pointY.get.call(t));
        // touch._start(t.pointX, t.pointY);
      });
    });

    this.domElement.addEventListener('touchend', function(e) {
      each.call(e.changedTouches, function(t) {
        var id = t.identifier;
        var touch = touchMap[id];
        touch._end();
        delete touchMap[id];
      });
    });
    this.domElement.addEventListener('touchmove', function(e) {
      each.call(e.changedTouches, function(t) {
        var touch = touchMap[t.identifier];
        touch._move(pointX.get.call(t), pointY.get.call(t));
        // touch._move(t.pointX, t.pointY);
      });
      stop.call(e);
    });

    // iPhone では 6本指以上タッチすると強制的にすべてのタッチが解除される
    this.domElement.addEventListener('touchcancel', function(e) {
      console.warn('この端末での同時タッチ数の制限を超えました。');
      each.call(e.changedTouches, function(t) {
        var id = t.identifier;
        var touch = touchMap[id];
        touch._end();
        delete touchMap[id];
      });
      stop.call(e);
    });
  }

  /**
   * 空のTouchクラスを生成して追加、返す
   * @returns {Touch}
   */
  getEmpty() {
    var touch = new Touch$1(this.domElement, true);
  
    touch.id = this.id;
    this.touches.push(touch);

    return touch;
  }

  /**
   * @param {string | number} id
   * @returns {Touch}
   */
  getTouch(id) {
    return this.touchMap[id];
  }

  /**
   * @param {Touch} touch
   * @returns {void}
   */
  removeTouch(touch) {
    var i = this.touches.indexOf(touch);
    this.touches.splice(i, 1);
  }

  /**
   * @returns {void}
   */
  update() {
    this.touches.forEach(function(touch) {
      if (!touch.released) {
        touch.update();

        if (touch.flags === 0) {
          touch.released = true;
        }
      }
      else {
        touch.released = false;
        this.removeTouch(touch);
      }

    }, this);
  }

  get id() { return this._id[0]++; }

}

/**
 * Gamepad API指定インターフェイス：https://developer.mozilla.org/en-US/docs/Web/API/Gamepad
 * 混同回避のためのエイリアス
 * @typedef {Gamepad} RawGamepad
 */

/**
 * @class phina.input.GamepadManager
 * _extends phina.util.EventDispatcher
 * 
 * ゲームパッドマネージャー.
 * ゲームパッド接続状況の監視、個々のゲームパッドの入力状態の更新を行う.
 */
class GamepadManager extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * 作成済みphina.input.Gamepadオブジェクトのリスト
     *
     * @type {Object.<number, PhinaGamepad>}
     */
    this.gamepads = {};

    /**
     * 作成済みゲームパッドのindexのリスト
     * 
     * @protected
     * @type {number[]}
     */
    this._created = [];

    /**
     * ラップ前Gamepadのリスト
     * 
     * @protected
     * @type {RawGamepad[]}
     */
    this._rawgamepads = [];

    /**
     * RawGamepadのtimestampとの比較用
     * 
     * @protected
     * @type {Object.<number, number>}
     */
    this._prevTimestamps = {};

    /**
     * Gamepad取得関数
     * 
     * @protected
     * @type {typeof Navigator.prototype.getGamepads | (()=> void)}
     */
    this._getGamepads;

    /** @type {globalThis} */
    var global = phina.global;
    var navigator = global.navigator;
    if (navigator && navigator.getGamepads) {
      this._getGamepads = navigator.getGamepads.bind(navigator);
    } else if (navigator && /** @type {any} */(navigator)['webkitGetGamepads']) {
      this._getGamepads = /** @type {any} */(navigator)['webkitGetGamepads'].bind(navigator);
    } else {
      this._getGamepads = function() {};
    }

    global.addEventListener('gamepadconnected', 
    /** @this GamepadManager */
    function(e) {
      var gamepad = this.get(e.gamepad.index);
      gamepad.connected = true;
      this.flare('connected', {
        gamepad: gamepad,
      });
    }.bind(this));

    global.addEventListener('gamepaddisconnected',
    /** @this GamepadManager */
    function(e) {
      var gamepad = this.get(e.gamepad.index);
      gamepad.connected = false;
      this.flare('disconnected', {
        gamepad: gamepad,
      });
    }.bind(this));
  }

  /**
   * 更新処理
   * 要毎フレーム実行
   * 
   * @returns {void}
   */
  update() {
    this._poll();

    for (var i = 0, end = this._created.length; i < end; i++) {
      var index = this._created[i];
      var rawgamepad = this._rawgamepads[index];

      if (!rawgamepad) {
        continue;
      }

      if (rawgamepad.timestamp && (rawgamepad.timestamp === this._prevTimestamps[i])) {
        this.gamepads[index]._updateStateEmpty();
        continue;
      }

      this._prevTimestamps[i] = rawgamepad.timestamp;
      this.gamepads[index]._updateState(rawgamepad);
    }
  }

  /**
   * 指定されたindexのGamepadオブジェクトを返す.
   * 未作成の場合は作成して返す.
   * 
   * @param {number} [index=0]
   * @returns {PhinaGamepad}
   */
  get(index) {
    index = index || 0;

    if (!this.gamepads[index]) {
      this._created.push(index);
      this.gamepads[index] = new PhinaGamepad(index);
    }

    return this.gamepads[index];
  }

  /**
   * 指定されたindexのGamepadオブジェクトを破棄する.
   * 破棄されたGamepadオブジェクトは以降更新されない.
   * 
   * @param {number} index
   * @returns {void}
   */
  dispose(index) {
    if (contains.call(this._created, index)) {
    // if (this._created.contains(index)) {
      var gamepad = this.get(index);
      delete this.gamepads[index];
      erase.call(this._created, index);
      // this._created.erase(index);

      gamepad.connected = false;
    }
  }

  /**
   * 指定されたindexのゲームパッドが接続中かどうかを返す.
   * Gamepadオブジェクトが未作成の場合でも動作する.
   * 
   * @param {number} [index=0]
   * @returns {boolean}
   */
  isConnected(index) {
    index = index || 0;

    return this._rawgamepads[index] && this._rawgamepads[index].connected;
  }

  /**
   * @protected
   * @returns {void}
   */
  _poll() {
    var rawGamepads = this._getGamepads();
    if (rawGamepads) {
      clear.call(this._rawgamepads);
      // this._rawgamepads.clear();

      for (var i = 0, end = rawGamepads.length; i < end; i++) {
        if (rawGamepads[i]) {
          this._rawgamepads.push(
            /** @type {RawGamepad} */ (rawGamepads[i])
          );
        }
      }
    }
  }

  // _static: {
  //   /** ブラウザがGamepad APIに対応しているか. */
  //   isAvailable: (function() {
  //     var nav = phina.global.navigator;
  //     if (!nav) return false;

  //     return (!!nav.getGamepads) || (!!nav.webkitGetGamepads);
  //   })(),
  // }

}

// static props
/** ブラウザがGamepad APIに対応しているか. */
GamepadManager.isAvailable = (function() {
  var nav = phina.global.navigator;
  if (!nav) return false;

  return (!!nav.getGamepads) || (!!nav['webkitGetGamepads']);
})();


/**
 * @typedef {Object} PhinaGamepadButtonState gamepadボタンパラメータ
 * @property {number} value ボタンの状態を表すdouble型の数値 参考：https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value
 * @property {*} pressed 0 | 1 (false | true)
 * @property {*} last 0 | 1 (false | true)
 * @property {*} down 0 | 1 (false | true)
 * @property {*} up 0 | 1 (false | true)
 */

/**
 * @class phina.input.Gamepad
 * ゲームパッド
 *
 * 直接インスタンス化せず、phina.input.GamepadManagerオブジェクトから取得して使用する.
 * 
 * ※"Gamepad"という名前のインターフェイスがすでに存在するため、
 * （https://developer.mozilla.org/en-US/docs/Web/API/Gamepad）
 * 混同回避のためクラス名を変更
 */
class PhinaGamepad {

  /**
   * @param {number} [index=0]
   */
  constructor(index) {
    this.index = index || 0;

    /** @type {PhinaGamepadButtonState[]} */
    // this.buttons = Array.range(0, 16).map(function() {
    this.buttons = range.call([], 0, 16).map(function() {
      return {
        value: 0,
        pressed: false,
        last: false,
        down: false,
        up: false,
      };
    });

    /**
     * アナログスティック傾き管理用
     * 
     * @type {Vector2[]}
     */
    this.sticks = range.call([], 0, 2).map(function() {
    // this.sticks = Array.range(0, 2).map(function() {
      return new Vector2(0, 0);
    });
    this.id = null;
    this.connected = false;
    this.mapping = null;
    this.timestamp = null;
  }

  /**
   * ボタンが押されているか.
   * 
   * @param {number|keyof typeof PhinaGamepad.BUTTON_CODE} button ボタンコード数値、あるいはラベル文字列
   * @returns {boolean}
   */
  getKey(button) {
    if (typeof(button) === 'string') {
      button = PhinaGamepad.BUTTON_CODE[button];
    }
    if (this.buttons[button]) {
      return this.buttons[button].pressed;
    } else {
      return false;
    }
  }

  /**
   * ボタンを押した.
   * 
   * @param {number|keyof typeof PhinaGamepad.BUTTON_CODE} button ボタンコード数値、あるいはラベル文字列
   * @returns {boolean}
   */
  getKeyDown(button) {
    if (typeof(button) === 'string') {
      button = PhinaGamepad.BUTTON_CODE[button];
    }
    if (this.buttons[button]) {
      return this.buttons[button].down;
    } else {
      return false;
    }
  }

  /**
   * ボタンを離した.
   * 
   * @param {number|keyof typeof PhinaGamepad.BUTTON_CODE} button ボタンコード数値、あるいはラベル文字列
   * @returns {boolean}
   */
  getKeyUp(button) {
    if (typeof(button) === 'string') {
      button = PhinaGamepad.BUTTON_CODE[button];
    }
    if (this.buttons[button]) {
      return this.buttons[button].up;
    } else {
      return false;
    }
  }

  /**
   * 十字キーの入力されている方向を度数単位で返す。
   * 
   * @returns {number | null} どの方向にも当てはまらない時はnull
   */
  getKeyAngle() {
    var angle = null;
    var arrowBit =
      (this.getKey('left') ? 1 : 0 << 3) | // 1000
      (this.getKey('up') ? 1 : 0 << 2) | // 0100
      (this.getKey('right') ? 1 : 0 << 1) | // 0010
      (this.getKey('down') ? 1 : 0); // 0001

    if (arrowBit !== 0 && ARROW_BIT_TO_ANGLE_TABLE.hasOwnProperty(arrowBit)) {
      angle = ARROW_BIT_TO_ANGLE_TABLE[
        /** @type {keyof typeof ARROW_BIT_TO_ANGLE_TABLE} */ (arrowBit)
      ];
    }

    return angle;
  }

  /**
   * 十字キーの入力されている方向をVector2で
   * 正規化されている.
   * 
   * @returns {Vector2}
   */
  getKeyDirection() {
    var direction = new Vector2(0, 0);

    if (this.getKey('left')) {
      direction.x = -1;
    } else if (this.getKey('right')) {
      direction.x = 1;
    }
    if (this.getKey('up')) {
      direction.y = -1;
    } else if (this.getKey('down')) {
      direction.y = 1;
    }

    if (direction.x && direction.y) {
      direction.div(Math.SQRT2);
    }

    return direction;
  }

  /**
   * スティックの入力されている方向.
   * 
   * @param {number} [stickId=0]
   * @returns {number | null} 対応するスティックがない場合はnull
   */
  getStickAngle(stickId) {
    stickId = stickId || 0;
    var stick = this.sticks[stickId];
    return stick ? Math.atan2(-stick.y, stick.x) : null;
  }

  /**
   * スティックの入力されている方向をVector2で取得
   * 
   * Vector2は参照ではなく、複製されて返却される
   * 
   * @param {number} [stickId=0] 省略すると0（通常左アナログスティックに対応するid）となる
   * @returns {Vector2} 対応するスティックが存在しない場合は初期化したVector2を返却
   */
  getStickDirection(stickId) {
    stickId = stickId || 0;
    return this.sticks ? this.sticks[stickId].clone() : new Vector2(0, 0);
  }

  /**
   * @public GamepadManagerからアクセス
   * @param {RawGamepad} gamepad
   */
  _updateState(gamepad) {
    this.id = gamepad.id;
    this.connected = gamepad.connected;
    this.mapping = gamepad.mapping;
    this.timestamp = gamepad.timestamp;

    for (var i = 0, iend = gamepad.buttons.length; i < iend; i++) {
      this._updateButton(gamepad.buttons[i], i);
    }

    for (var j = 0, jend = gamepad.axes.length; j < jend; j += 2) {
      this._updateStick(gamepad.axes[j + 0], j / 2, 'x');
      this._updateStick(gamepad.axes[j + 1], j / 2, 'y');
    }
  }

  /**
   * ボタンの入力状態をリセット
   * 
   * @public GamepadManagerからアクセス
   */
  _updateStateEmpty() {
    for (var i = 0, iend = this.buttons.length; i < iend; i++) {
      this.buttons[i].down = false;
      this.buttons[i].up = false;
    }
  }

   /**
    * @protected
    * @param {number | GamepadButton} value
    * @param {number} buttonId
    */
   _updateButton(value, buttonId) {
    if (this.buttons[buttonId] === undefined) {
      this.buttons[buttonId] = {
        value: 0,
        pressed: false,
        last: false,
        down: false,
        up: false,
      };
    }
    
    var button = this.buttons[buttonId];

    button.last = button.pressed;

    if (typeof value === 'object') {
      button.value = value.value;
      button.pressed = value.pressed;
    } else {
      button.value = value;
      button.pressed = value > PhinaGamepad.ANALOGUE_BUTTON_THRESHOLD;
    }

    button.down = (button.pressed ^ button.last) & button.pressed;
    button.up = (button.pressed ^ button.last) & button.last;
  }

  /**
   * @protected
   * @param {number} value
   * @param {number} stickId
   * @param {"x"|"y"} axisName
   */
  _updateStick(value, stickId, axisName) {
    if (this.sticks[stickId] === undefined) {
      this.sticks[stickId] = new Vector2(0, 0);
    }
    this.sticks[stickId][axisName] = value;
  }

}

/** ブラウザがGamepad APIに対応しているか. */
PhinaGamepad.isAvailable = (function() {
  var nav = phina.global.navigator;
  if (!nav) return false;

  return (!!nav.getGamepads) || (!!nav['webkitGetGamepads']);
})();

/** アナログ入力対応のボタンの場合、どの程度まで押し込むとonになるかを表すしきい値. */
PhinaGamepad.ANALOGUE_BUTTON_THRESHOLD = 0.5;

/** ボタン名とボタンIDのマップ. */
PhinaGamepad.BUTTON_CODE = {
  'a': 0,
  'b': 1,
  'x': 2,
  'y': 3,

  'l1': 4,
  'r1': 5,
  'l2': 6,
  'r2': 7,

  'select': 8,
  'start': 9,

  'l3': 10,
  'r3': 11,

  'up': 12,
  'down': 13,
  'left': 14,
  'right': 15,

  'special': 16,

  'A': 0,
  'B': 1,
  'X': 2,
  'Y': 3,

  'L1': 4,
  'R1': 5,
  'L2': 6,
  'R2': 7,

  'SELECT': 8,
  'START': 9,

  'L3': 10,
  'R3': 11,

  'UP': 12,
  'DOWN': 13,
  'LEFT': 14,
  'RIGHT': 15,

  'SPECIAL': 16,
};

var ARROW_BIT_TO_ANGLE_TABLE = {
  0x00: null,

  /* @property 下 */
  0x01: 270,
  /* @property 右 */
  0x02: 0,
  /* @property 上 */
  0x04: 90,
  /* @property 左 */
  0x08: 180,

  /* @property 右上 */
  0x06: 45,
  /* @property 右下 */
  0x03: 315,
  /* @property 左上 */
  0x0c: 135,
  /* @property 左下 */
  0x09: 225,

  // 三方向同時押し対応
  // 想定外の操作だが対応しといたほうが無難
  /* @property 右上左 */
  0x0e: 90,
  /* @property 上左下 */
  0x0d: 180,
  /* @property 左下右 */
  0x0b: 270,
  /* @property 下右上 */
  0x07: 0,
};

/**
 * @class phina.input.Accelerometer
 * スマートフォンのセンサー情報
 */
class Accelerometer {
  /**
   * @constructor
   */
  constructor() {
    var self = this;

    /** @property  gravity 重力センサー */
    this.gravity        = new Vector3(0, 0, 0);

    /** @property  acceleration 加速度センサー */
    this.acceleration   = new Vector3(0, 0, 0);

    /** @property  rotation 回転加速度センサー */
    this.rotation       = new Vector3(0, 0, 0);

    /** @property  orientation スマートフォンの傾き */
    this.orientation    = new Vector3(0, 0, 0);

    if (phina.isMobile()) {
      phina.global.addEventListener("devicemotion", function(e) {
        var acceleration = self.acceleration;
        var gravity = self.gravity;
        var rotation = self.rotation;
        
        if (e.acceleration) {
          acceleration.x = e.acceleration.x;
          acceleration.y = e.acceleration.y;
          acceleration.z = e.acceleration.z;
        }
        if (e.accelerationIncludingGravity) {
          gravity.x = e.accelerationIncludingGravity.x;
          gravity.y = e.accelerationIncludingGravity.y;
          gravity.z = e.accelerationIncludingGravity.z;
        }
        if (e.rotationRate) {
          rotation.x = rotation.beta  = e.rotationRate.beta;
          rotation.y = rotation.gamma = e.rotationRate.gamma;
          rotation.z = rotation.alpha = e.rotationRate.alpha;
        }
      });
      
      phina.global.addEventListener("deviceorientation", function(e) {
        var orientation = self.orientation;
        orientation.alpha   = e.alpha;  // z(0~360)
        orientation.beta    = e.beta;   // x(-180~180)
        orientation.gamma   = e.gamma;  // y(-90~90)
      });
    }
  }

}

/**
 * @class phina.app.Updater
 */
class Updater {

  /**
   * @param {import('../game/gameapp').AppUnion} app
   */
  constructor(app) {
    this.app = app;
  }

  /**
   * @param {import('../app/scene').Scene} root 
   */
  update(root) {
    this._updateElement(root);
  }

  /**
   * @private
   * @param {import('../app/element').Element} element
   */
  _updateElement(element) {
    var app = this.app;

    // 更新するかを判定
    if (element.awake === false) return ;

    // エンターフレームイベント
    if (element.has('enterframe')) {
      element.flare('enterframe', {
        app: this.app,
      });
    }

    // 更新
    if (element.update) element.update(app);

    // 子供を更新
    var len = element.children.length;
    if (element.children.length > 0) {
      var tempChildren = element.children.slice();
      for (var i=0; i<len; ++i) {
        this._updateElement(tempChildren[i]);
      }
    }
  }

}

/**
 * Interactiveクラスのappとして必要なプロパティ
 * @typedef {{
 *   on: typeof import('../util/eventdispatcher').EventDispatcher.prototype.on
 *   domElement?: HTMLCanvasElement
 *   pointer?: import('../display/domapp').Pointer
 *   pointers?: import('../display/domapp').Pointer[]
 * }} InteractableApp
 */

/**
 * @class phina.app.Interactive
 */
class Interactive {

  /**
   * @param {InteractableApp} app 
   */
  constructor(app) {
    this.app = app;
    this._enable = true;
    this.multiTouch = true;
    this.cursor = {
      normal: '',
      hover: 'pointer',
    };

    /** @type {import('./object2d').Object2D[]} */
    this._holds = [];
    this.app.on('changescene', function() {
      clear.call(this._holds);
      // this._holds.clear();
    }.bind(this));
  }

  /**
   * @returns {this}
   */
  enable() {
    this._enable = true;
    return this;
  }

  /**
   * @returns {this}
   */
  disable() {
    this._enable = false;
    return this;
  }

  /**
   * 指定要素のインタラクションチェック開始  
   * @param {import('./element').Element | import('./object2d').Object2D} root Sceneクラスに渡されるため
   */
  check(root) {
    // カーソルのスタイルを反映
    if (this.app.domElement) {
      if (this._holds.length > 0) {
        this.app.domElement.style.cursor = this.cursor.hover;
      }
      else {
        this.app.domElement.style.cursor = this.cursor.normal;
      }
    }

    if (!this._enable || !this.app.pointers) return ;
    this._checkElement(root);
  }

  /**
   * 指定要素のインタラクションチェック  
   * 子供がいれば再帰処理
   * @private
   * @param {import('./element').Element | import('./object2d').Object2D} element 
   */
  _checkElement(element) {
    var app = this.app;

    // 更新するかを判定
    if (element.awake === false) return ;

    // 子供を更新
    var len = element.children.length;
    if (element.children.length > 0) {
      var tempChildren = element.children.slice();
      for (var i=0; i<len; ++i) {
        this._checkElement(tempChildren[i]);
      }
    }

    // タッチ判定
    this._checkPoint(element);
  }

  /**
   * タッチ判定を行う
   * @private
   * @param {import('./element').Element | import('./object2d').Object2D} obj 
   */
  _checkPoint(obj) {
    var _obj = /** @type {import('./object2d').Object2D} */(obj);
    if (this.multiTouch) {
      this.app.pointers.forEach(function(p) {
        if (p.id !== null) {
          this.__checkPoint(_obj, p);
        }
      }, this);
    }
    else {
      this.__checkPoint(_obj, this.app.pointer);
    }
  }

  /**
   * @private
   * @param {import('./object2d').Object2D} obj
   * @param {import('../display/domapp').Pointer} p
   */
  __checkPoint(obj, p) {
    if (!obj.interactive) return ;

    var prevOverFlag = obj._overFlags[p.id];
    var overFlag = obj.hitTest(p.x, p.y);
    obj._overFlags[p.id] = overFlag;

    var e = {
      pointer: p,
      interactive: this,
      over: overFlag,
    };

    if (!prevOverFlag && overFlag) {
      obj.flare('pointover', e);

      if (obj.boundingType && obj.boundingType !== 'none') {
        this._holds.push(obj);
      }
    }
    if (prevOverFlag && !overFlag) {
      obj.flare('pointout', e);
      // this._holds.erase(obj);
      erase.call(this._holds, obj);
    }

    if (overFlag) {
      if (p.getPointingStart()) {
        obj._touchFlags[p.id] = true;
        obj.flare('pointstart', e);
        // クリックフラグを立てる
        obj._clicked = true;
      }
    }

    if (obj._touchFlags[p.id]) {
      obj.flare('pointstay', e);
      if (p._moveFlag) {
        obj.flare('pointmove', e);
      }
    }

    if (obj._touchFlags[p.id]===true && p.getPointingEnd()) {
      obj._touchFlags[p.id] = false;
      obj.flare('pointend', e);

      if (phina.isMobile() && obj._overFlags[p.id]) {
        obj._overFlags[p.id] = false;
        obj.flare('pointout', e);
        // this._holds.erase(obj);
        erase.call(this._holds, obj);
      }
    }
  }

}

/**
 * Accessoryのtargetプロパティとして最低限かどうか
 * @typedef {{
 *   detach: (accessor: Accessory)=> any
 *   [k: string]: any
 * }} AccessoryTarget
 */

/**
 * Accessoryアタッチ可能オブジェクト
 * @typedef {{
 *   attach: (accessor: Accessory)=> any
 * } & AccessoryTarget } AccessoryAttachable
 */

/**
 * @class phina.accessory.Accessory
 * _extends phina.util.EventDispatcher
 */
class Accessory extends EventDispatcher {

  /**
   * @constructor
   * @param {AccessoryTarget} [target]
   */
  constructor(target) {
    super();

    /**
     * 操作対象
     * @type {AccessoryTarget | undefined}
     */
    this.target = target;
  }

  /**
   * 更新関数
   * アタッチしたtargetのenterframeイベントを経由して
   * 毎フレーム実行される
   * 
   * 主にサブクラスで拡張してAccessoryとしての特徴づけを行う
   * 
   * @virtual
   * @protected
   * @param {*} _app Appクラスインスタンス
   */
  update(_app) {}

  /**
   * 操作対象を設定
   * 
   * @param {AccessoryTarget} target
   * @returns {this}
   */
  setTarget(target) {
    if (this.target === target) return this;

    this.target = target;
    return this;
  }

  /**
   * アタッチ対象を返す
   * 
   * @returns {AccessoryTarget | undefined}
   */
  getTarget() {
    return this.target;
  }

  /**
   * アタッチ対象が存在するかどうか
   * 
   * @returns {boolean}
   */
  isAttached() {
    return !!this.target;
  }

  /**
   * 対象に自身をアタッチさせる
   * 
   * @template {AccessoryAttachable} T
   * @param {T} element
   * @returns {this}
   */
  attachTo(element) {
    element.attach(this);
    this.setTarget(element);
    return this;
  }

  /**
   * targetに自身へのアタッチを外させ、target参照を切る
   * 
   * @returns {void}
   */
  remove() {
    if (!this.target) return;
    this.target.detach(this);
    this.target = undefined;
  }

}

// Element側で拡張
// phina.app.Element.prototype.$method('attach', function(accessory) {
//   if (!this.accessories) {
//     this.accessories = [];
//     this.on('enterframe', function(e) {
//       this.accessories.each(function(accessory) {
//         accessory.update && accessory.update(e.app);
//       });
//     });
//   }

//   this.accessories.push(accessory);
//   accessory.setTarget(this);
//   accessory.flare('attached');

//   return this;
// });

// phina.app.Element.prototype.$method('detach', function(accessory) {
//   if (this.accessories) {
//     this.accessories.erase(accessory);
//     accessory.setTarget(null);
//     accessory.flare('detached');
//   }

//   return this;
// });

/**
 * @typedef {"normal" | "delta" | "fps"} TweenerUpdateType tweener更新タイプ
 * 
 * @typedef {"to" | "by" | "from"} TweenerTaskMode tweenerタスクモード
 * 
 * @typedef {{
 *   type: "tween",
 *   mode: TweenerTaskMode,
 *   props: Object,
 *   duration?: number,
 *   easing?: import("../util/tween").TweenEasingType,
 * }} TweenTypeTaskParam Tweenクラスを使用するタスクの設定用パラメータ
 * 
 * @typedef {{
 *   type: "wait" | "call" | "set",
 *   data: {[key: string]: any}
 * }} CommonTypeTaskParam その他の汎用タスク用パラメータ
 * 
 * @typedef {TweenTypeTaskParam | CommonTypeTaskParam} TaskParamUnion
 */

/**
 * @class phina.accessory.Tweener
 * # Tweener
 * Tweenerはオブジェクトのプロパティに対して、
 * Tweenアニメーションの効果を与えるクラスです。  
 * 主に {@link phina.app.Element} とそのサブクラスで使用されます。
 * _extends phina.accessory.Accessory
 */
class Tweener extends Accessory {

  /**
   * @constructor
   * @param {import("./accessory").AccessoryTarget} [target]
   */
  constructor(target) {
    super(target);

    /**
     * アニメーションを更新する方法を指定します。  
     * 変更するとdurationによる時間の進み方が変わります。  
     * 詳しくは{@link #UPDATE_MAP}を参照してください。
     * @type {TweenerUpdateType}
     */
    this.updateType = 'delta';

    this._init();
  }

  /**
   * @private
   * 初期化
   */
  _init() {
    this._loop = false;

    /** @type {TaskParamUnion[]} */
    this._tasks = [];

    this._index = 0;
    this.playing = true;
    this._update = this._updateTask;
  }

  /**
   * @param {import('../app/baseapp').BaseApp} app
   */
  update(app) {
    this._update(app);
  }

  /**
   * {@link #updateType}を変更します。
   * @chainable
   * @param {TweenerUpdateType} type 更新方法を表す文字列
   * @returns {this}
   */
  setUpdateType(type) {
    this.updateType = type;
    return this;
  }

  /**
   * propsで指定した値になるまで、durationで指定した時間をかけて、アニメーションさせます。
   * @chainable
   * @param {{[key: string]: any}} props 変更したいプロパティをkeyとしたオブジェクト
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  to(props, duration, easing) {
    this._add({
      type: 'tween',
      mode: 'to',
      props: props,
      duration: duration,
      easing: easing,
    });
    return this;
  }

  /**
   * アニメーション開始時の値とpropsで指定した値を加算した値になるまで、durationで指定した時間をかけて、アニメーションさせます。
   * @chainable
   * @param {{[key: string]: any}} props 変更したいプロパティをkeyとしたオブジェクト
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  by(props, duration, easing) {
    this._add({
      type: 'tween',
      mode: 'by',
      props: props,
      duration: duration,
      easing: easing,
    });

    return this;
  }

  /**
   * propsで指定した値からアニメーション開始時の値になるまで、durationで指定した時間をかけて、アニメーションさせます。
   * @chainable
   * @param {{[key: string]: any}} props 変更したいプロパティをkeyとしたオブジェクト
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  from(props, duration, easing) {
    this._add({
      type: 'tween',
      mode: 'from',
      props: props,
      duration: duration,
      easing: easing,
    });
    return this;
  }

  /**
   * 指定した時間が経過するまで待機します。
   * @chainable
   * @param {Number} time waitする時間
   * @returns {this}
   */
  wait(time) {
    this._add({
      type: 'wait',
      data: {
        limit: time,
      },
    });
    return this;
  }

  /**
   * 現在設定されているアニメーションが終了した時に呼び出される関数をセットします。
   * @chainable
   * @param {Function} func 呼び出される関数
   * @param {Object} [self] (optional) func内でthisにしたいオブジェクト。
   * @param {Object[]} [args] (optional) funcの引数にしたい値
   * @returns {this}
   */
  call(func, self, args) {
    this._add({
      type: 'call',
      data: {
        func: func,
        self: self || this,
        args: args,
      },
    });
    return this;
  }

  /**
   * 現在設定されているアニメーションが終了した時にプロパティをセットします。  
   * 第一引数にオブジェクトをセットすることもできます。
   * @chainable
   * @param {String | Object} key valueをセットするプロパティ名か、変更したいプロパティをkeyとしたオブジェクト。
   * @param {Object} [value] (optional) セットする値
   * @returns {this}
   */
  set(key, value) {
    var values = null;
    if (arguments.length == 2) {
      values = {};
      values[key] = value;
    }
    else {
      values = key;
    }
    this._tasks.push({
      type: "set",
      data: {
        values: values
      }
    });

    return this;
  }

  /**
   * x, yに対して、 {@link #to} の処理を行います。
   * @chainable
   * @param {Number} x
   * @param {Number} y
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  moveTo(x, y, duration, easing) {
    return this.to({ x: x, y: y }, duration, easing);
  }
  
  /**
   * x, yに対して、 {@link #by} の処理を行います。
   * @chainable
   * @param {Number} x
   * @param {Number} y
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  moveBy(x, y, duration, easing) {
    return this.by({ x: x, y: y }, duration, easing);
  }

  /**
   * rotationに対して、 {@link #to} の処理を行います。
   * @chainable
   * @param {Number} rotation
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  rotateTo(rotation, duration, easing) {
    return this.to({ rotation: rotation }, duration, easing);
  }
  
  /**
   * rotationに対して、 {@link #by} の処理を行います。
   * @chainable
   * @param {Number} rotation
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  rotateBy(rotation, duration, easing) {
    return this.by({ rotation: rotation }, duration, easing);
  }

  /**
   * scaleX, scaleYに対して {@link #to} の処理を行います。
   * @chainable
   * @param {Number} scale scaleXとscaleYに設定する値
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  scaleTo(scale, duration, easing) {
    return this.to({ scaleX: scale, scaleY: scale }, duration, easing);
  }
  /**
   * scaleX, scaleYに対して {@link #by} の処理を行います。
   * @chainable
   * @param {Number} scale scaleXとscaleYに設定する値
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  scaleBy(scale, duration, easing) {
    return this.by({ scaleX: scale, scaleY: scale }, duration, easing);
  }

  /**
   * alphaに対して {@link #to} の処理を行います。
   * @chainable
   * @param {Number} value alphaに設定する値
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  fade(value, duration, easing) {
    return this.to({ alpha: value }, duration, easing);
  }

  /**
   * alphaを0にするアニメーションを設定します。
   * @chainable
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  fadeOut(duration, easing) {
    return this.fade(0.0, duration, easing);
  }

  /**
   * alphaを1にするアニメーションを設定します。
   * @chainable
   * @param {Number} [duration] (optional) アニメーションにかける時間
   * @param {import("../util/tween").TweenEasingType} [easing] (optional) easing {@link phina.util.Tween#EASING}を参照してください。
   * @returns {this}
   */
  fadeIn(duration, easing) {
    return this.fade(1.0, duration, easing);
  }

  /**
   * アニメーション開始
   * @chainable
   * @returns {this}
   */
  play() {
    this.playing = true;
    return this;
  }

  /**
   * アニメーションを一時停止
   * @chainable
   * @returns {this}
   */
  pause() {
    this.playing = false;
    return this;
  }

  /**
   * アニメーションを停止し、最初まで巻き戻します。
   * @chainable
   * @returns {this}
   */
  stop() {
    this.playing = false;
    this.rewind();
    return this;
  }

  /**
   * アニメーションを巻き戻す
   * @chainable
   * @returns {this}
   */
  rewind() {
    this._update = this._updateTask;
    this._index = 0;
    return this;
  }

  yoyo() {
    // TODO: 最初の値が分からないので反転できない...
    this._update = this._updateTask;
    this._index = 0;
    each$1.call(this._tasks, function(task) {
    // this._tasks.each(function(task) {
      if (task.type === 'tween') ;
    });
    this.play();

    return this;
  }

  /**
   * アニメーションループ設定
   * @chainable
   * @param {Boolean} flag
   * @returns {this}
   */
  setLoop(flag) {
    this._loop = flag;
    return this;
  }

  /**
   * アニメーションをクリア
   * @chainable
   * @override {EventDispatcher#clear}を上書き
   * @returns {this}
   */
  clear() {
    this._init();
    return this;
  }

  /**
   * @typedef {[string, ...any]} TweenParamArray
   * JSON形式でアニメーションを設定します。
   * @chainable
   * 
   * ```
   * [
   *   [method, arg1, arg2,,,],
   *   ['to', {value: 100}, 1000, 'swing'],
   *   ['wait', 1000],
   *   ['set', 'text', 'END']
   * ]
   * ```
   * 
   * @param {Object} json
   * @param {Boolean} json.loop (optional) ループする場合true
   * @param {TweenParamArray} json.tweens 設定するアニメーション
   * @returns {this}
   */
  fromJSON(json) {
    if (json.loop !== undefined) {
      this.setLoop(json.loop);
    }

    each$1.call(json.tweens, 
    // json.tweens.each(
      /**
       * @this Tweener
       * @param {TweenParamArray} t
       */
      function(t) {
        t = clone.call(t);
        // t = t.clone();
        var method = t.shift();
        this[method].apply(this, t);
      }, this
    );

    return this;
  }

  /**
   * @param {TaskParamUnion} params
   */
  _add(params) {
    this._tasks.push(params);
  }

  /**
   * @param {import('../app/baseapp').BaseApp} app
   */
  _updateTask(app) {
    if (!this.playing) return ;

    var task = this._tasks[this._index];
    if (!task) {
      if (this._loop) {
        this.rewind();
        this._update(app);
      }
      else {
        this.playing = false;
      }
      return ;
    }
    else {
      ++this._index;
    }

    if (task.type === 'tween') {
      // this._tween = phina.util.Tween();
      this._tween = new Tween();

      var duration = task.duration || this._getDefaultDuration();
      if (task.mode === 'to') {
        this._tween.to(this.target, task.props, duration, task.easing);
      }
      else if (task.mode === 'by') {
        this._tween.by(this.target, task.props, duration, task.easing);
      }
      else {
        this._tween.from(this.target, task.props, duration, task.easing);
      }
      this._update = this._updateTween;
      this._update(app);
    }
    else if (task.type === 'wait') {
      this._wait = {
        time: 0,
        limit: task.data.limit,
      };

      this._update = this._updateWait;
      this._update(app);
    }
    else if (task.type === 'call') {
      task.data.func.apply(task.data.self, task.data.args);
      // 1フレーム消費しないよう再帰
      this._update(app);
    }
    else if (task.type === 'set') {
      $extend.call(this.target, task.data.values);
      // this.target.$extend(task.data.values);
      // 1フレーム消費しないよう再帰
      this._update(app);
    }
  }

  /**
   * @param {import('../app/baseapp').BaseApp} app
   */
  _updateTween(app) {
    var tween = this._tween;
    var time = this._getUnitTime(app);

    tween.forward(time);
    this.flare('tween');

    if (tween.time >= tween.duration) {
      delete this._tween;
      this._tween = null;
      this._update = this._updateTask;
    }
  }

  /**
   * @param {import('../app/baseapp').BaseApp} app
   */
  _updateWait(app) {
    var wait = this._wait;
    var time = this._getUnitTime(app);
    wait.time += time;

    if (wait.time >= wait.limit) {
      delete this._wait;
      this._wait = null;
      this._update = this._updateTask;
    }
  }

  /**
   * @private
   * @param {import('../app/baseapp').BaseApp} app
   */
  _getUnitTime(app) {
    var obj = UPDATE_MAP[this.updateType];
    if (obj) {
      return obj.func(app);
    }
    else {
      return 1000 / app.fps;
    }
  }

  /**
   * @private
   */
  _getDefaultDuration() {
    var obj = UPDATE_MAP[this.updateType];
    return obj && obj.duration;
  }

}

/**
 * @static
 * {@link #updateType}に設定する更新方法の定義です。
 * 下記の表に定義済みの更新方法を{@link #updateType}に設定することで、
 * アニメーションの更新方法を変更することができます。
 * 
 * | 更新方法 | 単位(デフォルト値) | 1フレームあたりのアニメーション速度 |
 * |-|-|-|
 * | normal | ミリ秒(1000) | app.fpsによって変化 |
 * | delta | ミリ秒(1000) | 経過時間によって変化 |
 * | fps | フレーム(30) | 必ず同じ速度で変化 |
 * 
 * @type {{
 *   [key in TweenerUpdateType]: {
 *     func: (app: import('../app/baseapp').BaseApp)=> number,
 *     duration: number,
 *   }
 * }}
 */
var UPDATE_MAP = Tweener.UPDATE_MAP = {
  normal: {
    func: function(app) {
      return 1000 / app.fps;
    },
    duration: 1000,
  },

  delta: {
    func: function(app) {
      return app.ticker.deltaTime;
    },
    duration: 1000,
  },

  fps: {
    func: function() {
      return 1;
    },
    duration: 30,
  },

};

// Element側で拡張
// /**
//  * @member phina.app.Element
//  * @property tweener
//  * 自身にアタッチ済みの{@link phina.accessory.Tweener}オブジェクト。
//  */
// phina.app.Element.prototype.getter('tweener', function() {
//   if (!this._tweener) {
//     this._tweener = phina.accessory.Tweener().attachTo(this);
//   }
//   return this._tweener;
// });

/**
 * Draggableのtargetに指定可能なオブジェクト型
 * @typedef {{
 *   x: number
 *   y: number
 *   flare: (type: string)=> any
 *   setInteractive: (flag: boolean)=> any
 * } & import("./accessory").AccessoryAttachable } DraggableTarget
 */

/**
 * @class phina.accessory.Draggable
 * _extends phina.accessory.Accessory
 * 
 * 対象をドラッグ可能にするAccessory派生クラス
 * 
 * phina.app.Element派生クラスであれば、
 * draggableゲッターにアクセスするだけで有効化することも可能
 * 
 * ### イベント発火について
 * ドラッグ開始時に`dragstart`、
 * ドラッグ移動毎に`drag`、
 * ドラッグ終了時に時に`dragend`
 * イベントをそれぞれ自身および対象オブジェクト両方で発火する
 * 
 * @example
 * const target = new phina.display.Sprite("player");
 * const draggable = new phina.accessory.Draggable().attachTo(target);
 * draggable.on("dragend", ()=> {
 *   if (!isValidatePosition(target)) draggable.back()
 * })
 * 
 * @example
 * // Activate by getter
 * const el = new phina.app.Element();
 * el.draggable;
 * 
 */
class Draggable extends Accessory {

  /**
   * @constructor
   * 
   * @param {DraggableTarget} [target]
   * targetを受け取るが、それだけでは有効化されないことに注意
   * 同時に有効化する場合はattachToを使って付与する
   */
  constructor(target) {
    super(target);

    /** @type {DraggableTarget} */
    this.target;

    /**
     * @private
     * @type {boolean}
     */
    this._dragging = false;

    /**
     * @private
     * @type {boolean}
     * ※未使用
     */
    this._enable;

    /**
     * ドラッグ開始位置、処理毎に更新される
     * @type {Vector2}
     */
    this.initialPosition = new Vector2(0, 0);

    var self = this;
    this.on('attached',
    /** @this {Draggable} */
    function() {
      this.target.setInteractive(true);

      self._dragging = false;

      this.target.on('pointstart', 
      /** @this {DraggableTarget} */
      function() {
        if (Draggable._lock) return ;

        self._dragging = true;
        self.initialPosition.x = this.x;
        self.initialPosition.y = this.y;
        self.flare('dragstart');
        this.flare('dragstart');
      });

      this.target.on('pointmove', 
      /** @this {DraggableTarget} */
      function(e) {
        if (!self._dragging) return ;

        this.x += e.pointer.dx;
        this.y += e.pointer.dy;
        self.flare('drag');
        this.flare('drag');
      });

      this.target.on('pointend', 
      /** @this {DraggableTarget} */
      function(e) {
        if (!self._dragging) return ;

        self._dragging = false;
        self.flare('dragend');
        this.flare('dragend');
      });
    });
  }

  /**
   * ドラッグ開始位置にターゲットを戻す
   * パラメータ指定することでtweenerアニメーションを使って戻すことも可能
   * 
   * 終了時に`backend`イベントを発火
   * 
   * @param {number} [time] アニメーション時間（ミリ秒）。無指定の場合は即座に戻す
   * @param {import("../util/tween").TweenEasingType} [easing='easeOutElastic'] アニメーション種類
   * @returns {void}
   */
  back(time, easing) {
    if (time) {
      var t = this.target;
      t.setInteractive(false);
      var tweener = new Tweener().attachTo(t);
      tweener
        .to({
          x: this.initialPosition.x,
          y: this.initialPosition.y,
        }, time, easing || 'easeOutElastic')
        .call(function() {
          tweener.remove();

          t.setInteractive(true);
          this.flare('backend');
        }, this);
    }
    else {
      this.target.x = this.initialPosition.x;
      this.target.y = this.initialPosition.y;
      this.flare('backend');
    }
  }

  /**
   * @private ※未使用のため
   * @returns {void}
   */
  enable() {
    this._enable = true;
  }

  /**
   * 全てのインスタンスでドラッグを無効化する
   * 
   * @returns {void}
   */
  static lock() {
    this._lock = true;
  }

  /**
   * 全てのインスタンスでドラッグ無効化を解除
   * 
   * @returns {void}
   */
  static unlock() {
    this._lock = false;
  }

}

/**
 * @private
 * @type {boolean}
 */
Draggable._lock = false;

// Element側で定義
// phina.app.Element.prototype.getter('draggable', function() {
//   if (!this._draggable) {
//     this._draggable = phina.accessory.Draggable().attachTo(this);
//   }
//   return this._draggable;
// });

/**
 * TODO: Elementのプロパティを引き継ぎたい…
 * @typedef {Element | any} ElementBasedObject
 * _typedef {{[k: string]: any} & Element} ElementBasedObject
 */

/**
 * Elementに適合するためのプロパティを保持してるかチェック: template用
 * @typedef {{
 *   addChild: (el: Elementizable)=> Elementizable
 *   remove: ()=> Elementizable
 *   parent?: Elementizable
 *   has: (type:string)=> boolean
 *   flare: (type:string)=> any
 * }} Elementizable 
 */

/**
 * @class phina.app.Element
 * _extends phina.util.EventDispatcher
 * # 主に要素の親子関係を扱うクラス
 * 主に親子関係等を定義するクラスです。
 */
class Element extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * @type {ElementBasedObject | null}
     * 親要素
     */
    this.parent = null;

    /**
     * @type {ElementBasedObject[]}
     * 子要素配列
     */
    this.children = [];

    /**
     * @type {boolean}
     * 有効かどうか
     */
    this.awake = true;

    /**
     * @type {boolean}
     * 要素クリック管理用フラグ
     */
    this._clicked = false;

    /**
     * @type {import('../accessory/accessory').Accessory[]}
     * Accessory配列
     * attachメソッドによって初期化
     */
    this.accessories = undefined;

    /**
     * @private
     * @type {Tweener}
     * 内部Tweenerクラス
     * tweenerアクセサによって初期化
     */
    this._tweener = undefined;

    /**
     * @private
     * @type {Draggable}
     */
    this._draggable = undefined;
  }

  /**
   * @method addChild
   * 自身に子要素を追加します。
   *
   * 自身を子要素として引数で指定した要素に追加するには {@link #addChildTo} を使用してください。
   *
   * @template {Elementizable} T
   * @param {T} child 追加する子要素
   * @returns {T} 追加した子要素
   */
  addChild(child) {
    if (child.parent) child.remove();

    child.parent = this;
    this.children.push(child);

    child.has('added') && child.flare('added');

    return child;
  }

  /**
   * @method addChildTo
   * 自身を子要素として引数で指定した要素に追加します。
   *
   * 自身に子要素を追加するには {@link #addChild} を使用してください。
   *
   * @template {Elementizable} T
   * @param {T} parent 自身を子要素として追加する要素
   * @returns {this}
   */
  addChildTo(parent) {
    parent.addChild(this);

    return this;
  }

  /**
   * @method addChildAt
   * 自身を、指定した要素の子要素の任意の配列インデックスに追加します。
   *
   * @template {Elementizable} T
   * @param {T} child 追加する子要素
   * @param {Number} index インデックス番号
   * @returns {T} 追加した子要素
   */
  addChildAt(child, index) {
    if (child.parent) child.remove();

    child.parent = this;
    this.children.splice(index, 0, child);

    child.has('added') && child.flare('added');

    return child;
  }

  /**
   * @method getChildAt
   * 指定したインデックスの子要素を返します。
   *
   * @param {Number} index インデックス番号
   * @returns {ElementBasedObject} 指定したインデックスの子要素
   */
  getChildAt(index) {
    // return this.children.at(index);
    return at.call(this.children, index);
  }

  /**
   * @todo
   * @method getChildByName
   * 指定した名前の子要素を返します。（未実装）
   */
  getChildByName(name) {
    // TODO:
  }

  /**
   * @method getChildIndex
   * 指定した子要素のインデックス番号を返します。
   *
   * @param {ElementBasedObject} child 子要素
   * @return {Number} 指定した子要素のインデックス番号
   */
  getChildIndex(child) {
    return this.children.indexOf(child);
  }

  /**
   * @method getParent
   * 指定した要素の親要素を返します。
   *
   * @return {ElementBasedObject} 指定した要素の親要素
   */
  getParent() {
    return this.parent;
  }

  /**
   * @method getRoot
   * 指定した要素の階層ツリーのルートを返します。
   *
   * @return {ElementBasedObject} 指定した要素の階層ツリーのルート
   */
  getRoot() {
    /** @type {ElementBasedObject} */
    var elm = this;
    for (elm=this.parent; elm.parent != null; elm = elm.parent) {

    }
    return elm;
  }

  /**
   * @method removeChild
   * @chainable
   * 指定した要素を自身の子要素から削除します。
   *
   * @template {Elementizable} T
   * @param {T} child 要素
   * @returns {this}
   */
  removeChild(child) {
    var index = this.children.indexOf(child);
    if (index !== -1) {
      this.children.splice(index, 1);
      child.has('removed') && child.flare('removed');
    }
    return this;
  }

  /**
   * @method remove
   * 自身を親要素の子要素から削除します。
   * @returns {this}
   */
  remove() {
    if (!this.parent) return ;

    this.parent.removeChild(this);
    this.parent = null;

    return this;
  }

  /**
   * @method isAwake
   * 自身が有効かどうかを返します。
   *
   * @return {Boolean} 有効かどうか
   */
  isAwake() {
    return this.awake;
  }

  /**
   * @method wakeUp
   * 自身を有効にします。
   * @returns {this}
   */
  wakeUp() {
    this.awake = true;
    return this;
  }

  /**
   * @method sleep
   * 自身を無効にします。
   * @returns {this}
   */
  sleep() {
    this.awake = false;
    return this;
  }

  /**
   * @virtual
   * 更新用仮想関数
   * @param {import("../game/gameapp").AppUnion} [_app] アプリケーションクラス
   * @returns {any}
   */
  update(_app) {}

  /**
   * @method fromJSON
   * JSON 形式を使って自身に子要素を追加することができます。
   *
   * ### Example
   *      this.fromJSON({
   *        "children": {
   *          "label": {                  //キー名が追加する子要素の名前になる
   *            "className": "Label",     //クラス
   *            "arguments": ['hello!'],  //初期化時の引数
   *            "x":320,                  //その他プロパティ
   *            "y":480,
   *          },
   *        },
   *      });
   * 
   * @typedef {{
   *   children?: fromJSONData
   *   className?: string | (new (...args: any)=> any)
   *   arguments?: any
   *   [otherProp: string]: any
   * }} fromJSONData
   * @param {fromJSONData} json JSON 形式
   * @returns {this}
   */
  fromJSON(json) {

    var createChildren = 
      /**
       * @param {string | number} name
       * @param {fromJSONData} data
       */
      function(name, data) {
      var args = data.arguments;
      args = (args instanceof Array) ? args : [args];

      var _class;
      var element;
      if (typeof data.className === 'string') {
        // is phina class
        _class = phina.using(data.className);
        element = _class.apply(null, args);
      } else if (typeof data.className === 'function') {
        // is ES class
        // FIXME: インスタンス化にスプレッド構文が必要なため、es5サポートの場合babelが必要
        element = new data.className(...args);
      }

      element.name = name;
      this[name] = element;

      element.fromJSON(data);
      element.addChildTo(this);
    }.bind(this);

    forIn.call(json, function(key, value) {
    // json.forIn(function(key, value) {
      if (key === 'children') {
        forIn.call(value, function(name, data) {
        // value.forIn(function(name, data) {
          createChildren(name, data);
        });
      }
      else {
        if (key !== 'type' && key !== 'className') {
          this[key] = value;
        }
      }
    }, this);

    return this;
  }

  // /**
  //  * @method toJSON
  //  * 自身の子要素を JSON 形式で返します。
  //  *
  //  * @return {JSON} JSON形式
  //  */
  // toJSON() {
  //   var keys = Object.keys(phina.using(this.className).defaults || {});

  //   this._hierarchies.forEach(function(e) {
  //     var d = e.defaults;
  //     if (d) {
  //       Object.keys(d).forEach(function(k) {
  //         if (keys.indexOf(k) === -1) {
  //           keys.push(k);
  //         }
  //       });
  //     }
  //   });

  //   keys.push('name', 'className');

  //   var json = {};
  //   // keys.each(function(key) {
  //   keys.forEach(function(key) {
  //     json[key] = this[key];
  //   }, this);

  //   var children = this.children.map(function(child) {
  //     return child.toJSON();
  //   });

  //   if (children.length) {
  //     json.children = {};
  //     // children.each(function(child, i) {
  //     children.forEach(function(child, i) {
  //       json.children[child.name || (child.className + '_' + i)] = child;
  //     });
  //   }

  //   return json;
  // }

  /**
   * accessoryを付与する
   * @param  {import('../accessory/accessory').Accessory} accessory Accessory継承クラス
   * @return {this}
   */
  attach(accessory) {
    if (!this.accessories) {
      this.accessories = [];
      this.on('enterframe', function(e) {
        this.accessories.forEach(function(accessory) {
          accessory.update && accessory.update(e.app);
        });
      });
    }

    this.accessories.push(accessory);
    accessory.setTarget(this);
    accessory.flare('attached');

    return this;
  }

  /**
   * accessoryを削除
   * @param  {import('../accessory/accessory').Accessory} accessory Accessory継承クラス
   * @return {this}
   */
  detach(accessory) {
    if (this.accessories) {
      // this.accessories.erase(accessory);
      erase.call(this.accessories, accessory);
      accessory.setTarget(null);
      accessory.flare('detached');
    }

    return this;
  }

  /**
   * 自身に付与（attach）された内部tweenerオブジェクトを返却
   * 
   * アクセス時に存在しない場合、新たにTweenerを生成・付与する
   */
  get tweener() {
    if (!this._tweener) {
      this._tweener = new Tweener().attachTo(this);
    }
    return this._tweener;
  }

  /**
   * 自身に付与（attach）された内部draggableオブジェクトを返却
   * 
   * アクセス時に存在しない場合、新たにDraggableを生成・付与する
   * その際自動で有効化されるため、アクセスした地点でドラッグ可能になる
   */
  get draggable() {
    if (!this._draggable) {
      this._draggable = new Draggable().attachTo(this);
    }
    return this._draggable;
  }
}

/**
 * @typedef {string|number} SceneLabel
 */

/**
 * exitメソッド用パラメータ
 * @typedef {{
 *   nextLabel?: SceneLabel
 *   [key: string]: any,
 * }} NextArgumentsForExit
 */

/**
 * SceneのAppクラス参照として最低限のインタフェースを備えた型
 * @typedef {{
 *   popScene: typeof import("./baseapp").BaseApp.prototype.popScene
 *   [key: string]: any,
 * }} SceneAppAppliable
 */

/**
 * @class phina.app.Scene
 * _extends phina.app.Element
 */
class Scene extends Element {

  constructor() {
    super();

    /**
     * Appクラス参照
     * @type {SceneAppAppliable?}
     */
    this.app;

    /**
     * 次のシーンを表すラベル
     * @type {SceneLabel}
     */
    this.nextLabel;

    /**
     * 次のシーンに渡される引数を保持
     * ManagerSceneクラスで使用
     * @type {any}
     */
    this.nextArguments;
  }

  /**
   * 現在のシーンを抜ける
   * 
   * @example
   * const scene = new Scene();
   * scene.exit("nextscenelabel", {score: 128})
   * // or
   * scene.exit({nextLabel:"nextscenelabel", score: 128})
   * 
   * @param {SceneLabel | NextArgumentsForExit} [nextLabelOrArguments]
   * 次シーンのラベル、もしくはラベル込みの引数オブジェクト
   * 
   * @param {any} [nextArguments]
   * 引数オブジェクト
   * 第一引数をラベル文字列で指定した場合に設定
   * 
   * @returns {this}
   */
  exit(nextLabelOrArguments, nextArguments) {
    if (!this.app) return ;

    if (arguments.length > 0) {
      if (typeof arguments[0] === 'object') {
        nextLabelOrArguments = arguments[0].nextLabel || this.nextLabel;
        nextArguments = arguments[0];
      }

      this.nextLabel = /** @type {SceneLabel} */(nextLabelOrArguments);
      this.nextArguments = nextArguments;
    }

    this.app.popScene();

    return this;
  }

}

/**
 * @typedef {(
 *   Scene |
 *   import("../display/displayscene").DisplayScene |
 *   import("../game/managerscene.js").ManagerScene
 * )} SceneTypeUnion
 */

/**
 * @class phina.app.BaseApp
 * _extends phina.util.EventDispatcher
 * 
 * アプリケーションクラスの基底クラス
 */
class BaseApp extends EventDispatcher {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * シーンのスタック
     * @protected
     * @type {SceneTypeUnion[]}
     */
    this._scenes = [new Scene()];

    /**
     * シーンのインデックス値
     * アクティブ中のシーン管理に使用
     * @protected
     * @type {number}
     */
    this._sceneIndex = 0;

    /**
     * 更新処理が有効な状態かどうか
     * @type {boolean}
     */
    this.awake = true;

    /** @type {Updater} */
    this.updater = new Updater(this);

    /** @type {Interactive} */
    this.interactive = new Interactive(this);

    /** @type {Ticker} */
    this.ticker = new Ticker();
    
    /**
     * tickerによって毎フレーム実行されるアプリ内部処理
     * @private
     * @type {import("../util/eventdispatcher").PhinaEventHandler | null}
     */
    this._loopCaller;
  }

  /**
   * アプリケーションを開始
   * 
   * @returns {this}
   */
  run() {
    var self = this;
    this._loopCaller = function() {
      self._loop();
    };
    this.ticker.tick(this._loopCaller);

    this.ticker.start();

    return this;
  }

  /**
   * アプリケーションを完全停止
   * 
   * @returns {this}
   */
  kill() {
    this.ticker.stop();
    if (this._loopCaller) this.ticker.untick(this._loopCaller);
    return this;
  }

  /**
   * 指定したシーンに切り替える
   * 
   * @param {SceneTypeUnion} scene
   * @returns {this}
   */
  replaceScene(scene) {
    this.flare('replace');
    this.flare('changescene');

    if (this.currentScene) {
      this.currentScene.app = null;
    }
    this.currentScene = scene;
    this.currentScene.app = this;
    this.currentScene.flare('enter', {
      app: this,
    });

    return this;
  }

  /**
   * 指定したsceneに遷移する
   * 
   * replaceSceneとは違い、遷移前のシーンは停止して保持し続ける。
   * そのため、ポーズやオブション画面などの一時的なシーンでの使用に最適
   * 
   * 具体的にはシーンスタックにシーンを追加しつつ、
   * インデックス値を進めることでシーン遷移する
   * 
   * @param {Scene} scene
   * @returns {this}
   */
  pushScene(scene) {
    this.flare('push');
    this.flare('changescene');

    this.currentScene.flare('pause', {
      app: this,
    });

    this._scenes.push(scene);
    ++this._sceneIndex;

    this.flare('pushed');

    scene.app = this;
    scene.flare('enter', {
      app: this,
    });

    return this;
  }

  /**
   * 現在のシーンを抜け、直前のシーンに戻る
   * ポーズやオブション画面など、一時的なシーンを抜ける際に使用
   * 
   * pushScene同様、シーンスタックの操作によって
   * アクティブなシーンを切り替える
   * 
   * @returns {Scene | void} 抜けたSceneオブジェクト、処理できなかった場合は何も返さない
   */
  popScene() {
    this.flare('pop');
    this.flare('changescene');

    // Keep rootScene
    if (this._scenes.length <= 1) return;

    var scene = /** @type {Scene} */(this._scenes.pop());
    --this._sceneIndex;

    scene.flare('exit', {
      app: this,
    });
    scene.app = null;

    this.flare('poped');

    this.currentScene.flare('resume', {
      app: this,
      prevScene: scene,
    });

    return scene;
  }

  /**
   * アプリケーションの再開
   * 更新処理の実行を再開する
   * 
   * @returns {this}
   */
  start() {
    this.awake = true;

    return this;
  }

  /**
   * アプリケーションの一時停止
   * 更新処理を実行しないようにする
   * 
   * @returns {this}
   */
  stop() {
    this.awake = false;

    return this;
  }

  /**
   * stats.js( https://github.com/mrdoob/stats.js/ )を実行し、
   * パフォーマンスモニターを表示する
   * 
   * stats.jsがグローバルで読み込まれていない場合、
   * cdnjsからr14版スクリプトを読み込む
   * 
   * @returns {this}
   */
  enableStats() {
    if (phina.global['Stats']) {
      this.stats = new phina.global['Stats']();
      document.body.appendChild(this.stats.domElement);
    }
    else {
      // console.warn("not defined stats.");
      var STATS_URL = 'https://cdnjs.cloudflare.com/ajax/libs/stats.js/r14/Stats.js';
      var script = document.createElement('script');
      script.src = STATS_URL;
      document.body.appendChild(script);
      script.onload = function() {
        this.enableStats();
      }.bind(this);
    }
    return this;
  }

  /**
   * dat.GUI( https://github.com/dataarts/dat.gui )を初期化し、
   * そのインスタンスをコールバック関数に渡して実行
   * 
   * dat.GUIがグローバルで読み込まれていない場合、
   * cdnjsからv0.5.1版スクリプトを読み込む
   * 
   * @param {(datGUIObject?: any) => any} callback
   * @returns {this}
   */
  enableDatGUI(callback) {
    if (phina.global['dat']) {
      var gui = new phina.global['dat'].GUI();
      callback(gui);
    }
    else {
      // console.warn("not defined dat.GUI.");
      var URL = 'https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.js';
      var script = document.createElement('script');
      script.src = URL;
      document.body.appendChild(script);
      script.onload = function() {
        var gui = new phina.global['dat'].GUI();
        callback(gui);
      }.bind(this);
    }
    return this;
  }

  /**
   * @protected
   * ループ処理関数
   * 
   * @returns {void}
   */
  _loop() {
    this._update();
    this.interactive.check(this.currentScene);
    this._draw();

    // stats update
    if (this.stats) this.stats.update();
  }

  /**
   * @protected
   * 更新処理関数
   * 
   * @returns {void}
   */
  _update() {
    if (this.awake) {
      // エンターフレームイベント
      if (this.has('enterframe')) {
        this.flare('enterframe');
      }

      this.update && this.update();
      this.updater.update(this.currentScene);
    }
  }

  /**
   * 更新用仮想関数
   * 
   * @virtual
   * @returns {any}
   */
  update() {}

  /**
   * 描画用仮想関数
   * 
   * @virtual
   * @returns {any}
   */
  _draw() {}

  /**
   * 現在アクティブ中のシーン
   */
  get currentScene()   { return this._scenes[this._sceneIndex]; }
  set currentScene(v)  { this._scenes[this._sceneIndex] = v; }

  /**
   * 根本シーン。インスタンス化の際に自動的に設定
   */
  get rootScene()   { return this._scenes[0]; }
  set rootScene(v)  { this._scenes[0] = v; }

  /**
   * 経過フレーム数
   */
  get frame() { return this.ticker.frame; }
  set frame(v) { this.ticker.frame = v; }

  /**
   * Frame per second  
   * 秒間の更新および描画処理回数
   */
  get fps() { return this.ticker.fps; }
  set fps(v) { this.ticker.fps = v; }

  /**
   * 前フレームでの処理にかかった時間
   */
  get deltaTime() { return this.ticker.deltaTime; }

  /**
   * アプリケーション開始からの経過時間
   */
  get elapsedTime() { return this.ticker.elapsedTime; }

  /**
   * 現在の時間（最後の更新時のUNIXタイムスタンプ）
   */
  get currentTime() { return this.ticker.currentTime; }

  /**
   * アプリケーション開始時間（UNIXタイムスタンプ）
   */
  get startTime() { return this.ticker.startTime; }
}

/**
 * 判定処理の際、どのような形状として扱うか
 * @typedef {"rect"|"circle"|"none"} Object2DBoundingType
 */

/**
 * @typedef {{
 *  x?: Number,
 *  y?: Number,
 *  scaleX?: Number,
 *  scaleY?: Number,
 *  rotation?: Number,
 *  originX?: Number,
 *  originY?: Number,
 *  width?: Number,
 *  height?: Number,
 *  radius?: Number,
 *  boundingType?: Object2DBoundingType,
 * }} Object2DOptions
 */

/**
 * @class phina.app.Object2D
 * Object2D
 * _extends phina.app.Element
 */
class Object2D extends Element {

  // /** 位置 */
  // position: null,
  // /** 回転 */
  // rotation: 0,
  // /** スケール */
  // scale: null,
  // /** 基準位置 */
  // origin: null,

  /**
   * @param {Object2DOptions} [options]
   */
  constructor(options) {
    super();

    options = $safe.call({}, options, Object2D.defaults);
    // options = ({}).$safe(options, phina.app.Object2D.defaults);

    /** @type {Vector2} 位置 */
    this.position = new Vector2(options.x, options.y);

    /** @type {Vector2} スケール */
    this.scale    = new Vector2(options.scaleX, options.scaleY);

    /** @type {number} 回転（度数単位） */
    this.rotation = options.rotation || 0;

    /** @type {Vector2} 基準位置、回転軸 */
    this.origin   = new Vector2(options.originX, options.originY);

    /**
     * @private
     * @type {Matrix33}
     * ローカル変換行列
     */
    this._matrix = new Matrix33().identity();
    /**
     * @type {Matrix33 | null}
     * ワールド変換行列
     */
    this._worldMatrix = new Matrix33().identity();

    /**
     * @private
     * @type {number} 行列計算用キャッシュ値
     */
    this._cachedRotation;
    /**
     * @private
     * @type {number} 行列計算用キャッシュ値
     */
    this._sr;
    /**
     * @private
     * @type {number} 行列計算用キャッシュ値
     */
    this._cr;

    /**
     * @type {boolean}
     * インタラクション可能かどうか
     */
    this.interactive = false;
    /**
     * @type {{ [id: number]: boolean }}
     * Interactiveクラスでのフラグ処理用
     */
    this._overFlags = {};
    /**
     * @type {{ [id: number]: boolean }}
     * Interactiveクラスでのフラグ処理用
     */
    this._touchFlags = {};

    /**
     * @protected
     * @type {number}
     */
    this._width;
    /**
     * @protected
     * @type {number}
     */
    this._height;
    /**
     * 半径: boundingTypeがcircleの場合のみ使用
     * @private
     * @type {number}
     */
    this._radius;
    /**
     * 直径: boundingTypeがcircleの際にwidth/height値として使用  
     * radiusアクセサsetの際に更新
     * @private
     * @type {number}
     */
    this._diameter;

    this.width = options.width;
    this.height = options.height;
    this.radius = options.radius;
    /**
     * 当たり判定範囲の種別
     * @type {Object2DBoundingType}
     */
    this.boundingType = options.boundingType;

    /** @type {Object2D|PhinaElement} */
    this.parent;
  }

  /**
   * 点と衝突しているかを判定
   * @param {Number} x
   * @param {Number} y
   */
  hitTest(x, y) {
    if (this.boundingType === 'rect') {
      return this.hitTestRect(x, y);
    }
    else if (this.boundingType === 'circle') {
      return this.hitTestCircle(x, y);
    }
    else {
      // none の場合
      return true;
    }
  }

  /**
   * 自身を矩形として、点と衝突しているかを判定
   * @param {number} x
   * @param {number} y
   * @returns {boolean}
   */
  hitTestRect(x, y) {
    var p = this.globalToLocal(new Vector2(x, y));

    var left   = -this.width*this.originX;
    var right  = +this.width*(1-this.originX);
    var top    = -this.height*this.originY;
    var bottom = +this.height*(1-this.originY);

    return ( left < p.x && p.x < right ) && ( top  < p.y && p.y < bottom );
  }

  /**
   * 自身を円形として、点と衝突しているかを判定
   * @param {number} x
   * @param {number} y
   * @returns {boolean}
   */
  hitTestCircle(x, y) {
    // 円判定
    var p = this.globalToLocal(new Vector2(x, y));
    if (((p.x)*(p.x)+(p.y)*(p.y)) < (this.radius*this.radius)) {
        return true;
    }
    return false;
  }

  /**
   * 要素と衝突しているかを判定
   * @param {Object2D} elm
   * @returns {boolean}
   */
  hitTestElement(elm) {
    var rect0 = this;
    var rect1 = elm;
    return (rect0.left < rect1.right) && (rect0.right > rect1.left) &&
           (rect0.top < rect1.bottom) && (rect0.bottom > rect1.top);
  }

  /**
   * 渡された座標をローカル座標に変換して返す
   * @param {import("../geom/vector2").PrimitiveVector2} p 値は変更しません
   * @returns {Vector2} 新規作成されたローカル座標オブジェクト
   */
  globalToLocal(p) {
    var matrix = this._worldMatrix.clone();
    matrix.invert();
    // matrix.transpose();

    var temp = matrix.multiplyVector2(p);

    return temp;
  }

  /**
   * インタラクション可能かどうかを変更  
   * 同時にboundingTypeも変更可能
   * @param {boolean} flag
   * @param {Object2DBoundingType} [type]
   * @returns {this}
   */
  setInteractive(flag, type) {
    this.interactive = flag;
    if (type) {
      this.boundingType = type;
    }

    return this;
  }

  /**
   * X 座標値をセット
   * @param {Number} x
   * @returns {this}
   */
  setX(x) {
    this.position.x = x;
    return this;
  }
  
  /**
   * Y 座標値をセット
   * @param {Number} y
   * @returns {this}
   */
  setY(y) {
    this.position.y = y;
    return this;
  }
  
  /**
   * XY 座標をセット
   * @param {Number} x
   * @param {Number} y
   * @returns {this}
   */
  setPosition(x, y) {
    this.position.x = x;
    this.position.y = y;
    return this;
  }

  /**
   * 回転をセット
   * @param {Number} rotation
   * @returns {this}
   */
  setRotation(rotation) {
    this.rotation = rotation;
    return this;
  }

  /**
   * スケールをセット
   * @param {Number} x
   * @param {Number} [y] 省略した場合、xパラメータ値が適用されます
   * @returns {this}
   */
  setScale(x, y) {
    this.scale.x = x;
    if (arguments.length <= 1) {
        this.scale.y = x;
    } else {
        this.scale.y = y;
    }
    return this;
  }
  
  /**
   * 基準点をセット
   * @param {Number} x
   * @param {Number} y
   * @returns {this}
   */
  setOrigin(x, y) {
    this.origin.x = x;
    this.origin.y = y;
    return this;
  }
  
  /**
   * 幅をセット
   * @param {Number} width
   * @returns {this}
   */
  setWidth(width) {
    this.width = width;
    return this;
  }
  
  /**
   * 高さをセット
   * @param {Number} height
   * @returns {this}
   */
  setHeight(height) {
    this.height = height;
    return this;
  }
  
  /**
   * サイズ(幅, 高さ)をセット
   * @param {Number} width
   * @param {Number} height
   * @returns {this}
   */
  setSize(width, height) {
    this.width  = width;
    this.height = height;
    return this;
  }

  /**
   * @param {Object2DBoundingType} type
   * @returns {this}
   */
  setBoundingType(type) {
    this.boundingType = type;
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  moveTo(x, y) {
    this.position.x = x;
    this.position.y = y;
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  moveBy(x, y) {
    this.position.x += x;
    this.position.y += y;
    return this;
  }

  /**
   * グローバル行列を計算
   * @returns {this}
   */
  _calcWorldMatrix() {
    if (!this.parent) return ;

    // cache check
    if (this.rotation != this._cachedRotation) {
      this._cachedRotation = this.rotation;

      var r = this.rotation*(Math.PI/180);
      this._sr = Math.sin(r);
      this._cr = Math.cos(r);
    }

    var local = this._matrix;
    var parent = /** @type {Object2D} */(this.parent)._worldMatrix || Matrix33.IDENTITY;
    var world = this._worldMatrix;

    // ローカルの行列を計算
    local.m00 = this._cr * this.scale.x;
    local.m01 =-this._sr * this.scale.y;
    local.m10 = this._sr * this.scale.x;
    local.m11 = this._cr * this.scale.y;
    local.m02 = this.position.x;
    local.m12 = this.position.y;

    // cache
    var a00 = local.m00; var a01 = local.m01; var a02 = local.m02;
    var a10 = local.m10; var a11 = local.m11; var a12 = local.m12;
    var b00 = parent.m00; var b01 = parent.m01; var b02 = parent.m02;
    var b10 = parent.m10; var b11 = parent.m11; var b12 = parent.m12;

    // 親の行列と掛け合わせる
    world.m00 = b00 * a00 + b01 * a10;
    world.m01 = b00 * a01 + b01 * a11;
    world.m02 = b00 * a02 + b01 * a12 + b02;

    world.m10 = b10 * a00 + b11 * a10;
    world.m11 = b10 * a01 + b11 * a11;
    world.m12 = b10 * a02 + b11 * a12 + b12;

    return this;
  }

  /**
   * @property    x
   * x座標値
   */
  get x()   { return this.position.x; }
  set x(v)  { this.position.x = v; }

  /**
   * @property    y
   * y座標値
   */
  get y()   { return this.position.y; }
  set y(v)  { this.position.y = v; }

  /**
   * @property    originX
   * x座標値
   */
  get originX()   { return this.origin.x; }
  set originX(v)  { this.origin.x = v; }

  /**
   * @property    originY
   * y座標値
   */
  get originY()   { return this.origin.y; }
  set originY(v)  { this.origin.y = v; }

  /**
   * @property    scaleX
   * スケールX値
   */
  get scaleX()   { return this.scale.x; }
  set scaleX(v)  { this.scale.x = v; }
  
  /**
   * @property    scaleY
   * スケールY値
   */
  get scaleY()   { return this.scale.y; }
  set scaleY(v)  { this.scale.y = v; }
  
  /**
   * @property    width
   * width
   */
  get width()   {
    return (this.boundingType === 'rect') ?
      this._width : this._diameter;
  }
  set width(v)  { this._width = v; }

  /**
   * @property    height
   * height
   */
  get height()   {
    return (this.boundingType === 'rect') ?
      this._height : this._diameter;
  }
  set height(v)  { this._height = v; }

  /**
   * @property    radius
   * 半径
   */
  get radius()   {
    return (this.boundingType === 'rect') ?
      (this.width+this.height)/4 : this._radius;
  }
  set radius(v)  {
    this._radius = v;
    this._diameter = v*2;
  }
  
  /**
   * @property    top
   * 左
   */
  get top()   { return this.y - this.height*this.originY; }
  set top(v)  { this.y = v + this.height*this.originY; }

  /**
   * @property    right
   * 左
   */
  get right()   { return this.x + this.width*(1-this.originX); }
  set right(v)  { this.x = v - this.width*(1-this.originX); }

  /**
   * @property    bottom
   * 左
   */
  get bottom()   { return this.y + this.height*(1-this.originY); }
  set bottom(v)  { this.y = v - this.height*(1-this.originY); }

  /**
   * @property    left
   * 左
   */
  get left()   { return this.x - this.width*this.originX; }
  set left(v)  { this.x = v + this.width*this.originX; }

  /**
   * @property    centerX
   * centerX
   */
  get centerX()   { return this.x + this.width/2 - this.width*this.originX; }
  // set centerX(v)  {
  //   // TODO: どうしようかな??
  // }

  /**
   * @property    centerY
   * centerY
   */
  get centerY()   { return this.y + this.height/2 - this.height*this.originY; }
  // set centerY(v)  {
  //   // TODO: どうしようかな??
  // }
}

/**
 * @type {Object2DOptions}
 * @static
 */
Object2D.defaults = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1,
  rotation: 0,
  originX: 0.5,
  originY: 0.5,
  width: 64,
  height: 64,
  radius: 32,
  boundingType: 'rect',
};

/**
 * phina独自のPointer型
 * @typedef {Mouse | PhinaTouch} Pointer
 */

/**
 * DomApp初期化オプション  
 * domElementもしくはqueryいずれかは必ず指定すること
 * @typedef {{
 *  domElement?: HTMLCanvasElement;
 *  query?: string; 
 *  fps?: number; 
 *  runner?: (run: TimerHandler, delay: number) => void;
 * }} DomAppOptions
 */

/**
 * @class phina.display.DomApp
 * _extends phina.app.BaseApp
 */
class DomApp extends BaseApp {

  /**
   * @constructor
   * @param {DomAppOptions} options
   */
  constructor(options) {
    super();

    /** @type HTMLCanvasElement */
    this.domElement;

    if (options.domElement) {
      this.domElement = options.domElement;
    }
    else {
      if (options.query) {
        this.domElement = document.querySelector(options.query);
      }
      else {
        console.assert('error');
      }
    }

    if (options.fps !== undefined) {
      this.fps = options.fps;
    }
    
    if(typeof options.runner === 'function') {
      this.ticker.runner = options.runner;
    }

    this.mouse = new Mouse(this.domElement);
    this.touch = new Touch$1(this.domElement);
    this.touchList = new TouchList(this.domElement);
    this.keyboard = new Keyboard(document);
    // // 加速度センサーを生成
    // this.accelerometer = phina.input.Accelerometer();

    // ポインタをセット(PC では Mouse, Mobile では Touch)
    /** @type {Pointer} */
    this.pointer = this.touch;
    /** @type {Pointer[]} */
    this.pointers = this.touchList.touches;
    this.domElement.addEventListener("touchstart", 
    /** @this DomApp */
    function () {
      this.pointer = this.touch;
      this.pointers = this.touchList.touches;
    }.bind(this));
    this.domElement.addEventListener("mouseover", 
    /** @this DomApp */
    function () {
      this.pointer = this.mouse;
      this.pointers = [this.mouse];
    }.bind(this));

    // keyboard event
    this.keyboard.on('keydown', function(e) {
      this.currentScene && this.currentScene.flare('keydown', {
        keyCode: e.keyCode,
      });
    }.bind(this));
    this.keyboard.on('keyup', function(e) {
      this.currentScene && this.currentScene.flare('keyup', {
        keyCode: e.keyCode,
      });
    }.bind(this));
    this.keyboard.on('keypress', function(e) {
      this.currentScene && this.currentScene.flare('keypress', {
        keyCode: e.keyCode,
      });
    }.bind(this));

    // click 対応
    var eventName = phina.isMobile() ? 'touchend' : 'mouseup';
    this.domElement.addEventListener(eventName, this._checkClick.bind(this));

    // 決定時の処理をオフにする(iPhone 時のちらつき対策)
    this.domElement.addEventListener("touchstart", function(e) { stop.call(e); });
    this.domElement.addEventListener("touchmove", function(e) { stop.call(e); });

    // ウィンドウフォーカス時イベントリスナを登録
    phina.global.addEventListener('focus', function() {
      this.flare('focus');
      this.currentScene.flare('focus');
    }.bind(this), false);
    // ウィンドウブラー時イベントリスナを登録
    phina.global.addEventListener('blur', function() {
      this.flare('blur');
      this.currentScene.flare('blur');
    }.bind(this), false);

    // 更新関数を登録
    this.on('enterframe', function() {
      this.mouse.update();
      this.touch.update();
      this.touchList.update();
      this.keyboard.update();
    });
  }

  /**
   * @private
   * touchend/mouseupでの疑似clickイベント処理
   * @param {*} _e 
   */
  _checkClick(_e) {
    /** @param {import('../app/element').Element} element */
    var _check = function(element) {
      if (element.children.length > 0) {
        element.children.forEach(function(child) {
          _check(child);
        });
      }
      if (element._clicked && element.has('click')) {
        element.flare('click');
      }
      element._clicked = false;
    };

    _check(this.currentScene);
  }

}

/**
 * @typedef {import("../app/element").Element & {
 *   backgroundColor?: import("../graphics/canvas").CanvasStyle
 * }} RenderableScene
 */

/**
 * @typedef {import("./displayelement").DisplayElement & {
 *   clip?: (canvas: import('../graphics/canvas').Canvas)=> any,
 *   draw?: (canvas: import('../graphics/canvas').Canvas)=> any
 * }} RenderableElement
 */

/**
 * @class phina.display.CanvasRenderer
 */
class CanvasRenderer {

  /**
   * @param {import('../graphics/canvas').Canvas} canvas
   */
  constructor(canvas) {
    this.canvas = canvas;
    this._context = this.canvas.context;
  }

  /**
   * @param {RenderableScene} scene
   */
  render(scene) {
    this.canvas.clear();
    if (scene.backgroundColor) {
      this.canvas.clearColor(scene.backgroundColor);
    }

    this._context.save();
    this.renderChildren(scene);
    this._context.restore();
  }

  /**
   * @param {import("../app/element").ElementBasedObject} obj
   */
  renderChildren(obj) {
    // 子供たちも実行
    if (obj.children.length > 0) {
      var tempChildren = /** @type {RenderableElement[]}*/(obj.children.slice());
      for (var i=0,len=tempChildren.length; i<len; ++i) {
        this.renderObject(tempChildren[i]);
      }
    }
  }

  /**
   * @param {RenderableElement} obj
   */
  renderObject(obj) {
    if (obj.visible === false && !obj.interactive) return;

    obj._calcWorldMatrix && obj._calcWorldMatrix();

    if (obj.visible === false) return;

    obj._calcWorldAlpha && obj._calcWorldAlpha();

    var context = this.canvas.context;

    context.globalAlpha = obj._worldAlpha;
    context.globalCompositeOperation = obj.blendMode;

    if (obj._worldMatrix) {
      // 行列をセット
      var m = obj._worldMatrix;
      context.setTransform( m.m00, m.m10, m.m01, m.m11, m.m02, m.m12 );
    }

    if (obj.clip) {

      context.save();

      obj.clip(this.canvas);
      context.clip();

      if (obj.draw) obj.draw(this.canvas);

      // 子供たちも実行
      if (obj.renderChildBySelf === false && obj.children.length > 0) {
          var tempChildren = obj.children.slice();
          for (var i=0,len=tempChildren.length; i<len; ++i) {
              this.renderObject(tempChildren[i]);
          }
      }

      context.restore();
    }
    else {
      if (obj.draw) obj.draw(this.canvas);

      // 子供たちも実行
      if (obj.renderChildBySelf === false && obj.children.length > 0) {
        var tempChildren = obj.children.slice();
        for (var i=0,len=tempChildren.length; i<len; ++i) {
          this.renderObject(tempChildren[i]);
        }
      }

    }
  }

}

/**
 * @typedef {{
 *   width?: number,
 *   height?: number,
 *   imageSmoothing?: boolean,
 *   backgroundColor?: import("../graphics/canvas").CanvasStyle,
 * }} DisplaySceneOptions
 */

/**
 * @class phina.display.DisplayScene
 * _extends phina.app.Scene
 */
class DisplayScene extends Scene {

  /**
   * @param {DisplaySceneOptions} [params]
   */
  constructor(params) {
    super();

    params = $safe.call({}, params, DisplayScene.defaults);
    // params = ({}).$safe(params, DisplayScene.defaults);

    this.canvas = new Canvas();
    this.canvas.setSize(params.width, params.height);
    this.renderer = new CanvasRenderer(this.canvas);
    this.backgroundColor = (params.backgroundColor) ? params.backgroundColor : null;

    this.width = params.width;
    this.height = params.height;
    this.gridX = new Grid(params.width, 16);
    this.gridY = new Grid(params.height, 16);

    // TODO: 一旦むりやり対応
    this.interactive = true;
    // this.setInteractive = function(flag) {
    //   this.interactive = flag;
    // };
    this._overFlags = {};
    this._touchFlags = {};

    var ctx = this.canvas.context;
    if (params.imageSmoothing === false) {
      ctx.imageSmoothingEnabled = false;
      ctx['webkitImageSmoothingEnabled'] = false;
      ctx['msImageSmoothingEnabled'] = false;
    }
  }

  /**
   * @param {boolean} flag
   */
  setInteractive(flag) {
    this.interactive = flag;
  }

  hitTest() {
    return true;
  }

  /**
   * @virtual
   * @param {import("../display/canvasapp").CanvasApp} [_app] アプリケーション本体の参照
   */
  update(_app) {}

  /**
   * @returns {void}
   */
  _update() {
    if (this.update) {
      this.update();
    }
  }

  /**
   * @returns {void}
   */
  _render() {
    this.renderer.render(this);
  }

}

/** @type DisplaySceneOptions */
DisplayScene.defaults = {
  width: 640,
  height: 960,
  imageSmoothing: true,
};

/**
 * CanvasApp初期化オプション  
 * DisplaySceneの初期化に使われることも考え、そのオプションパラメータも継承
 * @typedef {{ 
 *  append?: boolean
 *  columns?: number
 *  backgroundColor?: import("../graphics/canvas").CanvasStyle
 *  fit?: boolean
 *  pixelated?: boolean
 * } 
 * & import("./domapp").DomAppOptions
 * & import("./displayscene").DisplaySceneOptions } CanvasAppOptions
 */

/**
 * @class phina.display.CanvasApp
 * _extends phina.display.DomApp
 */
class CanvasApp extends DomApp {

  /**
   * @constructor
   * @param {CanvasAppOptions} options
   */
  constructor(options) {
    options = $safe.call((options || {}), CanvasApp.defaults);
    // options = (options || {}).$safe(CanvasApp.defaults);
    
    if (!options.query && !options.domElement) {
      options.domElement = document.createElement('canvas');
      if (options.append) {
        document.body.appendChild(options.domElement);
      }
    }
    super(options);

    this.gridX = new Grid({
      width: options.width,
      columns: options.columns,
    });
    this.gridY = new Grid({
      width: options.height,
      columns: options.columns,
    });

    this.canvas = new Canvas(this.domElement);
    this.canvas.setSize(options.width, options.height);

    this.backgroundColor = (options.backgroundColor !== undefined) ? options.backgroundColor : 'white';

    this.replaceScene(new DisplayScene({
      width: options.width,
      height: options.height,
    }));

    if (options.fit) {
      this.fitScreen();
    }

    if (options.pixelated) {
      // チラつき防止
      // ドット絵ゲームのサポート
      // https://drafts.csswg.org/css-images/#the-image-rendering
      // https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#Browser_compatibility
      if (navigator.userAgent.match(/Firefox\/\d+/)) {
        this.domElement.style.imageRendering = 'crisp-edges';
      } else {
        this.domElement.style.imageRendering = 'pixelated';
      }
    }

    // pushScene, popScene 対策
    this.on('push', function() {
      // onenter 対策で描画しておく
      if (this.currentScene.canvas) {
        this._draw();
      }
    });
  }

  /**
   * @override
   * 描画処理
   */
  _draw() {
    if (this.backgroundColor) {
      this.canvas.clearColor(this.backgroundColor);
    } else {
      this.canvas.clear();
    }

    var currentScene = /** @type {DisplayScene} */(this.currentScene);
    if (currentScene.canvas) {
      currentScene._render();

      // this._scenes.each(
      this._scenes.forEach(
      /** @param {DisplayScene} scene */
      function(scene) {
        var c = scene.canvas;
        if (c) {
          this.canvas.context.drawImage(c.domElement, 0, 0, c.width, c.height);
        }
      }, this);
    }
  }

  /**
   * CanvasクラスのfitScreenを実行
   * @returns {void}
   */
  fitScreen() {
    this.canvas.fitScreen();
  }

}

/**
 * @static
 * @type {CanvasAppOptions}
 */
CanvasApp.defaults = {
  width: 640,
  height: 960,
  columns: 12,
  fit: true,
  append: true,
};

/**
 * @typedef {{
 *   alpha?: number,
 *   visible?: boolean,
 * } & import("../app/object2d").Object2DOptions} DisplayElementOptions
 */

/**
 * globalCompositeOperation(https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) のtypeと同じ
 * @typedef { 'source-over' | 'source-in' | 'source-out' | 'source-atop' | 'destination-over' | 'destination-in' | 'destination-out' | 'destination-atop' | 'lighter' | 'copy' | 'xor' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'hard-light' | 'soft-light' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity'} BlendMode
 */

/**
 * @class phina.display.DisplayElement
 * _extends phina.app.Object2D
 */
class DisplayElement extends Object2D {

  /**
   * @param {DisplayElementOptions} [options] 
   */
  constructor(options) {
    options = $safe.call({}, options||{}, DisplayElement.defaults);
    // options = ({}).$safe(options || {}, phina.display.DisplayElement.defaults);
    super(options);

    /**
     * 表示フラグ
     * @type {boolean}
     */
    this.visible = (options.visible != null) ? options.visible : true;

    /**
     * アルファ値
     * @type {number}
     */
    this.alpha = (options.alpha != null) ? options.alpha : 1.0;

    /**
     * ブレンドモード
     * @type {BlendMode}
     */
    this.blendMode = "source-over";

    /**
     * 子供を 自分のCanvasRenderer で描画するか
     * @type {boolean}
     */
    this.renderChildBySelf = false;

    /** @type {DisplayElement} 型アサーション */
    this.parent;

    /**
     * グローバルアルファ内部値
     * @type {number}
     */
    this._worldAlpha = 1.0;
  }

  /**
   * アルファ値をセット
   * @param {number} alpha
   * @returns {this}
   */
  setAlpha(alpha) {
    this.alpha = alpha;
    return this;
  }

  /**
   * 表示/非表示をセット
   * @param {boolean} flag
   * @returns {this}
   */
  setVisible(flag) {
    this.visible = flag;
    return this;
  }

  /**
   * 表示
   * @returns {this}
   */
  show() {
    this.visible = true;
    return this;
  }

  /**
   * 非表示
   * @returns {this}
   */
  hide() {
    this.visible = false;
    return this;
  }

  /**
   * グローバルアルファ値の再計算
   * @returns {void}
   */
  _calcWorldAlpha() {
    if (this.alpha < 0) {
      this._worldAlpha = 0;
      return;
    }
    if (!this.parent) {
      this._worldAlpha = this.alpha;
      return ;
    }
    else {
      var worldAlpha = (this.parent._worldAlpha !== undefined) ? this.parent._worldAlpha : 1.0;
      // alpha
      this._worldAlpha = worldAlpha * this.alpha;
    }
  }

}

/**
 * @type {DisplayElementOptions}
 */
DisplayElement.defaults = {
  alpha: 1.0,
  visible: true,
};

/**
 * @class phina.asset.AssetManager
 * 
 */
class AssetManager {

  /**
   * @param {string} type "sound"、"image"などのアセット種類
   * @param {string} key アセットのキー
   */
  static get(type, key) {
    return this.assets[type] && this.assets[type][key];
  }

  /**
   * @param {string | number} type "sound"、"image"などのアセット種類
   * @param {string | number} key アセット登録キー
   * @param {any} asset Assetオブジェクト
   */
  static set(type, key, asset) {
    if (!this.assets[type]) {
      this.assets[type] = {};
    }
    this.assets[type][key] = asset;
  }

  /**
   * 未実装
   * @param {*} type 
   * @param {*} key 
   */
  static contains(type, key) {
    return ;
  }

}

AssetManager.assets = {
  image: {},
  sound: {},
  spritesheet: {},
};

/**
 * Sprite画像ソースとして使えるオブジェクト型
 * TextureクラスやCanvasクラスなど
 * @typedef {{
 *   domElement: HTMLCanvasElement | HTMLImageElement;
 *   [key: string]: any;
 * }} SpriteImage
 */

/**
 * AssetManagerに登録した画像キー、もしくはSpriteImageオブジェクト
 * @typedef {string | SpriteImage} SpriteImageSrc
 */

/**
 * @class phina.display.Sprite
 * _extends phina.display.DisplayElement
 */
class Sprite extends DisplayElement {

  /**
   * @param {SpriteImageSrc} image
   * @param {number} [width]
   * @param {number} [height]
   */
  constructor(image, width, height) {
    super();

    /**
     * スプライト元画像（テクスチャ）。setImageで初期化
     * @private
     * @type {SpriteImage}
     */
    this._image;

    /**
     * フレームインデックス。setImageで初期化
     * @private
     * @type {number}
     */
    this._frameIndex;

    /**
     * 画像描画範囲
     * @type {Rect}
     */
    this.srcRect = new Rect();

    this.setImage(image, width, height);
  }

  /**
   * @param {import("../graphics/canvas").Canvas} canvas 
   */
  draw(canvas) {
    var image = this.image.domElement;

    // canvas.context.drawImage(image,
    //   0, 0, image.width, image.height,
    //   -this.width*this.origin.x, -this.height*this.origin.y, this.width, this.height
    //   );

    var srcRect = this.srcRect;
    canvas.context.drawImage(image,
      srcRect.x, srcRect.y, srcRect.width, srcRect.height,
      -this._width*this.originX, -this._height*this.originY, this._width, this._height
      );
  }

  /**
   * スプライト元画像を設定
   * @param {SpriteImageSrc} image
   * @param {number} [width]
   * @param {number} [height]
   * @returns {this}
   */
  setImage(image, width, height) {
    if (typeof image === 'string') {
      image = AssetManager.get('image', image);
    }
    this._image = /**@type {SpriteImage} */ (image);
    this.width = this._image.domElement.width;
    this.height = this._image.domElement.height;

    if (width) { this.width = width; }
    if (height) { this.height = height; }

    this.frameIndex = 0;

    return this;
  }

  /**
   * フレームインデックスを指定し、そのフレームに合わせて描画範囲を更新  
   * @param {number} index フレームインデックス。最大値を超えた場合はループ
   * @param {number} [width] フレームサイズ幅
   * @param {number} [height] フレームサイズ高さ
   * @returns {this}
   */
  setFrameIndex(index, width, height) {
    var tw  = width || this._width;      // tw
    var th  = height || this._height;    // th
    var row = ~~(this.image.domElement.width / tw);
    var col = ~~(this.image.domElement.height / th);
    var maxIndex = row*col;
    index = index%maxIndex;
    
    var x = index%row;
    var y = ~~(index/row);
    this.srcRect.x = x*tw;
    this.srcRect.y = y*th;
    this.srcRect.width  = tw;
    this.srcRect.height = th;

    this._frameIndex = index;

    return this;
  }

  get image() {return this._image;}
  set image(v) {
    this.setImage(v);
  }

  get frameIndex() {return this._frameIndex;}
  set frameIndex(idx) {
    this.setFrameIndex(idx);
  }
}

/**
 * @class phina.display.PlainElement
 * _extends phina.display.DisplayElement
 */
class PlainElement extends DisplayElement {

  /**
   * @param {DisplayElement.defaults} options 
   */
  constructor(options) {
    super(options);
    this.canvas = new Canvas();
    this.canvas.setSize(this.width, this.height);
  }

  /**
   * @param {Canvas} canvas
   * @returns {void}
   */
  draw(canvas) {
    var image = this.canvas.domElement;
    var w = image.width;
    var h = image.height;

    var x = -w*this.origin.x;
    var y = -h*this.origin.y;

    canvas.context.drawImage(image,
      0, 0, w, h,
      x, y, w, h
      );
  }
}

/**
 * @class phina.display.Layer
 * _extends phina.display.DisplayElement
 */
class Layer extends DisplayElement {

  /**
   * @param {DisplayElement.defaults} [options] 
   */
  constructor(options) {
    options = $safe.call({}, options||{}, {
    // options = ({}).$safe(options, {
      width: 640,
      height: 960,
    });
    super(options);
    this.width = options.width;
    this.height = options.height;
    this.gridX = new Grid(options.width, 16);
    this.gridY = new Grid(options.height, 16);
    this.renderChildBySelf = true;

    /**
     * @type HTMLCanvasElement 
     */
    this.domElement;
  }

  /**
   * @param {Canvas} canvas
   * @returns {void}
   */
  draw(canvas) {
    if (!this.domElement) return ;

    var image = this.domElement;
    canvas.context.drawImage(image,
      0, 0, image.width, image.height,
      -this.width*this.originX, -this.height*this.originY, this.width, this.height
      );
  }
}


/**
 * @class phina.display.CanvasLayer
 * _extends phina.display.Layer
 */
class CanvasLayer extends Layer {

  /**
   * @param {DisplayElement.defaults} options 
   */
  constructor(options) {
    super(options);
    this.canvas = new Canvas();
    this.canvas.width  = this.width;
    this.canvas.height = this.height;

    this.renderer = new CanvasRenderer(this.canvas);
    this.domElement = this.canvas.domElement;

    this.on('enterframe',
    /** @this CanvasLayer */
    function() {
      var temp = this._worldMatrix;
      this._worldMatrix = null;
      this.renderer.render(this);
      this._worldMatrix = temp;
    });
  }

  /**
   * @param {Canvas} canvas
   * @returns {void}
   */
  draw(canvas) {
    var image = this.domElement;
    canvas.context.drawImage(image,
      0, 0, image.width, image.height,
      -this.width*this.originX, -this.height*this.originY, this.width, this.height
      );
  }
}

var THREE = phina.global['THREE'];

/**
 * @class phina.display.ThreeLayer
 * _extends phina.display.Layer
 */
class ThreeLayer extends Layer {

  // scene: null,
  // camera: null,
  // light: null,
  // renderer: null,

  constructor(options) {
    super(options);

    this.scene = new THREE.Scene();

    this.camera = new THREE.PerspectiveCamera( 75, options.width / options.height, 1, 10000 );
    this.camera.position.z = 1000;

    this.light = new THREE.DirectionalLight( 0xffffff, 1 );
    this.light.position.set( 1, 1, 1 ).normalize();
    this.scene.add( this.light );

    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setClearColor( 0xf0f0f0 );
    this.renderer.setSize( options.width, options.height );

    this.on('enterframe',
    /** @this ThreeLayer */
    function() {
      this.renderer.render( this.scene, this.camera );
    });

    this.domElement = this.renderer.domElement;
  }
}

/**
 * Shapeクラスオプション
 * @typedef {{
 *   padding?: number,
 *   backgroundColor?: import('../graphics/canvas').CanvasStyle,
 *   fill?: import('../graphics/canvas').CanvasStyle | false,
 *   stroke?: import('../graphics/canvas').CanvasStyle | false,
 *   strokeWidth?: number,
 *   lineCap?: CanvasLineCap,
 *   lineJoin?: CanvasLineJoin,
 *   shadow?: string | false,
 *   shadowBlur?: number,
 * } & import('../display/displayelement').DisplayElementOptions } ShapeOptions
 */

/**
 * @class phina.display.Shape
 * _extends phina.display.PlainElement
 */
class Shape extends PlainElement {

  /**
   * @param {ShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.Shape.defaults);
    options = $safe.call({}, options||{}, Shape.defaults);

    super(options);

    this.padding = options.padding;

    this.backgroundColor = options.backgroundColor;
    this.fill = options.fill;
    this.stroke = options.stroke;
    this.strokeWidth = options.strokeWidth;
    this.lineCap = options.lineCap;
    this.lineJoin = options.lineJoin;

    this.shadow = options.shadow;
    this.shadowBlur = options.shadowBlur;

    this.watchDraw = true;
    this._dirtyDraw = true;

    /** @this Shape */
    var checkRender = function() {
      // render
      if (this.watchDraw && this._dirtyDraw === true) {
        this.render(this.canvas);
        this._dirtyDraw = false;
      }
    };

    this.on('enterframe', checkRender);
    this.on('added', checkRender);
  }

  calcCanvasWidth() {
    return this.width + this.padding*2;
  }

  calcCanvasHeight() {
    return this.height + this.padding*2;
  }

  calcCanvasSize () {
    return {
      width: this.calcCanvasWidth(),
      height: this.calcCanvasHeight(),
    };
  }

  isStrokable() {
    return this.stroke && 0 < this.strokeWidth;
  }

  /**
   * @virtual
   * @param  {import('../graphics/canvas').Canvas} _canvas 
   * @returns {any}
   */
  prerender(_canvas) {

  }

  /**
   * @virtual
   * @param  {import('../graphics/canvas').Canvas} _canvas 
   * @returns {any}
   */
  postrender(_canvas) {

  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   * @returns {void}
   */
  renderFill(canvas) {
    canvas.fill();
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   * @returns {void}
   */
  renderStroke(canvas) {
    canvas.stroke();
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   * @returns {this}
   */
  render(canvas) {
    var context = canvas.context;
    // リサイズ
    var size = this.calcCanvasSize();
    canvas.setSize(size.width, size.height);
    // クリアカラー
    canvas.clearColor(this.backgroundColor);
    // 中心に座標を移動
    canvas.transformCenter();

    // 描画前処理
    this.prerender(this.canvas);

    // ストローク描画
    if (this.isStrokable()) {
      context.strokeStyle = /** @type {import('../graphics/canvas').CanvasStyle} */(this.stroke);
      context.lineWidth = this.strokeWidth;
      context.lineCap = this.lineCap;
      context.lineJoin = this.lineJoin;
      context.shadowBlur = 0;
      this.renderStroke(canvas);
    }

    // 塗りつぶし描画
    if (this.fill) {
      context.fillStyle = this.fill;

      // shadow の on/off
      if (this.shadow) {
        context.shadowColor = this.shadow;
        context.shadowBlur = this.shadowBlur;
      }
      else {
        context.shadowBlur = 0;
      }

      this.renderFill(canvas);
    }

    // 描画後処理
    this.postrender(this.canvas);

    return this;
  }

  /**
   * 指定プロパティを監視し、変更があったらダーティフラグを立てて再描画を促す
   * @param {string} key
   * @returns {void}
   */
  static watchRenderProperty(key) {
    // this.prototype.$watch(key, function(newVal, oldVal) {
    $watch.call(this.prototype, key, function(newVal, oldVal) {
      if (newVal !== oldVal) {
        this._dirtyDraw = true;
      }
    });
  }

  /**
   * Shape.watchRenderPropertyをまとめて行う
   * @param {string[]} keys
   * @returns {void}
   */
  static watchRenderProperties(keys) {
    var watchRenderProperty = this.watchRenderProperty || Shape.watchRenderProperty;
    keys.forEach(function(key) {
      watchRenderProperty.call(this, key);
    }, this);
  }

}

/**
 * @type {ShapeOptions}
 * @static
 */
Shape.defaults = {
  width: 64,
  height: 64,
  padding: 8,

  backgroundColor: '#aaa',
  fill: '#00a',
  stroke: '#aaa',
  strokeWidth: 4,
  lineCap: 'round',
  lineJoin: 'round',

  shadow: false,
  shadowBlur: 4,
};

// _defined
Shape.watchRenderProperties([
  'width',
  'height',
  'radius',
  'padding',
  'backgroundColor',
  'fill',
  'stroke',
  'strokeWidth',
  'lineCap',
  'lineJoin',
  'shadow',
  'shadowBlur',
]);


/**
 * @typedef {{
 *   cornerRadius?: number
 * } & ShapeOptions } RectangleShapeOptions
 */

  /**
 * @class phina.display.RectangleShape
 * _extends phina.display.Shape
 * 矩形描画クラス
 */
class RectangleShape extends Shape {

  /**
   * @param {RectangleShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.RectangleShape.defaults);
    options = $safe.call({}, options||{}, RectangleShape.defaults);

    super(options);

    this.cornerRadius = options.cornerRadius;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);
  }

}

/**
 * @type {RectangleShapeOptions}
 * @static
 */
RectangleShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'blue',
  stroke: '#aaa',
  strokeWidth: 4,
  cornerRadius: 0,
};

// _defined
Shape.watchRenderProperty.call(RectangleShape, 'cornerRadius');


/**
 * @typedef {{
 *   radius?: number
 * } & ShapeOptions } CircleShapeOptions
 */

/**
 * @class phina.display.CircleShape
 * _extends phina.display.Shape
 */
class CircleShape extends Shape {

  /**
   * @param {CircleShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.CircleShape.defaults);
    options = $safe.call({}, options||{}, CircleShape.defaults);

    super(options);

    this.setBoundingType('circle');
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.circle(0, 0, this.radius);
  }

}

/**
 * @type {CircleShapeOptions}
 * @static
 */
CircleShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'red',
  stroke: '#aaa',
  strokeWidth: 4,
  radius: 32,
};


/**
 * @class phina.display.TriangleShape
 * _extends phina.display.Shape
 */
class TriangleShape extends Shape {

  /**
   * @param {CircleShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.TriangleShape.defaults);
    options = $safe.call({}, options||{}, TriangleShape.defaults);

    super(options);

    this.setBoundingType('circle');
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.polygon(0, 0, this.radius, 3);
  }

}

/**
 * @type {CircleShapeOptions}
 * @static
 */
TriangleShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'green',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
};


/**
 * @typedef {{
 *   sides?: number,
 * } & CircleShapeOptions } PolygonShapeOptions
 */
/**
 * @typedef {{
 *   sideIndent?: number,
 * } & PolygonShapeOptions } StarShapeOptions
 */

/**
 * @class phina.display.StarShape
 * _extends phina.display.Shape
 */
class StarShape extends Shape {

  /**
   * @param {StarShapeOptions} [options] 
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.StarShape.defaults);
    options = $safe.call({}, options||{}, StarShape.defaults);

    super(options);

    this.setBoundingType('circle');
    this.sides = options.sides;
    this.sideIndent = options.sideIndent;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.star(0, 0, this.radius, this.sides, this.sideIndent);
  }

}

/**
 * @type {StarShapeOptions}
 * @static
 */
StarShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'yellow',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
  sides: 5,
  sideIndent: 0.38,
};

// _defined
Shape.watchRenderProperty.call(StarShape, 'sides');
Shape.watchRenderProperty.call(StarShape, 'sideIndent');


/**
 * @class phina.display.PolygonShape
 * _extends phina.display.Shape
 */
class PolygonShape extends Shape {

  /**
   * @param {PolygonShapeOptions} [options] 
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.PolygonShape.defaults);
    options = $safe.call({}, options||{}, PolygonShape.defaults);

    super(options);

    this.setBoundingType('circle');
    this.sides = options.sides;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.polygon(0, 0, this.radius, this.sides);
  }

}

/**
 * @type {PolygonShapeOptions}
 * @static
 */
PolygonShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'cyan',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
  sides: 5,
};

// defined
Shape.watchRenderProperty.call(PolygonShape, 'sides');


/**
 * @typedef {{
 *   cornerAngle?: number,
 * } & CircleShapeOptions } HeartShapeOptions
 */

/**
 * @class phina.display.HeartShape
 * _extends phina.display.Shape
 */
class HeartShape extends Shape {

  /**
   * @param {HeartShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.HeartShape.defaults);
    options = $safe.call({}, options||{}, HeartShape.defaults);

    super(options);

    this.setBoundingType('circle');
    this.cornerAngle = options.cornerAngle;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.heart(0, 0, this.radius, this.cornerAngle);
  }

}

/**
 * @type {HeartShapeOptions}
 * @static
 */
HeartShape.defaults = {
  backgroundColor: 'transparent',
  fill: 'pink',
  stroke: '#aaa',
  strokeWidth: 4,

  radius: 32,
  cornerAngle: 45,
};

// defined
Shape.watchRenderProperty.call(HeartShape, 'cornerAngle');


/**
 * @typedef {{
 *   paths?: Vector2[]
 * } & ShapeOptions } PathShapeOptions
 */

/**
 * @class phina.display.PathShape
 * _extends phina.display.Shape
 */
class PathShape extends Shape {
  // paths: null,

  /**
   * @param {PathShapeOptions} [options]
   */
  constructor(options) {
    // options = ({}).$safe(options || {}, phina.display.PathShape.defaults);
    options = $safe.call({}, options||{}, PathShape.defaults);

    super(options);
    this.paths = options.paths || [];
    this.lineJoin = options.lineJoin;
    this.lineCap = options.lineCap;
  }

  /**
   * @param {Vector2[]} paths
   * @returns {this}
   */
  setPaths (paths) {
    this.paths = paths;
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @returns {this}
   */
  clear () {
    this.paths.length = 0;
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @param {Vector2[]} paths 
   * @returns {this}
   */
  addPaths (paths) {
    [].push.apply(this.paths, paths);
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  addPath (x, y) {
    this.paths.push(new Vector2(x, y));
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @param {string | number} i
   * @returns {Vector2}
   */
  getPath (i) {
    return this.paths[i];
  }

  /**
   * @returns {Vector2[]} paths 
   */
  getPaths () {
    return this.paths;
  }

  /**
   * @param {string | number} i
   * @param {number} x
   * @param {number} y
   */
  changePath (i, x, y) {
    this.paths[i].set(x, y);
    this._dirtyDraw = true;
    return this;
  }

  /**
   * @returns {{width: number, height: number}}
   */
  calcCanvasSize () {
    var paths = this.paths;
    if (paths.length === 0) {
      return {
        width: this.padding * 2,
        height:this.padding * 2,
      };
    }
    var maxX = -Infinity;
    var maxY = -Infinity;
    var minX = Infinity;
    var minY = Infinity;

    for (var i = 0, len = paths.length; i < len; ++i) {
      var path = paths[i];
      if (maxX < path.x) { maxX = path.x; }
      if (minX > path.x) { minX = path.x; }
      if (maxY < path.y) { maxY = path.y; }
      if (minY > path.y) { minY = path.y; }
    }
    return {
      width: Math.max(Math.abs(maxX), Math.abs(minX)) * 2 + this.padding * 2,
      height: Math.max(Math.abs(maxY), Math.abs(minY)) * 2 + this.padding * 2,
    };
  }

  /**
   * @returns {number}
   */
  calcCanvasWidth () {
    return this.calcCanvasSize().width;
  }

  /**
   * @returns {number}
   */
  calcCanvasHeight () {
    return this.calcCanvasSize().height;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender (canvas) {
    var paths = this.paths;
    if (paths.length > 1) {
      var c = canvas.context;
      var p = paths[0];
      c.beginPath();
      c.moveTo(p.x, p.y);
      for (var i = 1, len = paths.length; i < len; ++i) {
        p = paths[i];
        c.lineTo(p.x, p.y);
      }
    }
  }

}

/**
 * @type {PathShapeOptions}
 * @static
 */
PathShape.defaults = {
  fill: false,
  backgroundColor: 'transparent',
};

/**
 * @typedef {{
 *   text?: string
 *   fontSize?: number
 *   fontWeight?: string | number
 *   fontFamily?: string
 *   align?: CanvasTextAlign
 *   baseline?: CanvasTextBaseline
 *   lineHeight?: number
 * } & import("./shape").ShapeOptions } LabelOptions
 */

/**
 * @class phina.display.Label
 * _extends phina.display.Shape
 */
class Label extends Shape {

  /**
   * @constructor
   * @param {LabelOptions} [options]
   */
  constructor(options) {
    if (typeof arguments[0] !== 'object') {
      options = { text: arguments[0], };
    }
    else {
      options = arguments[0];
    }

    options = $safe.call({}, options||{}, Label.defaults);
    // options = ({}).$safe(options, phina.display.Label.defaults);

    super(options);

    /** @type {string|number} */
    this._text;

    this.text = options.text;
    this.fontSize = options.fontSize;
    this.fontWeight = options.fontWeight;
    this.fontFamily = options.fontFamily;
    this.align = options.align;
    this.baseline = options.baseline;
    this.lineHeight = options.lineHeight;
  }

  /**
   * @returns {number}
   */
  calcCanvasWidth() {
    var width = 0;
    var canvas = this.canvas;
    canvas.context.font = this.font;
    this._lines.forEach(function(line) {
      var w = canvas.context.measureText(line).width;
      if (width < w) {
        width = w;
      }
    }, this);
    if (this.align !== 'center') width*=2;

    return width + this.padding*2;
  }

  /**
   * @returns {number}
   */
  calcCanvasHeight() {
    var height = this.fontSize * this._lines.length;
    if (this.baseline !== 'middle') height*=2;
    return height*this.lineHeight + this.padding*2;
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    var context = canvas.context;
    context.font = this.font;
    context.textAlign = this.align;
    context.textBaseline = this.baseline;

    var lines = this._lines;
    this.lineSize = this.fontSize*this.lineHeight;
    this._offset = -Math.floor(lines.length/2)*this.lineSize;
    this._offset += ((lines.length+1)%2) * (this.lineSize/2);
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  renderFill(canvas) {
    var context = canvas.context;
    this._lines.forEach(function(line, i) {
      context.fillText(line, 0, i*this.lineSize+this._offset);
    }, this);
  }

  /**
   * @param  {import('../graphics/canvas').Canvas} canvas 
   */
  renderStroke(canvas) {
    var context = canvas.context;
    this._lines.forEach(function(line, i) {
      context.strokeText(line, 0, i*this.lineSize+this._offset);
    }, this);
  }

  /**
   * text
   * @returns {string|number}
   */
  get text() { return this._text; }
  set text(v) {
    this._text = v;
    this._lines = (this.text + '').split('\n');
  }

  /**
   * @returns {string}
   */
  get font() {
    return format.call("{fontWeight} {fontSize}px {fontFamily}", this);
    // return "{fontWeight} {fontSize}px {fontFamily}".format(this);
  }

}

/**
 * @type {LabelOptions}
 * @static
 */
Label.defaults = {
  backgroundColor: 'transparent',

  fill: 'black',
  stroke: null,
  strokeWidth: 2,

  // 
  text: 'Hello, world!',
  // 
  fontSize: 32,
  fontWeight: '',
  fontFamily: "'HiraKakuProN-W3'", // Hiragino or Helvetica,
  // 
  align: 'center',
  baseline: 'middle',
  lineHeight: 1.2,
};

// defined
Shape.watchRenderProperty.call(Label, 'text');
Shape.watchRenderProperty.call(Label, 'fontSize');
Shape.watchRenderProperty.call(Label, 'fontWeight');
Shape.watchRenderProperty.call(Label, 'fontFamily');
Shape.watchRenderProperty.call(Label, 'align');
Shape.watchRenderProperty.call(Label, 'baseline');
Shape.watchRenderProperty.call(Label, 'lineHeight');

/**
 * Spriteクラスなど、FrameAnimationのtargetとして適正な型
 * @typedef {{
 *   srcRect: import("../geom/rect").Rect
 *   width: number
 *   height: number
 * } & import("./accessory").AccessoryTarget } FrameAnimationTarget
 */

/**
 * @class phina.accessory.FrameAnimation
 * _extends phina.accessory.Accessory
 * 
 * フレームアニメーション制御を行うAccessory派生クラス
 * 
 * 予めロード（パース）したスプライトシートJSONデータを使い、
 * Spriteクラスのフレーム範囲を制御することでアニメーションを実現する
 * @see https://qiita.com/alkn203/items/a287c7524193f5f4ca90
 * 
 * @example
 * // 予め"player_ss"という名前でスプライトシート画像、Jsonデータをアセット登録しておく
 * // player_ssには"walk"という名前のアニメーションを定義
 * const target = new phina.display.Sprite("player_ss");
 * const frameAnim = new phina.accessory.FrameAnimation("player_ss").attachTo(target);
 * frameAnim.gotoAndPlay("walk");
 */
class FrameAnimation extends Accessory {

  /**
   * @constructor
   * @param {string} ss ロード済みスプライトシートデータAssetキー
   */
  constructor(ss) {
    super();

    /** @type {FrameAnimationTarget} */
    this.target;

    /**
     * スプライトシートオブジェクト
     * 
     * @type {import('../asset/spritesheet').SpriteSheet}
     */
    this.ss = AssetManager.get('spritesheet', ss);

    /**
     * 再生中のアニメーションのデータオブジェクト
     * 
     * @type {import("../asset/spritesheet").SpriteSheetAnimationData | null}
     */
    this.currentAnimation;

    /**
     * 再生中のアニメーション名
     * 
     * @type {(string | number) | null}
     */
    this.currentAnimationName;

    /**
     * 停止状態
     * 
     * @type {boolean}
     */
    this.paused = true;

    /**
     * フレームサイズに合わせて対象の幅・高さを変えるかどうか
     * 
     * @type {boolean}
     */
    this.fit = true;

    /**
     * 現在のアニメーションフレームを表すインデックス値
     * 
     * @type {number}
     * @protected
     */
    this.currentFrameIndex;

    /**
     * アニメーション更新用のアプリフレームのカウント値
     * 
     * @type {number}
     * @protected
     */
    this.frame;

    /**
     * 終了フラグ：trueの時はupdate時にcurrentFrameIndexがリセットされる
     * 
     * @type {boolean}
     * @protected
     */
    this.finished = false;
  }

  /**
   * @param {*} _app Appクラスインスタンス
   */
  update(_app) {
    if (this.paused) return ;
    if (!this.currentAnimation) return ;

    if (this.finished) {
      this.finished = false;
      this.currentFrameIndex = 0;
      return ;
    }

    ++this.frame;
    if (this.frame%this.currentAnimation.frequency === 0) {
      ++this.currentFrameIndex;
      this._updateFrame();
    }
  }

  /**
   * 指定アニメーションを再生
   * 
   * @param {string | number} name アニメーション名
   * @param {boolean} [keep=true] 同名アニメーションがすでに再生中の場合、そのままにするかどうか
   * @returns {this}
   */
  gotoAndPlay(name, keep) {
    keep = (keep !== undefined) ? keep : true;
    if (keep && this.currentAnimation
             && name === this.currentAnimationName
             && this.currentFrameIndex < this.currentAnimation.frames.length
             && !this.paused) {
      return this;
    }
    this.currentAnimationName = name;
    this.frame = 0;
    this.currentFrameIndex = 0;
    this.currentAnimation = this.ss.getAnimation(name);
    this._updateFrame();

    this.paused = false;

    return this;
  }

  /**
   * 指定アニメーション及びその冒頭フレームをセット後、停止状態にする
   * 
   * @param {string} name アニメーション名
   * @returns {this}
   */
  gotoAndStop(name) {
    this.currentAnimationName = name;
    this.frame = 0;
    this.currentFrameIndex = 0;
    this.currentAnimation = this.ss.getAnimation(name);
    this._updateFrame();

    this.paused = true;

    return this;
  }

  /**
   * フレーム更新処理
   * 
   * @protected
   * @returns {void}
   */
  _updateFrame() {
    if (!this.currentAnimation) return;

    var anim = this.currentAnimation;
    if (this.currentFrameIndex >= anim.frames.length) {
      if (anim.next) {
        this.gotoAndPlay(anim.next);
        return ;
      }
      else {
        this.paused = true;
        this.finished = true;
        return ;
      }
    }

    var index = anim.frames[this.currentFrameIndex];
    var frame = this.ss.getFrame(index);
    this.target.srcRect.set(frame.x, frame.y, frame.width, frame.height);

    if (this.fit) {
      this.target.width = frame.width;
      this.target.height = frame.height;
    }
  }

}

/**
 * @typedef {{
 *   x: number
 *   y: number
 *   setInteractive: (flag:boolean) => any
 * } & import("./accessory").AccessoryAttachable } FlickableTarget
 */

/**
 * @class phina.accessory.Flickable
 * Flickable
 * _extends phina.accessory.Accessory
 */
class Flickable extends Accessory {

  /**
   * @constructor
   * @param {FlickableTarget} target
   */
  constructor(target) {
    super(target);

    /** @type {FlickableTarget} */
    this.target;

    /**
     * フリック開始位置
     */
    this.initialPosition = new Vector2(0, 0);

    /**
     * 摩擦値
     * @default 0.9
     */
    this.friction = 0.9;

    /**
     * 速度ベクトル
     */
    this.velocity = new Vector2(0, 0);

    /**
     * 上下の移動を許可するかどうか（初期値：true）
     * @default true
     */
    this.vertical = true;

    /**
     * 左右の移動を許可するかどうか（初期値：true）
     * @default true
     */
    this.horizontal = true;

    /**
     * キャッシュした差分値
     * @protected
     */
    this.cacheList = [];

    var self = this;
    this.on('attached', 
    /** @this {Flickable} */
    function() {
      this.target.setInteractive(true);

      this.target.on('pointstart', function(e) {
        self.initialPosition.set(this.x, this.y);
        self.velocity.set(0, 0);
      });
      this.target.on('pointstay', function(e) {
        if (self.horizontal) {
          this.x += e.pointer.dx;
        }
        if (self.vertical) {
          this.y += e.pointer.dy;
        }

        if (self.cacheList.length > 3) self.cacheList.shift();
        self.cacheList.push(e.pointer.deltaPosition.clone());
      });

      this.target.on('pointend', function(e) {
        // 動きのある delta position を後ろから検索　
        var delta = self.cacheList.reverse().find(function(v) {
          return v.lengthSquared() > 10;
        });
        clear.call(self.cacheList);
        // self.cacheList.clear();

        if (delta) {
          self.velocity.x = delta.x;
          self.velocity.y = delta.y;

          self.flare('flickstart', {
            direction: delta.normalize(),
          });
        }
        else {
          self.flare('flickcancel');
        }

        // self.flare('flick');
        // self.flare('flickend');
      });
    });
  }

  /**
   * 更新関数
   * @param {*} _app Appクラスインスタンス
   */
  update(_app) {
    if (!this.target) return ;

    this.velocity.x *= this.friction;
    this.velocity.y *= this.friction;

    if (this.horizontal) {
      this.target.position.x += this.velocity.x;
    }
    if (this.vertical) {
      this.target.position.y += this.velocity.y;
    }
  }

  /**
   * 位置・速度をフリック前に戻す
   * @returns {void}
   */
  cancel() {
    this.target.x = this.initialPosition.x;
    this.target.y = this.initialPosition.y;
    this.velocity.set(0, 0);

    // TODO: 
    // this.setInteractive(false);
    // this.tweener.clear()
    //     .move(this.initialX, this.initialY, 500, "easeOutElastic")
    //     .call(function () {
    //         this.setInteractive(true);
    //         this.fire(tm.event.Event("backend"));
    //     }.bind(this));
  }

  /**
   * フリック可能にする
   * @returns {void}
   */
  enable() {
    this._enable = true;
  }

}

// TODO: Element側で呼ぶ？
// phina.app.Element.prototype.getter('flickable', function() {
//   if (!this._flickable) {
//     this._flickable = phina.accessory.Flickable().attachTo(this);
//   }
//   return this._flickable;
// });

/**
 * @typedef {{
 *   position: import("../geom/vector2").PrimitiveVector2
 * } & import("./accessory").AccessoryAttachable } PhysicalTarget
 */

/**
 * @class phina.accessory.Physical
 * 本物ではないので名前変えるかも
 * FakePhysical or MarioPhysical or LiePhysical
 * RetroPysical or PysicaLike
 * _extends phina.accessory.Accessory
 */
class Physical extends Accessory  {

  /**
   * @constructor
   * @param {PhysicalTarget} target
   */
  constructor(target) {
    super(target);

    /**
     * かかっている力のベクトル
     */
    this.velocity = new Vector2(0, 0);

    /**
     * 重力ベクトル
     */
    this.gravity = new Vector2(0, 0);

    /**
     * 摩擦値
     * @default 1.0
     */
    this.friction = 1.0;
  }

  /**
   * 更新関数
   * @param {*} _app Appクラスインスタンス
   */
  update(_app) {
    var t = /** @type {PhysicalTarget} */(this.target);

    this.velocity.x *= this.friction;
    this.velocity.y *= this.friction;

    this.velocity.x += this.gravity.x;
    this.velocity.y += this.gravity.y;

    t.position.x += this.velocity.x;
    t.position.y += this.velocity.y;
  }

  /**
   * 力ベクトルをセット
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  force(x, y) {
    this.velocity.set(x, y);
    return this;
  }

  /**
   * 力ベクトルに値を加算
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  addForce(x, y) {
    this.velocity.x += x;
    this.velocity.y += y;
    return this;
  }

  /**
   * 重力ベクトルをセット
   * @param {number} x
   * @param {number} y
   * @returns {this}
   */
  setGravity(x, y) {
    this.gravity.set(x, y);
    return this;
  }

  /**
   * 摩擦値をセット
   * @param {number} fr
   * @returns {this}
   */
  setFriction(fr) {
    this.friction = fr;
    return this;
  }
}

// phina.app.Element.prototype.getter('physical', function() {
//   if (!this._physical) {
//     this._physical = phina.accessory.Physical().attachTo(this);
//   }
//   return this._physical;
// });

/** @typedef {string | import("./file").FileAssetLoadParam | any} AssetSrc 基本的には文字列だがAsset種類によって変わる */

/**
 * @class phina.asset.Asset
 * _extends phina.util.EventDispatcher
 */
class Asset extends EventDispatcher {

  // serverError: false,
  // notFound: false,
  // loadError: false,

  /**
   * @constructor
   */
  constructor() {
    super();

    this.loaded = false;
    this.serverError = false;
    this.notFound = false;
    this.loadError = false;

    /** @type {AssetSrc} */
    this.src = undefined;
  }

  /**
   * @param {AssetSrc} src
   * @returns {Flow}
   */
  load(src) {
    this.src = src;
    return new Flow(this._load.bind(this));
  }

  /**
   * ロード済みかどうか
   * @returns {boolean}
   */
  isLoaded() {
    return this.loaded;
  }

  /**
   * アセット種類に応じてサブクラスでオーバーライド
   * @protected
   * @param {(...args: any) => any} resolve
   */
  _load(resolve) {
    var self = this;
    setTimeout(function() {
      self.loaded = true;
      resolve();
    }, 100);
  }

  /**
   * @virtual
   * ロード失敗時にダミーをセットする
   */
  loadDummy() { }

}

var getFirst = function(array) { return first.get.call(array); };
var getLast = function(array) { return last.get.call(array); };

/**
 * @class phina.asset.Texture
 * _extends phina.asset.Asset
 */
class Texture extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();

    /** @type {HTMLImageElement|HTMLCanvasElement} */
    this.domElement = new Image();
    
    /** @type {string} */
    this.src;
  }

  /**
   * @protected
   * @override
   * @param {(...args: any) => any} resolve
   */
  _load(resolve) {
    this.domElement = new Image();

    var isLocal = (location.protocol == 'file:');
    if ( !isLocal && !(/^data:/.test(this.src)) ) ;

    var self = this;
    this.domElement.onload = function(e) {
      self.loaded = true;
      resolve(self);
    };
    /** @param {Event} e */
    this.domElement.onerror = function(e) {
      console.error(format.call("[phina.js] not found `{0}`!", this.src));
      // console.error("[phina.js] not found `{0}`!".format(this.src));

      // var key = self.src.split('/').last.replace('.png', '').split('?').first.split('#').first;
      var key = getFirst(
        getFirst(
          getLast(
            self.src.split('/')
          ).replace('.png', '').split('?')
        ).split('#')
      );

      // 型アサーション
      var target = /** @type {HTMLImageElement} */ (e.target);
      target.onerror = null;
      target.src = "http://dummyimage.com/128x128/444444/eeeeee&text=" + key;
    };

    this.domElement.src = this.src;
  }

  /**
   * 新たにTextureをクローン生成して返す
   * @returns {Texture}
   */
  clone() {
    var image = this.domElement;
    var canvas = new Canvas().setSize(image.width, image.height);
    var t = new Texture();
    canvas.context.drawImage(image, 0, 0);
    t.domElement = canvas.domElement;
    return t;
  }

  /**
   * @param {{ r: number; g: number; b: number; }} [color]
   * @returns {void}
   */
  transmit(color) {
    // imagaオブジェクトをゲット
    var image = this.domElement;
    // 新規canvas作成
    var canvas = new Canvas().setSize(image.width, image.height);
    // 新規canvasに描画
    canvas.context.drawImage(image, 0, 0);
    // canvas全体のイメージデータ配列をゲット
    var imageData = canvas.context.getImageData(0, 0, canvas.width, canvas.height);
    var data = imageData.data;
    // 透過色の指定がなければ左上のrgb値を抽出
    var r = (color !== undefined) ? color.r : data[0];
    var g = (color !== undefined) ? color.g : data[1];
    var b = (color !== undefined) ? color.b : data[2];
    // 配列を4要素目から4つ飛び（アルファ値）でループ
    // (3).step(data.length, 4, function(i) {
    step.call(3, data.length, 4, function(i) {
      // rgb値を逆算でゲットし、左上のrgbと比較
      if (data[i - 3] === r && data[i - 2] === g && data[i - 1] === b) {
        // 一致した場合はアルファ値を書き換える
        data[i] = 0;
      }
    });
    // 書き換えたイメージデータをcanvasに戻す
    canvas.context.putImageData(imageData, 0, 0);

    this.domElement = canvas.domElement;
  }

  /**
   * @typedef {(pixel: Uint8ClampedArray, index: number, x: number, y: number, imageData: ImageData )=> void} FilterFunc
   * @param {FilterFunc | FilterFunc[]} filters
   * @returns {this}
   */
  filter(filters) {
    if (!filters) {
      return this;
    }
    if (!Array.isArray(filters)) {
      filters = [filters];
    }
    var image = this.domElement;
    var w = image.width;
    var h = image.height;
    var canvas = new Canvas().setSize(w, h);

    /** @type {ImageData} */
    var imageData = null;

    canvas.context.drawImage(image, 0, 0);
    imageData = canvas.context.getImageData(0, 0, w, h);
    filters.forEach( function (fn) {
      if (typeof fn == 'function') {
        // h.times( function (y) {
        times.call(h, function (y) {
          // w.times( function (x) {
          times.call(w, function (x) {
            var i = (y * w + x) * 4;
            var pixel = imageData.data.slice(i, i + 4);
            fn(pixel, i, x, y, imageData);
          });
        });
      }
    });
    canvas.context.putImageData(imageData, 0, 0);
    this.domElement = canvas.domElement;
    return this;
  }

}

/**
 * @class phina.asset.Sound
 * _extends phina.asset.Asset
 */
class Sound extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();
    this._loop = false;
    this._loopStart = 0;
    this._loopEnd = 0;
    this._playbackRate = 1;
    this.context = Sound.getAudioContext();
    this.gainNode = this.context.createGain();

    /** @type {(AudioBufferSourceNode | OscillatorNode)?} */
    this.source;

    /** @type {string} */
    this.src;
  }

  /**
   * 音源を再生
   * 音源終了時に"ended"イベントを発生
   * 
   * @param {number} [when=0] 指定の秒数、再生を遅らせる
   * @param {number} [offset=0] 音源のどの時間位置で再生するかを秒数指定
   * @param {number} [duration] 再生時間を秒数指定
   * @returns {this}
   */
  play(when, offset, duration) {
    when = when ? when + this.context.currentTime : 0;
    offset = offset || 0;

    if (this.source) ;

    var source = this.source = this.context.createBufferSource();
    var buffer = source.buffer = this.buffer;
    source.loop = this._loop;
    source.loopStart = this._loopStart;
    source.loopEnd = this._loopEnd;
    source.playbackRate.value = this._playbackRate;

    // connect
    source.connect(this.gainNode);
    this.gainNode.connect(Sound.getMasterGain());

    // play
    if (duration !== undefined) {
      source.start(when, offset, duration);
    }
    else {
      source.start(when, offset);
    }

    // check play end
    source.addEventListener('ended', function(){
      this.flare('ended');
    }.bind(this));

    return this;
  }

  /**
   * 再生を停止（再生中でなかった時は何もしない）  
   * 再生中だった場合、同時に"stop", "ended"イベントを発火する
   * 
   * @returns {this}
   */
  stop() {
    if (this.source) {
      // stop すると source.endedも発火する
      this.source.stop && this.source.stop(0);
      this.source = null;
      this.flare('stop');
    }

    return this;
  }

  /**
   * 再生を一時停止
   * 同時に"pause"イベントを発火する
   * 
   * @returns {this}
   */
  pause() {
    /** @type {AudioBufferSourceNode} */
    (this.source).playbackRate.value = 0;
    this.flare('pause');
    return this;
  }

  /**
   * 再生を再開
   * 同時に"resume"イベントを発火する
   * 
   * @returns {this}
   */
  resume() {
    /** @type {AudioBufferSourceNode} */
    (this.source).playbackRate.value = this._playbackRate;
    this.flare('resume');
    return this;
  }

  /**
   * @private
   * 未実装
   * 
   * @param {*} type 
   */
  _oscillator(type) {
    var context = this.context;

    var oscillator = context.createOscillator();

    // Sine wave is type = “sine”
    // Square wave is type = “square”
    // Sawtooth wave is type = “saw”
    // Triangle wave is type = “triangle”
    // Custom wave is type = “custom” 
    oscillator.type = type || 'sine';

    this.source = oscillator;
    // connect
    this.source.connect(context.destination);
  }

  /**
   * AudioBufferからロード
   * 
   * @param {AudioBuffer} [buffer] 
   */
  loadFromBuffer(buffer) {
    var context = this.context;

    // set default buffer
    if (!buffer) {
      buffer = context.createBuffer( 1, 44100, 44100 );
      var channel = buffer.getChannelData(0);

      for( var i=0; i < channel.length; i++ )
      {
        channel[i] = Math.sin( i / 100 * Math.PI);
      }
    }

    // source
    this.buffer = buffer;
  }

  /**
   * ループ設定
   * 
   * @param {boolean} loop
   * @returns {this}
   */
  setLoop(loop) {
    this.loop = loop;
    return this;
  }

  /**
   * ループ開始位置を秒数で設定
   * 
   * @param {number} loopStart
   * @returns {this}
   */
  setLoopStart(loopStart) {
    this.loopStart = loopStart;
    return this;
  }

  /**
   * ループ終了位置を秒数で設定
   * 
   * @param {number} loopEnd
   * @returns {this}
   */
  setLoopEnd(loopEnd) {
    this.loopEnd = loopEnd;
    return this;
  }
  
  /**
   * 再生速度を設定
   * @see https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate
   * 
   * @param {number} playbackRate
   * @returns {this}
   */
  setPlaybackRate(playbackRate) {
    this.playbackRate = playbackRate;
    return this;
  }

  /**
   * @override
   * @param {(...args: any) => any} r
   */
  _load(r) {
    if (/^data:/.test(this.src)) {
      this._loadFromURIScheme(r);
    }
    else {
      this._loadFromFile(r);
    }
  }

  /**
   * @private
   * @param {(...args: any) => any} r
   */
  _loadFromFile(r) {
    var self = this;

    var xml = new XMLHttpRequest();
    xml.open('GET', this.src);
    xml.onreadystatechange = function() {
      if (xml.readyState === 4) {
        if ([200, 201, 0].indexOf(xml.status) !== -1) {

          // 音楽バイナリーデータ
          var data = xml.response;

          // webaudio 用に変換
          self.context.decodeAudioData(data, function(buffer) {
            self.loadFromBuffer(buffer);
            r(self);
          }, function() {
            console.warn("音声ファイルのデコードに失敗しました。(" + self.src + ")");
            r(self);
            self.flare('decodeerror');
          });

        } else if (xml.status === 404) {
          // not found

          self.loadError = true;
          self.notFound= true;
          r(self);
          self.flare('loaderror');
          self.flare('notfound');

        } else {
          // サーバーエラー

          self.loadError = true;
          self.serverError = true;
          r(self);
          self.flare('loaderror');
          self.flare('servererror');
        }
      }
    };

    xml.responseType = 'arraybuffer';

    xml.send(null);
  }

  /**
   * @private
   * @param {(...args: any) => any} r
   */
  _loadFromURIScheme(r) {
    var byteString = '';
    if (this.src.split(',')[0].indexOf('base64') >= 0) {
      byteString = atob(this.src.split(',')[1]);
    }
    else {
      byteString = unescape(this.src.split(',')[1]);
    }

    var self = this;
    var len = byteString.length;
    var buffer = new Uint8Array(len);

    for (var i=0; i<len; ++i) {
      buffer[i] = byteString.charCodeAt(i);
    }

    // webaudio 用に変換
    this.context.decodeAudioData(buffer.buffer, function(buffer) {
      self.loadFromBuffer(buffer);
      r(self);
    }, function() {
      console.warn("音声ファイルのデコードに失敗しました。(" + self.src + ")");
      self.loaded = true;
      r(self);
    });
  }

  /**
   * @override
   * ダミーバッファをロード
   */
  loadDummy() {
    this.loadFromBuffer();
  }

  /**
   * 音量
   */
  get volume()  { return this.gainNode.gain.value; }
  set volume(v) { this.gainNode.gain.value = v; }

  /**
   * ループ設定
   */
  get loop()  { return this._loop; }
  set loop(v) {
    this._loop = v;
  }

  /**
   * ループ開始時間位置(second)
   */
  get loopStart()  { return this._loopStart; }
  set loopStart(v) {
    this._loopStart = v;
  }

  /**
   * ループ終了時間位置(second)
   */
  get loopEnd()  { return this._loopEnd; }
  set loopEnd(v) {
    this._loopEnd = v;
  }

  /**
   * 再生速度
   */
  get playbackRate() { return this._playbackRate; }
  set playbackRate(v) {
    this._playbackRate = v;
    this.source = /** @type {AudioBufferSourceNode} */(this.source);
    if (this.source && this.source.playbackRate.value !== 0) {
      this.source.playbackRate.value = v;
    }
  }

  /**
   * マスターのゲインノードを返します。  
   * GainNodeが未生成の場合は生成して返します。
   * @returns {GainNode}
   */
  static getMasterGain() {
    if(!this._masterGain) {
      var context = this.getAudioContext();
      this._masterGain = context.createGain();
      this._masterGain.connect(context.destination);
    }
    return this._masterGain;
  }

  /**
   * WebAudioのコンテキストを生成して返します。  
   * すでに生成済みの場合はそれを返します。  
   * WebAudio未サポートの場合はnullを返します。
   * @returns {AudioContext | null}
   */
  static getAudioContext() {
    if (!Support.webAudio) return null;

    if (this.context) return this.context;

    var g = phina.global;
    var context = null;

    if (g.AudioContext) {
      context = new AudioContext();
    }
    else if (g['webkitAudioContext']) {
      context = new g['webkitAudioContext']();
    }
    else if (g['mozAudioContext']) {
      context = new g['mozAudioContext']();
    }

    this.context = context;

    return context;
  }

  /**
   * マスター音量を取得
   */
  static get volume() {
    return this.getMasterGain().gain.value;
  }

  /**
   * マスター音量をセット
   * @param {number} v
   */
  static set volume(v) {
    this.getMasterGain().gain.value = v;
  }
}

/**
 * @class phina.asset.Script
 * _extends phina.asset.Asset
 */
class Script extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();
    
    /** @type {string} */
    this.src;
  }

  _load(resolve) {
    var self = this;
    this.domElement = document.createElement('script');
    this.domElement.src = this.src;

    this.domElement.onload = function() {
      resolve(self);
    }.bind(this);

    document.body.appendChild(this.domElement);
  }

}

/**
 * @typedef {Object} SpriteSheetFrameData
 * @property {number} x フレーム左上x座標
 * @property {number} y フレーム左上y座標
 * @property {number} width フレーム横幅
 * @property {number} height フレーム縦幅
 */

 /**
 * 各アニメーションの詳細
 * @typedef {Object} SpriteSheetAnimationData
 * @property {number[]} frames フレーム番号順の数列 ex) [0, 1, 2]
 * @property {string | number} next 現アニメーション終了時に移行したいアニメーション名、ループさせたい場合は同じアニメーションを指定
 * @property {number} frequency フレーム更新頻度（間隔）
 */

/**
 * SpriteSheetAnimationDataの配列版
 * @typedef {[
 *   number, // 開始フレームindex
 *   number, // 終了フレームindex
 *   string | number, // next
 *   number  // frequency
 * ]} SpriteSheetAnimationDataArray
 */

/**
 * アニメーションテーブル
 * @typedef {{
 *   [key in (string | number)]: SpriteSheetAnimationData
 * }} SpriteSheetAnimationTable
 */

/**
 * @typedef {Object} SpriteSheetFrameSetupParam
 * @property {number} width １フレームの横幅
 * @property {number} height １フレームの縦幅
 * @property {number} rows 横のフレーム数
 * @property {number} cols 縦のフレーム数
 */

/**
 * SpriteSheetクラスセットアップ用のデータオブジェクト
 * @typedef {Object} SpriteSheetSetupParam
 * @property {SpriteSheetFrameSetupParam} frame フレームのサイズ・分割数データ
 * @property {{
 *   [key in (string | number)]: SpriteSheetAnimationData | SpriteSheetAnimationDataArray
 * }} animations
 */

/**
 * @class phina.asset.SpriteSheet
 * _extends phina.asset.Asset
 */
class SpriteSheet extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();

    /**
     * jsonファイルへのパス文字列、もしくはjsonデータオブジェクトそのもの
     * @type {string | SpriteSheetSetupParam}
     */
    this.src;

    /**
     * 総フレーム数
     * @type {number}
     */
    this.frame;

    /** @type {SpriteSheetFrameData[]} */
    this.frames;

    /** @type {SpriteSheetAnimationTable} */
    this.animations;
  }

  /**
   * @param {SpriteSheetSetupParam} params
   * @returns {this}
   */
  setup(params) {
    this._setupFrame(params.frame);
    this._setupAnim(params.animations);
    return this;
  }

  /**
   * @override
   * @param {(arg0: this) => void} resolve
   * @returns {void}
   */
  _load(resolve) {

    var self = this;

    if (typeof this.src === 'string') {
      var xml = new XMLHttpRequest();
      xml.open('GET', this.src);
      xml.onreadystatechange = function() {
        if (xml.readyState === 4) {
          if ([200, 201, 0].indexOf(xml.status) !== -1) {
            var data = xml.responseText;
            var json = JSON.parse(data);

            self.setup(json);

            resolve(self);
          }
        }
      };

      xml.send(null);
    }
    else {
      this.setup(this.src);
      resolve(self);
    }

  }

  /**
   * @private
   * @param {SpriteSheetFrameSetupParam} frame
   */
  _setupFrame(frame) {
    /** @type {SpriteSheetFrameData[]} */
    var frames = this.frames = [];
    var unitWidth = frame.width;
    var unitHeight = frame.height;

    var count = frame.rows * frame.cols;
    this.frame = count;

    times.call(count, function(i) {
    // (count).times(function(i) {
      var xIndex = i%frame.cols;
      var yIndex = (i/frame.cols)|0;

      frames.push({
        x: xIndex*unitWidth,
        y: yIndex*unitHeight,
        width: unitWidth,
        height: unitHeight,
      });
    });
  }

  /**
   * @private
   * @param {SpriteSheetSetupParam["animations"]} animations
   */
  _setupAnim(animations) {
    this.animations = {};

    // デフォルトアニメーション
    this.animations["default"] = {
        frames: range.call([], 0, this.frame),
        // frames: [].range(0, this.frame),
        next: "default",
        frequency: 1,
    };

    // animations.forIn(
    forIn.call(animations, 
    /**
     * @this {SpriteSheet}
     * @param {string | number} key
     * @param {SpriteSheetAnimationData | SpriteSheetAnimationDataArray} value
     */
    function(key, value) {
      var anim = value;

      if (anim instanceof Array) {
        this.animations[key] = {
          frames: range.call([], anim[0], anim[1]),
          // frames: [].range(anim[0], anim[1]),
          next: anim[2],
          frequency: anim[3] || 1,
        };
      }
      else {
        this.animations[key] = {
          frames: anim.frames,
          next: anim.next,
          frequency: anim.frequency || 1
        };
      }

    }, this);
  }

  /**
   * フレームを取得
   * @param {number} index
   * @returns {SpriteSheetFrameData}
   */
  getFrame(index) {
    return this.frames[index];
  }

  /**
   * @param {string | number} [name="default"]
   * @returns {SpriteSheetAnimationData}
   */
  getAnimation(name) {
    name = (name !== undefined) ? name : "default";
    return this.animations[name];
  }

}

/** @typedef {string|number|null} FontName 基本はstring型 */

/**
 * @class phina.asset.Font
 * _extends phina.asset.Asset
 */
class Font extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();

    /** @type {FontName} */
    this.fontName = null;
  }

  /**
   * @param {string} path
   * @returns {Flow}
   */
  load(path) {
    this.src = path;

    var reg = /(.*)(?:\.([^.]+$))/;
    var key = this.fontName || last.get.call(path.match(reg)[1].split('/'));    //フォント名指定が無い場合はpathの拡張子前を使用
    // var key = this.fontName || path.match(reg)[1].split('/').last;    //フォント名指定が無い場合はpathの拡張子前を使用
    var type = path.match(reg)[2];
    var format$1 = "unknown";
    switch (type) {
      case "ttf":
        format$1 = "truetype"; break;
      case "otf":
        format$1 = "opentype"; break;
      case "woff":
        format$1 = "woff"; break;
      case "woff2":
        format$1 = "woff2"; break;
      default:
        console.warn("サポートしていないフォント形式です。(" + path + ")");
    }
    this.format = format$1;
    this.fontName = key;

    if (format$1 !== "unknown") {
      var text = format.call("@font-face { font-family: '{0}'; src: url({1}) format('{2}'); }", key, path, format$1);
      // var text = "@font-face { font-family: '{0}'; src: url({1}) format('{2}'); }".format(key, path, format);
      var e = document.querySelector("head");
      var fontFaceStyleElement = document.createElement("style");
      if (fontFaceStyleElement.innerText) {
        fontFaceStyleElement.innerText = text;
      } else {
        fontFaceStyleElement.textContent = text;
      }
      e.appendChild(fontFaceStyleElement);
    }

    return new Flow(this._load.bind(this));
  }

  /**
   * @param {(arg0: Font) => void} resolve
   */
  _load(resolve) {
    if (this.format !== "unknown") {
      this._checkLoaded(this.fontName, 
      /** @this {Font} */
      function() {
        this.loaded = true;
        resolve(this);
      }.bind(this));
    } else {
      this.loaded = true;
      resolve(this);
    }
  }

  /**
   * @param {FontName} font
   * @param {() => any} [callback]
   */
  _checkLoaded (font, callback) {
    var canvas = new Canvas();
    var DEFAULT_FONT = canvas.context.font.split(' ')[1];
    canvas.context.font = '40px ' + DEFAULT_FONT;

    var checkText = "1234567890-^\\qwertyuiop@[asdfghjkl;:]zxcvbnm,./\!\"#$%&'()=~|QWERTYUIOP`{ASDFGHJKL+*}ZXCVBNM<>?_１２３４５６７８９０－＾￥ｑｗｅｒｔｙｕｉｏｐａｓｄｆｇｈｊｋｌｚｘｃｖｂｎｍ，．あいうかさたなをん時は金なり";
    // 特殊文字対応
    checkText += String.fromCharCode(0xf04b);

    var before = canvas.context.measureText(checkText).width;
    canvas.context.font = '40px ' + font + ', ' + DEFAULT_FONT;

    var timeoutCount = 30;
    var checkLoadFont = function () {
      var after = canvas.context.measureText(checkText).width;
      if (after !== before) {
        setTimeout(function() {
          callback && callback();
        }, 100);
      } else {
        if (--timeoutCount > 0) {
          setTimeout(checkLoadFont, 100);
        }
        else {
          callback && callback();
          console.warn("timeout font loading");
        }
      }
    };
    checkLoadFont();
  }

  /**
   * @param {FontName} name
   * @returns {this}
   */
  setFontName(name) {
    if (this.loaded) {
      console.warn("フォント名はLoad前にのみ設定が出来ます(" + name + ")");
      return this;
    }
    this.fontName = name;
    
    return this;
  }

  /**
   * @returns {FontName}
   */
  getFontName() {
    return this.fontName;
  }

}

/**
 * @typedef {{
 *   path: string,
 *   dataType: "xml"| "json",
 * }} FileAssetLoadParam
 */

/**
 * @class phina.asset.File
 * _extends phina.asset.Asset
 */
class File extends Asset {

  /**
   * @constructor
   */
  constructor() {
    super();
    this.data = undefined;
    this.dataType = undefined;
  }

  _load(resolve) {

    var params = {};

    if (typeof this.src === 'string') {
      $extend.call(params, {
      // params.$extend({
        path: this.src,
      });
    }
    else if (typeof this.src === 'object') {
      $extend.call(params, this.src);
      // params.$extend(this.src);
    }

    $safe.call(params, {
    // params.$safe({
      path: '',
      dataType: 'text',
    });

    // load
    var self = this;
    var xml = new XMLHttpRequest();
    xml.open('GET', params.path);
    xml.onreadystatechange = function() {
      if (xml.readyState === 4) {
        if ([200, 201, 0].indexOf(xml.status) !== -1) {
          /** @type {string|Document} */
          var data = xml.responseText;

          if (params.dataType === 'json') {
            data = JSON.parse(data);
          } else if (params.dataType === 'xml') {
            data = (new DOMParser()).parseFromString(data, "text/xml");
          }
          self.dataType = params.dataType;

          self.data = data;
          resolve(self);
        }
      }
    };

    xml.send(null);
    // this.domElement = new Image();
    // this.domElement.src = this.src;

    // var self = this;
    // this.domElement.onload = function() {
    //   self.loaded = true;
    //   resolve(self);
    // };
  }

}

/**
 * assetKeyのvalueは通常はstring（パス文字列）
 * ただしパース済みjsonなどの特殊な形式も受け付けるため、any型としている
 * @typedef {{
 *   [assetType: string]: {
 *     [assetKey: string]: any
 *   }
 * }} AssetLoaderLoadParam
 */

/**
 * @class phina.asset.AssetLoader
 * _extends phina.util.EventDispatcher
 */
class AssetLoader extends EventDispatcher {

  /**
   * @constructor
   * @param {{ cache: boolean }} [params]
   */
  constructor(params) {
    super();

    // params = (params || {}).$safe({
    //   cache: true,
    // });
    params = $safe.call(params||{}, { cache: true });

    this.assets = {};
    this.cache = params.cache;
  }

  /**
   * @param {AssetLoaderLoadParam} params
   * @returns {Flow}
   */
  load(params) {
    var self = this;
    var flows = [];

    var counter = 0;
    var length = 0;
    forIn.call(params, function(_type, assets) {
    // params.forIn(function(type, assets) {
      length += Object.keys(assets).length;
    });
    
    forIn.call(params, function(type, assets) {
    // params.forIn(function(type, assets) {
      forIn.call(assets, function(key, value) {
      // assets.forIn(function(key, value) {
        var func = AssetLoader.assetLoadFunctions[type];
        var flow = func(key, value);
        flow.then(function(asset) {
          if (self.cache) {
            AssetManager.set(type, key, asset);
          }
          self.flare('progress', {
            key: key,
            asset: asset,
            progress: (++counter/length),
          });
        });
        flows.push(flow);
      });
    });


    if (self.cache) {

      self.on('progress', function(e) {
        if (e.progress >= 1.0) {
          // load失敗時、対策

          forIn.call(params, function(type, assets) {
          // params.forIn(function(type, assets) {
            forIn.call(assets, function(key, value) {
            // assets.forIn(function(key, value) {
              var asset = AssetManager.get(type, key);
              if (asset.loadError) {
                var dummy = AssetManager.get(type, 'dummy');
                if (dummy) {
                  if (dummy.loadError) {
                    dummy.loadDummy();
                    dummy.loadError = false;
                  }
                  AssetManager.set(type, key, dummy);
                } else {
                  asset.loadDummy();
                }
              }
            });
          });
        }
      });
    }
    return Flow.all(flows).then(function(args) {
      self.flare('load');
    });
  }

  /**
   * アセット種類に応じたロード関数を登録
   * @param {string | number} key アセットタイプ名
   * @param {(...args: any)=> Flow} func Flowインスタンスを返す関数
   */
  static register(key, func) {
    this.assetLoadFunctions[key] = func;
    return this;
  }

}

/**
 * 登録済みアセットロード関数
 */
AssetLoader.assetLoadFunctions = {
  image: function(key, path) {
    var texture = new Texture();
    var flow = texture.load(path);
    return flow;
  },
  sound: function(key, path) {
    var sound = new Sound();
    var flow = sound.load(path);
    return flow;
  },
  spritesheet: function(key, path) {
    var ss = new SpriteSheet();
    var flow = ss.load(path);
    return flow;
  },
  script: function(key, path) {
    var script = new Script();
    return script.load(path);
  },
  font: function(key, path) {
    var font = new Font();
    font.setFontName(key);
    return font.load(path);
  },
  json: function(key, path) {
    var text = new File();
    return text.load({
      path: path,
      dataType: "json",
    });
  },
  xml: function(key, path) {
    var text = new File();
    return text.load({
      path: path,
      dataType: "xml",
    });
  },
  text: function(key, path) {
    var text = new File();
    return text.load(path);
  }
};

/**
 * @class phina.asset.SoundManager
 * 全てのクラスメンバーがstaticな静的クラス
 * サウンドの再生は基本これを使う
 * 
 * ### Ref
 * - http://evolve.reintroducing.com/_source/classes/as3/SoundManager/SoundManager.html
 * - https://github.com/nicklockwood/SoundManager
 */
class SoundManager {
  // volume: 0.8,
  // musicVolume: 0.8,
  // muteFlag: false,
  // currentMusic: null,

  /**
   * @private インスタンス化しない
   */
  constructor() {}

  /**
   * 音源を再生
   * 
   * @param {string} name 音源キー名
   * @param {number} [when=0] 指定の秒数、再生を遅らせる
   * @param {number} [offset=0] 音源のどの時間位置で再生するかを秒数指定
   * @param {number} [duration] 再生時間を秒数指定
   * @returns {import('../asset/sound').Sound}
   */
  static play(name, when, offset, duration) {
    /** @type {import('../asset/sound').Sound} */
    var sound = AssetManager.get('sound', name);

    sound.volume = this.getVolume();
    sound.play(when, offset, duration);

    return sound;
  }

  /**
   * @private 未実装のため
   */
  static stop() {
    // TODO: 
  }

  /**
   * @private 未実装のため
   */
  static pause() {
    // TODO: 
  }

  /**
   * @private 未実装のため
   */
  static fade() {
    // TODO: 
  }

  /**
   * 通常サウンド音量をセット
   * 
   * @param {number} volume
   * @returns {void}
   */
  static setVolume(volume) {
    this.volume = volume;
  }

  /**
   * 通常サウンド音量を取得
   * 
   * @returns {number}
   */
  static getVolume() {
    return this.volume;
  }

  /**
   * ミュート
   * 
   * @returns {SoundManager}
   */
  static mute() {
    this.muteFlag = true;
    if (this.currentMusic) {
      this.currentMusic.volume = 0;
    }
    return this;
  }

  /**
   * ミュート解除
   * 
   * @returns {SoundManager}
   */
  static unmute() {
    this.muteFlag = false;
    if (this.currentMusic) {
      this.currentMusic.volume = this.getVolumeMusic();
    }
    return this;
  }

  /**
   * ミュート状態かどうか
   * 
   * @returns {boolean}
   */
  static isMute() {
    return this.muteFlag;
  }

  /**
   * 音楽系の音源を再生：ループの有無などを細かく調整可能
   * 
   * @param {string} name 音源キー名
   * @param {number} [fadeTime] 指定時間をかけて音量フェードイン。単位はミリ秒
   * @param {boolean} [loop] ループするかどうか。Default: true
   * @param {number} [when=0] 指定の秒数、再生を遅らせる
   * @param {number} [offset=0] 音源のどの時間位置で再生するかを秒数指定
   * @param {number} [duration] 再生時間を秒数指定
   * @returns {import('../asset/sound').Sound} 再生したSoundクラス
   */
  static playMusic(name, fadeTime, loop, when, offset, duration) {
    loop = (loop !== undefined) ? loop : true;

    if (this.currentMusic) {
      this.stopMusic(fadeTime);
    }

    /** @type {import('../asset/sound').Sound} */
    var music = AssetManager.get('sound', name);

    music.setLoop(loop);
    music.play(when, offset, duration);

    if (fadeTime > 0) {
      var count = 32;
      var counter = 0;
      var unitTime = fadeTime/count;
      var volume = this.getVolumeMusic();

      music.volume = 0;
      var id = setInterval(function() {
        counter += 1;
        var rate = counter/count;
        music.volume = rate*volume;

        if (rate >= 1) {
          clearInterval(id);
          return false;
        }

        return true;
      }, unitTime);
    }
    else {
      music.volume = this.getVolumeMusic();
    }

    this.currentMusic = music;

    return this.currentMusic;
  }

  /**
   * 音楽を停止
   * 
   * @param {number} [fadeTime] 指定時間をかけて音量フェードアウト。単位はミリ秒
   * @returns {void}
   */
  static stopMusic(fadeTime) {
    if (!this.currentMusic) { return ; }

    var music = this.currentMusic;
    this.currentMusic = null;

    if (fadeTime > 0) {
      var count = 32;
      var counter = 0;
      var unitTime = fadeTime/count;
      var volume = this.getVolumeMusic();

      music.volume = 0;
      var id = setInterval(function() {
        counter += 1;
        var rate = counter/count;
        music.volume = volume*(1-rate);

        if (rate >= 1) {
          music.stop();
          clearInterval(id);
          return false;
        }

        return true;
      }, unitTime);
    }
    else {
      music.stop();
    }
  }

  /**
   * 音楽を一時停止
   * 
   * @returns {void}
   */
  static pauseMusic() {
    if (!this.currentMusic) { return ; }
    this.currentMusic.pause();
  }

  /**
   * 音楽を再開
   * 
   * @returns {void}
   */
  static resumeMusic() {
    if (!this.currentMusic) { return ; }
    this.currentMusic.resume();
  }

  /**
   * 音楽の音量を設定
   * 
   * @param {number} volume
   * @returns {SoundManager}
   */
  static setVolumeMusic(volume) {
    this.musicVolume = volume;
    if (this.currentMusic) {
      this.currentMusic.volume = volume;
    }

    return this;
  }

  /**
   * 音楽の音量を取得
   * 
   * @returns {number}
   */
  static getVolumeMusic() {
    return this.musicVolume;
  }

}

/**
 * 通常サウンド（SE）音量
 * @type {number}
 */
SoundManager.volume = 0.8;

/**
 * 音楽音量
 * @type {number}
 */
SoundManager.musicVolume = 0.8;

/**
 * ミュート状態
 * @type {boolean}
 */
SoundManager.muteFlag = false;

/**
 * 再生中の音楽音源
 * @type {import('../asset/sound').Sound | null}
 */
SoundManager.currentMusic = null;

/**
 * @typedef {{
 *   text?: string,
 *   fontColor?: import("../graphics/canvas").CanvasStyle,
 *   fontSize?: number,
 *   fontWeight?: string | number,
 *   fontFamily?: string,
 *   cornerRadius?: number
 * } & import('../display/shape').ShapeOptions } ButtonOptions
 */

/**
 * @class phina.ui.Button
 * Button
 * _extends phina.display.Shape
 */
class Button extends Shape {

  /**
   * @constructor
   * @param {ButtonOptions} [options]
   */
  constructor(options) {
    options = $safe.call(options || {}, Button.defaults);
    // options = (options || {}).$safe(phina.ui.Button.defaults);
    super(options);

    this.cornerRadius = options.cornerRadius;
    this.text         = options.text;
    this.fontColor    = options.fontColor;
    this.fontSize     = options.fontSize;
    this.fontWeight     = options.fontWeight;
    this.fontFamily   = options.fontFamily;

    this.setInteractive(true);
    this.on('pointend', function() {
      this.flare('push');
    });
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);
  }

  /**
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  postrender(canvas) {
    var context = canvas.context;
    // text
    var font = format.call("{fontWeight} {fontSize}px {fontFamily}", this);
    // var font = "{fontWeight} {fontSize}px {fontFamily}".format(this);
    context.font = font;
    context.textAlign = 'center';
    context.textBaseline = 'middle';
    context.fillStyle = this.fontColor;
    context.fillText(this.text, 0, 0);
  }

}

/**
 * @type {ButtonOptions}
 * @static
 */
Button.defaults = {
  width: 200,
  height: 80,
  backgroundColor: 'transparent',
  fill: 'hsl(200, 80%, 60%)',
  stroke: null,

  cornerRadius: 8,
  text: 'Hello',
  fontColor: 'white',
  fontSize: 32,
  fontWeight: '',
  fontFamily: "'HiraKakuProN-W3'", // Hiragino or Helvetica,
};

// defined
Shape.watchRenderProperty.call(Button, 'cornerRadius');
Shape.watchRenderProperty.call(Button, 'text');
Shape.watchRenderProperty.call(Button, 'fontColor');
Shape.watchRenderProperty.call(Button, 'fontSize');
Shape.watchRenderProperty.call(Button, 'fontFamily');

/**
 * @typedef {{
 *   value?: number
 *   maxValue?: number
 *   gaugeColor?: import("../graphics/canvas").CanvasStyle
 *   animation?: boolean
 *   cornerRadius?: number
 * } & import('../display/shape').ShapeOptions } GaugeOptions
 */

/**
 * @class phina.ui.Gauge
 * _extends phina.display.Shape
 * 
 * @example
 * const lifeGauge = new Gauge({
 *   fill: "gray", // Gauge background color
 *   gaugeColor: "red", // Gauge main color
 *   stroke: "black" // Gauge frame color
 *   maxValue: 200,
 *   animation: true,
 * })
 * 
 * if (playerDamaged) {
 *   lifeGauge.value -= 10
 * }
 * 
 */
class Gauge extends Shape {

  /**
   * @param {GaugeOptions} [options] 
   */
  constructor(options) {
    options = $safe.call({}, options || {}, Gauge.defaults);
    // options = ({}).$safe(options || {}, phina.ui.Gauge.defaults);
    
    super(options);

    /**
     * @private
     * @type {number}
     */
    this._value = (options.value !== undefined) ? options.value : options.maxValue;

    /**
     * @type {number} 最大値
     */
    this.maxValue = options.maxValue;

    /**
     * @type {import("../graphics/canvas").CanvasStyle} ゲージの色
     */
    this.gaugeColor = options.gaugeColor;
    
    /**
     * @type {number} 最大値
     */
    this.cornerRadius = options.cornerRadius;

    /**
     * @type {number} 見た目の値
     */
    this.visualValue = (options.value !== undefined) ? options.value : options.maxValue;

    /**
     * @type {boolean} アニメーションさせるかどうか
     */
    this.animation = options.animation;

    /**
     * @type {number} アニメーション完了時間をミリ秒指定
     * @default 1000
     */
    this.animationTime = 1*1000;
  }

  /**
   * 満タンかをチェック
   * @returns {boolean}
   */
  isFull() {
    return this.value === this.maxValue;
  }

  /**
   * 空っぽかをチェック
   * @returns {boolean}
   */
  isEmpty() {
    return this.value === 0;
  }

  /**
   * @param {number} value
   * @returns {void}
   */
  setValue(value) {
    value = clamp(value, 0, this.maxValue);
    // value = Math.clamp(value, 0, this.maxValue);

    // end when now value equal value of argument
    if (this.value === value) return ;

    // fire value change event
    this.flare('change');

    this._value = value;

    if (this.animation) {
      var range = Math.abs(this.visualValue-value);
      var time = (range/this.maxValue)*this.animationTime;

      // @ts-ignore
      this.tweener.ontween = function() {
        this._dirtyDraw = true;
      }.bind(this);
      this.tweener
        .clear()
        .to({'visualValue': value}, time)
        .call(function() {
          this.flare('changed');
          if (this.isEmpty()) {
            this.flare('empty');
          }
          else if (this.isFull()) {
            this.flare('full');
          }
        }, this);
    }
    else {
      this.visualValue = value;
      this.flare('changed');
      if (this.isEmpty()) {
        this.flare('empty');
      }
      else if (this.isFull()) {
        this.flare('full');
      }
    }
  }

  /**
   * 
   * @returns {number}
   */
  getRate() {
    var rate = this.visualValue/this.maxValue;
    return rate;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  prerender(canvas) {
    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  postrender(canvas) {
    var rate = this.getRate();
    canvas.context.fillStyle = this.gaugeColor;
    canvas.context.save();
    canvas.context.clip();
    canvas.fillRect(-this.width/2, -this.height/2, this.width*rate, this.height);
    canvas.context.restore();
  }

  get value() {
    return this._value;
  }
  set value(v) {
    this.setValue(v);
  }

}

/**
 * @type {GaugeOptions}
 * @static
 */
Gauge.defaults = {
  width: 256,
  height: 32,
  backgroundColor: 'transparent',
  fill: 'white',
  stroke: '#aaa',
  strokeWidth: 4,
  maxValue: 100,
  gaugeColor: '#44f',
  cornerRadius: 0,
  animation: true
};

// defined
Shape.watchRenderProperty.call(Gauge, 'value');
Shape.watchRenderProperty.call(Gauge, 'maxValue');
Shape.watchRenderProperty.call(Gauge, 'gaugeColor');
Shape.watchRenderProperty.call(Gauge, 'cornerRadius');

/**
 * @typedef {{
 *   anticlockwise?: boolean
 *   showPercentage?: boolean
 * } & GaugeOptions } CircleGaugeOptions
 */

/**
 * @class phina.ui.CircleGauge
 * _extends phina.ui.Gauge
 */
class CircleGauge extends Gauge {

  /**
   * @param {CircleGaugeOptions} [options] 
   */
  constructor(options) {
    options = $safe.call(options || {}, {
    // options = (options || {}).$safe({
      backgroundColor: 'transparent',
      fill: '#aaa',
      stroke: '#222',

      radius: 64,
      anticlockwise: true,
      showPercentage: false, // TODO
    });

    super(options);

    this.setBoundingType('circle');

    this.radius = options.radius;
    this.anticlockwise = options.anticlockwise;
    this.showPercentage = options.showPercentage;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} _canvas 
   */
  prerender(_canvas) {
    var rate = this.getRate();
    var end = (Math.PI*2)*rate;
    this.startAngle = 0;
    this.endAngle = end;

    this.canvas.rotate(-Math.PI*0.5);
    this.canvas.scale(1, -1);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderFill(canvas) {
    canvas.fillPie(0, 0, this.radius, this.startAngle, this.endAngle);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderStroke(canvas) {
    canvas.strokeArc(0, 0, this.radius, this.startAngle, this.endAngle);
  }

  postrender() {
    // if (this.showPercentage) {
    //   // TODO:
    //   var left = Math.max(0, this.limit-this.time);
    //   this.label.text = Math.ceil(left/1000)+'';
    // }
  }

}

/**
 * @typedef {{
 *   verticalAlign?: number | keyof LabelArea.verticalAlignToOffsetMap
 *   align?: keyof LabelArea.alignToOffsetMap,
 *   baseline?: CanvasTextBaseline,
 *   scroll?: Vector2
 *   scrollX?: number
 *   scrollY?: number
 * } & import('../display/label').LabelOptions } LabelAreaOptions
 */

/**
 * @type {{[fontName: string]: {[character: string]: number }}}
 */
var textWidthCache = {};

/**
 * @class phina.ui.LabelArea
 * _extends phina.display.Label
 */
class LabelArea extends Label {

  // _lineUpdate: true,

  /**
   * @param {LabelAreaOptions} options 
   */
  constructor(options) {
    options = $safe.call({}, options, LabelArea.defaults);
    // options = {}.$safe(options, LabelArea.defaults);
    super(options);

    this._lineUpdate = true;
    this.verticalAlign = options.verticalAlign;
    this.scroll = options.scroll || new Vector2();
    this.scrollX = options.scrollX;
    this.scrollY = options.scrollY;
  }

  /**
   * @returns {number}
   */
  calcCanvasWidth () {
    return this.width + this.padding * 2;
  }

  /**
   * @returns {number}
   */
  calcCanvasHeight () {
    return this.height + this.padding * 2;
  }

  /**
   * @returns {number}
   */
  getOffsetY () {
    if (typeof this.verticalAlign === 'number') {
      return this.verticalAlign;
    }
    return LabelArea.verticalAlignToOffsetMap[this.verticalAlign] || 0;
  }

  /**
   * @returns {number}
   */
  getOffsetX () {
    return LabelArea.alignToOffsetMap[this.align] || 0;
  }

  /**
   * @returns {{ [character: string]: number }}
   */
  getTextWidthCache () {
    var cache = textWidthCache[this.font];
    return cache || (textWidthCache[this.font] = {});
  }
  
  /**
   * @param {string[]} lines 文章
   * @returns {string[]} 整形済み文字ライン
   */
  spliceLines (lines) {
    var rowWidth = this.width;
    var context = this.canvas.context;
    context.font = this.font;

    var cache = this.getTextWidthCache();

    // update cache
    each.call(this._text, function(ch) {
    // this._text.each(function(ch) {
      if (!cache[ch]) {
        cache[ch] = context.measureText(ch).width;
      }
    });
    
    var localLines = [];
    lines.forEach(function(line) {
      
      var str = '';
      var totalWidth = 0;

      // はみ出ていたら強制的に改行する
      each.call(line, function(ch) {
      // line.each(function(ch) {
        var w = cache[ch];

        if ((totalWidth+w) > rowWidth) {
          localLines.push(str);
          str = '';
          totalWidth = 0;
        }

        str += ch;
        totalWidth += w;
      });

      // 残りを push する
      localLines.push(str);

    });
    

    return localLines;
  }
  
  getLines () {
    if (this._lineUpdate === false) {
      return this._lines;
    }
    this._lineUpdate = false;

    var lines = (this.text + '').split('\n');
    if (this.width < 1) {
      this._lines = lines;
    }
    else {
      this._lines = this.spliceLines(lines);
    }

    return this._lines;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  prerender (canvas) {
    var context = canvas.context;
    context.font = this.font;
    context.textAlign = this.align;
    context.textBaseline = this.baseline;

    var text = this.text + '';
    var lines = this.getLines();
    var length = lines.length;
    var width = this.width;
    var height = this.height;

    var fontSize = this.fontSize;
    var lineSize = fontSize * this.lineHeight;
    var offsetX = this.getOffsetX() * width;
    var offsetY = this.getOffsetY();
    if (offsetY === 0) {
      offsetY = -Math.floor(length / 2) * lineSize;
      offsetY += ((length + 1) % 2) * (lineSize / 2);
    }
    else if (offsetY < 0) {
      offsetY *= height;
    }
    else {
      offsetY = offsetY * height - length * lineSize + lineSize;
    }

    offsetY -= this.scrollY;
    offsetX -= this.scrollX;
    var start = (offsetY + height / 2) / -lineSize | 0;
    if (start < 0) { start = 0; }

    var end = (height / 2 - offsetY + lineSize * 2) / lineSize | 0;
    lines = lines.filter(function(line, i) {
      return start <= i && end > i;
    });

    this.lines = lines;
    this.offsetX = offsetX;
    this.offsetY = offsetY;
    this.lineSize = lineSize;
    this.start = start;
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderFill (canvas) {
    var context = canvas.context;
    var offsetX = this.offsetX;
    var offsetY = this.offsetY;
    var lineSize = this.lineSize;
    var start = this.start;
    this.lines.forEach(function(line, i) {
      context.fillText(line, offsetX, (start + i) * lineSize + offsetY);
    }, this);
  }

  /**
   * @override
   * @param {import('../graphics/canvas').Canvas} canvas 
   */
  renderStroke (canvas) {
    var context = canvas.context;
    var offsetX = this.offsetX;
    var offsetY = this.offsetY;
    var lineSize = this.lineSize;
    var start = this.start;
    this.lines.forEach(function(line, i) {
      context.strokeText(line, offsetX, (start + i) * lineSize + offsetY);
    }, this);
  }

  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
  }

  get scrollX() {
    return this.scroll.x;
  }
  set scrollX(v) {
    this.scroll.x = v;
  }

  get scrollY() {
    return this.scroll.y;
  }
  set scrollY(v) {
    this.scroll.y = v;
  }
  
  // _static: {
  //   defaults: {
  //     verticalAlign: 'top',
  //     align: 'left',
  //     baseline: 'top',
  //     width: 320,
  //     height: 320,
  //     scrollX: 0,
  //     scrollY: 0,
  //   },
  //   alignToOffsetMap: {
  //     start: -0.5,
  //     left: -0.5,
  //     center: 0,
  //     end: 0.5,
  //     right: 0.5,
  //   },

  //   verticalAlignToOffsetMap: {
  //     top: -0.5,
  //     center: 0,
  //     middle: 0,
  //     bottom: 0.5,
  //   },
  // },

  // _defined: function() {
  //   var func = function(newVal, oldVal) {
  //     if((this._lineUpdate === false) && (newVal !== oldVal)){
  //       this._lineUpdate = true;
  //     }
  //   };

  //   [
  //     'text',
  //     'width',
  //     'fontSize',
  //     'fontWeight',
  //     'fontFamily'
  //   ].forEach(function(key) {
  //     this.$watch(key, func);
  //   }, this.prototype);

  //   phina.display.Shape.watchRenderProperties.call(this ,[
  //     'verticalAlign',
  //     'text',
  //     'scroll',
  //     'scrollX',
  //     'scrollY'
  //   ]);
  // },

  /**
   * 未定義
   * @returns {this}
   */
  enableScroll() {
    //   this.setInteractive(true);
    //   var physical = phina.accessory.Physical();
    //   physical.attachTo(this);
    //   physical.friction = 0.8;
    //   var lastForce = 0;
    //   var lastMove = 0;
    //   this.on('pointstart', function(e){
    //     lastForce = physical.velocity.y;
    //     lastMove = 0;
    //     physical.force(0, 0);
    //   });
    //   this.on('pointmove', function(e){
    //     var p = e.pointer.deltaPosition;
    //     lastMove = p.y;
    //     this.scrollY += lastMove;
    //   });

    //   this.on('pointend', function(e){
    //     physical.force(0, lastForce + lastMove);
    //   });

    return this;
  }

}

/**
 * @type {LabelAreaOptions}
 */
LabelArea.defaults = {
  verticalAlign: 'top',
  align: 'left',
  baseline: 'top',
  width: 320,
  height: 320,
  scrollX: 0,
  scrollY: 0,
};
LabelArea.alignToOffsetMap = {
  start: -0.5,
  left: -0.5,
  center: 0,
  end: 0.5,
  right: 0.5,
};
LabelArea.verticalAlignToOffsetMap = {
  top: -0.5,
  center: 0,
  middle: 0,
  bottom: 0.5,
}

// defined
;(function() {
  var func = function(newVal, oldVal) {
    if((this._lineUpdate === false) && (newVal !== oldVal)){
      this._lineUpdate = true;
    }
  };

  [
    'text',
    'width',
    'fontSize',
    'fontWeight',
    'fontFamily'
  ].forEach(function(key) {
    $watch.call(this, key, func);
    // this.$watch(key, func);
  }, LabelArea.prototype);
})();

Shape.watchRenderProperties.call(LabelArea ,[
  'verticalAlign',
  'text',
  'scroll',
  'scrollX',
  'scrollY'
]);

/**
 * @class phina.effect.Wave
 * _extends phina.display.CircleShape
 */
class Wave extends CircleShape {

  /**
   * @constructor
   * @param {import("../display/shape").CircleShapeOptions} [options]
   */
  constructor(options) {
    options = $safe.call(options || {}, {
    // options = (options || {}).$safe({
      fill: 'white',
      stroke: false,
    });

    super(options);

    var tweener = new Tweener().attachTo(this);
    tweener
      .to({scaleX:2, scaleY:2, alpha:0}, 500)
      .call(function() {
        this.remove();
      }, this);
  }
}

/**
 * @class phina.social.Twitter
 * # Twitter の共有リンクを生成するクラス
 * Twitter の共有リンクの URL を生成してくれるクラスです。
 */
class Twitter {

  /**
   * @constructor
   * 
   * コンストラクタは存在しますがインスタンスメンバはありません。
   */
  constructor() {}

  /**
   * @method phina.social.Twitter.createURL
   * @static
   * Twitterの共有リンクを生成します。引数にオブジェクトを渡すことで様々なパラメーターを設定出来ます。引数のオブジェクトは {@link #phina.social.Twitter.defaults} で安全拡張されます。
   * 
   * ### Example
   *     phina.social.Twitter.createURL(); // => http://twitter.com/intent/tweet?text=Hello%2C%20world!&hashtags=javascript%2Cphina&url={現在のURL}
   * 
   *     phina.social.Twitter.createURL({
   *       text: 'This is text',
   *       hashtags: 'hashtag1,hashtag2',
   *       url: 'http://phinajs.com'
   *     }); // => http://twitter.com/intent/tweet?text=This%20is%20text&hashtags=hashtag1%2Chashtag2&url=http%3A%2F%2Fphinajs.com
   * 
   *     phina.social.Twitter.createURL({
   *       text: 'This is text',
   *       hashtags: 'hashtag1,hashtag2',
   *       url: 'http://phinajs.com',
   *       other: 'This is other'//設定項目は適当に増やせる
   *     }); // => http://twitter.com/intent/tweet?text=This%20is%20text&hashtags=hashtag1%2Chashtag2&url=http%3A%2F%2Fphinajs.com&other=This%20is%20other
   * 
   *     phina.social.Twitter.createURL({
   *       url: 'http://phinajs.com'
   *     }); // => http://twitter.com/intent/tweet?url=http%3A%2F%2Fphinajs.com&text=Hello%2C%20world!&hashtags=javascript%2Cphina
   * 
   * @param {Twitter.defaults} options
   * @return {String} Twitter の共有リンク
   */
  static createURL (options) {
    options = $safe.call(options || {}, Twitter.defaults);
    // options = (options || {}).$safe(this.defaults);

    var queries = [];
    var euc = encodeURIComponent;
    forIn.call(options, function(key, value) {
    // options.forIn(function(key, value) {
      var str = key + '=' + euc(value);
      queries.push(str);
    });

    var url = format.call('{baseURL}/{type}?{query}', {
    // var url = '{baseURL}/{type}?{query}'.format({
      baseURL: this.baseURL,
      // type: options.type,
      type: 'tweet',
      query: queries.join('&'),
    });

    return url;
  }

}


/**
 * @property {String} [phina.social.Twitter.baseURL = 'https://twitter.com/intent']
 * Twitter の共有リンクのベースとなる URL です。
 * 
 * @static
 */
Twitter.baseURL = 'https://twitter.com/intent';

/**
 * @property {Object} phina.social.Twitter.defaults
 * デフォルト値を格納しているオブジェクトです。{@link #phina.social.Twitter.defaults.text}, {@link #phina.social.Twitter.defaults.hashtags}, {@link #phina.social.Twitter.defaults.url} を内包しています。
 * 
 * @static
 */
Twitter.defaults = {
  // type: 'tweet',

  /**
   * @property {String} [phina.social.Twitter.defaults.text = 'Hello, World']
   * デフォルトでツイートに含まれる文字列です。
   * 
   * @static
   */
  text: 'Hello, world!',

  // screen_name: 'phi_jp',

  /**
   * @property {String} [phina.social.Twitter.defaults.hashtags = 'javascript, phina_js']
   * デフォルトでツイートに含まれるハッシュタグです。
   * 
   * @static
   */
  hashtags: 'javascript,phina_js',

  // url: 'http://github.com/phi-jp/phina.js',

  /**
   * @property {String} [phina.social.Twitter.defaults.url = phina.global.location && phina.global.location.href]
   * デフォルトでツイートに含まれる URL です。
   * 
   * @static
   */
  url: phina.global.location && phina.global.location.href

  // via: 'phi_jp',
};

/**
 * @typedef {{
 *   className: string | (new (...args: any)=> any)
 *   label: import("../app/scene").SceneLabel
 *   arguments?: any
 *   nextLabel?: import("../app/scene").SceneLabel
 *   nextArguments?: any
 * }} SceneData
 */

/**
 * @typedef {{
 *   startLabel: import("../app/scene").SceneLabel
 *   scenes: SceneData[]
 * }} ManagerSceneParams
 */

/**
 * @class phina.game.ManagerScene
 * _extends phina.app.Scene
 */
class ManagerScene extends Scene {

  /**
   * @constructor
   * @param {ManagerSceneParams} params
   */
  constructor(params) {
    super();

    /** @type SceneData[] */
    this.scenes;
    /** @type number */
    this.sceneIndex;

    this.setScenes(params.scenes);

    this.on("enter", function() {
      this.gotoScene(params.startLabel || 0);
    }.bind(this));

    this.on("resume", this.onnext.bind(this));

    /**
     * @private 未使用
     */
    this.commonArguments = {};
  }

  /**
   * scenes をセット
   * 
   * @param {SceneData[]} scenes
   * @returns {this}
   */
  setScenes(scenes) {
    this.scenes = scenes;
    this.sceneIndex = 0;

    return this;
  }

  /**
   * @private
   * Sceneクラスをインスタンス化して返す
   * 
   * @param {SceneData} data Sceneデータ
   * @param {any} args インスタンス化の際のコンストラクタの引数
   * @returns {Scene}
   */
  _instantiateScene(data, args) {
    // Scene初期化引数
    // typescriptが何故かargumentsに反応して余計な引数定義を生成するため、文字列参照とする
    var initArguments = $extend.call({}, data["arguments"], args);
    // var initArguments = {}.$extend(data.arguments, args);

    /** @type {Scene} */
    var scene;

    /** @type {(new (args: any)=> any)} */
    var SceneConstructor;
    if (typeof data.className === 'string') {
      // 文字列型の場合：phina.define、あるいはグローバルスコープ（window）に直接定義されたクラスの文字列
      SceneConstructor = phina.using(data.className);
      if (typeof SceneConstructor !== 'function') {
        SceneConstructor = phina.using('phina.game.' + data.className);
      }
    } else if (typeof data.className === 'function') {
      // 関数型の場合：純粋なclassと見なす
      SceneConstructor = data.className;
    }
    scene = new SceneConstructor(initArguments);

    // 次シーンパラメータが無い場合の処理
    if (!scene.nextLabel) {
      scene.nextLabel = data.nextLabel;
    }
    if (!scene.nextArguments) {
      scene.nextArguments = data.nextArguments;
    }

    return scene
  }

  /**
   * 指定したlabelに対応するシーンへ飛ぶ  
   * Sceneクラスをインスタンス化してappにreplaceSceneさせる  
   * 
   * @param  {import("../app/scene").SceneLabel} label シーンラベル
   * @param  {any} [args] Sceneにわたす引数がある場合に指定
   * @returns {this}
   */
  replaceScene(label, args) {
    var index = (typeof label == 'string') ? this.labelToIndex(label) : label||0;
    if (!this.scenes[index]) {
      console.error(format.call('phina.js error: `{0}` に対応するシーンがありません.', label));
    }
    var scene = this._instantiateScene(this.scenes[index], args);
    this.app.replaceScene(scene);
    this.sceneIndex = index;

    return this;
  }

  /**
   * 指定したlabelに対応するシーンへ飛ぶ  
   * replaceSceneとの違いはapp.replaceSceneではなく、
   * app.pushSceneを実行する点
   * 
   * @param {import("../app/scene").SceneLabel} label シーンラベル
   * @param {any} args Sceneコンストラクタの引数
   * @returns {this}
   */
  gotoScene(label, args) {
    var index = (typeof label == 'string') ? this.labelToIndex(label) : label||0;
    if (!this.scenes[index]) {
      console.error(format.call('phina.js error: `{0}` に対応するシーンがありません.', label));
    }
    var scene = this._instantiateScene(this.scenes[index], args);
    this.app.pushScene(scene);
    this.sceneIndex = index;

    return this;
  }

  /**
   * 次のシーンへ飛ぶ  
   * シーンが存在しない場合、"finish"イベントを発火して終了
   * 
   * @param {any} args 次のSceneコンストラクタの引数
   * @returns {this}
   */
  gotoNext(args) {
    var data = this.scenes[this.sceneIndex];
    var nextIndex = null;

    if (data.nextLabel) {
      // 次のラベルが設定されていた場合
      nextIndex = this.labelToIndex(data.nextLabel);
    }
    else if (this.sceneIndex+1 < this.scenes.length) {
      // index上の次のシーンに遷移
      nextIndex = this.sceneIndex+1;
    }

    if (nextIndex !== null) {
      this.gotoScene(nextIndex, args);
    }
    else {
      this.flare("finish");
    }

    return this;
  }

  /**
   * 現在のシーンのインデックスを取得
   * 
   * @returns {number}
   */
  getCurrentIndex() {
    return this.sceneIndex;
  }

  /**
   * 現在のシーンのラベルを取得
   * 
   * @returns {import("../app/scene").SceneLabel} label
   */
  getCurrentLabel() {
    return this.scenes[this.sceneIndex].label;
  }

  /**
   * ラベルからインデックスに変換
   * 
   * @param {import("../app/scene").SceneLabel} label
   */
  labelToIndex(label) {
    var data = this.scenes.filter(function(data) {
      return data.label == label;
    })[0];

    return this.scenes.indexOf(data);
  }

  /**
   * インデックスからラベルに変換
   * 
   * @param {number} index
   * @returns {import("../app/scene").SceneLabel} label
   */
  indexToLabel(index) {
    return this.scenes[index].label;
  }

  /**
   * @private
   * {@link BaseApp#popScene} の際にresumeイベント経由で実行され、
   * 対応する次のシーンに移行する
   * 
   * @param {{ prevScene: { nextLabel: import("../app/scene").SceneLabel; nextArguments: any; }; }} e
   * @returns {void}
   */
  onnext(e) {
    var nextLabel = e.prevScene.nextLabel;
    var nextArguments = e.prevScene.nextArguments;
    if (nextLabel) {
      this.gotoScene(nextLabel, nextArguments);
    }
    else {
      this.gotoNext(nextArguments);
    }
  }

}

/**
 * @typedef {{
 *   lie?: boolean,
 *   exitType?: 'auto'
 *   assets?: import("../asset/assetloader").AssetLoaderLoadParam
 * } & import("../display/displayscene").DisplaySceneOptions } LoadingSceneOptions
 */

/**
 * @class phina.game.LoadingScene
 * _extends phina.display.DisplayScene
 */
class LoadingScene extends DisplayScene {

  /**
   * @constructor
   * @param {LoadingSceneOptions} [options]
   */
  constructor(options) {
    options = $safe.call({}, options, LoadingScene.defaults);
    // options = ({}).$safe(options, phina.game.LoadingScene.defaults);
    super(options);

    this.gauge = new Gauge({
      value: 0,
      width: this.width,
      height: 12,
      fill: '#aaa',
      stroke: false,
      gaugeColor: 'hsla(200, 100%, 80%, 0.8)',
      padding: 0,
    }).addChildTo(this)
      .setPosition(
        this.gridX.center(),
        0,
      )
      .setOrigin(
        0.5, 
        0
      );
    // this.fromJSON({
    //   children: {
    //     gauge: {
    //       className: 'phina.ui.Gauge',
    //       arguments: {
    //         value: 0,
    //         width: this.width,
    //         height: 12,
    //         fill: '#aaa',
    //         stroke: false,
    //         gaugeColor: 'hsla(200, 100%, 80%, 0.8)',
    //         padding: 0,
    //       },
    //       x: this.gridX.center(),
    //       y: 0,
    //       originY: 0,
    //     }
    //   }
    // });

    var loader = new AssetLoader();

    if (options.lie) {
      this.gauge.animationTime = 10*1000;
      this.gauge.value = 90;

      loader.on('load', function() {
        this.gauge.animationTime = 0;
        this.gauge.value = 100;
      }.bind(this));
    }
    else {
      this.gauge.animationTime = 100;
      loader.on('progress', function(e) {
        this.gauge.value = e.progress * 100;
      }.bind(this)) ;
    }

    this.gauge.on('full', function() {
      if (options.exitType === 'auto') {
        this.app.popScene();
      }
      this.flare('loaded');
    }.bind(this));

    loader.load(options.assets);
  }

}

/** @type LoadingSceneOptions */
LoadingScene.defaults = {
  exitType: 'auto',
  lie: false,
};

/**
 * @typedef {Object} SplashSceneOptionExtend
 * @property {string} [imageURL] 表示するスプラッシュ画像パス
 */

/**
 * @class phina.game.SplashScene
 * _extends phina.display.DisplayScene
 */
class SplashScene extends DisplayScene {

  /**
   * @param {import("../display/displayscene").DisplaySceneOptions} [options]
   */
  constructor(options) {
    var defaults = SplashScene.defaults;
    super(options);

    var texture = new Texture();
    texture.load(defaults.imageURL).then(
    /** @this SplashScene */
    function() {
      this._init();
    }.bind(this));
    this.texture = texture;
  }

  /**
   * @private
   * 初期化関数
   */
  _init() {
    this.sprite = new Sprite(this.texture).addChildTo(this);

    this.sprite.setPosition(this.gridX.center(), this.gridY.center());
    this.sprite.alpha = 0;

    this.sprite.tweener
      .clear()
      .to({alpha:1}, 500, 'easeOutCubic')
      .wait(1000)
      .to({alpha:0}, 500, 'easeOutCubic')
      .wait(250)
      .call(function() {
        this.exit();
      }, this)
      ;
  }

}

/** @type {import("../display/displayscene").DisplaySceneOptions & SplashSceneOptionExtend} */
SplashScene.defaults = {
  imageURL: 'http://cdn.rawgit.com/phi-jp/phina.js/develop/logo.png',
};

/**
 * @typedef {Object} TitleSceneOptionExtend
 * @property {string} [title] タイトル文字列
 * @property {string} [message] 未使用
 * @property {import("../graphics/canvas").CanvasStyle} [fontColor] タイトルラベルの色
 * @property {string} [backgroundImage] 未使用
 * @property {"touch"|""} [exitType] "touch"指定時に自動でタッチ遷移イベントを付与
 * 
 * @typedef {import("../display/displayscene").DisplaySceneOptions & TitleSceneOptionExtend} TitleSceneOptions
 */

/**
 * @class phina.game.TitleScene
 * _extends phina.display.DisplayScene
 */
class TitleScene extends DisplayScene {

  /**
   * @constructor
   * @param {TitleSceneOptions} [params]
   */
  constructor(params) {
    params = $safe.call({}, params, TitleScene.defaults);
    // params = ({}).$safe(params, phina.game.TitleScene.defaults);
    super(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        titleLabel: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: params.title,
            fill: params.fontColor,
            stroke: false,
            fontSize: 64,
          },
          x: this.gridX.center(),
          y: this.gridY.span(4),
        }
      }
    });

    if (params.exitType === 'touch') {
      this.fromJSON({
        children: {
          touchLabel: {
            className: Label,
            // className: 'phina.display.Label',
            arguments: {
              text: "TOUCH START",
              fill: params.fontColor,
              stroke: false,
              fontSize: 32,
            },
            x: this.gridX.center(),
            y: this.gridY.span(12),
          },
        },
      });

      this.on('pointend', function() {
        this.exit();
      });
    }
  }

}

/**
 * @type {TitleSceneOptions}
 */
TitleScene.defaults = {
  title: 'phina.js games',
  message: '',

  fontColor: 'white',
  backgroundColor: 'hsl(200, 80%, 64%)',
  backgroundImage: '',

  exitType: 'touch',
};

/**
 * @typedef {{
 *   fontColor?: string,
 *   exitType?: 'touch'
 * } & import("../display/displayscene").DisplaySceneOptions } PauseSceneOptions
 */

/**
 * @class phina.game.PauseScene
 * _extends phina.display.DisplayScene
 */
class PauseScene extends DisplayScene {

  /**
   * @constructor
   * @param {PauseSceneOptions} [params]
   */
  constructor(params) {
    params = $safe.call({}, params, PauseScene.defaults);
    // params = ({}).$safe(params, phina.game.PauseScene.defaults);
    super(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        text: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: 'Pause',
            fill: params.fontColor,
            stroke: null,
            fontSize: 48,
          },
          x: this.gridX.center(),
          y: this.gridY.center(),
        },
      }
    });

    if (params.exitType === 'touch') {
      this.on('pointend', function() {
        this.exit();
      });
    }
  }

}

/** @type PauseSceneOptions */
PauseScene.defaults =  {
  fontColor: 'white',
  backgroundColor: 'hsla(0, 0%, 0%, 0.85)',

  exitType: 'touch',
};

/**
 * @typedef {Object} ResultSceneOptionExtend
 * @property {number} [score] [description]
 * @property {string} [message] [description]
 * @property {string} [hashtags] [description]
 * @property {string} [url] [description]
 * @property {"touch"} [exitType] [description]
 * @property {import("../graphics/canvas").CanvasStyle} [fontColor] [description]
 * @property {import("../graphics/canvas").CanvasStyle} [backgroundColor]
 * @property {string} [backgroundImage] 未使用
 * 
 * @typedef {import("../display/displayscene").DisplaySceneOptions & ResultSceneOptionExtend} ResultSceneOptions
 */

/**
 * @class phina.game.ResultScene
 * _extends phina.display.DisplayScene
 */
class ResultScene extends DisplayScene {

  /**
   * @constructor
   * @param {ResultSceneOptions} [params]
   */
  constructor(params) {
    params = $safe.call({}, params, ResultScene.defaults);
    // params = ({}).$safe(params, phina.game.ResultScene.defaults);
    super(params);

    var message = format.call(params.message, params);
    // var message = params.message.format(params);

    this.backgroundColor = params.backgroundColor;

    this.fromJSON({
      children: {
        scoreText: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: 'score',
            fill: params.fontColor,
            stroke: null,
            fontSize: 48,
          },
          x: this.gridX.span(8),
          y: this.gridY.span(4),
        },
        scoreLabel: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: params.score+'',
            fill: params.fontColor,
            stroke: null,
            fontSize: 72,
          },
          x: this.gridX.span(8),
          y: this.gridY.span(6),
        },

        messageLabel: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            text: message,
            fill: params.fontColor,
            stroke: null,
            fontSize: 32,
          },
          x: this.gridX.center(),
          y: this.gridY.span(9),
        },

        shareButton: {
          className: Button,
          // className: 'phina.ui.Button',
          arguments: [{
            text: '★',
            width: 128,
            height: 128,
            fontColor: params.fontColor,
            fontSize: 50,
            cornerRadius: 64,
            fill: 'rgba(240, 240, 240, 0.5)',
            // stroke: '#aaa',
            // strokeWidth: 2,
          }],
          x: this.gridX.center(-3),
          y: this.gridY.span(12),
        },
        playButton: {
          className: Button,
          // className: 'phina.ui.Button',
          arguments: [{
            text: '▶',
            width: 128,
            height: 128,
            fontColor: params.fontColor,
            fontSize: 50,
            cornerRadius: 64,
            fill: 'rgba(240, 240, 240, 0.5)',
            // stroke: '#aaa',
            // strokeWidth: 2,
          }],
          x: this.gridX.center(3),
          y: this.gridY.span(12),

          interactive: true,
          onpush: function() {
            this.exit();
          }.bind(this),
        },
      }
    });

    if (params.exitType === 'touch') {
      this.on('pointend', function() {
        this.exit();
      });
    }

    /** @type Button & {onclick: Function} */
    this.shareButton;

    this.shareButton.onclick = function() {
      var text = format.call('Score: {0}\n{1}', params.score, message);
      // var text = 'Score: {0}\n{1}'.format(params.score, message);
      var url = Twitter.createURL({
        text: text,
        hashtags: params.hashtags,
        url: params.url,
      });
      window.open(url, 'share window', 'width=480, height=320');
    };
  }

}

/** @type {ResultSceneOptions} */
ResultScene.defaults = {
  score: 16,

  message: 'this is phina.js project.',
  hashtags: 'phina_js,game,javascript',
  url: phina.global.location && phina.global.location.href,

  fontColor: 'white',
  backgroundColor: 'hsl(200, 80%, 64%)',
  backgroundImage: '',
};

/**
 * デフォルトシーンのオプション統合型
 * @typedef { import("./titlescene").TitleSceneOptions
 * & import("./pausescene").PauseSceneOptions
 * & import("./resultscene").ResultSceneOptions
 * & import("../game/loadingscene").LoadingSceneOptions
 * } DefaultSceneOptions
 */

/**
 * @typedef {{
 *   scenes?: import("./managerscene").SceneData[]
 *   startLabel?: import("../app/scene").SceneLabel
 *   autoPause?: boolean
 *   debug?: boolean
 *   loadingScene?: typeof DisplayScene
 *   pauseScene?: typeof DisplayScene
 * } 
 * & import("../display/canvasapp").CanvasAppOptions
 * } GameAppOptions
 */

/**
 * デフォルトのmain class
 */
class DefaultMainScene extends DisplayScene {
  constructor(options) {
    super(options);
    console.log('This is MainScene');
  }
}
/**
 * クラスがphina.defineによって定義（グローバルに定義）されているかどうかをチェック
 * @param {string} className クラス名。phina.game[className]で定義されているかも調べる
 * @returns {boolean}
 */
function isGameClassDefined(className) {
  if (
    typeof phina.using(className) === 'function'
    || typeof phina.using('phina.game.' + className) === 'function'
  ) {
    return true
  }
  return false;
}

/**
 * @class phina.game.GameApp
 * _extends phina.display.CanvasApp
 */
class GameApp extends CanvasApp {
  /**
   * @param {GameAppOptions & DefaultSceneOptions} [options]
   */
  constructor(options) {
    options = /** @type {GameAppOptions} */($safe.call(options || {}, {
    // options = (options || {}).$safe({
      startLabel: 'title',
    }));
    super(options);

    /** @type {any} dat.GUIインスタンス */
    this.gui = undefined;

    var startLabel = options.startLabel || 'title';

    var scenes = options.scenes || [
      {
        className: isGameClassDefined("SplashScene") ? "SplashScene" : SplashScene,
        label: 'splash',
        nextLabel: 'title',
      },
      {
        className: isGameClassDefined("TitleScene") ? "TitleScene" : TitleScene,
        label: 'title',
        nextLabel: 'main',
      },
      {
        className: isGameClassDefined("MainScene") ? "MainScene" : DefaultMainScene,
        label: 'main',
        nextLabel: 'result',
      },
      {
        className: isGameClassDefined("ResultScene") ? "ResultScene" : ResultScene,
        label: 'result',
        nextLabel: 'title',
      },
    ];

    scenes = each$1.call(scenes, function(s) {
      s.arguments = s.arguments || options;
    });

    var scene = new ManagerScene({
      startLabel: startLabel,
      scenes: scenes,
    });

    if (options.assets) {
      // ローディング：esm版では独自のLoadingSceneはオプションで渡せるようにする

      var loadingOptions = $extend.call({}, options, {
      // var loadingOptions = ({}).$extend(options, {
        exitType: '',
      });
      // グローバル定義のLoadingSceneを探す（従来）
      // -> なければオプションをチェック 
      // -> これもなければデフォルトのLoadingSceneを使う
      var definedLoadingClass = phina.using("LoadingScene") || phina.using("phina.game.LoadingScene");
      var loading = (typeof definedLoadingClass === 'function') 
        ? definedLoadingClass(loadingOptions)
        : (options.loadingScene != null)
          ? new options.loadingScene(loadingOptions) 
          : new LoadingScene(loadingOptions)
      ;
      this.replaceScene(loading);

      loading.onloaded = function() {
        this.replaceScene(scene);
        if (options.debug) {
          this._enableDebugger();
        }
      }.bind(this);
    }
    else {
      this.replaceScene(scene);
      if (options.debug) {
        this._enableDebugger();
      }
    }

    // 自動でポーズする
    // esm版では独自のポーズシーンはオプションで渡す
    // 引数が渡せないのは元から
    if (options.autoPause) {
      this.on('blur', function() {
        var definedPauseScene = phina.using("phina.game.PauseScene");
        var pauseScene = (typeof definedPauseScene === 'function') 
          ? definedPauseScene() 
          : (options.pauseScene) 
            ? new options.pauseScene(options) 
            : new PauseScene();
        this.pushScene(pauseScene);
      });
    }
  }

  /**
   * @private
   */
  _enableDebugger() {
    if (this.gui) return ;

    this.enableDatGUI(
    /**
     * @this {GameApp}
     * @param {{ addFolder: (arg0: string) => any; }} gui Dat.guiインスタンス
     */
    function(gui) {
      var f = gui.addFolder('scenes');
      var funcs = {};
      each$1.call(/** @type {ManagerScene} */(this.rootScene).scenes, function(scene) {
      // this.rootScene.scenes.each(function(scene) {
        funcs[scene.label] = function() {
          this.rootScene.replaceScene(scene.label);
          console.log(this._scenes.length);
        }.bind(this);
        return scene;
      }, this);

      forIn.call(funcs, function(key, value) {
      // funcs.forIn(function(key, value) {
        f.add(funcs, key);
      });
      f.open();

      this.gui = gui;
    }.bind(this));
  }
}

/**
 * Appクラス統合型
 * @typedef {import('../app/baseapp').BaseApp | import('../display/domapp').DomApp | import('../display/canvasapp').CanvasApp | GameApp} AppUnion
 */

/**
 * @typedef {Object} CountSceneOptionExtend
 * @property {number|number[]} [count] カウントダウン回数。配列で渡した場合、その逆順でカウントダウンを行う
 * @property {import("../index.esm").CanvasStyle} [fontColor] フォントの色
 * @property {number} [fontSize] フォントサイズ
 * @property {string} [exitType] 'auto'のとき、自動でpopScene
 * 
 * @typedef {import("../display/displayscene").DisplaySceneOptions & CountSceneOptionExtend} CountSceneOptions
 */

/**
 * @class phina.game.CountScene
 * _extends phina.display.DisplayScene
 * 
 * 自動でカウントダウンを行う一時用Scene
 * メインのシーンでゲーム開始前にpushSceneするのが一般的な使い方
 */
class CountScene extends DisplayScene {

  /**
   * @constructor
   * @param {CountSceneOptions} [options]
   */
  constructor(options) {
    super(options);

    options = $safe.call(options || {}, CountScene.defaults);
    // options = (options || {}).$safe(phina.game.CountScene.defaults);

    this.backgroundColor = options.backgroundColor;

    this.fromJSON({
      children: {
        label: {
          className: Label,
          // className: 'phina.display.Label',
          arguments: {
            fill: options.fontColor,
            fontSize: options.fontSize,
            stroke: false,
          },
          x: this.gridX.center(),
          y: this.gridY.center(),
        },
      }
    });

    /** @type {Label} */
    this.label;

    /** @type {number[]} */
    this.countList;

    if (options.count instanceof Array) {
      this.countList = clone.call(options.count).reverse();
      // this.countList = options.count.clone().reverse();
    }
    else {
      this.countList = range.call([], 1, options.count+1);
      // this.countList = Array.range(1, options.count+1);
    }
    this.counter = this.countList.length;
    this.exitType = options.exitType;

    this._updateCount();
  }

  _updateCount() {
    var endFlag = this.counter <= 0;
    var index = --this.counter;

    this.label.text = this.countList[index];

    this.label.scale.set(1, 1);
    this.label.tweener
      .clear()
      .to({
        scaleX: 1,
        scaleY: 1,
        alpha: 1,
      }, 250)
      .wait(500)
      .to({
        scaleX: 1.5,
        scaleY: 1.5,
        alpha: 0.0
      }, 250)
      .call(
      /** @this CountScene */
      function() {
        if (this.counter <= 0) {
          this.flare('finish');
          if (this.exitType === 'auto') {
            this.app.popScene();
          }
        }
        else {
          this._updateCount();
        }
      }, this);
  }

}

/** @type {CountSceneOptions} */
CountScene.defaults = {
  count: 3,

  width: 640,
  height: 960,

  fontColor: 'white',
  fontSize: 164,
  backgroundColor: 'rgba(50, 50, 50, 1)',

  exitType: 'auto',
};




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XMLLoader": () => (/* reexport module object */ _tiledmap_XMLLoader__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "TileSet": () => (/* reexport module object */ _tiledmap_Tileset__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "TiledMap": () => (/* reexport module object */ _tiledmap_Tiledmap__WEBPACK_IMPORTED_MODULE_2__)
/* harmony export */ });
/* harmony import */ var _tiledmap_XMLLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tiledmap/XMLLoader */ "./src/tiledmap/XMLLoader.js");
/* harmony import */ var _tiledmap_Tileset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tiledmap/Tileset */ "./src/tiledmap/Tileset.js");
/* harmony import */ var _tiledmap_Tiledmap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tiledmap/Tiledmap */ "./src/tiledmap/Tiledmap.js");




})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waGluYS50aWxlZG1hcC5qcy8uL3NyYy90aWxlZG1hcC9UaWxlZG1hcC5qcyIsIndlYnBhY2s6Ly9waGluYS50aWxlZG1hcC5qcy8uL3NyYy90aWxlZG1hcC9UaWxlc2V0LmpzIiwid2VicGFjazovL3BoaW5hLnRpbGVkbWFwLmpzLy4vc3JjL3RpbGVkbWFwL1hNTExvYWRlci5qcyIsIndlYnBhY2s6Ly9waGluYS50aWxlZG1hcC5qcy8uL25vZGVfbW9kdWxlcy9waGluYS5qcy9idWlsZC9waGluYS5lc20uanMiLCJ3ZWJwYWNrOi8vcGhpbmEudGlsZWRtYXAuanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcGhpbmEudGlsZWRtYXAuanMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3BoaW5hLnRpbGVkbWFwLmpzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcGhpbmEudGlsZWRtYXAuanMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9waGluYS50aWxlZG1hcC5qcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3BoaW5hLnRpbGVkbWFwLmpzLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDK0I7O0FBRTdELHVCQUF1QixpREFBUztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QztBQUNBO0FBQ0E7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QWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUEsZ0JBQWdCLHFCQUFxQjtBQUNyQztBQUNBLDBDQUEwQyxPQUFPO0FBQ2pEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNFQUFzRTtBQUN0RSxzRUFBc0U7QUFDdEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFD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QixhQUFhLE9BQU87QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLEtBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxxQ0FBcUM7QUFDckMsc0NBQXNDO0FBQ3RDLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxtQ0FBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLDZCQUE2QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQ0FBaUM7QUFDOUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsZ0NBQWdDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSw0REFBNEQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDREQUE0RDtBQUN6RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0REFBNEQ7QUFDekU7QUFDQTtBQUNBLDBCQUEwQiw4QkFBOEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQyxhQUFhLG9DQUFvQztBQUNqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksb0JBQW9CO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEVBQUU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQyxhQUFhLEVBQUU7QUFDZixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTs7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Ozs7QUFHTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsb0NBQW9DO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7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Ozs7Ozs7O1VDajdqQjVwQztVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHdDQUF3Qyx5Q0FBeUM7V0FDakY7V0FDQTtXQUNBLEU7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSxFQUFFO1dBQ0Y7V0FDQTtXQUNBLENBQUMsSTs7Ozs7V0NQRCx3Rjs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSxzREFBc0Qsa0JBQWtCO1dBQ3hFO1dBQ0EsK0NBQStDLGNBQWM7V0FDN0QsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ05rRDtBQUNMO0FBQ0ciLCJmaWxlIjoicGhpbmEudGlsZWRtYXAuZXNtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtYTUxMb2FkZXJ9IGZyb20gXCIuL1hNTExvYWRlclwiXG5pbXBvcnQge0Fzc2V0TG9hZGVyLCBBc3NldE1hbmFnZXIsIENhbnZhcywgVGV4dHVyZX0gZnJvbSBcInBoaW5hLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBUaWxlZE1hcCBleHRlbmRzIFhNTExvYWRlcntcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLmltYWdlID0gbnVsbDtcbiAgICAgIHRoaXMudGlsZXNldHMgPSBudWxsO1xuICAgICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgICAgdGhpcy5wYXRoID0gXCJcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg57jg4Pjg5fjgqTjg6Hjg7zjgrjlj5blvpdcbiAgICAgKiBAcGFyYW0gbGF5ZXJOYW1lIHtTdHJpbmd9XG4gICAgICogQHJldHVybnMge1RleHR1cmV8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRJbWFnZShsYXllck5hbWUpIHtcbiAgICAgIGlmIChsYXllck5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZW5lcmF0ZUltYWdlKGxheWVyTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5oyH5a6a44Oe44OD44OX44Os44Kk44Ok44O844KS6YWN5YiX44Go44GX44Gm5Y+W5b6XXG4gICAgICogQHBhcmFtIGxheWVyTmFtZSB7U3RyaW5nfVxuICAgICAqIEByZXR1cm5zIHtudWxsfCp9XG4gICAgICovXG4gICAgZ2V0TWFwRGF0YShsYXllck5hbWUpIHtcbiAgICAgIC8v44Os44Kk44Ok44O85qSc57SiXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5sYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLm5hbWUgPT09IGxheWVyTmFtZSkge1xuICAgICAgICAgIC8v44Kz44OU44O844KS6L+U44GZXG4gICAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJzW2ldLmRhdGEuY29uY2F0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCquODluOCuOOCp+OCr+ODiOOCsOODq+ODvOODl+OCkuWPluW+l++8iOaMh+WumuOBjOeEoeOBhOWgtOWQiOOAgeWFqOODrOOCpOODpOODvOOCkumFjeWIl+OBq+OBl+OBpui/lOOBme+8iVxuICAgICAqIEBwYXJhbSBncm91cE5hbWUge1N0cmluZ31cbiAgICAgKiBAcmV0dXJucyB7KltdfGFueX1cbiAgICAgKi9cbiAgICBnZXRPYmplY3RHcm91cChncm91cE5hbWUpIHtcbiAgICAgIGdyb3VwTmFtZSA9IGdyb3VwTmFtZSB8fCBudWxsO1xuICAgICAgY29uc3QgbHMgPSBbXTtcbiAgICAgIGNvbnN0IGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLnR5cGUgPT09IFwib2JqZWN0Z3JvdXBcIikge1xuICAgICAgICAgIGlmIChncm91cE5hbWUgPT0gbnVsbCB8fCBncm91cE5hbWUgPT09IHRoaXMubGF5ZXJzW2ldLm5hbWUpIHtcbiAgICAgICAgICAgIC8v44Os44Kk44Ok44O85oOF5aCx44KS44Kv44Ot44O844Oz44GZ44KLXG4gICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLl9jbG9uZU9iamVjdExheWVyKHRoaXMubGF5ZXJzW2ldKTtcbiAgICAgICAgICAgIGlmIChncm91cE5hbWUgIT09IG51bGwpIHJldHVybiBvYmo7XG4gICAgICAgICAgICBscy5wdXNoKG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kq44OW44K444Kn44Kv44OI44Os44Kk44Ok44O844KS44Kv44Ot44O844Oz44GX44Gm6L+U44GZXG4gICAgICogQHBhcmFtIHNyY0xheWVyIHtTdHJpbmd9XG4gICAgICogQHJldHVybnMge2FueX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jbG9uZU9iamVjdExheWVyKHNyY0xheWVyKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAkc2FmZS5jYWxsKHt9LCBzcmNMYXllcik7XG4gICAgICByZXN1bHQub2JqZWN0cyA9IFtdO1xuICAgICAgLy/jg6zjgqTjg6Tjg7zlhoXjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7xcbiAgICAgIHNyY0xheWVyLm9iamVjdHMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgICBjb25zdCByZXNPYmogPSB7XG4gICAgICAgICAgcHJvcGVydGllczogJHNhZmUuY2FsbCh7fSwgb2JqLnByb3BlcnRpZXMpLFxuICAgICAgICB9XG4gICAgICAgICRleHRlbmQuY2FsbChyZXNPYmosIG9iaik7XG4gICAgICAgIGlmIChvYmouZWxsaXBzZSkgcmVzT2JqLmVsbGlwc2UgPSBvYmouZWxsaXBzZTtcbiAgICAgICAgaWYgKG9iai5naWQpIHJlc09iai5naWQgPSBvYmouZ2lkO1xuICAgICAgICBpZiAob2JqLnBvbHlnb24pIHJlc09iai5wb2x5Z29uID0gb2JqLnBvbHlnb24uY2xvbmUoKTtcbiAgICAgICAgaWYgKG9iai5wb2x5bGluZSkgcmVzT2JqLnBvbHlsaW5lID0gb2JqLnBvbHlsaW5lLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5vYmplY3RzLnB1c2gocmVzT2JqKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjg4fjg7zjgr/jga7jg5Hjg7zjgrnjgpLooYzjgYZcbiAgICAgKiBAcGFyYW0gZGF0YSB7WE1MRG9jdW1lbnR9XG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFyc2UoZGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAvL+OCv+OCpOODq+WxnuaAp+aDheWgseWPluW+l1xuICAgICAgICBjb25zdCBtYXAgPSBkYXRhLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtYXAnKVswXTtcbiAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuX2F0dHJUb0pTT04obWFwKTtcbiAgICAgICAgJGV4dGVuZC5jYWxsKHRoaXMsIGF0dHIpO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0aWVzVG9KU09OKG1hcCk7XG5cbiAgICAgICAgLy/jgr/jgqTjg6vjgrvjg4Pjg4jlj5blvpdcbiAgICAgICAgdGhpcy50aWxlc2V0cyA9IHRoaXMuX3BhcnNlVGlsZXNldHMoZGF0YSk7XG4gICAgICAgIHRoaXMudGlsZXNldHMuc29ydCgoYSwgYikgPT4gYS5maXJzdGdpZCAtIGIuZmlyc3RnaWQpO1xuXG4gICAgICAgIC8v44Os44Kk44Ok44O85Y+W5b6XXG4gICAgICAgIHRoaXMubGF5ZXJzID0gdGhpcy5fcGFyc2VMYXllcnMoZGF0YSk7XG5cbiAgICAgICAgLy/jgqTjg6Hjg7zjgrjjg4fjg7zjgr/oqq3jgb/ovrzjgb9cbiAgICAgICAgdGhpcy5fY2hlY2tJbWFnZSgpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy/jg57jg4Pjg5fjgqTjg6Hjg7zjgrjnlJ/miJBcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLl9nZW5lcmF0ZUltYWdlKCk7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMuaW1hZ2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgr/jgqTjg6vjgrvjg4Pjg4jjga7jg5Hjg7zjgrlcbiAgICAgKiBAcGFyYW0geG1sIHtYTUxEb2N1bWVudH1cbiAgICAgKiBAcmV0dXJucyB7KltdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhcnNlVGlsZXNldHMoeG1sKSB7XG4gICAgICBjb25zdCBlYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG4gICAgICBjb25zdCBkYXRhID0gW107XG4gICAgICBjb25zdCB0aWxlc2V0cyA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGlsZXNldCcpO1xuICAgICAgZWFjaC5jYWxsKHRpbGVzZXRzLCBhc3luYyB0aWxlc2V0ID0+IHtcbiAgICAgICAgY29uc3QgdCA9IHt9O1xuICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5fYXR0clRvSlNPTih0aWxlc2V0KTtcbiAgICAgICAgaWYgKGF0dHIuc291cmNlKSB7XG4gICAgICAgICAgdC5pc09sZEZvcm1hdCA9IGZhbHNlO1xuICAgICAgICAgIHQuc291cmNlID0gdGhpcy5wYXRoICsgYXR0ci5zb3VyY2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy/ml6fjg4fjg7zjgr/lvaLlvI/vvIjmnKrlr77lv5zvvIlcbiAgICAgICAgICB0LmlzT2xkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICB0LmRhdGEgPSB0aWxlc2V0O1xuICAgICAgICB9XG4gICAgICAgIHQuZmlyc3RnaWQgPSBhdHRyLmZpcnN0Z2lkO1xuICAgICAgICBkYXRhLnB1c2godCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODrOOCpOODpOODvOaDheWgseOBruODkeODvOOCuVxuICAgICAqIEBwYXJhbSB4bWwge1hNTERvY3VtZW50fVxuICAgICAqIEByZXR1cm5zIHsqW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFyc2VMYXllcnMoeG1sKSB7XG4gICAgICBjb25zdCBlYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG4gICAgICBjb25zdCBkYXRhID0gW107XG5cbiAgICAgIGNvbnN0IG1hcCA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIm1hcFwiKVswXTtcbiAgICAgIGNvbnN0IGxheWVycyA9IFtdO1xuICAgICAgZWFjaC5jYWxsKG1hcC5jaGlsZE5vZGVzLCBlbG0gPT4ge1xuICAgICAgICBpZiAoZWxtLnRhZ05hbWUgPT09IFwibGF5ZXJcIiB8fCBlbG0udGFnTmFtZSA9PT0gXCJvYmplY3Rncm91cFwiIHx8IGVsbS50YWdOYW1lID09PSBcImltYWdlbGF5ZXJcIikge1xuICAgICAgICAgIGxheWVycy5wdXNoKGVsbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBsYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG4gICAgICAgIHN3aXRjaCAobGF5ZXIudGFnTmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJsYXllclwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvL+mAmuW4uOODrOOCpOODpOODvFxuICAgICAgICAgICAgICBjb25zdCBkID0gbGF5ZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RhdGEnKVswXTtcbiAgICAgICAgICAgICAgY29uc3QgZW5jb2RpbmcgPSBkLmdldEF0dHJpYnV0ZShcImVuY29kaW5nXCIpO1xuICAgICAgICAgICAgICBjb25zdCBsID0ge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJsYXllclwiLFxuICAgICAgICAgICAgICAgICAgbmFtZTogbGF5ZXIuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwiY3N2XCIpIHtcbiAgICAgICAgICAgICAgICAgIGwuZGF0YSA9IHRoaXMuX3BhcnNlQ1NWKGQudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVuY29kaW5nID09PSBcImJhc2U2NFwiKSB7XG4gICAgICAgICAgICAgICAgICBsLmRhdGEgPSB0aGlzLl9wYXJzZUJhc2U2NChkLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLl9hdHRyVG9KU09OKGxheWVyKTtcbiAgICAgICAgICAgICAgJGV4dGVuZC5jYWxsKGwsIGF0dHIpO1xuICAgICAgICAgICAgICBsLnByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0aWVzVG9KU09OKGxheWVyKTtcblxuICAgICAgICAgICAgICBkYXRhLnB1c2gobCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8v44Kq44OW44K444Kn44Kv44OI44Os44Kk44Ok44O8XG4gICAgICAgICAgY2FzZSBcIm9iamVjdGdyb3VwXCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnN0IGwgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJvYmplY3Rncm91cFwiLFxuICAgICAgICAgICAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIG5hbWU6IGxheWVyLmdldEF0dHJpYnV0ZShcIm5hbWVcIiksXG4gICAgICAgICAgICAgICAgeDogcGFyc2VGbG9hdChsYXllci5nZXRBdHRyaWJ1dGUoXCJvZmZzZXR4XCIpKSB8fCAwLFxuICAgICAgICAgICAgICAgIHk6IHBhcnNlRmxvYXQobGF5ZXIuZ2V0QXR0cmlidXRlKFwib2Zmc2V0eVwiKSkgfHwgMCxcbiAgICAgICAgICAgICAgICBhbHBoYTogbGF5ZXIuZ2V0QXR0cmlidXRlKFwib3BhY2l0eVwiKSB8fCAxLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBsYXllci5nZXRBdHRyaWJ1dGUoXCJjb2xvclwiKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgIGRyYXdvcmRlcjogbGF5ZXIuZ2V0QXR0cmlidXRlKFwiZHJhd29yZGVyXCIpIHx8IG51bGwsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGVhY2guY2FsbChsYXllci5jaGlsZE5vZGVzLCBlbG0gPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbG0ubm9kZVR5cGUgPT09IDMpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5fYXR0clRvSlNPTihlbG0pO1xuICAgICAgICAgICAgICAgIGQucHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXNUb0pTT04oZWxtKTtcbiAgICAgICAgICAgICAgICAvL+WtkOimgee0oOOBruino+aekFxuICAgICAgICAgICAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGVsbS5jaGlsZE5vZGVzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm5vZGVUeXBlID09PSAzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIC8v5qWV5YaGXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm5vZGVOYW1lID09PSAnZWxsaXBzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkLmVsbGlwc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8v5aSa6KeS5b2iXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm5vZGVOYW1lID09PSAncG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkLnBvbHlnb24gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5fYXR0clRvSlNPTl9zdHIoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGwgPSBhdHRyLnBvaW50cy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgcGwuZm9yRWFjaChmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB0cyA9IHN0ci5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnBvbHlnb24ucHVzaCh7eDogcGFyc2VGbG9hdChwdHNbMF0pLCB5OiBwYXJzZUZsb2F0KHB0c1sxXSl9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL+e3muWIhlxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5ub2RlTmFtZSA9PT0gJ3BvbHlsaW5lJykge1xuICAgICAgICAgICAgICAgICAgICAgIGQucG9seWxpbmUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5fYXR0clRvSlNPTl9zdHIoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGwgPSBhdHRyLnBvaW50cy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgcGwuZm9yRWFjaChzdHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHRzID0gc3RyLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucG9seWxpbmUucHVzaCh7eDogcGFyc2VGbG9hdChwdHNbMF0pLCB5OiBwYXJzZUZsb2F0KHB0c1sxXSl9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGwub2JqZWN0cy5wdXNoKGQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgbC5wcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllc1RvSlNPTihsYXllcik7XG5cbiAgICAgICAgICAgICAgZGF0YS5wdXNoKGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAvL+OCpOODoeODvOOCuOODrOOCpOODpOODvFxuICAgICAgICAgIGNhc2UgXCJpbWFnZWxheWVyXCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnN0IGwgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWFnZWxheWVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogbGF5ZXIuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSxcbiAgICAgICAgICAgICAgICB4OiBwYXJzZUZsb2F0KGxheWVyLmdldEF0dHJpYnV0ZShcIm9mZnNldHhcIikpIHx8IDAsXG4gICAgICAgICAgICAgICAgeTogcGFyc2VGbG9hdChsYXllci5nZXRBdHRyaWJ1dGUoXCJvZmZzZXR5XCIpKSB8fCAwLFxuICAgICAgICAgICAgICAgIGFscGhhOiBsYXllci5nZXRBdHRyaWJ1dGUoXCJvcGFjaXR5XCIpIHx8IDEsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogKGxheWVyLmdldEF0dHJpYnV0ZShcInZpc2libGVcIikgPT09IHVuZGVmaW5lZCB8fCBsYXllci5nZXRBdHRyaWJ1dGUoXCJ2aXNpYmxlXCIpICE9PSAwKSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgY29uc3QgaW1hZ2VFbG0gPSBsYXllci5nZXRFbGVtZW50c0J5VGFnTmFtZShcImltYWdlXCIpWzBdO1xuICAgICAgICAgICAgICBsLmltYWdlID0ge3NvdXJjZTogaW1hZ2VFbG0uZ2V0QXR0cmlidXRlKFwic291cmNlXCIpfTtcblxuICAgICAgICAgICAgICBkYXRhLnB1c2gobCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvL+OCsOODq+ODvOODl1xuICAgICAgICAgIGNhc2UgXCJncm91cFwiOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Ki44K744OD44OI44Gr54Sh44GE44Kk44Oh44O844K444OH44O844K/44KS6Kqt44G/6L6844G/XG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2hlY2tJbWFnZSgpIHtcbiAgICAgIGNvbnN0IGltYWdlU291cmNlID0gW107XG4gICAgICBjb25zdCBsb2FkSW1hZ2UgPSBbXTtcblxuICAgICAgLy/kuIDopqfkvZzmiJBcbiAgICAgIHRoaXMudGlsZXNldHMuZm9yRWFjaCh0aWxlc2V0ID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgIGlzVGlsZXNldDogdHJ1ZSxcbiAgICAgICAgICBpbWFnZTogdGlsZXNldC5zb3VyY2UsXG4gICAgICAgIH07XG4gICAgICAgIGltYWdlU291cmNlLnB1c2gob2JqKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG4gICAgICAgIGlmIChsYXllci5pbWFnZSkge1xuICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgIGlzVGlsZXNldDogZmFsc2UsXG4gICAgICAgICAgICBpbWFnZTogbGF5ZXIuaW1hZ2Uuc291cmNlLFxuICAgICAgICAgIH07XG4gICAgICAgICAgaW1hZ2VTb3VyY2UucHVzaChvYmopO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy/jgqLjgrvjg4Pjg4jjgavjgYLjgovjgYvnorroqo1cbiAgICAgIGltYWdlU291cmNlLmZvckVhY2goZSA9PiB7XG4gICAgICAgIGlmIChlLmlzVGlsZXNldCkge1xuICAgICAgICAgIGNvbnN0IHRzeCA9IEFzc2V0TWFuYWdlci5nZXQoJ3RzeCcsIGUuaW1hZ2UpO1xuICAgICAgICAgIGlmICghdHN4KSB7XG4gICAgICAgICAgICAvL+OCouOCu+ODg+ODiOOBq+OBquOBi+OBo+OBn+OBruOBp+ODreODvOODieODquOCueODiOOBq+i/veWKoFxuICAgICAgICAgICAgbG9hZEltYWdlLnB1c2goZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGltYWdlID0gQXNzZXRNYW5hZ2VyLmdldCgnaW1hZ2UnLCBlLmltYWdlKTtcbiAgICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICAvL+OCouOCu+ODg+ODiOOBq+OBquOBi+OBo+OBn+OBruOBp+ODreODvOODieODquOCueODiOOBq+i/veWKoFxuICAgICAgICAgICAgbG9hZEltYWdlLnB1c2goZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy/kuIDmi6zjg63jg7zjg4lcbiAgICAgIC8v44Ot44O844OJ44Oq44K544OI5L2c5oiQXG4gICAgICBpZiAobG9hZEltYWdlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBhc3NldHMgPSB7IGltYWdlOiBbXSwgdHN4OiBbXSB9O1xuICAgICAgICBsb2FkSW1hZ2UuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICBpZiAoZS5pc1RpbGVzZXQpIHtcbiAgICAgICAgICAgIGFzc2V0cy50c3hbZS5pbWFnZV0gPSBlLmltYWdlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL+OCouOCu+ODg+ODiOOBruODkeOCueOCkuODnuODg+ODl+OBqOWQjOOBmOOBq+OBmeOCi1xuICAgICAgICAgICAgYXNzZXRzLmltYWdlW2UuaW1hZ2VdID0gdGhpcy5wYXRoICsgZS5pbWFnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IEFzc2V0TG9hZGVyKCk7XG4gICAgICAgICAgbG9hZGVyLmxvYWQoYXNzZXRzKTtcbiAgICAgICAgICBsb2FkZXIub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRpbGVzZXRzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAgIGUudHN4ID0gQXNzZXRNYW5hZ2VyLmdldCgndHN4JywgZS5zb3VyY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOODnuODg+ODl+OCpOODoeODvOOCuOS9nOaIkFxuICAgICAqIEBwYXJhbSBsYXllck5hbWUge1N0cmluZ31cbiAgICAgKiBAcmV0dXJucyB7VGV4dHVyZXxudWxsfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dlbmVyYXRlSW1hZ2UobGF5ZXJOYW1lKSB7XG4gICAgICBsZXQgbnVtTGF5ZXIgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5sYXllcnNbaV0udHlwZSA9PT0gXCJsYXllclwiIHx8IHRoaXMubGF5ZXJzW2ldLnR5cGUgPT09IFwiaW1hZ2VsYXllclwiKSBudW1MYXllcisrO1xuICAgICAgfVxuICAgICAgaWYgKG51bUxheWVyID09PSAwKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLndpZHRoICogdGhpcy50aWxld2lkdGg7XG4gICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlaWdodCAqIHRoaXMudGlsZWhlaWdodDtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IG5ldyBDYW52YXMoKS5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8v44Oe44OD44OX44Os44Kk44Ok44O8XG4gICAgICAgIGlmICh0aGlzLmxheWVyc1tpXS50eXBlID09PSBcImxheWVyXCIgJiYgdGhpcy5sYXllcnNbaV0udmlzaWJsZSAhPT0gXCIwXCIpIHtcbiAgICAgICAgICBpZiAobGF5ZXJOYW1lID09PSB1bmRlZmluZWQgfHwgbGF5ZXJOYW1lID09PSB0aGlzLmxheWVyc1tpXS5uYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMubGF5ZXJzW2ldO1xuICAgICAgICAgICAgY29uc3QgbWFwZGF0YSA9IGxheWVyLmRhdGE7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IGxheWVyLndpZHRoO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gbGF5ZXIuaGVpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLm9wYWNpdHkgfHwgMS4wO1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBtYXBkYXRhW2NvdW50XTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgIC8v44Oe44OD44OX44OB44OD44OX44KS6YWN572uXG4gICAgICAgICAgICAgICAgICB0aGlzLl9zZXRNYXBDaGlwKGNhbnZhcywgaW5kZXgsIHggKiB0aGlzLnRpbGV3aWR0aCwgeSAqIHRoaXMudGlsZWhlaWdodCwgb3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy/jgqrjg5bjgrjjgqfjgq/jg4jjgrDjg6vjg7zjg5dcbiAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLnR5cGUgPT09IFwib2JqZWN0Z3JvdXBcIiAmJiB0aGlzLmxheWVyc1tpXS52aXNpYmxlICE9PSBcIjBcIikge1xuICAgICAgICAgIGlmIChsYXllck5hbWUgPT09IHVuZGVmaW5lZCB8fCBsYXllck5hbWUgPT09IHRoaXMubGF5ZXJzW2ldLm5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5sYXllcnNbaV07XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5ID0gbGF5ZXIub3BhY2l0eSB8fCAxLjA7XG4gICAgICAgICAgICBsYXllci5vYmplY3RzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBpZiAoZS5naWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRNYXBDaGlwKGNhbnZhcywgZS5naWQsIGUueCwgZS55LCBvcGFjaXR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy/jgqTjg6Hjg7zjgrjjg6zjgqTjg6Tjg7xcbiAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2ldLnR5cGUgPT09IFwiaW1hZ2VsYXllclwiICYmIHRoaXMubGF5ZXJzW2ldLnZpc2libGUgIT09IFwiMFwiKSB7XG4gICAgICAgICAgaWYgKGxheWVyTmFtZSA9PT0gdW5kZWZpbmVkIHx8IGxheWVyTmFtZSA9PT0gdGhpcy5sYXllcnNbaV0ubmFtZSkge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBBc3NldE1hbmFnZXIuZ2V0KCdpbWFnZScsIHRoaXMubGF5ZXJzW2ldLmltYWdlLnNvdXJjZSk7XG4gICAgICAgICAgICBjYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UuZG9tRWxlbWVudCwgdGhpcy5sYXllcnNbaV0ueCwgdGhpcy5sYXllcnNbaV0ueSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xuICAgICAgdGV4dHVyZS5kb21FbGVtZW50ID0gY2FudmFzLmRvbUVsZW1lbnQ7XG4gICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7mjIflrprjgZfjgZ/luqfmqJnjgavjg57jg4Pjg5fjg4Hjg4Pjg5fjga7jgqTjg6Hjg7zjgrjjgpLjgrPjg5Tjg7zjgZnjgotcbiAgICAgKiBAcGFyYW0gY2FudmFzIHtIVE1MQ2FudmFzRWxlbWVudH1cbiAgICAgKiBAcGFyYW0gaW5kZXgge051bWJlcn1cbiAgICAgKiBAcGFyYW0geCB7TnVtYmVyfVxuICAgICAqIEBwYXJhbSB5IHtOdW1iZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0TWFwQ2hpcChjYW52YXMsIGluZGV4LCB4LCB5KSB7XG4gICAgICAvL+WvvuixoeOCv+OCpOODq+OCu+ODg+ODiOOBruWIpOWIpVxuICAgICAgbGV0IHRpbGVzZXQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGlsZXNldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdHN4MSA9IHRoaXMudGlsZXNldHNbaV07XG4gICAgICAgIGNvbnN0IHRzeDIgPSB0aGlzLnRpbGVzZXRzW2kgKyAxXTtcbiAgICAgICAgaWYgKCF0c3gyKSB7XG4gICAgICAgICAgdGlsZXNldCA9IHRzeDE7XG4gICAgICAgICAgaSA9IHRoaXMudGlsZXNldHMubGVuZ3RoO1xuICAgICAgICB9IGVsc2UgaWYgKHRzeDEuZmlyc3RnaWQgPD0gaW5kZXggJiYgaW5kZXggPCB0c3gyLmZpcnN0Z2lkKSB7XG4gICAgICAgICAgdGlsZXNldCA9IHRzeDE7XG4gICAgICAgICAgaSA9IHRoaXMudGlsZXNldHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL+OCv+OCpOODq+OCu+ODg+ODiOOBi+OCieODnuODg+ODl+ODgeODg+ODl+OCkuWPluW+l1xuICAgICAgY29uc3QgdHN4ID0gdGlsZXNldC50c3g7XG4gICAgICBjb25zdCBjaGlwID0gdHN4LmNoaXBzW2luZGV4IC0gdGlsZXNldC5maXJzdGdpZF07XG4gICAgICBjb25zdCBpbWFnZSA9IEFzc2V0TWFuYWdlci5nZXQoJ2ltYWdlJywgY2hpcC5pbWFnZSk7XG4gICAgICBjYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoXG4gICAgICAgIGltYWdlLmRvbUVsZW1lbnQsXG4gICAgICAgIGNoaXAueCArIHRzeC5tYXJnaW4sIGNoaXAueSArIHRzeC5tYXJnaW4sXG4gICAgICAgIHRzeC50aWxld2lkdGgsIHRzeC50aWxlaGVpZ2h0LFxuICAgICAgICB4LCB5LFxuICAgICAgICB0c3gudGlsZXdpZHRoLCB0c3gudGlsZWhlaWdodCk7XG4gICAgfVxufVxuXG4vKipcbiAqIHRteOODleOCoeOCpOODq+iqreOBv+i+vOOBv1xuICogQHBhcmFtIGtleSB7U3RyaW5nfVxuICogQHBhcmFtIHBhdGgge1N0cmluZ31cbiAqIEByZXR1cm5zIHtGbG93fVxuICovXG5Bc3NldExvYWRlci5hc3NldExvYWRGdW5jdGlvbnMudG14ID0gKGtleSwgcGF0aCkgPT4ge1xuICAgIGNvbnN0IHRteCA9IG5ldyBUaWxlZE1hcCgpO1xuICAgIHJldHVybiB0bXgubG9hZChwYXRoKTtcbn1cbiIsImltcG9ydCB7WE1MTG9hZGVyfSBmcm9tIFwiLi9YTUxMb2FkZXJcIlxuaW1wb3J0IHtBc3NldExvYWRlciwgQXNzZXRNYW5hZ2VyfSBmcm9tIFwicGhpbmEuanNcIjtcblxuZXhwb3J0IGNsYXNzIFRpbGVTZXQgZXh0ZW5kcyBYTUxMb2FkZXJ7XG4gICAgY29uc3RydWN0b3IoeG1sKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLnRpbGV3aWR0aCA9IDA7XG4gICAgICAgIHRoaXMudGlsZWhlaWdodCA9IDA7XG4gICAgICAgIHRoaXMudGlsZWNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gMDtcbiAgICAgICAgdGhpcy5wYXRoID0gXCJcIjtcbiAgICAgICAgaWYgKHhtbCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkRnJvbVhNTCh4bWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWE1M44OV44Kh44Kk44Or6Kqt44G/6L6844G/XG4gICAgICogQHBhcmFtIHhtbCB7WE1MRG9jdW1lbnR9XG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICovXG4gICAgbG9hZEZyb21YTUwoeG1sKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyc2UoeG1sKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIHtYTUxEb2N1bWVudH1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx1bmtub3duPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wYXJzZShkYXRhKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIC8v44K/44Kk44Or44K744OD44OI5Y+W5b6XXG4gICAgICAgIGNvbnN0IHRpbGVzZXQgPSBkYXRhLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0aWxlc2V0JylbMF07XG4gICAgICAgIC8vIGNvbnN0IHByb3BzID0gdGhpcy5fcHJvcGVydGllc1RvSlNPTih0aWxlc2V0KTtcblxuICAgICAgICAvL+OCv+OCpOODq+OCu+ODg+ODiOWxnuaAp+aDheWgseWPluW+l1xuICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5fYXR0clRvSlNPTih0aWxlc2V0KTtcbiAgICAgICAgJHNhZmUuY2FsbChhdHRyLHtcbiAgICAgICAgICB0aWxld2lkdGg6IDMyLFxuICAgICAgICAgIHRpbGVoZWlnaHQ6IDMyLFxuICAgICAgICAgIHNwYWNpbmc6IDAsXG4gICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgJGV4dGVuZC5jYWxsKHRoaXMsIGF0dHIpO1xuICAgICAgICB0aGlzLmNoaXBzID0gW107XG5cbiAgICAgICAgLy/jgr3jg7zjgrnnlLvlg4/oqK3lrprlj5blvpdcbiAgICAgICAgdGhpcy5pbWFnZU5hbWUgPSB0aWxlc2V0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWFnZScpWzBdLmdldEF0dHJpYnV0ZSgnc291cmNlJyk7XG4gIFxuICAgICAgICAvL+mAj+mBjuiJsuioreWumuWPluW+l1xuICAgICAgICBjb25zdCB0cmFucyA9IHRpbGVzZXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltYWdlJylbMF0uZ2V0QXR0cmlidXRlKCd0cmFucycpO1xuICAgICAgICBpZiAodHJhbnMpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zUiA9IHBhcnNlSW50KHRyYW5zLnN1YnN0cmluZygwLCAyKSwgMTYpO1xuICAgICAgICAgIHRoaXMudHJhbnNHID0gcGFyc2VJbnQodHJhbnMuc3Vic3RyaW5nKDIsIDQpLCAxNik7XG4gICAgICAgICAgdGhpcy50cmFuc0IgPSBwYXJzZUludCh0cmFucy5zdWJzdHJpbmcoNCwgNiksIDE2KTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLy/jg57jg4Pjg5fjg4Hjg4Pjg5fjg6rjgrnjg4jkvZzmiJBcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnRpbGVjb3VudDsgcisrKSB7XG4gICAgICAgICAgdGhpcy5jaGlwc1tyXSA9IHtcbiAgICAgICAgICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2VOYW1lLFxuICAgICAgICAgICAgICB4OiAociAgJSB0aGlzLmNvbHVtbnMpICogKHRoaXMudGlsZXdpZHRoICsgdGhpcy5zcGFjaW5nKSArIHRoaXMubWFyZ2luLFxuICAgICAgICAgICAgICB5OiBNYXRoLmZsb29yKHIgLyB0aGlzLmNvbHVtbnMpICogKHRoaXMudGlsZWhlaWdodCArIHRoaXMuc3BhY2luZykgKyB0aGlzLm1hcmdpbixcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy/jgqTjg6Hjg7zjgrjjg4fjg7zjgr/oqq3jgb/ovrzjgb9cbiAgICAgICAgdGhpcy5fbG9hZEltYWdlKClcbiAgICAgICAgICAudGhlbigoKSA9PiByZXNvbHZlKCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Ki44K744OD44OI44Gr54Sh44GE44Kk44Oh44O844K444OH44O844K/44KS6Kqt44G/6L6844G/XG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbG9hZEltYWdlKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBjb25zdCBpbWFnZVNvdXJjZSA9IHtcbiAgICAgICAgICBpbWFnZU5hbWU6IHRoaXMuaW1hZ2VOYW1lLFxuICAgICAgICAgIGltYWdlVXJsOiB0aGlzLnBhdGggKyB0aGlzLmltYWdlTmFtZSxcbiAgICAgICAgICB0cmFuc1I6IHRoaXMudHJhbnNSLFxuICAgICAgICAgIHRyYW5zRzogdGhpcy50cmFuc0csXG4gICAgICAgICAgdHJhbnNCOiB0aGlzLnRyYW5zQixcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGxldCBsb2FkSW1hZ2UgPSBudWxsO1xuICAgICAgICBjb25zdCBpbWFnZSA9IEFzc2V0TWFuYWdlci5nZXQoJ2ltYWdlJywgaW1hZ2VTb3VyY2UuaW1hZ2UpO1xuICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9hZEltYWdlID0gaW1hZ2VTb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICAvL+ODreODvOODieODquOCueODiOS9nOaIkFxuICAgICAgICBjb25zdCBhc3NldHMgPSB7IGltYWdlOiBbXSB9O1xuICAgICAgICBhc3NldHMuaW1hZ2VbaW1hZ2VTb3VyY2UuaW1hZ2VOYW1lXSA9IGltYWdlU291cmNlLmltYWdlVXJsO1xuXG4gICAgICAgIGlmIChsb2FkSW1hZ2UpIHtcbiAgICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgQXNzZXRMb2FkZXIoKTtcbiAgICAgICAgICBsb2FkZXIubG9hZChhc3NldHMpO1xuICAgICAgICAgIGxvYWRlci5vbignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgIC8v6YCP6YGO6Imy6Kit5a6a5Y+N5pigXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gQXNzZXRNYW5hZ2VyLmdldCgnaW1hZ2UnLCBpbWFnZVNvdXJjZS5pbWFnZVVybCk7XG4gICAgICAgICAgICBpZiAoaW1hZ2VTb3VyY2UudHJhbnNSICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgciA9IGltYWdlU291cmNlLnRyYW5zUjtcbiAgICAgICAgICAgICAgY29uc3QgZyA9IGltYWdlU291cmNlLnRyYW5zRztcbiAgICAgICAgICAgICAgY29uc3QgYiA9IGltYWdlU291cmNlLnRyYW5zQjtcbiAgICAgICAgICAgICAgdGhpcy5pbWFnZS5maWx0ZXIoKHBpeGVsLCBpbmRleCwgeCwgeSwgYml0bWFwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGJpdG1hcC5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChwaXhlbFswXSA9PT0gciAmJiBwaXhlbFsxXSA9PT0gZyAmJiBwaXhlbFsyXSA9PT0gYikge1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4KzNdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIHRzeOODleOCoeOCpOODq+iqreOBv+i+vOOBv1xuICogQHBhcmFtIGtleVxuICogQHBhcmFtIHBhdGhcbiAqIEByZXR1cm5zIHtGbG93fVxuICovXG5Bc3NldExvYWRlci5hc3NldExvYWRGdW5jdGlvbnMudHN4ID0gZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgY29uc3QgdHN4ID0gbmV3IFRpbGVTZXQoKTtcbiAgICByZXR1cm4gdHN4LmxvYWQocGF0aCk7XG59O1xuXG4iLCJpbXBvcnQge0Fzc2V0fSBmcm9tIFwicGhpbmEuanNcIjtcblxuZXhwb3J0IGNsYXNzIFhNTExvYWRlciBleHRlbmRzIEFzc2V0e1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBhdGggPSBcIlwiO1xuICAgIH1cblxuICAgIGxvYWREdW1teSgpIHsgfVxuXG4gICAgLyoqXG4gICAgICogWE1M44OV44Kh44Kk44Or44Gu44Ot44O844OJXG4gICAgICogQHBhcmFtIHJlc29sdmUge2Z1bmN0aW9ufVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfbG9hZChyZXNvbHZlKSB7XG4gICAgICAgIC8v44OR44K55oqc44GN5Ye644GXXG4gICAgICAgIHRoaXMucGF0aCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLnNyYy5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gdGhpcy5zcmMuc3Vic3RyaW5nKDAsIGxhc3QgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8v57WC5LqG6Zai5pWw5L+d5a2YXG4gICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuXG4gICAgICAgIC8vIGxvYWRcbiAgICAgICAgY29uc3QgeG1sID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhtbC5vcGVuKCdHRVQnLCB0aGlzLnNyYyk7XG4gICAgICAgIHhtbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoeG1sLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAoWzIwMCwgMjAxLCAwXS5pbmRleE9mKHhtbC5zdGF0dXMpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gKG5ldyBET01QYXJzZXIoKSkucGFyc2VGcm9tU3RyaW5nKHhtbC5yZXNwb25zZVRleHQsIFwidGV4dC94bWxcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBcInhtbFwiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fcmVzb2x2ZSh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4bWwuc2VuZChudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBYTUzjg5fjg63jg5Hjg4bjgqPjgpJKU09O44Gr5aSJ5o+bXG4gICAgICogQHBhcmFtIGVsbSB7WE1MRG9jdW1lbnR9XG4gICAgICogQHJldHVybnMge3t9fVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcHJvcGVydGllc1RvSlNPTihlbG0pIHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGVsbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInByb3BlcnRpZXNcIilbMF07XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBpZiAocHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gb2JqO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcHJvcGVydGllcy5jaGlsZE5vZGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gcHJvcGVydGllcy5jaGlsZE5vZGVzW2tdO1xuICAgICAgICAgICAgaWYgKHAudGFnTmFtZSA9PT0gXCJwcm9wZXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBwLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIC8vcHJvcGVydHnjgat0eXBl5oyH5a6a44GM44GC44Gj44Gf44KJ5aSJ5o+bXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHAuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW3AuZ2V0QXR0cmlidXRlKCduYW1lJyldID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZmxvYXRcIikge1xuICAgICAgICAgICAgICAgICAgICBvYmpbcC5nZXRBdHRyaWJ1dGUoJ25hbWUnKV0gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiYm9vbFwiICkge1xuICAgICAgICAgICAgICAgICAgICBvYmpbcC5nZXRBdHRyaWJ1dGUoJ25hbWUnKV0gPSB2YWx1ZSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW3AuZ2V0QXR0cmlidXRlKCduYW1lJyldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWE1M5bGe5oCn44KSSlNPTuOBq+WkieaPm1xuICAgICAqIEBwYXJhbSBzb3VyY2VcbiAgICAgKiBAcmV0dXJucyB7e319XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9hdHRyVG9KU09OKHNvdXJjZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZhbCA9IHNvdXJjZS5hdHRyaWJ1dGVzW2ldLnZhbHVlO1xuICAgICAgICAgICAgdmFsID0gaXNOYU4ocGFyc2VGbG9hdCh2YWwpKT8gdmFsOiBwYXJzZUZsb2F0KHZhbCk7XG4gICAgICAgICAgICBvYmpbc291cmNlLmF0dHJpYnV0ZXNbaV0ubmFtZV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBYTUzlsZ7mgKfjgpJKU09O44Gr5aSJ5o+b77yIU3RyaW5n44Gn6L+U44GZ77yJXG4gICAgICogQHBhcmFtIHNvdXJjZVxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2F0dHJUb0pTT05fc3RyKHNvdXJjZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb2JqW3NvdXJjZS5hdHRyaWJ1dGVzW2ldLm5hbWVdID0gc291cmNlLmF0dHJpYnV0ZXNbaV0udmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDU1bjg5Hjg7zjgrlcbiAgICAgKiBAcGFyYW0gZGF0YSB7c3RyaW5nfVxuICAgICAqIEByZXR1cm5zIHsqW119XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9wYXJzZUNTVihkYXRhKSB7XG4gICAgICAgIGNvbnN0IGxheWVyID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFMaXN0ID0gZGF0YS5zcGxpdCgnLCcpO1xuICAgICAgICBkYXRhTGlzdC5mb3JFYWNoKGVsbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBudW0gPSBwYXJzZUludChlbG0sIDEwKTtcbiAgICAgICAgICAgIGxheWVyLnB1c2gobnVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsYXllcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCQVNFNjTjg5Hjg7zjgrlcbiAgICAgKiBodHRwOi8vdGhla2Fubm9uLXNlcnZlci5hcHBzcG90LmNvbS9oZXJwaXR5LWRlcnBpdHkuYXBwc3BvdC5jb20vcGFzdGViaW4uY29tLzc1S2tzMFdIXG4gICAgICogQHBhcmFtIGRhdGEge3N0cmluZ31cbiAgICAgKiBAcmV0dXJucyB7KltdfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcGFyc2VCYXNlNjQoZGF0YSkge1xuICAgICAgICBjb25zdCByc3QgPSBbXTtcbiAgICAgICAgY29uc3QgZGF0YUxpc3QgPSBhdG9iKGRhdGEudHJpbSgpKS5zcGxpdCgnJykubWFwKGUgPT4gZS5jaGFyQ29kZUF0KDApKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRhdGFMaXN0Lmxlbmd0aCAvIDQ7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IGRhdGFMaXN0W2kgKiA0XS50b1N0cmluZygpO1xuICAgICAgICAgICAgcnN0W2ldID0gcGFyc2VJbnQobiwgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByc3Q7XG4gICAgfVxufSIsIi8qIVxuICogcGhpbmEuanMgdjAuMi4zXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIHBoaVxuICovXG4vKipcbiAqIEBjbGFzcyBnbG9iYWwuU3RyaW5nXG4gKiAjIOaLoeW8teOBl+OBnyBTdHJpbmcg44Kv44Op44K5XG4gKi9cblxuLyoqXG4gKiBAbWV0aG9kIGZvcm1hdFxuICog44OV44Kp44O844Oe44OD44OI44Gr5byV5pWw44KS6YGp55So44GX44Gf5paH5a2X5YiX44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog5byV5pWw44GM44Kq44OW44K444Kn44Kv44OI44Gu5aC05ZCI44CBXCJ744OX44Ot44OR44OG44Kj5ZCNfVwiIOOBjOOCquODluOCuOOCp+OCr+ODiOOBruODl+ODreODkeODhuOCo+OBruWApOOBq+e9ruOBjeaPm+OCj+OCiuOBvuOBmeOAglxuICog5oyH5a6a44GX44Gf44OX44Ot44OR44OG44Kj44GM44Kq44OW44K444Kn44Kv44OI44Gr44Gq44GE5aC05ZCI44Gv56m65paH5a2X5YiX44Gr44Gq44KK44G+44GZ44CCXG4gKlxuICog56ysMeW8leaVsOOBjOOCquODluOCuOOCp+OCr+ODiOOBp+OBquOBi+OBo+OBn+WgtOWQiOOAgVwie+aVtOaVsH1cIiDjgYzlkITlvJXmlbDjgavnva7jgY3mj5vjgo/jgorjgb7jgZnjgIJcbiAqIOaMh+WumuOBl+OBn+WApOOBruW8leaVsOOBjOOBquOBi+OBo+OBn+WgtOWQiOOBr+epuuaWh+Wtl+WIl+OBq+OBquOCiuOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgb2JqID0ge3I6IDEyOCwgZzogMCwgYjogMjU1fTtcbiAqICAgICBcImNvbG9yOiByZ2Ioe3J9LCB7Z30sIHtifSk7XCIuZm9ybWF0KG9iaik7IC8vID0+IFwiY29sb3I6IHJnYigxMjgsIDAsIDI1NSk7XCJcbiAqXG4gKiAgICAgXCJ7MH0gKyB7MX0gPSB7Mn1cIi5mb3JtYXQoNSwgOCwgKDUrOCkpOyAvLyA9PiBcIjUgKyA4ID0gMTNcIlxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IGFyZyDjg5Hjg6njg6Hjg7zjgr/jgajjgarjgovjgqrjg5bjgrjjgqfjgq/jg4hcbiAqIEByZXR1cm4ge1N0cmluZ30g55Sf5oiQ44GX44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChhcmcpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcImZvcm1hdFwiLCBmdW5jdGlvbihhcmcpIHtcbiAgLy8g572u5o+b44OV44Kh44Oz44KvXG4gIHZhciByZXBfZm4gPSB1bmRlZmluZWQ7XG4gIFxuICAvLyDjgqrjg5bjgrjjgqfjgq/jg4jjga7loLTlkIhcbiAgaWYgKHR5cGVvZiBhcmcgPT0gXCJvYmplY3RcIikge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgcmVwX2ZuID0gZnVuY3Rpb24obSwgaykge1xuICAgICAgaWYgKGFyZ1trXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYXJnW2tdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLy8g6KSH5pWw5byV5pWw44Gg44Gj44Gf5aC05ZCIXG4gIGVsc2Uge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgcmVwX2ZuID0gZnVuY3Rpb24obSwgaykge1xuICAgICAgdmFyIHYgPSBhcmdzWyBwYXJzZUludChrKSBdO1xuICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIFxuICByZXR1cm4gdGhpcy5yZXBsYWNlKCAvXFx7KFxcdyspXFx9L2csIHJlcF9mbiApO1xufVxuXG5cbi8qKlxuICogQG1ldGhvZCBlYWNoXG4gKiDlkITmloflrZfjgpLpoIbnlarjgavmuKHjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIHN0ciA9ICdhYmMnO1xuICogICAgIHN0ci5lYWNoKGZ1bmN0aW9uKGNoKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhjaCk7XG4gKiAgICAgfSk7XG4gKiAgICAgLy8gPT4gJ2EnXG4gKiAgICAgLy8gICAgJ2InXG4gKiAgICAgLy8gICAgJ2MnXG4gKlxuICogQHRoaXMgU3RyaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBfY2FsbGJhY2sg5ZCE6KaB57Sg44Gr5a++44GX44Gm5a6f6KGM44GZ44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gKiBAcGFyYW0ge09iamVjdH0gW19zZWxmPXRoaXNdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApFxuICovXG5mdW5jdGlvbiBlYWNoKF9jYWxsYmFjaywgX3NlbGYpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcImVhY2hcIiwgZnVuY3Rpb24oKSB7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyA9PT09PT09PT09XG4vLyDku6XkuIvjg6njgqTjg5bjg6njg6rlhoXjgafjga/mnKrkvb/nlKhcbi8vID09PT09PT09PT1cblxuLyoqXG4gKiBAbWV0aG9kIHRyaW1cbiAqIOaWh+Wtl+WIl+WFiOmgreOBqOacq+WwvuOBruepuueZveaWh+Wtl+OCkuWFqOOBpuWPluOCiumZpOOBhOOBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjI1JlZmVyZW5jZVxuICogLSBbU3RyaW5nIEZ1bmN0aW9ucyBmb3IgSmF2YXNjcmlwdCDigJMgdHJpbSwgdG8gY2FtZWwgY2FzZSwgdG8gZGFzaGVkLCBhbmQgdG8gdW5kZXJzY29yZV0oaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvKVxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCIgIEhlbGxvLCB3b3JsZCEgIFwiLnRyaW0oKTsgLy8gPT4gXCJIZWxsbywgd29ybGQhXCJcbiAqIFxuICogQHRoaXMgU3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOODiOODquODoOOBl+OBn+e1kOaenOOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiB0cmltKCkge1xuLy8gU3RyaW5nLnByb3RvdHlwZS4kbWV0aG9kKFwidHJpbVwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIik7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjYXBpdGFsaXplXG4gKiDjgq3jg6Pjg5Tjgr/jg6njgqTjgrrjgZfjgZ/mloflrZfliJfjgIHjgZnjgarjgo/jgaHjgIHjgZnjgbnjgabjga7ljZjoqp7jga7lhYjpoK3jgpLlpKfmloflrZfjgavjgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDljZjoqp7jga7lhYjpoK3ku6XlpJbjga/lsI/mloflrZfljJbjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyNSZWZlcmVuY2VcbiAqIC0gW+OCreODo+ODlOOCv+ODqeOCpOOCuijljZjoqp7jga7lhYjpoK3jga7lpKfmloflrZfljJYp44KS6KGM44GGIC0gb2N0IGluYW9kdV0oaHR0cDovL2QuaGF0ZW5hLm5lLmpwL2JyYXppbC8yMDA1MTIxMi8xMTM0MzY5MDgzKSAgXG4gKiAtIFvjg4fjgrbjgqTjg7Pjgajjg5fjg63jgrDjg6njg6Djga7ni63plpPjgac6IGphdmFzY3JpcHTjgafjgq3jg6Pjg5Tjgr/jg6njgqTjgrrvvIjkuIDmloflrZfnm67jgpLlpKfmloflrZfjgavjgZnjgovvvIldKGh0dHA6Ly9kZXNpZ24tcHJvZ3JhbS5ibG9nc3BvdC5jb20vMjAxMS8wMi9qYXZhc2NyaXB0Lmh0bWwpXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcImkgYU0gYSBwZW4uXCIuY2FwaXRhbGl6ZSgpOyAvLyA9PiBcIkkgQW0gQSBQZW4uXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30g44Kt44Oj44OU44K/44Op44Kk44K644GX44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIGNhcGl0YWxpemUoKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJjYXBpdGFsaXplXCIsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlKC9cXHcrL2csIGZ1bmN0aW9uKHdvcmQpe1xuICAgIHJldHVybiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIuY2FsbCh3b3JkKTtcbiAgICAvLyByZXR1cm4gd29yZC5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjYXBpdGFsaXplRmlyc3RMZXR0ZXJcbiAqIOWFiOmgreOBruaWh+Wtl+OCkuWkp+aWh+Wtl+OBq+OBl+OBpuOAgeOBneOCjOS7peWkluOCkuWwj+aWh+Wtl+OBq+OBl+OBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCJpIGFNIGEgcGVuLlwiLmNhcGl0YWxpemVGaXJzdExldHRlcigpOyAvLyBcIkkgYW0gYSBwZW4uXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30g5YWI6aCt44Gu5paH5a2X44KS5aSn5paH5a2X44Gr44GX44Gm44CB44Gd44KM5Lul5aSW44KS5bCP5paH5a2X44Gr44GX44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcigpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcImNhcGl0YWxpemVGaXJzdExldHRlclwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgdG9EYXNoXG4gKiDmloflrZfliJflhoXjga7lpKfmloflrZfjgpLjgIxcIi1cIiArIOWwj+aWh+Wtl+OAjeOBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqIGNzczJwcm9wZXJ0aWVz77yIZWxlbWVudC5zdHlsZe+8ieOBruWQhOODl+ODreODkeODhuOCo+WQjeOCkiBDU1Mg44Gu44OX44Ot44OR44OG44Kj5ZCN44Gr5aSJ5o+b44GZ44KL5aC05ZCI44Gr5L6/5Yip44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcImJvcmRlclRvcENvbG9yXCIudG9EYXNoKCk7IC8vID0+IFwiYm9yZGVyLXRvcC1jb2xvclwiXG4gKlxuICogQHRoaXMgU3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOWkieaPm+W+jOOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiB0b0Rhc2goKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJ0b0Rhc2hcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24obSl7IHJldHVybiAnLScrbS50b0xvd2VyQ2FzZSgpOyB9KTtcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgdG9IYXNoXG4gKiDjg4/jg4Pjgrfjg6XlgKTjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIFwicGhpbmEuanNcIi50b0hhc2goKTsgLy8gPT4gMjY3NjMyNzM5NFxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHJldHVybiB7TnVtYmVyfSBDUkMzMuODj+ODg+OCt+ODpeWApFxuICovXG5mdW5jdGlvbiB0b0hhc2goKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJ0b0hhc2hcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0b0NSQzMyLmNhbGwodGhpcyk7XG4gIC8vIHJldHVybiB0aGlzLnRvQ1JDMzIoKTtcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgcGFkZGluZ1xuICog5bem44Gr5paH5a2X44KS5Z+L44KB44Gm5oyH5a6a44GX44Gf5qGB44Gr44GX44G+44GZ44CCdGhpcyDjga7mloflrZfliJfjga/lj7Plr4TjgZvjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIFwiMTIzNFwiLnBhZGRpbmcoMTApOyAgICAgIC8vID0+IFwiICAgICAgMTIzNFwiXG4gKiAgICAgXCIxMjM0XCIucGFkZGluZygxMCwgJzAnKTsgLy8gPT4gXCIwMDAwMDAxMjM0XCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIOahgeaVsFxuICogQHBhcmFtIHtTdHJpbmd9IFtjaD1cIiBcIl0g5Z+L44KB44KL5paH5a2XXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOaMh+WumuOBl+OBn+ahgeOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiBwYWRkaW5nKG4sIGNoKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJwYWRkaW5nXCIsIGZ1bmN0aW9uKG4sIGNoKSB7XG4gIHZhciBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG4gIG4gID0gbi1zdHIubGVuZ3RoO1xuICBjaCA9IChjaCB8fCAnICcpWzBdO1xuICBcbiAgd2hpbGUobi0tID4gMCkgeyBzdHIgPSBjaCArIHN0cjsgfVxuICBcbiAgcmV0dXJuIHN0cjtcbn1cbi8qKlxuICogQG1ldGhvZCBwYWRkaW5nTGVmdFxuICog5bem44Gr5paH5a2X44KS5Z+L44KB44Gm5oyH5a6a44GX44Gf5qGB44Gr44GX44G+44GZ44CCdGhpcyDjga7mloflrZfliJfjgpLlj7Plr4TjgZvjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIHtAbGluayAjcGFkZGluZ30g44Go5ZCM44GY44Gn44GZ44CCXG4gKiBAaW5oZXJpdGRvYyAjcGFkZGluZ1xuICovXG5mdW5jdGlvbiBwYWRkaW5nTGVmdChuLCBjaCkge1xuLy8gU3RyaW5nLnByb3RvdHlwZS4kbWV0aG9kKFwicGFkZGluZ0xlZnRcIiwgZnVuY3Rpb24obiwgY2gpIHtcbiAgdmFyIHN0ciA9IHRoaXMudG9TdHJpbmcoKTtcbiAgbiAgPSBuLXN0ci5sZW5ndGg7XG4gIGNoID0gKGNoIHx8ICcgJylbMF07XG4gIFxuICB3aGlsZShuLS0gPiAwKSB7IHN0ciA9IGNoICsgc3RyOyB9XG4gIFxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIEBtZXRob2QgcGFkZGluZ1JpZ2h0XG4gKiDlj7PjgavmloflrZfjgpLln4vjgoHjgabmjIflrprjgZfjgZ/moYHjgavjgZfjgb7jgZnjgIJ0aGlzIOOBruaWh+Wtl+WIl+OBr+W3puWvhOOBm+OBleOCjOOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCIxMjM0XCIucGFkZGluZ1JpZ2h0KDEwKTsgICAgICAvLyA9PiBcIjEyMzQgICAgICBcIlxuICogICAgIFwiMTIzNFwiLnBhZGRpbmdSaWdodCgxMCwgJzAnKTsgLy8gPT4gXCIxMjM0MDAwMDAwXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIOahgeaVsFxuICogQHBhcmFtIHtTdHJpbmd9IFtjaD1cIiBcIl0g5Z+L44KB44KL5paH5a2XXG4gKiBAcmV0dXJuIHtTdHJpbmd9IOaMh+WumuOBl+OBn+ahgeOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiBwYWRkaW5nUmlnaHQobiwgY2gpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcInBhZGRpbmdSaWdodFwiLCBmdW5jdGlvbihuLCBjaCkge1xuICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpO1xuICBuICA9IG4tc3RyLmxlbmd0aDtcbiAgY2ggPSAoY2ggfHwgJyAnKVswXTtcbiAgXG4gIHdoaWxlKG4tLSA+IDApIHsgc3RyID0gc3RyICsgY2g7IH1cbiAgXG4gIHJldHVybiBzdHI7XG59XG4gIFxuLyoqXG4gKiBAbWV0aG9kIHF1b3RlbWV0YVxuICog5q2j6KaP6KGo54++44Gu44Oh44K/5paH5a2X44KS44Kv44Kp44O844OI44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIkhlbGxvIHdvcmxkLiAoY2FuIHlvdSBoZWFyIG1lPylcIi5xdW90ZW1ldGEoKTsgLy8gPT4gXCJIZWxsb1xcXFwgd29ybGRcXFxcLlxcXFwgXFxcXChjYW5cXFxcIHlvdVxcXFwgaGVhclxcXFwgbWVcXFxcP1xcXFwpXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30g44Kv44Kp44O844OI44GV44KM44Gf5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIHF1b3RlbWV0YShuKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJxdW90ZW1ldGFcIiwgZnVuY3Rpb24obikge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oW14wLTlBLVphLXpfXSkvZywgJ1xcXFwkMScpO1xufVxuICBcbi8qKlxuICogQG1ldGhvZCByZXBlYXRcbiAqIOiHquWIhuiHqui6q+OCkuaMh+WumuOBl+OBn+WbnuaVsOOBoOOBkee5sOOCiui/lOOBl+OBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCJBYmNcIi5yZXBlYXQoNCk7IC8vID0+IFwiQWJjQWJjQWJjQWJjXCJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBuIOe5sOOCiui/lOOBl+WbnuaVsFxuICogQHJldHVybiB7U3RyaW5nfSDmloflrZfliJdcbiAqL1xuZnVuY3Rpb24gcmVwZWF0KG4pIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcInJlcGVhdFwiLCBmdW5jdGlvbihuKSB7XG4gIC8vIFRPRE86IOeiuuiqjeOBmeOCi1xuICB2YXIgYXJyID0gQXJyYXkobik7XG4gIGZvciAodmFyIGk9MDsgaTxuOyArK2kpIGFycltpXSA9IHRoaXM7XG4gIHJldHVybiBhcnIuam9pbignJyk7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjb3VudFxuICog5oyH5a6a44GX44Gf5paH5a2X5YiX44GM5L2V5YCL5YWl44Gj44Gm44GE44KL44GL44KS44Kr44Km44Oz44OI44GX44Gm6L+U44GX44G+44GZ44CCXG4gKlxuICog5aSn5paH5a2X44O75bCP5paH5a2X44Gv5Yy65Yil44GV44KM44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIlRoaXMgaXMgYSBzdHJpbmcuIElzbid0IGl0P1wiLmNvdW50KFwiaXNcIik7IC8vID0+IDJcbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIg6Kq/44G544KL5paH5a2X5YiXXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoaXMg44GrIHN0ciDjgYzlhaXjgaPjgabjgYTjgovlgIvmlbBcbiAqL1xuZnVuY3Rpb24gY291bnQoc3RyKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJjb3VudFwiLCBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cChzdHIsICdnbScpO1xuICByZXR1cm4gdGhpcy5tYXRjaChyZSkubGVuZ3RoO1xufVxuXG4vKipcbiAqIEBtZXRob2QgaW5jbHVkZVxuICog5oyH5a6a44GX44Gf5paH5a2X5YiX44GM5ZCr44G+44KM44Gm44GE44KL44GL44Gp44GG44GL44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog5aSn5paH5a2X44O75bCP5paH5a2X44Gv5Yy65Yil44GV44KM44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIlRoaXMgaXMgYSBzdHJpbmcuXCIuaW5jbHVkZShcImlzXCIpOyAvLyA9PiB0cnVlXG4gKiAgICAgXCJUaGlzIGlzIGEgc3RyaW5nLlwiLmluY2x1ZGUoXCJ3YXNcIik7IC8vID0+IGZhbHNlXG4gKlxuICogQHRoaXMgU3RyaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIOiqv+OBueOCi+aWh+Wtl+WIl1xuICogQHJldHVybiB7Qm9vbGVhbn0g5ZCr44G+44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGUoc3RyKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJpbmNsdWRlXCIsIGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHN0cikgIT0gLTE7XG59XG5cbi8qKlxuICogQG1ldGhvZCB0b0FycmF5XG4gKiAx5paH5a2X44Ga44Gk5YiG6Kej44GX44Gf6YWN5YiX44KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBcIjEyMzQ1XCIudG9BcnJheSgpOyAvLyA9PiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiXVxuICogICAgIFwi44GC44GE44GG44GI44GKXCIudG9BcnJheSgpOyAvLyA9PiBcIuOBglwiLCBcIuOBhFwiLCBcIuOBhlwiLCBcIuOBiFwiLCBcIuOBilwiXVxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nW119IOmFjeWIl1xuICovXG5mdW5jdGlvbiB0b0FycmF5KCkge1xuLy8gU3RyaW5nLnByb3RvdHlwZS4kbWV0aG9kKFwidG9BcnJheVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpPTAsbGVuPXRoaXMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgYXJyLnB1c2godGhpc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHRvT2JqZWN0XG4gKiDjgq3jg7zjgajlgKTjga7ntYTjgb/lkIjjgo/jgZvjgYzpgKPntZDjgZXjgozjgZ/mloflrZfliJfjgYvjgonjgqrjg5bjgrjjgqfjgq/jg4jjgpLnlJ/miJDjgZfjgb7jgZnjgIJcbiAqXG4gKiDlgKTjga8gTnVtYmVy44CBQm9vbGVhbuOAgVN0cmluZyDjga7jgYTjgZrjgozjgYvjga7lnovjgajjgZfjgaboqZXkvqHjgZXjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIG9iajEgPSBcIm51bT0xMjguNSZmbGFnMT10cnVlJmZsYWcyPWZhbHNlJnN0cj1ob2dlXCI7XG4gKiAgICAgb2JqMS50b09iamVjdCgpOyAvLyA9PiB7bnVtOiAxMjguNSwgZmxhZzE6IHRydWUsIGZsYWcyOiBmYWxzZSwgc3RyOiBcImhvZ2VcIiB9XG4gKiAgICAgXG4gKiAgICAgb2JqMiA9IFwibnVtOi02NC41fGZsYWcxOmZhbHNlfGZsYWcyOnRydWV8c3RyOmZvb1wiO1xuICogICAgIG9iajIudG9PYmplY3QoJ3wnLCAnOicpOyAvLyA9PiB7bnVtOiAtNjQuNSwgZmxhZzE6IGZhbHNlLCBmbGFnMjogdHJ1ZSwgc3RyOiBcImZvb1wiIH1cbiAqXG4gKiBAdGhpcyBTdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBbc2VwPVwiJlwiXSDjgrvjg5Hjg6zjg7zjgr/mloflrZdcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZXE9XCJcIl0g44Kt44O844Go5YCk44Gu57WE44G/5ZCI44KP44Gb44KS6KGo44GZ5paH5a2XXG4gKiBAcmV0dXJuIHtPYmplY3R9IOOCquODluOCuOOCp+OCr+ODiFxuICovXG5mdW5jdGlvbiB0b09iamVjdChzZXAsIGVxKSB7XG4vLyBTdHJpbmcucHJvdG90eXBlLiRtZXRob2QoXCJ0b09iamVjdFwiLCBmdW5jdGlvbihzZXAsIGVxKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxICA9IGVxIHx8ICc9JztcblxuICB2YXIgb2JqID0ge307XG4gIHZhciBwYXJhbXMgPSB0aGlzLnNwbGl0KHNlcCk7XG4gIHBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ciwgaSkge1xuICAvLyBwYXJhbXMuZWFjaChmdW5jdGlvbihzdHIsIGkpIHtcbiAgICB2YXIgcG9zID0gc3RyLmluZGV4T2YoZXEpO1xuICAgIGlmIChwb3MgPiAwKSB7XG4gICAgICB2YXIga2V5ID0gc3RyLnN1YnN0cmluZygwLCBwb3MpO1xuICAgICAgLyoqIEB0eXBlIHN0cmluZ3xudW1iZXJ8Ym9vbGVhbiAqL1xuICAgICAgdmFyIHZhbCA9IHN0ci5zdWJzdHJpbmcocG9zKzEpO1xuICAgICAgdmFyIG51bSA9IE51bWJlcih2YWwpO1xuXG4gICAgICBpZiAoIWlzTmFOKG51bSkpIHtcbiAgICAgICAgdmFsID0gbnVtO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsID09PSAndHJ1ZScpIHtcbiAgICAgICAgdmFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbCA9PT0gJ2ZhbHNlJykge1xuICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5cbnZhciB0YWJsZSA9IFwiMDAwMDAwMDAgNzcwNzMwOTYgRUUwRTYxMkMgOTkwOTUxQkEgMDc2REM0MTkgNzA2QUY0OEYgRTk2M0E1MzUgOUU2NDk1QTMgMEVEQjg4MzIgNzlEQ0I4QTQgRTBENUU5MUUgOTdEMkQ5ODggMDlCNjRDMkIgN0VCMTdDQkQgRTdCODJEMDcgOTBCRjFEOTEgMURCNzEwNjQgNkFCMDIwRjIgRjNCOTcxNDggODRCRTQxREUgMUFEQUQ0N0QgNkREREU0RUIgRjRENEI1NTEgODNEMzg1QzcgMTM2Qzk4NTYgNjQ2QkE4QzAgRkQ2MkY5N0EgOEE2NUM5RUMgMTQwMTVDNEYgNjMwNjZDRDkgRkEwRjNENjMgOEQwODBERjUgM0I2RTIwQzggNEM2OTEwNUUgRDU2MDQxRTQgQTI2NzcxNzIgM0MwM0U0RDEgNEIwNEQ0NDcgRDIwRDg1RkQgQTUwQUI1NkIgMzVCNUE4RkEgNDJCMjk4NkMgREJCQkM5RDYgQUNCQ0Y5NDAgMzJEODZDRTMgNDVERjVDNzUgRENENjBEQ0YgQUJEMTNENTkgMjZEOTMwQUMgNTFERTAwM0EgQzhENzUxODAgQkZEMDYxMTYgMjFCNEY0QjUgNTZCM0M0MjMgQ0ZCQTk1OTkgQjhCREE1MEYgMjgwMkI4OUUgNUYwNTg4MDggQzYwQ0Q5QjIgQjEwQkU5MjQgMkY2RjdDODcgNTg2ODRDMTEgQzE2MTFEQUIgQjY2NjJEM0QgNzZEQzQxOTAgMDFEQjcxMDYgOThEMjIwQkMgRUZENTEwMkEgNzFCMTg1ODkgMDZCNkI1MUYgOUZCRkU0QTUgRThCOEQ0MzMgNzgwN0M5QTIgMEYwMEY5MzQgOTYwOUE4OEUgRTEwRTk4MTggN0Y2QTBEQkIgMDg2RDNEMkQgOTE2NDZDOTcgRTY2MzVDMDEgNkI2QjUxRjQgMUM2QzYxNjIgODU2NTMwRDggRjI2MjAwNEUgNkMwNjk1RUQgMUIwMUE1N0IgODIwOEY0QzEgRjUwRkM0NTcgNjVCMEQ5QzYgMTJCN0U5NTAgOEJCRUI4RUEgRkNCOTg4N0MgNjJERDFEREYgMTVEQTJENDkgOENEMzdDRjMgRkJENDRDNjUgNERCMjYxNTggM0FCNTUxQ0UgQTNCQzAwNzQgRDRCQjMwRTIgNEFERkE1NDEgM0REODk1RDcgQTREMUM0NkQgRDNENkY0RkIgNDM2OUU5NkEgMzQ2RUQ5RkMgQUQ2Nzg4NDYgREE2MEI4RDAgNDQwNDJENzMgMzMwMzFERTUgQUEwQTRDNUYgREQwRDdDQzkgNTAwNTcxM0MgMjcwMjQxQUEgQkUwQjEwMTAgQzkwQzIwODYgNTc2OEI1MjUgMjA2Rjg1QjMgQjk2NkQ0MDkgQ0U2MUU0OUYgNUVERUY5MEUgMjlEOUM5OTggQjBEMDk4MjIgQzdEN0E4QjQgNTlCMzNEMTcgMkVCNDBEODEgQjdCRDVDM0IgQzBCQTZDQUQgRURCODgzMjAgOUFCRkIzQjYgMDNCNkUyMEMgNzRCMUQyOUEgRUFENTQ3MzkgOUREMjc3QUYgMDREQjI2MTUgNzNEQzE2ODMgRTM2MzBCMTIgOTQ2NDNCODQgMEQ2RDZBM0UgN0E2QTVBQTggRTQwRUNGMEIgOTMwOUZGOUQgMEEwMEFFMjcgN0QwNzlFQjEgRjAwRjkzNDQgODcwOEEzRDIgMUUwMUYyNjggNjkwNkMyRkUgRjc2MjU3NUQgODA2NTY3Q0IgMTk2QzM2NzEgNkU2QjA2RTcgRkVENDFCNzYgODlEMzJCRTAgMTBEQTdBNUEgNjdERDRBQ0MgRjlCOURGNkYgOEVCRUVGRjkgMTdCN0JFNDMgNjBCMDhFRDUgRDZENkEzRTggQTFEMTkzN0UgMzhEOEMyQzQgNEZERkYyNTIgRDFCQjY3RjEgQTZCQzU3NjcgM0ZCNTA2REQgNDhCMjM2NEIgRDgwRDJCREEgQUYwQTFCNEMgMzYwMzRBRjYgNDEwNDdBNjAgREY2MEVGQzMgQTg2N0RGNTUgMzE2RThFRUYgNDY2OUJFNzkgQ0I2MUIzOEMgQkM2NjgzMUEgMjU2RkQyQTAgNTI2OEUyMzYgQ0MwQzc3OTUgQkIwQjQ3MDMgMjIwMjE2QjkgNTUwNTI2MkYgQzVCQTNCQkUgQjJCRDBCMjggMkJCNDVBOTIgNUNCMzZBMDQgQzJEN0ZGQTcgQjVEMENGMzEgMkNEOTlFOEIgNUJERUFFMUQgOUI2NEMyQjAgRUM2M0YyMjYgNzU2QUEzOUMgMDI2RDkzMEEgOUMwOTA2QTkgRUIwRTM2M0YgNzIwNzY3ODUgMDUwMDU3MTMgOTVCRjRBODIgRTJCODdBMTQgN0JCMTJCQUUgMENCNjFCMzggOTJEMjhFOUIgRTVENUJFMEQgN0NEQ0VGQjcgMEJEQkRGMjEgODZEM0QyRDQgRjFENEUyNDIgNjhEREIzRjggMUZEQTgzNkUgODFCRTE2Q0QgRjZCOTI2NUIgNkZCMDc3RTEgMThCNzQ3NzcgODgwODVBRTYgRkYwRjZBNzAgNjYwNjNCQ0EgMTEwMTBCNUMgOEY2NTlFRkYgRjg2MkFFNjkgNjE2QkZGRDMgMTY2Q0NGNDUgQTAwQUUyNzggRDcwREQyRUUgNEUwNDgzNTQgMzkwM0IzQzIgQTc2NzI2NjEgRDA2MDE2RjcgNDk2OTQ3NEQgM0U2RTc3REIgQUVEMTZBNEEgRDlENjVBREMgNDBERjBCNjYgMzdEODNCRjAgQTlCQ0FFNTMgREVCQjlFQzUgNDdCMkNGN0YgMzBCNUZGRTkgQkRCREYyMUMgQ0FCQUMyOEEgNTNCMzkzMzAgMjRCNEEzQTYgQkFEMDM2MDUgQ0RENzA2OTMgNTRERTU3MjkgMjNEOTY3QkYgQjM2NjdBMkUgQzQ2MTRBQjggNUQ2ODFCMDIgMkE2RjJCOTQgQjQwQkJFMzcgQzMwQzhFQTEgNUEwNURGMUIgMkQwMkVGOERcIi5zcGxpdCgnICcpO1xuXG4vKipcbiAqIEBtZXRob2QgdG9DUkMzMlxuICog5paH5a2X5YiX44GuIENSQzMyIOOCkuioiOeul+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgXCJwaGluYS5qc1wiLnRvQ1JDMzIoKTsgLy8gPT4gMjY3NjMyNzM5NFxuICpcbiAqIEB0aGlzIFN0cmluZ1xuICogQHJldHVybiB7TnVtYmVyfSBDUkMzMiDjg4/jg4Pjgrfjg6XlgKRcbiAqL1xuZnVuY3Rpb24gdG9DUkMzMigpIHtcbi8vIFN0cmluZy5wcm90b3R5cGUuJG1ldGhvZChcInRvQ1JDMzJcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBjcmMgPSAwLCB4PTAsIHk9MDtcbiAgXG4gIGNyYyA9IGNyYyBeICgtMSk7XG4gIGZvciAodmFyIGk9MCwgaVRvcD10aGlzLmxlbmd0aDsgaTxpVG9wOyArK2kpIHtcbiAgICB5ID0gKGNyYyBeIHRoaXMuY2hhckNvZGVBdChpKSkgJiAweGZmO1xuICAgIHggPSBOdW1iZXIoXCIweFwiICsgdGFibGVbeV0pO1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4geDtcbiAgfVxuICBcbiAgcmV0dXJuIChjcmMgXiAoLTEpKSA+Pj4gMDtcbn1cblxudmFyIHN0cmluZ0V4dGVuc2lvbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgZm9ybWF0OiBmb3JtYXQsXG4gIGVhY2g6IGVhY2gsXG4gIHRyaW06IHRyaW0sXG4gIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gIGNhcGl0YWxpemVGaXJzdExldHRlcjogY2FwaXRhbGl6ZUZpcnN0TGV0dGVyLFxuICB0b0Rhc2g6IHRvRGFzaCxcbiAgdG9IYXNoOiB0b0hhc2gsXG4gIHBhZGRpbmc6IHBhZGRpbmcsXG4gIHBhZGRpbmdMZWZ0OiBwYWRkaW5nTGVmdCxcbiAgcGFkZGluZ1JpZ2h0OiBwYWRkaW5nUmlnaHQsXG4gIHF1b3RlbWV0YTogcXVvdGVtZXRhLFxuICByZXBlYXQ6IHJlcGVhdCxcbiAgY291bnQ6IGNvdW50LFxuICBpbmNsdWRlOiBpbmNsdWRlLFxuICB0b0FycmF5OiB0b0FycmF5LFxuICB0b09iamVjdDogdG9PYmplY3QsXG4gIHRvQ1JDMzI6IHRvQ1JDMzJcbn0pO1xuXG4vKipcbiAqIEBjbGFzcyBnbG9iYWwuT2JqZWN0XG4gKiBPYmplY3Tjga7mi6HlvLVcbiAqL1xuXG4vKipcbiAqIOmWouaVsOOCkui/veWKoFxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSBuYW1lIG5hbWVcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gJG1ldGhvZChuYW1lLCBmbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgIHZhbHVlOiBmbixcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHNldHRlclxuICog44K744OD44K/44O844KS5a6a576p44GZ44KLXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sfSBuYW1lXG4gKiBAcGFyYW0ge2FueX0gZm5cbiAqL1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKFwic2V0dGVyXCIsIGZ1bmN0aW9uKG5hbWUsIGZuKXtcbmZ1bmN0aW9uIHNldHRlcihuYW1lLCBmbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgIHNldDogZm4sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB9KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGdldHRlclxuICog44Ky44OD44K/44O844KS5a6a576p44GZ44KLXG4gKiBcbiAqIEB0aGlzIHtPYmplY3R9XG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IHN5bWJvbH0gbmFtZVxuICogQHBhcmFtIHthbnl9IGZuXG4gKi9cbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcImdldHRlclwiLCBmdW5jdGlvbihuYW1lLCBmbil7XG5mdW5jdGlvbiBnZXR0ZXIobmFtZSwgZm4pIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICBnZXQ6IGZuLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgfSk7XG59XG5cbi8qKlxuICogQG1ldGhvZCBhY2Nlc3NvclxuICog44Ki44Kv44K744OD44K1KOOCu+ODg+OCv+ODvC/jgrLjg4Pjgr/jg7wp44KS5a6a576p44GZ44KLXG4gKiBcbiAqIEB0aGlzIE9iamVjdFxuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2x9IG5hbWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9waGluYScpLkFjY2Vzc29yRXh0ZW5kT2JqZWN0fSBwYXJhbVxuICovXG4vLyBPYmplY3QucHJvdG90eXBlLiRtZXRob2QoXCJhY2Nlc3NvclwiLCBmdW5jdGlvbihuYW1lLCBwYXJhbSkge1xuZnVuY3Rpb24gYWNjZXNzb3IobmFtZSwgcGFyYW0pIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICBzZXQ6IHBhcmFtW1wic2V0XCJdLFxuICAgIGdldDogcGFyYW1bXCJnZXRcIl0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB9KTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGZvckluXG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jnlKjjg6vjg7zjg5flh6bnkIZcbiAqIFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7YW55fSBzZWxmXG4gKi9cbmZ1bmN0aW9uIGZvckluKGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG5cbiAgT2JqZWN0LmtleXModGhpcykuZm9yRWFjaChmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgdmFyIHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgZm4uY2FsbChzZWxmLCBrZXksIHZhbHVlLCBpbmRleCk7XG4gIH0sIHRoaXMpO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2QgICRleHRlbmRcbiAqIOS7luOBruODqeOCpOODluODqeODquOBqOertuWQiOOBl+OBoeOCg+OBhuOBruOBpyBleHRlbmQgLT4gJGV4dGVuZCDjgajjgZfjgb7jgZfjgZ9cbiAqL1xuZnVuY3Rpb24gJGV4dGVuZCgpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiRleHRlbmRcIiwgZnVuY3Rpb24oKSB7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgIHRoaXNbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kICAkc2FmZVxuICog5a6J5YWo5ouh5by1XG4gKiDkuIrmm7jjgY3jgZfjgarjgYRcbiAqL1xuZnVuY3Rpb24gJHNhZmUoc291cmNlKSB7XG4vLyBPYmplY3QucHJvdG90eXBlLiRtZXRob2QoXCIkc2FmZVwiLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcmd1bWVudHMsIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKHRoaXNbcHJvcGVydHldID09PSB1bmRlZmluZWQpIHRoaXNbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kICR3YXRjaFxuICogXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGtleSAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gY2FsbGJhY2sgIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge3ZvaWR9ICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uICR3YXRjaChrZXksIGNhbGxiYWNrKSB7XG4vLyBPYmplY3QucHJvdG90eXBlLiRtZXRob2QoJyR3YXRjaCcsIGZ1bmN0aW9uKGtleSwgY2FsbGJhY2spIHtcbiAgdmFyIHRhcmdldCA9IHRoaXM7XG4gIHZhciBkZXNjcmlwdG9yID0gbnVsbDtcblxuICB3aGlsZSh0YXJnZXQpIHtcbiAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0YXJnZXQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgfVxuXG4gIC8vIOOBmeOBp+OBq+OCouOCr+OCu+ODg+OCteODvOOBqOOBl+OBpuWtmOWcqOOBmeOCi+WgtOWQiFxuICBpZiAoZGVzY3JpcHRvcikge1xuICAgIC8vIOODh+ODvOOCv+ODh+OCo+OCueOCr+ODquODl+OCv+OBruWgtOWQiFxuICAgIGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB0ZW1wS2V5ID0gJ19fJyArIGtleTtcbiAgICAgIHZhciB0ZW1wVmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgIHRoaXNbdGVtcEtleV0gPSB0ZW1wVmFsdWU7XG5cbiAgICAgIGFjY2Vzc29yLmNhbGwodGhpcywga2V5LCB7XG4gICAgICAvLyB0aGlzLmFjY2Vzc29yKGtleSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RlbXBLZXldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICB2YXIgb2xkID0gdGhpc1t0ZW1wS2V5XTtcbiAgICAgICAgICB0aGlzW3RlbXBLZXldID0gdjtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHYsIG9sZCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8g44Ki44Kv44K744K144OH44Kj44K544Kv44Oq44OX44K/44Gu5aC05ZCIXG4gICAgZWxzZSB7XG4gICAgICBhY2Nlc3Nvci5jYWxsKHRoaXMsIGtleSwge1xuICAgICAgLy8gdGhpcy5hY2Nlc3NvcihrZXksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvci5nZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgdmFyIG9sZCA9IGRlc2NyaXB0b3IuZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgZGVzY3JpcHRvci5zZXQuY2FsbCh0aGlzLCB2KTtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHYsIG9sZCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIGFjY2Vzc2tleSA9ICdfXycgKyBrZXk7XG5cbiAgICBhY2Nlc3Nvci5jYWxsKHRoaXMsIGtleSwge1xuICAgIC8vIHRoaXMuYWNjZXNzb3Ioa2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1thY2Nlc3NrZXldO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICB2YXIgb2xkID0gdGhpc1thY2Nlc3NrZXldO1xuICAgICAgICB0aGlzW2FjY2Vzc2tleV0gPSB2O1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHYsIG9sZCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+ODqeOCpOODluODqeODquWGheOBp+OBr+acquS9v+eUqFxuLy8gPT09PT09PT09PVxuXG4vKipcbiAqIEBtZXRob2QgcHJvcGVydHlcbiAqIOWkieaVsOOCkui/veWKoFxuICogXG4gKiBAcGFyYW0gICB7U3RyaW5nfSBuYW1lIG5hbWVcbiAqIEBwYXJhbSAgIHtPYmplY3R9IHZhbFxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShuYW1lLCB2YWwpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogQG1ldGhvZCAkZ2V0XG4gKiDjg5HjgrnmjIflrprjgaflgKTjgpLlj5blvpdcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICovXG5mdW5jdGlvbiAkZ2V0KGtleSkge1xuLy8gT2JqZWN0LnByb3RvdHlwZS4kbWV0aG9kKCckZ2V0JywgZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiBrZXkuc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24odCwgdikge1xuICAgIHJldHVybiB0ICYmIHRbdl07XG4gIH0sIHRoaXMpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgJHNldFxuICog44OR44K55oyH5a6a44Gn5YCk44KS6Kit5a6aXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICovXG5mdW5jdGlvbiAkc2V0KGtleSwgdmFsdWUpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZCgnJHNldCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAga2V5LnNwbGl0KCcuJykucmVkdWNlKGZ1bmN0aW9uKHQsIHYsIGksIGFycikge1xuICAgIGlmIChpID09PSAoYXJyLmxlbmd0aC0xKSkge1xuICAgICAgdFt2XSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmICghdFt2XSkgdFt2XSA9IHt9O1xuICAgICAgcmV0dXJuIHRbdl07XG4gICAgfVxuICB9LCB0aGlzKTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kICRoYXNcbiAqIOOBneOBruODl+ODreODkeODhuOCo+OCkuaMgeOBo+OBpuOBhOOCi+OBi+OCkuWIpOWumuOBmeOCi1xuICogXG4gKiBAcGFyYW0ge2FueX0ga2V5XG4gKi9cbmZ1bmN0aW9uICRoYXMoa2V5KSB7XG4vLyBPYmplY3QucHJvdG90eXBlLiRtZXRob2QoXCIkaGFzXCIsIGZ1bmN0aW9uKGtleSkge1xuICByZXR1cm4gdGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgICRzdHJpY3RcbiAqIOWOs+agvOaLoeW8tVxuICog44GZ44Gn44Gr44GC44Gj44Gf5aC05ZCI44Gv6K2m5ZGKXG4gKi9cbmZ1bmN0aW9uICRzdHJpY3Qoc291cmNlKSB7XG4vLyBPYmplY3QucHJvdG90eXBlLiRtZXRob2QoXCIkc3RyaWN0XCIsIGZ1bmN0aW9uKHNvdXJjZSkge1xuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgZnVuY3Rpb24oc291cmNlKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICBjb25zb2xlLmFzc2VydCghdGhpc1twcm9wZXJ0eV0sIGZvcm1hdC5jYWxsKFwidG0gZXJyb3I6IHswfSBpcyBBbHJlYWR5XCIsIHByb3BlcnR5KSk7XG4gICAgICAvLyBjb25zb2xlLmFzc2VydCghdGhpc1twcm9wZXJ0eV0sIFwidG0gZXJyb3I6IHswfSBpcyBBbHJlYWR5XCIuZm9ybWF0KHByb3BlcnR5KSk7XG4gICAgICB0aGlzW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCAgJHBpY2tcbiAqIOODlOODg+OCr1xuICovXG5mdW5jdGlvbiAkcGljaygpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiRwaWNrXCIsIGZ1bmN0aW9uKCkge1xuICB2YXIgdGVtcCA9IHt9O1xuXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoa2V5IGluIHRoaXMpIHRlbXBba2V5XSA9IHRoaXNba2V5XTtcbiAgfSwgdGhpcyk7XG5cbiAgcmV0dXJuIHRlbXA7XG59XG5cbi8qKlxuICogQG1ldGhvZCAgJG9taXRcbiAqIOOCquODn+ODg+ODiFxuICovXG5mdW5jdGlvbiAkb21pdCgpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiRvbWl0XCIsIGZ1bmN0aW9uKCkge1xuICB2YXIgdGVtcCA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiB0aGlzKSB7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJndW1lbnRzLCBrZXkpID09IC0xKSB7XG4gICAgICB0ZW1wW2tleV0gPSB0aGlzW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRlbXA7XG59XG5cbi8qKlxuICogQG1ldGhvZCAgJHRvQXJyYXlcbiAqIOmFjeWIl+WMllxuICovXG5mdW5jdGlvbiAkdG9BcnJheSgpIHtcbi8vIE9iamVjdC5wcm90b3R5cGUuJG1ldGhvZChcIiR0b0FycmF5XCIsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcyk7XG59XG5cbi8qKlxuICogW29ic2VydmUgZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHthbnl9ICAgb2JqICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge3ZvaWR9ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBvYnNlcnZlKG9iaiwgY2FsbGJhY2spIHtcbi8vIE9iamVjdC4kbWV0aG9kKCdvYnNlcnZlJywgZnVuY3Rpb24ob2JqLCBjYWxsYmFjaykge1xuICBpZiAoT2JqZWN0WydvYnNlcnZlJ10pIHJldHVybiBPYmplY3RbJ29ic2VydmUnXS5jYWxsKG9iaiwgY2FsbGJhY2spOyAvLyBhZGRcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHRlbXBLZXkgPSAnX18nICsga2V5O1xuICAgIHZhciB0ZW1wVmFsdWUgPSBvYmpba2V5XTtcbiAgICBvYmpbdGVtcEtleV0gPSB0ZW1wVmFsdWU7XG4gICAgXG4gICAgYWNjZXNzb3IuY2FsbChvYmosIGtleSwge1xuICAgIC8vIG9iai5hY2Nlc3NvcihrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RlbXBLZXldO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICB0aGlzW3RlbXBLZXldID0gdjtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFt1bm9ic2VydmUgZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHthbnl9ICAgb2JqICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge3ZvaWR9ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiB1bm9ic2VydmUob2JqLCBjYWxsYmFjaykge1xuLy8gT2JqZWN0LiRtZXRob2QoJ3Vub2JzZXJ2ZScsIGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcbiAgaWYgKE9iamVjdFsndW5vYnNlcnZlJ10pIHJldHVybiBPYmplY3RbJ3Vub2JzZXJ2ZSddLmNhbGwob2JqLCBjYWxsYmFjayk7IC8vIGFkZFxuICBjb25zb2xlLmFzc2VydChmYWxzZSk7XG59XG5cbnZhciBvYmplY3RFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gICRtZXRob2Q6ICRtZXRob2QsXG4gIHNldHRlcjogc2V0dGVyLFxuICBnZXR0ZXI6IGdldHRlcixcbiAgYWNjZXNzb3I6IGFjY2Vzc29yLFxuICBmb3JJbjogZm9ySW4sXG4gICRleHRlbmQ6ICRleHRlbmQsXG4gICRzYWZlOiAkc2FmZSxcbiAgJHdhdGNoOiAkd2F0Y2gsXG4gIHByb3BlcnR5OiBwcm9wZXJ0eSxcbiAgJGdldDogJGdldCxcbiAgJHNldDogJHNldCxcbiAgJGhhczogJGhhcyxcbiAgJHN0cmljdDogJHN0cmljdCxcbiAgJHBpY2s6ICRwaWNrLFxuICAkb21pdDogJG9taXQsXG4gICR0b0FycmF5OiAkdG9BcnJheSxcbiAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgdW5vYnNlcnZlOiB1bm9ic2VydmVcbn0pO1xuXG4vKipcbiAqIEBjbGFzcyBnbG9iYWwuTWF0aFxuICogIyDmi6HlvLXjgZfjgZ8gTWF0aCDjgq/jg6njgrlcbiAqIOaVsOWtpueahOOBquWHpueQhuOCkuaJseOBhiBNYXRoIOOCr+ODqeOCueOCkuaLoeW8teOBl+OBpuOBhOOBvuOBmeOAglxuICogXG4gKiDlhajjgaZzdGF0aWPjg6Hjg7Pjg5Djg7zjgafjgZnjgIJcbiAqL1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgY2xhbXBcbiAqIOaMh+WumuOBl+OBn+WApOOCkuaMh+WumuOBl+OBn+evhOWbsuOBq+WPjuOCgeOBn+e1kOaenOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgTWF0aC5jbGFtcCgxMjAsIDAsIDY0MCk7IC8vID0+IDEyMFxuICogICAgIE1hdGguY2xhbXAoOTgwLCAwLCA2NDApOyAvLyA9PiA2NDBcbiAqICAgICBNYXRoLmNsYW1wKC04MCwgMCwgNjQwKTsgLy8gPT4gMFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSDlgKRcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaW4gIOevhOWbsuOBruS4i+mZkFxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCAg56+E5Zuy44Gu5LiK6ZmQXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOS4uOOCgeOBn+e1kOaenOOBruWApFxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuICh2YWx1ZSA8IG1pbikgPyBtaW4gOiAoICh2YWx1ZSA+IG1heCkgPyBtYXggOiB2YWx1ZSApO1xufVxuXG4vKipcbiAqIEBwcm9wZXJ0eSBERUdfVE9fUkFEXG4gKiDluqbjgpLjg6njgrjjgqLjg7PjgavlpInmj5vjgZnjgovjgZ/jgoHjga7lrprmlbDjgafjgZnjgIJcbiAqL1xudmFyIERFR19UT19SQUQgPSBNYXRoLlBJLzE4MDtcblxuLyoqXG4gKiBAcHJvcGVydHkgUkFEX1RPX0RFR1xuICog44Op44K444Ki44Oz44KS5bqm44Gr5aSJ5o+b44GZ44KL44Gf44KB44Gu5a6a5pWw44Gn44GZ44CCXG4gKi9cbnZhciBSQURfVE9fREVHID0gMTgwL01hdGguUEk7XG5cblxuLy8gPT09PT09PT09PVxuLy8g5Lul5LiL44Op44Kk44OW44Op44Oq5YaF44Gn44Gv5pyq5L2/55SoXG4vLyA9PT09PT09PT09XG5cbi8qKlxuICogQHByb3BlcnR5IFBISVxuICog6buE6YeR5q+U44Gn44GZ44CCXG4gKi9cbnZhciBQSEkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgZGVnVG9SYWRcbiAqIOW6puOCkuODqeOCuOOCouODs+OBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgTWF0aC5kZWdUb1JhZCgxODApOyAvLyA9PiAzLjE0MTU5MjY1MzU4OTc5M1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWcg5bqmXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeOCuOOCouODs1xuICovXG5mdW5jdGlvbiBkZWdUb1JhZChkZWcpIHtcbi8vIE1hdGguZGVnVG9SYWQgPSBmdW5jdGlvbihkZWcpIHtcbiAgcmV0dXJuIGRlZyAqIERFR19UT19SQUQ7XG59XG5cbi8qKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCByYWRUb0RlZ1xuICog44Op44K444Ki44Oz44KS5bqm44Gr5aSJ5o+b44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBNYXRoLnJhZFRvRGVnKE1hdGguUEkvNCk7IC8vID0+IDQ1XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCDjg6njgrjjgqLjg7NcbiAqIEByZXR1cm4ge051bWJlcn0g5bqmXG4gKi9cbmZ1bmN0aW9uIHJhZFRvRGVnKHJhZCkge1xuLy8gTWF0aC5yYWRUb0RlZyA9IGZ1bmN0aW9uKHJhZCkge1xuICByZXR1cm4gcmFkICogUkFEX1RPX0RFRztcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIGluc2lkZVxuICog5oyH5a6a44GX44Gf5YCk44GM5oyH5a6a44GX44Gf5YCk44Gu56+E5Zuy44Gr44GC44KL44GL44Gp44GG44GL44KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBNYXRoLmluc2lkZSg5ODAsIDAsIDY0MCk7IC8vID0+IGZhbHNlXG4gKiAgICAgTWF0aC5pbnNpZGUoMTIwLCAwLCA2NDApOyAvLyA9PiB0cnVlXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIOODgeOCp+ODg+OCr+OBmeOCi+WApFxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbiAg56+E5Zuy44Gu5LiL6ZmQXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4ICDnr4Tlm7Ljga7kuIrpmZBcbiAqIEByZXR1cm4ge0Jvb2xlYW59IOevhOWbsuWGheOBq+WApOOBjOOBguOCi+OBi+OBquOBhOOBi1xuICovXG5mdW5jdGlvbiBpbnNpZGUodmFsdWUsIG1pbiwgbWF4KSB7XG4vLyBNYXRoLiRtZXRob2QoXCJpbnNpZGVcIiwgZnVuY3Rpb24odmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAodmFsdWUgPj0gbWluKSAmJiAodmFsdWUpIDw9IG1heDtcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIHJhbmRpbnRcbiAqIOaMh+WumuOBleOCjOOBn+evhOWbsuWGheOBp+ODqeODs+ODgOODoOOBquaVtOaVsOWApOOCkueUn+aIkOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgTWF0aC5yYW5kaW50KC00LCA0KTsgLy8gPT4gLTTjgIEw44CBM+OAgTQg44Gq44GpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbiAg56+E5Zuy44Gu5pyA5bCP5YCkXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4ICDnr4Tlm7Ljga7mnIDlpKflgKRcbiAqIEByZXR1cm4ge051bWJlcn0g44Op44Oz44OA44Og44Gq5pW05pWw5YCkXG4gKi9cbmZ1bmN0aW9uIHJhbmRpbnQobWluLCBtYXgpIHtcbi8vIE1hdGguJG1ldGhvZChcInJhbmRpbnRcIiwgZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkqKG1heC1taW4rMSkgKSArIG1pbjtcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIHJhbmRmbG9hdFxuICog5oyH5a6a44GV44KM44Gf56+E5Zuy5YaF44Gn44Op44Oz44OA44Og44Gq5pWw5YCk44KS55Sf5oiQ44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBNYXRoLnJhbmRmbG9hdCgtNCwgNCk7IC8vID0+IC0yLjc0ODkxOTM4MjQwMDA5Mzcg44Gq44GpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbiAg56+E5Zuy44Gu5pyA5bCP5YCkXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4ICDnr4Tlm7Ljga7mnIDlpKflgKRcbiAqIEByZXR1cm4ge051bWJlcn0g44Op44Oz44OA44Og44Gq5pWw5YCkXG4gKi9cbmZ1bmN0aW9uIHJhbmRmbG9hdChtaW4sIG1heCkge1xuLy8gTWF0aC4kbWV0aG9kKFwicmFuZGZsb2F0XCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpKihtYXgtbWluKSttaW47XG59XG5cbi8qKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCByYW5kYm9vbFxuICog44Op44Oz44OA44Og44Gr55yf5YG95YCk44KS55Sf5oiQ44GX44G+44GZ44CCXG4gKiDlvJXmlbDjgafnmb7liIbnjofjgpLmjIflrprjgZnjgovkuovjgoLjgafjgY3jgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIE1hdGgucmFuZGJvb2woKTsgICAvLyA9PiB0cnVlIOOBvuOBn+OBryBmYWxzZVxuICogICAgIE1hdGgucmFuZGJvb2woODApOyAvLyA9PiA4MCUg44Gu56K6546H44GnIHRydWVcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gcGVyY2VudCAg55yf44Gr44Gq44KL55m+5YiG546HXG4gKiBAcmV0dXJuIHtCb29sZWFufSDjg6njg7Pjg4Djg6DjgarnnJ/lgb3lgKRcbiAqL1xuZnVuY3Rpb24gcmFuZGJvb2wocGVyY2VudCkge1xuLy8gTWF0aC4kbWV0aG9kKFwicmFuZGJvb2xcIiwgZnVuY3Rpb24ocGVyY2VudCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSA8IChwZXJjZW50ID09PSB1bmRlZmluZWQgPyA1MCA6IHBlcmNlbnQpIC8gMTAwO1xufVxuXG52YXIgbWF0aEV4dGVuc2lvbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgY2xhbXA6IGNsYW1wLFxuICBERUdfVE9fUkFEOiBERUdfVE9fUkFELFxuICBSQURfVE9fREVHOiBSQURfVE9fREVHLFxuICBQSEk6IFBISSxcbiAgZGVnVG9SYWQ6IGRlZ1RvUmFkLFxuICByYWRUb0RlZzogcmFkVG9EZWcsXG4gIGluc2lkZTogaW5zaWRlLFxuICByYW5kaW50OiByYW5kaW50LFxuICByYW5kZmxvYXQ6IHJhbmRmbG9hdCxcbiAgcmFuZGJvb2w6IHJhbmRib29sXG59KTtcblxuLypcbiAqIGFycmF5LmpzXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7aW1wb3J0KCcuLi9waGluYScpLkFjY2Vzc29yRXh0ZW5kT2JqZWN0fSBmaXJzdFxuICog5pyA5Yid44Gu6KaB57Sg44KS6L+U44GZ44CB44KC44GX44GP44Gv44Gd44GT44Gr44K744OD44OI44GZ44KLXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbNiwgNSwgMiwgMywgMSwgNF07XG4gKiAgICAgYXJyLmZpcnN0OyAvLyA9PiA2XG4gKi9cbmNvbnN0IGZpcnN0ID0ge1xuLy8gQXJyYXkucHJvdG90eXBlLmFjY2Vzc29yKFwiZmlyc3RcIiwge1xuICAvKiogQHRoaXMgQXJyYXkgKi9cbiAgXCJnZXRcIjogZnVuY3Rpb24oKSAgIHsgcmV0dXJuIHRoaXNbMF07IH0sXG4gIC8qKiBAdGhpcyBBcnJheSAqL1xuICBcInNldFwiOiBmdW5jdGlvbih2KSAgeyB0aGlzWzBdID0gdjsgfVxufTtcblxuLyoqXG4gKiBAdHlwZSB7aW1wb3J0KCcuLi9waGluYScpLkFjY2Vzc29yRXh0ZW5kT2JqZWN0fSBsYXN0XG4gKiDmnIDlvozjga7opoHntKDjgpLov5TjgZnjgIHjgoLjgZfjgY/jga/jgZ3jgZPjgavjgrvjg4Pjg4jjgZnjgotcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFs2LCA1LCAyLCAzLCAxLCA0XTtcbiAqICAgICBhcnIubGFzdDsgLy8gPT4gNFxuICovXG5jb25zdCBsYXN0ID0ge1xuLy8gQXJyYXkucHJvdG90eXBlLmFjY2Vzc29yKFwibGFzdFwiLCB7XG4gIC8qKiBAdGhpcyBBcnJheSAqL1xuICBcImdldFwiOiBmdW5jdGlvbigpICAgeyByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aC0xXTsgfSxcbiAgLyoqIEB0aGlzIEFycmF5ICovXG4gIFwic2V0XCI6IGZ1bmN0aW9uKHYpICB7IHRoaXNbdGhpcy5sZW5ndGgtMV0gPSB2OyB9XG59O1xuXG5cbi8qKlxuICogQG1ldGhvZCBhdFxuICog5oyH5a6a44GX44Gf44Kk44Oz44OH44OD44Kv44K544Gu6KaB57Sg44KS6L+U44GX44G+44GZ77yI44Or44O844OX44O76LKg5pWw44Gu5oyH5a6a5Y+v77yJ44CCXG4gKlxuICog5re75a2X44GM6LKg5pWw44Gu5aC05ZCI44Gv5pyr5bC+44GL44KJ44Gu44Kq44OV44K744OD44OI44Go44G/44Gq44GX44G+44GZ44CC5pyr5bC+44Gu6KaB57Sg44GMIC0xIOeVquebruOBq+OBquOCiuOBvuOBmeOAgiAgXG4gKiDmt7vlrZfjga7ntbblr77lgKTjgYwgQXJyYXkubGVuZ3RoIOS7peS4iuOBruWgtOWQiOOBr+ODq+ODvOODl+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZiddO1xuICogICAgIGFyci5hdCgwKTsgIC8vID0+ICdhJ1xuICogICAgIGFyci5hdCg2KTsgIC8vID0+ICdhJ1xuICogICAgIGFyci5hdCgxMyk7IC8vID0+ICdiJ1xuICogICAgIGFyci5hdCgtMSk7IC8vID0+ICdmJ1xuICogICAgIGFyci5hdCgtOCk7IC8vID0+ICdlJ1xuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gaSDmt7vlrZdcbiAqIEByZXR1cm4ge09iamVjdH0g5re75a2X44Gn5oyH5a6a44GV44KM44Gf6KaB57SgXG4gKi9cbmZ1bmN0aW9uIGF0KGkpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiYXRcIiwgZnVuY3Rpb24oaSkge1xuICBpJT10aGlzLmxlbmd0aDtcbiAgaSs9dGhpcy5sZW5ndGg7XG4gIGklPXRoaXMubGVuZ3RoO1xuICByZXR1cm4gdGhpc1tpXTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGVyYXNlXG4gKiBAY2hhaW5hYmxlXG4gKiDmjIflrprjgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgajkuIDoh7TjgZfjgZ/mnIDliJ3jga7opoHntKDjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFycjEgPSBbJ2EnLCAnYicsICdiJywgJ2MnXTtcbiAqICAgICBhcnIyID0gYXJyMS5lcmFzZSgnYicpOyAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqICAgICBhcnIxID09PSBhcnIyOyAgICAgICAgICAvLyA9PiB0cnVlXG4gKlxuICogQHRoaXMgQXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbG0g5YmK6Zmk44GX44Gf44GE44Kq44OW44K444Kn44Kv44OIXG4gKi9cbmZ1bmN0aW9uIGVyYXNlKGVsbSkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlcmFzZVwiLCBmdW5jdGlvbihlbG0pIHtcbiAgdmFyIGluZGV4ICA9IHRoaXMuaW5kZXhPZihlbG0pO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgY2xlYXJcbiAqIEBjaGFpbmFibGVcbiAqIOiHqui6q+OCkuepuuOBrumFjeWIl+OBq+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzEsIDIsIFszLCA0XV07XG4gKiAgICAgYXJyLmNsZWFyKCk7IC8vID0+IFtdXG4gKiBcbiAqIEB0aGlzIEFycmF5XG4gKi9cbmZ1bmN0aW9uIGNsZWFyKGRlZXApIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiY2xlYXJcIiwgZnVuY3Rpb24oKSB7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjb250YWluc1xuICog5oyH5a6a44GX44Gf6KaB57Sg44GM6YWN5YiX44Gr5ZCr44G+44KM44Gm44GE44KL44GL44KS44OB44Kn44OD44Kv44GX44G+44GZ44CCXG4gKlxuICog5q+U6LyD44Gr44Gv5Y6z5a+G44Gq5ZCM5YCk77yI5LiJ6YeN44Kk44Kz44O844Or5ryU566X5a2QID09PSDjgafkvb/jgo/jgozjgovjga7jgajlkIzjgZjmlrnms5XvvInjgpLnlKjjgYTjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFs2LCA1LCAyLCAzLCAxLCA0XTtcbiAqICAgICBhcnIuY29udGFpbnMoMyk7ICAgICAvLyA9PiB0cnVlXG4gKiAgICAgYXJyLmNvbnRhaW5zKDMsIDQpOyAgLy8gPT4gZmFsc2VcbiAqICAgICBhcnIuY29udGFpbnMoMywgLTQpOyAvLyA9PiB0cnVlXG4gKiAgICAgYXJyLmNvbnRhaW5zKFwiNlwiKTsgICAvLyA9PiBmYWxzZVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gaXRlbSDjg4Hjgqfjg4Pjgq/jgZnjgovjgqrjg5bjgrjjgqfjgq/jg4hcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZnJvbUluZGV4PTBdIOaknOe0ouOCkuWni+OCgeOCi+S9jee9ruOAguiyoOaVsOOCkuaMh+WumuOBl+OBn+WgtOWQiOOBr+acq+WwvuOBi+OCieOBruOCquODleOCu+ODg+ODiOOBqOimi+OBquOBl+OBvuOBmeOAglxuICogQHJldHVybiB7Qm9vbGVhbn0g44OB44Kn44OD44Kv44Gu57WQ5p6cXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0sIGZyb21JbmRleCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJjb250YWluc1wiLCBmdW5jdGlvbihpdGVtLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtLCBmcm9tSW5kZXgpICE9IC0xO1xufVxuXG4vKipcbiAqIEBtZXRob2QgY2xvbmVcbiAqIOiHqui6q+OBruOCs+ODlOODvOOCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyMSA9IFsxLCAyLCBbMywgNF1dO1xuICogICAgIGFycjIgPSBhcnIxLmNsb25lKCk7ICAgICAgLy8gPT4gWzEsIDIsIFszLCA0XV1cbiAqICAgICBhcnIxWzJdID09PSBhcnIyWzJdOyAgICAgIC8vID0+IHRydWVcbiAqICAgICBhcnIxWzJdWzBdID0gOTtcbiAqICAgICBhcnIyOyAgICAgICAgICAgICAgICAgICAgIC8vID0+IFsxLCAyLCBbOSwgNF1dXG4gKiAgICAgYXJyMSA9IFsxLCAyLCBbMywgNF1dO1xuICogICAgIGFycjIgPSBhcnIxLmNsb25lKHRydWUpOyAgLy8gPT4gWzEsIDIsIFszLCA0XV1cbiAqICAgICBhcnIxWzJdID09PSBhcnIyWzJdOyAgICAgIC8vID0+IGZhbHNlXG4gKiAgICAgYXJyMVsyXVswXSA9IDk7XG4gKiAgICAgYXJyMjsgICAgICAgICAgICAgICAgICAgICAvLyA9PiBbMSwgMiwgWzMsIDRdXVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtkZWVwPWZhbHNlXSDphY3liJfjga7jg43jgrnjg4jjgpLjgZ/jganjgaPjgabopIfoo73jgZnjgovjgYvjganjgYbjgYtcbiAqIEByZXR1cm4ge0FycmF5fSDmlrDjgZfjgYTphY3liJdcbiAqL1xuZnVuY3Rpb24gY2xvbmUoZGVlcCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJjbG9uZVwiLCBmdW5jdGlvbihkZWVwKSB7XG4gIGlmIChkZWVwID09PSB0cnVlKSA7XG4gIGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbWV0aG9kIHJhbmdlXG4gKiBAY2hhaW5hYmxlXG4gKiDoh6rouqvjgpLnrYnlt67mlbDliJfvvIjkuIDlrprplpPpmpTjga7mlbTmlbDlgKTjga7liJfvvInjgajjgZfjgb7jgZnjgIJcbiAqXG4gKiAtIOW8leaVsOOBjDHjgaTjga7loLTlkIjjgIEw772eZW5k77yIZW5k5ZCr44G+44Ga77yJ44Gu5pW05pWw44Gu6YWN5YiX44Gn44GZ44CCICBcbiAqIC0g5byV5pWw44GMMuOBpOOBruWgtOWQiOOAgXN0YXJ0772eZW5k77yIZW5k5ZCr44G+44Ga77yJ44Gu5pW05pWw44Gu6YWN5YiX44Gn44GZ44CCICBcbiAqIC0g5byV5pWw44GMM+OBpOOBruWgtOWQiOOAgXN0YXJ0772eZW5k77yIZW5k5ZCr44G+44Ga77yJ44GL44GkIHN0YXJ0ICsgbiAqIHN0ZXAgKG7jga/mlbTmlbAp44KS5rqA44Gf44GZ5pW05pWw44Gu6YWN5YiX44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbXTtcbiAqICAgICBhcnIucmFuZ2UoNCk7ICAgICAgICAvLyA9PiBbMCwgMSwgMiwgM11cbiAqICAgICBhcnIucmFuZ2UoMiwgNSk7ICAgICAvLyA9PiBbMiwgMywgNF1cbiAqICAgICBhcnIucmFuZ2UoMiwgMTQsIDUpOyAvLyA9PiBbMiwgNywgMTJdXG4gKiAgICAgYXJyLnJhbmdlKDIsIC0zKTsgICAgLy8gPT4gWzIsIDEsIDAsIC0xLCAtMl1cbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IOacgOWIneOBruWApO+8iOODh+ODleOCqeODq+ODiOOBryAw77yJXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kIOacgOW+jOOBruWApO+8iOecgeeVpeS4jeWPr++8iVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzdGVwXSDplpPpmpTjgILjg4fjg5Xjgqnjg6vjg4jlgKTjga8x44G+44Gf44GvLTFcbiAqL1xuZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJyYW5nZVwiLCBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gIGNsZWFyLmNhbGwodGhpcyk7XG4gIC8vIHRoaXMuY2xlYXIoKTtcbiAgXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8c3RhcnQ7ICsraSkgdGhpc1tpXSA9IGk7XG4gIH1cbiAgZWxzZSBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZm9yICh2YXIgaT1zdGFydCwgaW5kZXg9MDsgaTxlbmQ7IGkrPXN0ZXAsICsraW5kZXgpIHtcbiAgICAgICAgdGhpc1tpbmRleF0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBzdGVwID0gc3RlcCB8fCAtMTtcbiAgICBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGZvciAodmFyIGk9c3RhcnQsIGluZGV4PTA7IGk+ZW5kOyBpKz1zdGVwLCArK2luZGV4KSB7XG4gICAgICAgIHRoaXNbaW5kZXhdID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0aGlzO1xufVxuXG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+ODqeOCpOODluODqeODquWGheOBp+OBr+acquS9v+eUqFxuLy8gPT09PT09PT09PVxuXG5cbi8qKlxuICogQG1ldGhvZCBlcXVhbHNcbiAqIOa4oeOBleOCjOOBn+mFjeWIl+OBqOetieOBl+OBhOOBi+OBqeOBhuOBi+OCkuODgeOCp+ODg+OCr+OBl+OBvuOBmeOAglxuICpcbiAqIOimgee0oOWQjOWjq+OCkiA9PT0g44Gn5q+U6LyD44GX44G+44GZ44CC6KaB57Sg44Gr6YWN5YiX44GM5ZCr44G+44KM44Gm44GE44KL5aC05ZCI44GvIHtAbGluayAjZGVlcEVxdWFsc30g44KS5L2/55So44GX44Gm44GP44Gg44GV44GE44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIxID0gWzYsIDUsIDIsIDMsIDEsIDRdO1xuICogICAgIGFycjEuZXF1YWxzKFs2LCA1LCAyLCAzLCAxLCA0XSk7ICAgICAgIC8vID0+IHRydWVcbiAqICAgICBhcnIyID0gWzYsIDUsIDIsIFszLCAxXSwgNF07XG4gKiAgICAgYXJyMi5lcXVhbHMoWzYsIDUsIDIsIFszLCAxXSwgNF0pOyAgICAgLy8gPT4gZmFsc2VcbiAqICAgICBhcnIyLmRlZXBFcXVhbHMoWzYsIDUsIDIsIFszLCAxXSwgNF0pOyAvLyA9PiB0cnVlXG4gKlxuICogQHRoaXMgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDmr5TovIPjgZnjgovlr77osaHjga7phY3liJdcbiAqIEByZXR1cm4ge0Jvb2xlYW59IOODgeOCp+ODg+OCr+OBrue1kOaenFxuICovXG5mdW5jdGlvbiBlcXVhbHMoYXJyKSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImVxdWFsc1wiLCBmdW5jdGlvbihhcnIpIHtcbiAgLy8g6ZW344GV44OB44Kn44OD44KvXG4gIGlmICh0aGlzLmxlbmd0aCAhPT0gYXJyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBcbiAgZm9yICh2YXIgaT0wLGxlbj10aGlzLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgIGlmICh0aGlzW2ldICE9PSBhcnJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGRlZXBFcXVhbHNcbiAqIOODjeOCueODiOOBleOCjOOBpuOBhOOCi+mFjeWIl+OCkuWQq+OCgeOAgea4oeOBleOCjOOBn+mFjeWIl+OBqOetieOBl+OBhOOBi+OBqeOBhuOBi+OCkuODgeOCp+ODg+OCr+OBl+OBvuOBmeOAglxuICpcbiAqIOKAu2VxdWFsc0RlZXAg44Gr44GZ44KL44GL5qSc6KiOLiAoSmF2YSDjgafjga8gZGVlcEVxdWFscyDjgarjga7jgafjgajjgorjgYLjgYjjgZrlkIjjgo/jgZvjgajjgY8pXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbNiwgNSwgMiwgWzMsIDFdLCA0XTtcbiAqICAgICBhcnIuZXF1YWxzKFs2LCA1LCAyLCBbMywgMV0sIDRdKTsgICAgIC8vID0+IGZhbHNlXG4gKiAgICAgYXJyLmRlZXBFcXVhbHMoWzYsIDUsIDIsIFszLCAxXSwgNF0pOyAvLyA9PiB0cnVlXG4gKlxuICogQHRoaXMgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDmr5TovIPjgZnjgovlr77osaHjga7phY3liJdcbiAqIEByZXR1cm4ge0Jvb2xlYW59IOODgeOCp+ODg+OCr+OBrue1kOaenFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWxzKGFycikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJkZWVwRXF1YWxzXCIsIGZ1bmN0aW9uKGFycikge1xuICAvLyDplbfjgZXjg4Hjgqfjg4Pjgq9cbiAgaWYgKHRoaXMubGVuZ3RoICE9PSBhcnIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIFxuICBmb3IgKHZhciBpPTAsbGVuPXRoaXMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgdmFyIHJlc3VsdCA9ICh0aGlzW2ldLmRlZXBFcXVhbHMpID8gdGhpc1tpXS5kZWVwRXF1YWxzKGFycltpXSkgOiAodGhpc1tpXSA9PT0gYXJyW2ldKTtcbiAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHN3YXBcbiAqIEBjaGFpbmFibGVcbiAqIGEg55Wq55uu44Gu6KaB57SgIOOBqCBiIOeVquebruOBruimgee0oOOCkuWFpeOCjOabv+OBiOOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyMSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICogICAgIGFycjIgPSBhcnIxLnN3YXAoMCwgMyk7IC8vID0+IFsnZCcsICdiJywgJ2MnLCAnYSddXG4gKiAgICAgYXJyMSA9PT0gYXJyMjsgICAgICAgICAgLy8gPT4gdHJ1ZVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gYSAg44Kk44Oz44OH44OD44Kv44K5XG4gKiBAcGFyYW0ge051bWJlcn0gYiAg44Kk44Oz44OH44OD44Kv44K5XG4gKi9cbmZ1bmN0aW9uIHN3YXAoYSwgYikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJzd2FwXCIsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHRlbXAgPSB0aGlzW2FdO1xuICB0aGlzW2FdID0gdGhpc1tiXTtcbiAgdGhpc1tiXSA9IHRlbXA7XG4gIFxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGVyYXNlQWxsXG4gKiBAY2hhaW5hYmxlXG4gKiDmjIflrprjgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgajkuIDoh7TjgZfjgZ/jgZnjgbnjgabjga7opoHntKDjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFycjEgPSBbJ2EnLCAnYicsICdiJywgJ2MnXTtcbiAqICAgICBhcnIyID0gYXJyMS5lcmFzZUFsbCgnYicpOyAvLyA9PiBbJ2EnLCAnYyddXG4gKiAgICAgYXJyMSA9PT0gYXJyMjsgICAgICAgICAgICAgLy8gPT4gdHJ1ZVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gZWxtIOWJiumZpOOBl+OBn+OBhOOCquODluOCuOOCp+OCr+ODiFxuICovXG5mdW5jdGlvbiBlcmFzZUFsbChlbG0pIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiZXJhc2VBbGxcIiwgZnVuY3Rpb24oZWxtKSB7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBpZiAodGhpc1tpXSA9PSBlbG0pIHtcbiAgICAgIHRoaXMuc3BsaWNlKGktLSwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2QgZXJhc2VJZlxuICogQGNoYWluYWJsZVxuICog5ZCE6KaB57Sg44KS5byV5pWw44Gr44GX44Gm6Zai5pWw44KS5a6f6KGM44GX44CB44Gd44Gu5YCk44GM55yf44Go44Gq44KL77yI77yd5p2h5Lu244Gr44Oe44OD44OB44GZ44KL77yJ5pyA5Yid44Gu6KaB57Sg44KS5YmK6Zmk44GX44G+44GZ44CCXG4gKlxuICog44Gp44Gu6KaB57Sg44KC44Oe44OD44OB44GX44Gq44GR44KM44Gw5L2V44KC6LW344GN44G+44Gb44KT44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbJ2ZvbycsICdiYXInLCAnaG9nZScsICdmdWdhJ107XG4gKiAgICAgYXJyLmVyYXNlSWYoIGZ1bmN0aW9uKGVsbSkge1xuICogICAgICAgcmV0dXJuIGVsbS5pbmRleE9mKCdvJykgPj0gMDtcbiAqICAgICB9KTtcbiAqICAgICAvLyA9PiBbJ2JhcicsICdob2dlJywgJ2Z1Z2EnXVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDlkITopoHntKDjgavlr77jgZfjgablrp/ooYzjgZnjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAqL1xuZnVuY3Rpb24gZXJhc2VJZihmbikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlcmFzZUlmXCIsIGZ1bmN0aW9uKGZuKSB7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBpZiAoIGZuKHRoaXNbaV0sIGksIHRoaXMpICkge1xuICAgICAgdGhpcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBlcmFzZUlmQWxsXG4gKiBAY2hhaW5hYmxlXG4gKiDlkITopoHntKDjgpLlvJXmlbDjgavjgZfjgabplqLmlbDjgpLlrp/ooYzjgZfjgIHjgZ3jga7lgKTjgYznnJ/jgajjgarjgovvvIjvvJ3mnaHku7bjgavjg57jg4Pjg4HjgZnjgovvvInjgZnjgbnjgabjga7opoHntKDjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAqXG4gKiDjganjga7opoHntKDjgoLjg57jg4Pjg4HjgZfjgarjgZHjgozjgbDkvZXjgoLotbfjgY3jgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsnZm9vJywgJ2JhcicsICdob2dlJywgJ2Z1Z2EnXTtcbiAqICAgICBhcnIuZXJhc2VJZkFsbCggZnVuY3Rpb24oZWxtKSB7XG4gKiAgICAgICByZXR1cm4gZWxtLmluZGV4T2YoJ28nKSA+PSAwO1xuICogICAgIH0pO1xuICogICAgIC8vID0+IFsnYmFyJywgJ2Z1Z2EnXVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDlkITopoHntKDjgavlr77jgZfjgablrp/ooYzjgZnjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAqL1xuZnVuY3Rpb24gZXJhc2VJZkFsbChmbikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlcmFzZUlmQWxsXCIsIGZ1bmN0aW9uKGZuKSB7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBpZiAoIGZuKHRoaXNbaV0sIGksIHRoaXMpICkge1xuICAgICAgdGhpcy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgIGxlbi0tO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHJhbmRvbVxuICog6YWN5YiX44GL44KJ44Op44Oz44OA44Og44GrMeOBpOWPluOCiuWHuuOBl+OBn+imgee0oOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqIOWPluOCiuWHuuOBmeevhOWbsuOCkuOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBmeOCi+OBk+OBqOOCguOBp+OBjeOBvuOBmeOAgiAgXG4gKiB7QGxpbmsgI3BpY2t1cH3jgIF7QGxpbmsgI2xvdH0g44Go5ZCM44GY44Gn44GZ44CCICBcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsnZm9vJywgJ2JhcicsICdob2dlJywgJ2Z1Z2EnXTtcbiAqICAgICBhcnIucmFuZG9tKDIsIDMpOyAgLy8gPT4gJ2hvZ2UnIOOBvuOBn+OBryAnZnVnYSdcbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49MF0g44Kk44Oz44OH44OD44Kv44K544Gu5LiL6ZmQXG4gKiBAcGFyYW0ge051bWJlcn0gW21heD3phY3liJfjga7mnIDlpKfjgqTjg7Pjg4fjg4Pjgq/jgrldIOOCpOODs+ODh+ODg+OCr+OCueOBruS4iumZkFxuICogQHJldHVybiB7T2JqZWN0fSDjg6njg7Pjg4Djg6Djgasx44Gk5Y+W44KK5Ye644GX44Gf6KaB57SgXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJyYW5kb21cIiwgZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgbWluID0gbWluIHx8IDA7XG4gIG1heCA9IG1heCB8fCB0aGlzLmxlbmd0aC0xO1xuICByZXR1cm4gdGhpc1tyYW5kaW50KG1pbiwgbWF4KSBdO1xufVxuXG4vKipcbiAqIEBtZXRob2QgcGlja3VwXG4gKiDphY3liJfjgYvjgonjg6njg7Pjg4Djg6Djgacx44Gk5Y+W44KK5Ye644GX44Gf6KaB57Sg44KS6L+U44GX44G+44GZ44CCXG4gKiBcbiAqIHtAbGluayAjcmFuZG9tfeOAgXtAbGluayAjbG90fSDjgajlkIzjgZjjgafjgZnjgIJcbiAqIEBpbmhlcml0ZG9jICNyYW5kb21cbiAqIFxuICogQHRoaXMge0FycmF5fVxuICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICovXG5mdW5jdGlvbiBwaWNrdXAobWluLCBtYXgpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwicGlja3VwXCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gIG1pbiA9IG1pbiB8fCAwO1xuICBtYXggPSBtYXggfHwgdGhpcy5sZW5ndGgtMTtcbiAgcmV0dXJuIHRoaXNbcmFuZGludChtaW4sIG1heCkgXTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGxvdFxuICog6YWN5YiX44GL44KJ44Op44Oz44OA44Og44GnMeOBpOWPluOCiuWHuuOBl+OBn+imgee0oOOCkui/lOOBl+OBvuOBmeOAglxuICogXG4gKiB7QGxpbmsgI3JhbmRvbX3jgIF7QGxpbmsgI3BpY2t1cH0g44Go5ZCM44GY44Gn44GZ44CCXG4gKiBAaW5oZXJpdGRvYyAjcmFuZG9tXG4gKiBcbiAqIEB0aGlzIHtBcnJheX1cbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAqL1xuZnVuY3Rpb24gbG90KG1pbiwgbWF4KSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImxvdFwiLCBmdW5jdGlvbihtaW4sIG1heCkge1xuICBtaW4gPSBtaW4gfHwgMDtcbiAgbWF4ID0gbWF4IHx8IHRoaXMubGVuZ3RoLTE7XG4gIHJldHVybiB0aGlzW3JhbmRpbnQobWluLCBtYXgpIF07XG59XG5cbi8qKlxuICogQG1ldGhvZCB1bmlxXG4gKiDopoHntKDjga7ph43opIfjgpLlj5bjgorpmaTjgYTjgZ/phY3liJfjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDoh6rliIboh6rouqvjga/noLTlo4rjgZXjgozjgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsxLCAyLCAzLCA0LCAzLCAyXTtcbiAqICAgICBhcnIudW5pcSgpOyAvLyA9PiBbMSwgMiwgMywgNF1cbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IFtkZWVwXSDmnKrkvb/nlKhcbiAqIEByZXR1cm4ge09iamVjdH0g5paw44GX44GE6YWN5YiXXG4gKi9cbmZ1bmN0aW9uIHVuaXEoZGVlcCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJ1bmlxXCIsIGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgc2VsZikge1xuICAgIHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBAbWV0aG9kIGZsYXR0ZW5cbiAqIOiHqui6q+OCkuWGjeW4sOeahOOBq+W5s+a7keWMluOBl+OBn+mFjeWIl+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICpcbiAqIGxldmVsIOOCkuaMh+WumuOBl+OBquOBkeOCjOOBsOa3seOBleOBrumam+mZkOOBquOBj+WujOWFqOOBq+W5s+a7keWMluOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzEsIDIsIFszLCBbNCwgNV1dXTtcbiAqICAgICBhcnIuZmxhdHRlbigpOyAgLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gKiAgICAgYXJyLmZsYXR0ZW4oMSk7IC8vID0+IFsxLCAyLCAzLCBbNCwgNV1dXG4gKlxuICogQHRoaXMgQXJyYXk8QXJyYXk+XG4gKiBAcGFyYW0ge051bWJlcn0gW2xldmVsPTBdICDlubPmu5HljJbjga7lho3luLDjga7mt7HjgZVcbiAqIEByZXR1cm4ge09iamVjdH0g5bmz5ruR5YyW44GX44Gf6YWN5YiXXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW4obGV2ZWwpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiZmxhdHRlblwiLCBmdW5jdGlvbihsZXZlbCkge1xuICB2YXIgYXJyID0gbnVsbDtcblxuICBpZiAobGV2ZWwpIHtcbiAgICBhcnIgPSB0aGlzO1xuICAgIGZvciAodmFyIGk9MDsgaTxsZXZlbDsgKytpKSB7XG4gICAgICBhcnIgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnIpO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyDlrozlhajjg5Xjg6njg4Pjg4hcbiAgICBhcnIgPSB0aGlzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VyZW50VmFsdWUpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGN1cmVudFZhbHVlKSA/XG4gICAgICAgIC8vIHByZXZpb3VzVmFsdWUuY29uY2F0KGN1cmVudFZhbHVlLmZsYXR0ZW4oKSkgOiBwcmV2aW91c1ZhbHVlLmNvbmNhdChjdXJlbnRWYWx1ZSk7XG4gICAgICAgIHByZXZpb3VzVmFsdWUuY29uY2F0KGZsYXR0ZW4uY2FsbChjdXJlbnRWYWx1ZSkpIDogcHJldmlvdXNWYWx1ZS5jb25jYXQoY3VyZW50VmFsdWUpO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQG1ldGhvZCBmaWxsXG4gKiBAY2hhaW5hYmxlXG4gKiDoh6rouqvjga7kuIDpg6jjga7opoHntKDjgpLnibnlrprjga7lgKTjgafln4vjgoHjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFsxLCAyLCAzLCA0LCA1XTtcbiAqICAgICBhcnIuZmlsbChcInhcIik7ICAgICAgIC8vID0+IFtcInhcIiwgXCJ4XCIsIFwieFwiLCBcInhcIiwgXCJ4XCJdXG4gKiAgICAgYXJyLmZpbGwoXCJ4XCIsIDIsIDQpOyAvLyA9PiBbMSwgMiwgXCJ4XCIsIFwieFwiLCA1XVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWUg5Z+L44KB44KL5YCkXG4gKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0PTBdIOWApOOCkuWfi+OCgeOCi+acgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICogQHBhcmFtIHtOdW1iZXJ9IFtlbmQ96Ieq6Lqr44Gu6YWN5YiX44Gu6ZW344GVXSDlgKTjgpLln4vjgoHjgovmnIDlvozjga7jgqTjg7Pjg4fjg4Pjgq/jgrkrMVxuICovXG5mdW5jdGlvbiBmaWxsKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImZpbGxcIiwgZnVuY3Rpb24odmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgICA9IGVuZCAgIHx8ICh0aGlzLmxlbmd0aCk7XG4gIFxuICBmb3IgKHZhciBpPXN0YXJ0OyBpPGVuZDsgKytpKSB7XG4gICAgdGhpc1tpXSA9IHZhbHVlO1xuICB9XG4gIFxuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEBtZXRob2Qgc2h1ZmZsZVxuICogQGNoYWluYWJsZVxuICog6Ieq6Lqr44Gu6KaB57Sg44KS44Op44Oz44OA44Og44Gr44K344Oj44OD44OV44Or44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbMSwgMiwgMywgNCwgNV07XG4gKiAgICAgYXJyLnNodWZmbGUoKTsgLy8gPT4gWzUsIDEsIDQsIDIsIDNdIOOBquOBqVxuICogXG4gKiBAdGhpcyBBcnJheVxuICovXG5mdW5jdGlvbiBzaHVmZmxlKCkge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJzaHVmZmxlXCIsIGZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBpPTAsbGVuPXRoaXMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgdmFyIGogPSByYW5kaW50KDAsIGxlbi0xKTtcbiAgICBcbiAgICBpZiAoaSAhPSBqKSB7XG4gICAgICAvLyB0aGlzLnN3YXAoaSwgaik7XG4gICAgICBzd2FwLmNhbGwodGhpcywgaSwgaik7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHN1bVxuICog6KaB57Sg44Gu5ZCI6KiI5YCk44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog6KaB57Sg44Gr5pWw5YCk5Lul5aSW44GM5ZCr44G+44KM44KL5aC05ZCI44Gu5oyZ5YuV44Gv5LiN5a6a44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbMSwgMiwgMywgNCwgNSwgNl07XG4gKiAgICAgYXJyLnN1bSgpOyAvLyA9PiAyMVxuICpcbiAqIEB0aGlzIEFycmF5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOWQiOioiFxuICovXG5mdW5jdGlvbiBzdW0oKSB7XG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcInN1bVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIHN1bSA9IDA7XG4gIGZvciAodmFyIGk9MCxsZW49dGhpcy5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICBzdW0gKz0gdGhpc1tpXTtcbiAgfVxuICByZXR1cm4gc3VtO1xufVxuXG4vKipcbiAqIEBtZXRob2QgYXZlcmFnZVxuICog6KaB57Sg44Gu5bmz5Z2H5YCk44KS6L+U44GX44G+44GZ44CCXG4gKlxuICog6KaB57Sg44Gr5pWw5YCk5Lul5aSW44GM5ZCr44G+44KM44KL5aC05ZCI44Gu5oyZ5YuV44Gv5LiN5a6a44Gn44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBhcnIgPSBbMSwgMiwgMywgNCwgNSwgNl1cbiAqICAgICBhcnIuYXZlcmFnZSgpOyAvLyA9PiAzLjVcbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHJldHVybiB7TnVtYmVyfSDlubPlnYflgKRcbiAqL1xuZnVuY3Rpb24gYXZlcmFnZSgpIHtcbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiYXZlcmFnZVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIHN1bSA9IDA7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgZm9yICh2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgc3VtICs9IHRoaXNbaV07XG4gIH1cbiAgcmV0dXJuIHN1bS9sZW47XG59XG5cbi8qKlxuICogQG1ldGhvZCBlYWNoXG4gKiBAY2hhaW5hYmxlXG4gKiDopoHntKDjgpLpoIbnlarjgavmuKHjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiDjg6Hjgr3jg4Pjg4njg4Hjgqfjg7zjg7Pjgavlr77lv5zjgZfjgabjgYTjgb7jgZnjgYzjgIHjgZPjga7jg6Hjgr3jg4Pjg4njgavjgojjgaPjgaboh6rliIboh6rouqvjga/lpInljJbjgZfjgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyNSZWZlcmVuY2VcbiAqIC0gW0FycmF5LnByb3RvdHlwZS5mb3JFYWNoKCkgLSBKYXZhU2NyaXB0IHwgTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9qYS9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mb3JFYWNoKVxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gWzEsIDIsIDNdO1xuICogICAgIGFyci5lYWNoKCBmdW5jdGlvbihlbG0pIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKGVsbSAqIGVsbSlcbiAqICAgICB9KTtcbiAqICAgICAvLyA9PiAxXG4gKiAgICAgLy8gICAgNFxuICogICAgIC8vICAgIDlcbiAqXG4gKiBAdGhpcyBBcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sg5ZCE6KaB57Sg44Gr5a++44GX44Gm5a6f6KGM44GZ44KL44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gKiBAcGFyYW0ge09iamVjdH0gW3NlbGZdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApFxuICovXG5mdW5jdGlvbiBlYWNoJDEoY2FsbGJhY2ssIHNlbGYpIHtcbiAgdGhpcy5mb3JFYWNoLmNhbGwodGhpcywgY2FsbGJhY2ssIHNlbGYgfHwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJlYWNoXCIsIGZ1bmN0aW9uKCkge1xuLy8gICB0aGlzLmZvckVhY2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbi8vICAgcmV0dXJuIHRoaXM7XG4vLyB9XG5cbi8vIC8qKlxuLy8gICogQG1ldGhvZCB0b1VMRWxlbWVudFxuLy8gICogVUxFbGVtZW50IOOBq+WkieaPm+OBl+OBvuOBme+8iOacquWun+ijhe+8iVxuLy8gICovXG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcInRvVUxFbGVtZW50XCIsIGZ1bmN0aW9uKCl7XG4vLyAgICAgLy8gVE9ETzogXG4vLyB9KTtcblxuLy8gLyoqXG4vLyAgKiBAbWV0aG9kIHRvT0xFbGVtZW50XG4vLyAgKiBPTEVsZW1lbnQg44Gr5aSJ5o+b44GX44G+44GZ77yI5pyq5a6f6KOF77yJXG4vLyAgKi9cbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwidG9PTEVsZW1lbnRcIiwgZnVuY3Rpb24oKXtcbi8vICAgICAvLyBUT0RPOlxuLy8gfSk7XG5cbi8qKlxuICogQG1ldGhvZCBtb3N0XG4gKiDmjIflrprjgZfjgZ/plqLmlbDjga7ov5TjgorlgKTjgYzmnIDlsI/jgajjgarjgovopoHntKDjgajmnIDlpKfjgajjgarjgovopoHntKDjgpLjgb7jgajjgoHjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDnqbrjga7phY3liJfjgavlr77jgZfjgablrp/ooYzjgZnjgovjgagge21heDogSW5maW5pdHksIG1pbjogLUluZmluaXR5fSDjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIFs1LDEsNCwxLDksMiwtMTBdLm1vc3QoKTsgLy8gPT4ge21heDo5LCBtaW46IC0xMH1cbiAqXG4gKiAgICAgcG9pbnRzID0gWyB7eDowLCB5OjB9LCB7eDo2NDAsIHk6OTYwfSwge3g6LTgwLCB5OjEwMH0gXTtcbiAqICAgICBwb2ludHMubW9zdChmdW5jdGlvbihlKXtyZXR1cm4gZS54O30pLm1pbjsgLy8gPT4gW3g6LTgwLCB5OjEwMF1cbiAqICAgICBwb2ludHMubW9zdChmdW5jdGlvbihlKXtyZXR1cm4gZS55O30pLm1heDsgLy8gPT4gW3g6NjQwLCB5Ojk2MF1cbiAqIFxuICogQHR5cGVkZWYge09iamVjdH0gQXJyYXlNb3N0UmV0dXJuVmFsdWUgbWF4IOOBqCBtaW4g44KS44Kt44O844Gr5oyB44Gk44Kq44OW44K444Kn44Kv44OIXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWluIC0g6Zai5pWw44Gu6L+U44KK5YCk44GM5pyA5bCP44Go44Gq44KL6KaB57SgXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWF4IC0g6Zai5pWw44Gu6L+U44KK5YCk44GM5pyA5aSn44Go44Gq44KL6KaB57SgXG4gKlxuICogQHRoaXMgQXJyYXk8bnVtYmVyPlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2Z1bmNdIOWQhOimgee0oOOBq+WvvuOBl+OBpuWun+ihjOOBmeOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICogQHJldHVybiB7QXJyYXlNb3N0UmV0dXJuVmFsdWV9XG4gKi9cbmZ1bmN0aW9uIG1vc3QoZnVuYywgc2VsZikge1xuLy8gQXJyYXkucHJvdG90eXBlLiRtZXRob2QoXCJtb3N0XCIsIGZ1bmN0aW9uKGZ1bmMsIHNlbGYpIHtcbiAgaWYodGhpcy5sZW5ndGggPCAxKXtcbiAgICByZXR1cm4ge1xuICAgICAgbWF4OiAtSW5maW5pdHksXG4gICAgICBtaW46IEluZmluaXR5LFxuICAgIH07XG4gIH1cbiAgaWYoZnVuYyl7XG4gICAgdmFyIG1heFZhbHVlID0gLUluZmluaXR5O1xuICAgIHZhciBtaW5WYWx1ZSA9IEluZmluaXR5O1xuICAgIHZhciBtYXhJbmRleCA9IDA7XG4gICAgdmFyIG1pbkluZGV4ID0gMDtcbiAgICBcbiAgICBpZih0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcpe3NlbGYgPSB0aGlzO31cbiAgICBcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgdmFyIHYgPSBmdW5jLmNhbGwoc2VsZiwgdGhpc1tpXSwgaSwgdGhpcyk7XG4gICAgICBpZihtYXhWYWx1ZSA8IHYpe1xuICAgICAgICBtYXhWYWx1ZSA9IHY7XG4gICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGlmKG1pblZhbHVlID4gdil7XG4gICAgICAgIG1pblZhbHVlID0gdjtcbiAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbWF4OiB0aGlzW21heEluZGV4XSxcbiAgICAgIG1pbjogdGhpc1ttaW5JbmRleF0sXG4gICAgfTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgbWF4ID0gLUluZmluaXR5O1xuICAgIHZhciBtaW4gPSBJbmZpbml0eTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7aSA8IGxlbjsgKytpKSB7XG4gICAgICBpZihtYXg8dGhpc1tpXSl7bWF4PXRoaXNbaV07fVxuICAgICAgaWYobWluPnRoaXNbaV0pe21pbj10aGlzW2ldO31cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG1heDogbWF4LFxuICAgICAgbWluOiBtaW4sXG4gICAgfTtcbiAgfVxuICBcbn0gIFxuXG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+OBr2VzMjAxNeS7pemZjeOBq+WtmOWcqOOBmeOCi+OBn+OCgeOAgeS/neeVmVxuLy8gPT09PT09PT09PVxuXG5cbi8vIC8qKlxuLy8gICogQG1ldGhvZCBmaW5kXG4vLyAgKiDlkITopoHntKDjgpLlvJXmlbDjgavjgZfjgabplqLmlbDjgpLlrp/ooYzjgZfjgIHjgZ3jga7lgKTjgYznnJ/jgajjgarjgovvvIjvvJ3mnaHku7bjgavjg57jg4Pjg4HjgZnjgovvvInmnIDliJ3jga7opoHntKDjgpLov5TjgZfjgb7jgZnjgIJcbi8vICAqXG4vLyAgKiDjganjga7opoHntKDjgoLjg57jg4Pjg4HjgZfjgarjgZHjgozjgbAgdW5kZWZpbmVkIOOCkui/lOOBl+OBvuOBmeOAglxuLy8gICpcbi8vICAqICMjIyBFeGFtcGxlXG4vLyAgKiAgICAgYXJyID0gWydmb28nLCAnYmFyJywgJ2hvZ2UnLCAnZnVnYSddO1xuLy8gICogICAgIGFyci5maW5kKCBmdW5jdGlvbihlbG0pIHtcbi8vICAqICAgICAgIHJldHVybiBlbG0uaW5kZXhPZignYScpID49IDA7XG4vLyAgKiAgICAgfSk7XG4vLyAgKiAgICAgLy8gPT4gJ2Jhcidcbi8vICAqXG4vLyAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayDlkITopoHntKDjgavlr77jgZfjgablrp/ooYzjgZnjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbi8vICAqIEBwYXJhbSB7T2JqZWN0fSBbc2VsZj10aGlzXSBjYWxsYmFjayDlhoXjgacgdGhpcyDjgajjgZfjgablj4LnhafjgZXjgozjgovlgKTjgILjg4fjg5Xjgqnjg6vjg4jjga/lkbzjgbPlh7rjgZfmmYLjga4gdGhpc+OAglxuLy8gICogQHJldHVybiB7T2JqZWN0fSDmnaHku7bjgavjg57jg4Pjg4HjgZfjgZ/mnIDliJ3jga7opoHntKDjgIHjgb7jgZ/jga8gdW5kZWZpbmVkXG4vLyAgKi9cbi8vIEFycmF5LnByb3RvdHlwZS4kbWV0aG9kKFwiZmluZFwiLCBmdW5jdGlvbihmbiwgc2VsZikge1xuLy8gICB2YXIgdGFyZ2V0ID0gbnVsbDtcblxuLy8gICB0aGlzLnNvbWUoZnVuY3Rpb24oZWxtLCBpKSB7XG4vLyAgICAgaWYgKGZuLmNhbGwoc2VsZiwgZWxtLCBpLCB0aGlzKSkge1xuLy8gICAgICAgdGFyZ2V0ID0gZWxtO1xuLy8gICAgICAgcmV0dXJuIHRydWU7XG4vLyAgICAgfVxuLy8gICB9KTtcblxuLy8gICByZXR1cm4gdGFyZ2V0O1xuLy8gfSk7XG5cbi8vIC8qKlxuLy8gICogQG1ldGhvZCBmaW5kSW5kZXhcbi8vICAqIOWQhOimgee0oOOCkuW8leaVsOOBq+OBl+OBpumWouaVsOOCkuWun+ihjOOBl+OAgeOBneOBruWApOOBjOecn+OBqOOBquOCi++8iO+8neadoeS7tuOBq+ODnuODg+ODgeOBmeOCi++8ieacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBl+OBvuOBmeOAglxuLy8gICpcbi8vICAqIOOBqeOBruimgee0oOOCguODnuODg+ODgeOBl+OBquOBkeOCjOOBsCAtMSDjgpLov5TjgZfjgb7jgZnjgIJcbi8vICAqXG4vLyAgKiAjIyMgRXhhbXBsZVxuLy8gICogICAgIGFyciA9IFsnZm9vJywgJ2JhcicsICdob2dlJywgJ2Z1Z2EnXTtcbi8vICAqICAgICBhcnIuZmluZEluZGV4KCBmdW5jdGlvbihlbG0pIHtcbi8vICAqICAgICAgIHJldHVybiBlbG0uaW5kZXhPZignYScpID49IDA7XG4vLyAgKiAgICAgfSk7XG4vLyAgKiAgICAgLy8gPT4gMVxuLy8gICpcbi8vICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIOWQhOimgee0oOOBq+WvvuOBl+OBpuWun+ihjOOBmeOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuLy8gICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+WRvOOBs+WHuuOBl+aZguOBriB0aGlz44CCXG4vLyAgKiBAcmV0dXJuIHtPYmplY3R9IOadoeS7tuOBq+ODnuODg+ODgeOBl+OBn+acgOWIneOBruOCpOODs+ODh+ODg+OCr+OCueOAgeOBvuOBn+OBryAtMVxuLy8gICovXG4vLyBBcnJheS5wcm90b3R5cGUuJG1ldGhvZChcImZpbmRJbmRleFwiLCBmdW5jdGlvbihmbiwgc2VsZikge1xuLy8gICB2YXIgdGFyZ2V0ID0gLTE7XG5cbi8vICAgdGhpcy5zb21lKGZ1bmN0aW9uKGVsbSwgaSkge1xuLy8gICAgIGlmIChmbi5jYWxsKHNlbGYsIGVsbSwgaSwgdGhpcykpIHtcbi8vICAgICAgIHRhcmdldCA9IGk7XG4vLyAgICAgICByZXR1cm4gdHJ1ZTtcbi8vICAgICB9XG4vLyAgIH0pO1xuXG4vLyAgIHJldHVybiB0YXJnZXQ7XG4vLyB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIG9mXG4gKiBAc3RhdGljXG4gKiBFUzYg5rqW5oug44GuIG9mIOmWouaVsOOBp+OBmeOAguWPr+WkiemVt+W8leaVsOOCkuOBqOOBo+OBpiBBcnJheSDjgqrjg5bjgrjjgqfjgq/jg4jjgavjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIEFycmF5Lm9mKCk7ICAgICAgICAvLyA9PiBbXVxuICogICAgIEFycmF5Lm9mKDEsIDIsIDMpOyAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudE4g55Sf5oiQ44GZ44KL6YWN5YiX44Gu6KaB57SgXG4gKiBAcmV0dXJuIHtBcnJheX0g55Sf5oiQ44GX44Gf6YWN5YiXXG4gKi9cbi8vIEFycmF5LiRtZXRob2QoXCJvZlwiLCBmdW5jdGlvbigpIHtcbi8vICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4vLyB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIGZyb21cbiAqIEBzdGF0aWNcbiAqIEVTNiDmupbmi6Djga4gZnJvbSDplqLmlbDjgafjgZnjgIJhcnJheS1saWtlIOOCquODluOCuOOCp+OCr+ODiOOBi2l0ZXJhYmxlIOOCquODluOCuOOCp+OCr+ODiOOBi+OCieaWsOOBl+OBhOmFjeWIl+OCkueUn+aIkOOBl+OBvuOBmeOAglxuICpcbiAqIGFycmF5LWxpa2Ug44Kq44OW44K444Kn44Kv44OI44Go44Gv44CBbGVuZ3RoIOODl+ODreODkeODhuOCo+OCkuaMgeOBoeOAgeaVsOWtl+OBrua3u+Wtl+OBp+OCouOCr+OCu+OCueWPr+iDveOBquOCquODluOCuOOCp+OCr+ODiOOBruOBk+OBqOOBp+OBmeOAglxuICog6YCa5bi444Gu6YWN5YiX44Gu44G744GL44CBU3RyaW5n44CBYXJndW1lbnRz44CBTm9kZUxpc3Qg44Gq44Gp44KCIGFycmF5LWxpa2Ug44Kq44OW44K444Kn44Kv44OI44Gn44GZ44CCXG4gKlxuICogaXRlcmFibGUg44Kq44OW44K444Kn44Kv44OI44Go44Gv44CBU3ltYm9sLml0ZXJhdG9yIOODl+ODreODkeODhuOCo+OCkuaMgeOBpOOCquODluOCuOOCp+OCr+ODiOOBruOBk+OBqOOBp+OBmeOAglxuICog6YCa5bi444Gu6YWN5YiX44Gu44G744GL44CBU3RyaW5n44CBYXJndW1lbnRz44CBTm9kZUxpc3Qg44Gq44Gp44KCIGl0ZXJhYmxlIOOCquODluOCuOOCp+OCr+ODiOOBp+OBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgQXJyYXkuZnJvbShbMSwgMiwgM10sIGZ1bmN0aW9uKGVsbSl7IHJldHVybiBlbG0gKiBlbG19ICk7IC8vID0+IFsxLCA0LCA5XVxuICogICAgIEFycmF5LmZyb20oXCJmb29cIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vID0+IFtcImZcIiwgXCJvXCIsIFwib1wiXVxuICogICAgIEFycmF5LmZyb20oIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuXCIpKSAgICAgICAgICAgIC8vID0+IFtFbGVtZW50LCBFbGVtZW50LCBFbGVtZW50LC4uLl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXJyYXlMaWtlIOmFjeWIl+OBq+WkieaPm+OBmeOCiyBhcnJheS1saWtlIOOCquODluOCuOOCp+OCr+ODiFxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBhcnJheUxpa2Ug44Gu44GZ44G544Gm44Gu6KaB57Sg44Gr5a++44GX44Gm5a6f6KGM44GZ44KL44Oe44OD44OX6Zai5pWwXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdIGNhbGxiYWNrIOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApFxuICogQHJldHVybiB7QXJyYXl9IOeUn+aIkOOBl+OBn+mFjeWIl1xuICovXG4vLyBBcnJheS4kbWV0aG9kKFwiZnJvbVwiLCBmdW5jdGlvbihhcnJheUxpa2UsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4vLyAgIGlmICghT2JqZWN0KGFycmF5TGlrZSkubGVuZ3RoKSByZXR1cm4gW107XG5cbi8vICAgdmFyIHJlc3VsdCA9IFtdO1xuLy8gICBpZiAoU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvciAmJiBhcnJheUxpa2VbU3ltYm9sLml0ZXJhdG9yXSkge1xuLy8gICAgICAgdmFyIGl0ZXJhdG9yID0gYXJyYXlMaWtlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbi8vICAgICAgIHdoaWxlICh0cnVlKSB7XG4vLyAgICAgICAgICAgdmFyIGl0ZXJhdG9yUmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuLy8gICAgICAgICAgIGlmIChpdGVyYXRvclJlc3VsdC5kb25lKSBicmVhaztcblxuLy8gICAgICAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrLmJpbmQoY29udGV4dCB8fCB0aGlzKShpdGVyYXRvclJlc3VsdC52YWx1ZSkgOiBpdGVyYXRvclJlc3VsdC52YWx1ZTtcbi8vICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4vLyAgICAgICB9XG4vLyAgICAgICByZXR1cm4gcmVzdWx0O1xuLy8gICB9XG5cbi8vICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5TGlrZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuLy8gICAgICAgcmVzdWx0LnB1c2goYXJyYXlMaWtlW2ldKTtcbi8vICAgfVxuLy8gICByZXR1cm4gcmVzdWx0Lm1hcCh0eXBlb2YgY2FsbGJhY2sgPT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogZnVuY3Rpb24oaXRlbSkge1xuLy8gICAgIHJldHVybiBpdGVtO1xuLy8gICB9LCBjb250ZXh0KTtcbi8vIH0pO1xuXG52YXIgYXJyYXlFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGZpcnN0OiBmaXJzdCxcbiAgbGFzdDogbGFzdCxcbiAgYXQ6IGF0LFxuICBlcmFzZTogZXJhc2UsXG4gIGNsZWFyOiBjbGVhcixcbiAgY29udGFpbnM6IGNvbnRhaW5zLFxuICBjbG9uZTogY2xvbmUsXG4gIHJhbmdlOiByYW5nZSxcbiAgZXF1YWxzOiBlcXVhbHMsXG4gIGRlZXBFcXVhbHM6IGRlZXBFcXVhbHMsXG4gIHN3YXA6IHN3YXAsXG4gIGVyYXNlQWxsOiBlcmFzZUFsbCxcbiAgZXJhc2VJZjogZXJhc2VJZixcbiAgZXJhc2VJZkFsbDogZXJhc2VJZkFsbCxcbiAgcmFuZG9tOiByYW5kb20sXG4gIHBpY2t1cDogcGlja3VwLFxuICBsb3Q6IGxvdCxcbiAgdW5pcTogdW5pcSxcbiAgZmxhdHRlbjogZmxhdHRlbixcbiAgZmlsbDogZmlsbCxcbiAgc2h1ZmZsZTogc2h1ZmZsZSxcbiAgc3VtOiBzdW0sXG4gIGF2ZXJhZ2U6IGF2ZXJhZ2UsXG4gIGVhY2g6IGVhY2gkMSxcbiAgbW9zdDogbW9zdFxufSk7XG5cbi8qKlxuICog44Ki44Kv44K744K15ouh5by155So44Kq44OW44K444Kn44Kv44OIXG4gKiBAdHlwZWRlZiB7e2dldDogKCk9PiBhbnksIHNldDogKHY6YW55KT0+IHZvaWR9fSBBY2Nlc3NvckV4dGVuZE9iamVjdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgX2NyZWF0b3I6IGFueVxuICogICBfaGllcmFyY2hpZXM6IFBoaW5hQ2xhc3NbXVxuICogICBpbml0OiBmdW5jdGlvblxuICogICBzdXBlckNsYXNzPzogYW55XG4gKiAgIHN1cGVySW5pdD86IGZ1bmN0aW9uXG4gKiAgIHN1cGVyTWV0aG9kPzogKG1ldGhvZE5hbWU6IHN0cmluZywgLi4uYXJnczphbnkpID0+IGFueSAvLyDjgrnjg7zjg5Hjg7zjg6Hjgr3jg4Pjg4njga7ntZDmnpxcbiAqICAgY29uc3RydWN0b3I/OiBhbnlcbiAqICAgW2s6IHN0cmluZ106IGFueSAvLyDjgZ3jga7ku5bjga7jg5fjg63jg5Hjg4bjgqNcbiAqIH19IFBoaW5hQ2xhc3NQcm90b3R5cGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHByb3RvdHlwZTogUGhpbmFDbGFzc1Byb3RvdHlwZVxuICogICBbazogc3RyaW5nXTogYW55IC8vIOOBneOBruS7luOBrnN0YXRpY+ODl+ODreODkeODhuOCo1xuICogfX0gUGhpbmFDbGFzc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ3JlYXRlQ2xhc3NQYXJhbVxuICogQHByb3BlcnR5IHtGdW5jdGlvbiAmIHtvd25lcjogYW55fX0gcGFyYW1zLmluaXQg44Kv44Op44K55Yid5pyf5YyW6Zai5pWwXG4gKiBAcHJvcGVydHkge1BoaW5hQ2xhc3N9IFtwYXJhbXMuc3VwZXJDbGFzc10g44K544O844OR44O844Kv44Op44K5XG4gKiBAcHJvcGVydHkge3tbazogc3RyaW5nXTogQWNjZXNzb3JFeHRlbmRPYmplY3R9fSBbcGFyYW1zLl9hY2Nlc3Nvcl0g44Ki44Kv44K744K144KS5LuY5LiOXG4gKiBAcHJvcGVydHkge3tbazogc3RyaW5nXTogYW55fX0gW3BhcmFtcy5fc3RhdGljXSBzdGF0aWPjg5fjg63jg5Hjg4bjgqPjgpLku5jkuI5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtwYXJhbXMuX2RlZmluZWRdIOWumue+qeaZguOBq+Wun+ihjOOBl+OBn+OBhOmWouaVsFxuICovXG5cbnZhciBfY2xhc3NEZWZpbmVkQ2FsbGJhY2sgPSB7fTtcblxudmFyIHBoaW5hID0ge1xuICAvKipcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFZFUlNJT05cbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICogcGhpbmEuanMg44Gu44OQ44O844K444On44Oz44Gn44GZ44CCXG4gICAqL1xuICBWRVJTSU9OOiBcIjAuMi4zXCIsXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaXNOb2RlXG4gICAqIE5vZGUuanMg44GuIG1vZHVsZSDjgYvjganjgYbjgYvjgpLjg4Hjgqfjg4Pjgq/jgZfjgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIGlzTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5hbWVzcGFjZVxuICAgKiDlvJXmlbDjga/plqLmlbDjgafjgIHjgZ3jga7plqLmlbDlhoXjgafjga4gdGhpcyDjga8gcGhpbmEg44Gr44Gq44KK44G+44GZ44CCXG4gICAqIEBtZW1iZXJvZiBwaGluYVxuICAgKiBAc3RhdGljXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOmWouaVsFxuICAgKi9cbiAgbmFtZXNwYWNlOiBmdW5jdGlvbiAoZm4pIHtcbiAgICBmbi5jYWxsKHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHRlc3RVQVxuICAgKiDlvJXmlbDjga4gUmVnRXhwIOOCquODluOCuOOCp+OCr+ODiOOBqOODpuODvOOCtuODvOOCqOODvOOCuOOCp+ODs+ODiOOCkuavlOi8g+OBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnRXhwXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICB0ZXN0VUE6IGZ1bmN0aW9uIChyZWdFeHApIHtcbiAgICBpZiAoIXRoaXMuZ2xvYmFsLm5hdmlnYXRvcikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciB1YSA9IHRoaXMuZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgcmV0dXJuIHJlZ0V4cC50ZXN0KHVhKTtcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBpc0FuZHJvaWRcbiAgICogQW5kcm9pZCDjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gQW5kcm9pZCDjgYvjganjgYbjgYtcbiAgICovXG4gIGlzQW5kcm9pZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRlc3RVQSgvQW5kcm9pZC8pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGlzSVBob25lXG4gICAqIGlQaG9uZSDjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gaVBob25lIOOBi+OBqeOBhuOBi1xuICAgKi9cbiAgaXNJUGhvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXN0VUEoL2lQaG9uZS8pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGlzSVBhZFxuICAgKiBpUGFkIOOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBpUGFkIOOBi+OBqeOBhuOBi1xuICAgKi9cbiAgaXNJUGFkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdFVBKC9pUGFkLyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaXNJT1NcbiAgICogaU9TIOOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBpT1Mg44GL44Gp44GG44GLXG4gICAqL1xuICBpc0lPUzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRlc3RVQSgvaVBob25lfGlQYWQvKTtcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBpc01vYmlsZVxuICAgKiDjg6Ljg5DjgqTjg6vjgYvjganjgYbjgYvjgpLov5TjgZfjgb7jgZnjgILlhbfkvZPnmoTjgavjga8gQW5kcm9pZCwgaVBob25lLCBpUGFkIOOBruOBhOOBmuOCjOOBi+OBoOOBqCB0cnVlIOOBq+OBquOCiuOBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDjg6Ljg5DjgqTjg6vjgYvjganjgYbjgYtcbiAgICovXG4gIGlzTW9iaWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdFVBKC9pUGhvbmV8aVBhZHxBbmRyb2lkLyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY3JlYXRlQ2xhc3NcbiAgICog44Kv44Op44K544KS5L2c5oiQ44GZ44KL6Zai5pWw44Gn44GZ44CCXG4gICAqIOimquOCr+ODqeOCueOBruaMh+WumuOBr+aWh+Wtl+WIl+OBp+OCguWPr+iDveOBp+OBmeOAglxuICAgKiDkvZXjgoLntpnmib/jgZfjgarjgYTloLTlkIggc3VwZXJDbGFzcyDjga7mjIflrprjga/kuI3opoHjgafjgZnjgILjgb7jgZ/jgIHopqrjgq/jg6njgrnjgpLntpnmib/jgZfjgabjgYTjgovloLTlkIjjgIHjgrPjg7Pjgrnjg4jjg6njgq/jgr/lhoXjgacgdGhpcy5zdXBlckluaXQoKSDjgpLlrp/ooYzjgZfjgabopqrjgq/jg6njgrnjgpLliJ3mnJ/ljJbjgZnjgovjgZPjgajjgYzlv4XpoIjjgafjgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIENsYXNzID0gcGhpbmEuY3JlYXRlQ2xhc3Moe1xuICAgKiAgIHN1cGVyQ2xhc3M6IG5hbWVzcGFjZS5TdXBlciwvL+imquOCr+ODqeOCuee2meaJv1xuICAgKlxuICAgKiAgIC8v44Oh44Oz44OQ5aSJ5pWwXG4gICAqICAgbWVtYmVyMTogMTAwLFxuICAgKiAgIG1lbWJlcjI6ICd0ZXN0JyxcbiAgICogICBtZW1iZXIzOiBudWxsLFxuICAgKlxuICAgKiAgIC8vIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiAgIC8vIENsYXNzKCnjgpLlkbzjgbPlh7rjgZfjgZ/jgajjgY3lrp/ooYzjgZXjgozjgotcbiAgICogICBpbml0OiBmdW5jdGlvbihhLCBiKXtcbiAgICogICAgIC8v44K544O844OR44O844Kv44Op44K5KOe2meaJv+OBl+OBn+OCr+ODqeOCuSnjga5pbml0XG4gICAqICAgICB0aGlzLnN1cGVySW5pdChhLCBiKTtcbiAgICogICAgIHRoaXMuYSA9IGE7XG4gICAqICAgICB0aGlzLmIgPSBiO1xuICAgKiAgIH0sXG4gICAqXG4gICAqICAgLy/jg6Hjgr3jg4Pjg4lcbiAgICogICBtZXRob2QxOiBmdW5jdGlvbigpe30sXG4gICAqICAgbWV0aG9kMjogZnVuY3Rpb24oKXt9LFxuICAgKlxuICAgKiB9KTtcbiAgICpcbiAgICogQHBhcmFtIHtDcmVhdGVDbGFzc1BhcmFtfSBwYXJhbXNcbiAgICogQHJldHVybiB7UGhpbmFDbGFzc30gcGhpbmHjgq/jg6njgrlcbiAgICovXG4gIGNyZWF0ZUNsYXNzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG5cbiAgICAvKiogQHR5cGUge1BoaW5hQ2xhc3N9ICovXG4gICAgdmFyIF9jbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBfY2xhc3MucHJvdG90eXBlLl9jcmVhdG9yKCk7XG4gICAgICBfY2xhc3MucHJvdG90eXBlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcblxuICAgIGlmIChwYXJhbXMuc3VwZXJDbGFzcykge1xuICAgICAgX2NsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyYW1zLnN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHBhcmFtcy5pbml0Lm93bmVyID0gX2NsYXNzO1xuICAgICAgX2NsYXNzLnByb3RvdHlwZS5zdXBlckluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX19jb3VudGVyID0gdGhpcy5fX2NvdW50ZXIgfHwgMDtcblxuICAgICAgICB2YXIgc3VwZXJDbGFzcyA9IHRoaXMuX2hpZXJhcmNoaWVzW3RoaXMuX19jb3VudGVyKytdO1xuICAgICAgICB2YXIgc3VwZXJJbml0ID0gc3VwZXJDbGFzcy5wcm90b3R5cGUuaW5pdDtcbiAgICAgICAgc3VwZXJJbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgdGhpcy5fX2NvdW50ZXIgPSAwO1xuICAgICAgfTtcbiAgICAgIF9jbGFzcy5wcm90b3R5cGUuc3VwZXJNZXRob2QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgICAgdmFyIG5hbWUgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuX19jb3VudGVycyA9IHRoaXMuX19jb3VudGVycyB8fCB7fTtcbiAgICAgICAgdGhpcy5fX2NvdW50ZXJzW25hbWVdID0gdGhpcy5fX2NvdW50ZXJzW25hbWVdIHx8IDA7XG5cbiAgICAgICAgdmFyIHN1cGVyQ2xhc3MgPSB0aGlzLl9oaWVyYXJjaGllc1t0aGlzLl9fY291bnRlcnNbbmFtZV0rK107XG4gICAgICAgIHZhciBzdXBlck1ldGhvZCA9IHN1cGVyQ2xhc3MucHJvdG90eXBlW25hbWVdO1xuICAgICAgICB2YXIgcnN0ID0gc3VwZXJNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG5cbiAgICAgICAgdGhpcy5fX2NvdW50ZXJzW25hbWVdID0gMDtcblxuICAgICAgICByZXR1cm4gcnN0O1xuICAgICAgfTtcbiAgICAgIF9jbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBfY2xhc3M7XG4gICAgfVxuXG4gICAgLy8gLy9cbiAgICAvLyBwYXJhbXMuZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIC8vICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vICAgICBfY2xhc3MuJG1ldGhvZChrZXksIHZhbHVlKTtcbiAgICAvLyAgIH1cbiAgICAvLyAgIGVsc2Uge1xuICAgIC8vICAgICBfY2xhc3MucHJvdG90eXBlW2tleV0gPSB2YWx1ZTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgICAvLyDntpnmib9cbiAgICAkZXh0ZW5kLmNhbGwoX2NsYXNzLnByb3RvdHlwZSwgcGFyYW1zKTtcbiAgICAvLyBfY2xhc3MucHJvdG90eXBlLiRleHRlbmQocGFyYW1zKTtcblxuICAgIC8vIOe2meaJv+eUqFxuICAgIF9jbGFzcy5wcm90b3R5cGUuX2hpZXJhcmNoaWVzID0gW107XG4gICAgdmFyIF9zdXBlciA9IF9jbGFzcy5wcm90b3R5cGUuc3VwZXJDbGFzcztcbiAgICB3aGlsZSAoX3N1cGVyKSB7XG4gICAgICBfY2xhc3MucHJvdG90eXBlLl9oaWVyYXJjaGllcy5wdXNoKF9zdXBlcik7XG4gICAgICBfc3VwZXIgPSBfc3VwZXIucHJvdG90eXBlLnN1cGVyQ2xhc3M7XG4gICAgfVxuXG4gICAgLy8gYWNjZXNzb3JcbiAgICBpZiAocGFyYW1zLl9hY2Nlc3Nvcikge1xuICAgICAgLy8gcGFyYW1zLl9hY2Nlc3Nvci5mb3JJbihcbiAgICAgIGZvckluLmNhbGwoXG4gICAgICAgIHBhcmFtcy5fYWNjZXNzb3IsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgICAqIEBwYXJhbSB7QWNjZXNzb3JFeHRlbmRPYmplY3R9IHZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGFjY2Vzc29yLmNhbGwoX2NsYXNzLnByb3RvdHlwZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgLy8gX2NsYXNzLnByb3RvdHlwZS5hY2Nlc3NvcihrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIC8vIF9jbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKF9jbGFzcy5wcm90b3R5cGUsIHBhcmFtcy5fYWNjZXNzb3IpO1xuICAgIH1cblxuICAgIF9jbGFzcy5wcm90b3R5cGUuX2NyZWF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIF9jbGFzcy5wcm90b3R5cGUuX2NyZWF0b3IucHJvdG90eXBlID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIC8vIHN0YXRpYyBwcm9wZXJ0eS9tZXRob2RcbiAgICBpZiAocGFyYW1zLl9zdGF0aWMpIHtcbiAgICAgICRleHRlbmQuY2FsbChfY2xhc3MsIHBhcmFtcy5fc3RhdGljKTtcbiAgICAgIC8vIF9jbGFzcy4kZXh0ZW5kKHBhcmFtcy5fc3RhdGljKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLl9kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuX2RlZmluZWQuY2FsbChfY2xhc3MsIF9jbGFzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCB1c2luZ1xuICAgKiDmloflrZfliJfjgaflrprnvqnjgZfjgZ/jg5HjgrnjgpLkvb/jgaPjgabjgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5bjgorlh7rjgZfjgb7jgZnjgILjg5Hjgrnjga8gLCAuIC8gXFwgOjog44Gn5Yy65YiH44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqIHtAbGluayAjcGhpbmEucmVnaXN0ZXJ9IOOBp+eZu+mMsuOBl+OBn+OCquODluOCuOOCp+OCr+ODiOOCkuWPluOCiuWHuuOBmeOBqOOBjeOBquOBqeOBq+S9v+OBhuOBqOS+v+WIqeOBqumWouaVsOOBp+OBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBob2dlID0ge1xuICAgKiAgIGZvbzoge1xuICAgKiAgICAgYmFyOiB7XG4gICAqICAgICAgIG51bTogMTAwXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9O1xuICAgKiB2YXIgYmFyID0gcGhpbmEudXNpbmcoJ2hvZ2UuZm9vLmJhcicpO1xuICAgKiBjb25zb2xlLmxvZyhiYXIubnVtKTsgLy8gPT4gMTAwXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIOOCquODluOCuOOCp+OCr+ODiOOBuOOBruODkeOCuVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IOWPluOCiuWHuuOBl+OBn+OCquODluOCuOOCp+OCr+ODiFxuICAgKi9cbiAgdXNpbmc6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nbG9iYWw7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhlcyA9IHBhdGguc3BsaXQoL1ssLlxcLyBdfDo6Lyk7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdsb2JhbDtcblxuICAgIHBhdGhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICBjdXJyZW50ID0gY3VycmVudFtwXSB8fCAoY3VycmVudFtwXSA9IHt9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjdXJyZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJlZ2lzdGVyXG4gICAqIOODkeOCueaMh+WumuOBp+OCquODluOCuOOCp+OCr+ODiOOCkueZu+mMsuOBmeOCi+mWouaVsOOBp+OBmeOAguODkeOCueOBryAsIC4gLyBcXCA6OiDjgafljLrliIfjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcGhpbmEucmVnaXN0ZXIoJ2hvZ2UuZm9vLmJhcicsIHtcbiAgICogICBudW06IDEwMCxcbiAgICogfSk7XG4gICAqIGNvbnNvbGUubG9nKGhvZ2UuZm9vLmJhci5udW0pOyAvLyA9PiAxMDBcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGgg55m76Yyy44GZ44KL44Kq44OW44K444Kn44Kv44OI44Gu44OR44K5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBfY2xhc3Mg55m76Yyy44GZ44KL44Kq44OW44K444Kn44Kv44OIXG4gICAqIEByZXR1cm4ge09iamVjdH0g55m76Yyy44GX44Gf44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICByZWdpc3RlcjogZnVuY3Rpb24gKHBhdGgsIF9jbGFzcykge1xuICAgIHZhciBwYXRoZXMgPSBwYXRoLnNwbGl0KC9bLC5cXC8gXXw6Oi8pO1xuICAgIC8vIHZhciBjbGFzc05hbWUgPSBwYXRoZXMubGFzdDtcbiAgICB2YXIgY2xhc3NOYW1lID0gbGFzdC5nZXQuY2FsbChwYXRoZXMpO1xuICAgIC8vIEZJWE1FOiDjgZPjgZPjgpLnm7TjgZXjgarjgYTjgajjg5Tjg6rjgqrjg4nljLrliIfjgorku6XlpJbjga/nhKHlirnvvJ9cbiAgICB2YXIgcGFyZW50UGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy51c2luZyhwYXJlbnRQYXRoKTtcblxuICAgIHBhcmVudFtjbGFzc05hbWVdID0gX2NsYXNzO1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBkZWZpbmVcbiAgICog44Kv44Op44K544KS5a6a576p44GZ44KL6Zai5pWw44Gn44GZ44CC5L2/44GE5pa544GvIHtAbGluayAjY3JlYXRlQ2xhc3N9IOOBqOOBu+OBqOOCk+OBqeWQjOOBmOOBp+OBmeOAglxuICAgKiDjgZ/jgaDjgZfjgIHlvJXmlbDjga8y44Gk44GC44KK44CB56ys5LiA5byV5pWw44Gv5a6a576p44GZ44KL44Kv44Op44K544Gu44OR44K544KS5paH5a2X5YiX44Gn5rih44GX44G+44GZ44CC56ys5LqM5byV5pWw44Gu44Kq44OW44K444Kn44Kv44OI44GvIHtAbGluayAjY3JlYXRlQ2xhc3N9IOOBruW8leaVsOOBqOWQjOOBmOOCiOOBhuOBq+OBl+OBvuOBmeOAglxuICAgKiB7QGxpbmsgI2NyZWF0ZUNsYXNzfSDjgajpgZXjgYTjgIHlpInmlbDjgavku6PlhaXjgZnjgovlv4XopoHjgYzjgarjgY/jgIHjg5HjgrnmjIflrprjgafjgq/jg6njgrnjgpLlrprnvqnjgafjgY3jgb7jgZnjgIJcbiAgICog5YaF6YOo55qE44Gr44GvIHtAbGluayAjcmVnaXN0ZXJ9LCB7QGxpbmsgI3VzaW5nfSDjgpLkvb/nlKjjgZfjgabjgYTjgovjgZ/jgoHjgIHjg5Hjgrnjga8gLCAuIC8gXFwgOjog44Gn5Yy65YiH44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqIEBtZW1iZXJvZiBwaGluYVxuICAgKiBAc3RhdGljXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBoaW5hLmRlZmluZSgnbmFtZXNwYWNlLkNsYXNzJywge1xuICAgKiAgIHN1cGVyQ2xhc3M6ICduYW1lc3BhY2UuU3VwZXInLC8v6Kaq44Kv44Op44K557aZ5om/XG4gICAqXG4gICAqICAgLy/jg6Hjg7Pjg5DlpInmlbBcbiAgICogICBtZW1iZXIxOiAxMDAsXG4gICAqICAgbWVtYmVyMjogJ3Rlc3QnLFxuICAgKiAgIG1lbWJlcjM6IG51bGwsXG4gICAqXG4gICAqICAgLy/jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogICAvL0NsYXNzKCnjgpLlkbzjgbPlh7rjgZfjgZ/jgajjgY3lrp/ooYzjgZXjgozjgotcbiAgICogICBpbml0OiBmdW5jdGlvbihhLCBiKXtcbiAgICogICAgIC8v44K544O844OR44O844Kv44Op44K5KOe2meaJv+OBl+OBn+OCr+ODqeOCuSnjga5pbml0XG4gICAqICAgICB0aGlzLnN1cGVySW5pdChhLCBiKTtcbiAgICogICAgIHRoaXMuYSA9IGE7XG4gICAqICAgICB0aGlzLmIgPSBiO1xuICAgKiAgIH0sXG4gICAqXG4gICAqICAgLy/jg6Hjgr3jg4Pjg4lcbiAgICogICBtZXRob2QxOiBmdW5jdGlvbigpe30sXG4gICAqICAgbWV0aG9kMjogZnVuY3Rpb24oKXt9LFxuICAgKiB9KTtcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGgg44OR44K5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbiAmIHtvd25lcjogYW55fX0gcGFyYW1zLmluaXQg44Kv44Op44K55Yid5pyf5YyW6Zai5pWwXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgUGhpbmFDbGFzc30gW3BhcmFtcy5zdXBlckNsYXNzXSDjgrnjg7zjg5Hjg7zjgq/jg6njgrlcbiAgICogQHBhcmFtIHt7W2s6IHN0cmluZ106IEFjY2Vzc29yRXh0ZW5kT2JqZWN0fX0gW3BhcmFtcy5fYWNjZXNzb3JdIOOCouOCr+OCu+OCteOCkuS7mOS4jlxuICAgKiBAcGFyYW0ge3tbazogc3RyaW5nXTogYW55fX0gW3BhcmFtcy5fc3RhdGljXSBzdGF0aWPjg5fjg63jg5Hjg4bjgqPjgpLku5jkuI5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3BhcmFtcy5fZGVmaW5lZF0g5a6a576p5pmC44Gr5a6f6KGM44GX44Gf44GE6Zai5pWwXG4gICAqIEByZXR1cm4ge1BoaW5hQ2xhc3N9IOWumue+qeOBl+OBn+OCr+ODqeOCuVxuICAgKi9cbiAgZGVmaW5lOiBmdW5jdGlvbiAocGF0aCwgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5zdXBlckNsYXNzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcy5zdXBlckNsYXNzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBfc3VwZXJDbGFzcyA9IHRoaXMudXNpbmcocGFyYW1zLnN1cGVyQ2xhc3MpO1xuICAgICAgICBpZiAodHlwZW9mIF9zdXBlckNsYXNzICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmICghX2NsYXNzRGVmaW5lZENhbGxiYWNrW3BhcmFtcy5zdXBlckNsYXNzXSkge1xuICAgICAgICAgICAgX2NsYXNzRGVmaW5lZENhbGxiYWNrW3BhcmFtcy5zdXBlckNsYXNzXSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfY2xhc3NEZWZpbmVkQ2FsbGJhY2tbcGFyYW1zLnN1cGVyQ2xhc3NdLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmUocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJhbXMuc3VwZXJDbGFzcyA9IF9zdXBlckNsYXNzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMuc3VwZXJDbGFzcyA9IHBhcmFtcy5zdXBlckNsYXNzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY2xhc3MgPSB0aGlzLmNyZWF0ZUNsYXNzKC8qKiBAdHlwZSBDcmVhdGVDbGFzc1BhcmFtICovIChwYXJhbXMpKTtcbiAgICAvLyBfY2xhc3MucHJvdG90eXBlLmFjY2Vzc29yKCdjbGFzc05hbWUnLCB7XG4gICAgYWNjZXNzb3IuY2FsbChfY2xhc3MucHJvdG90eXBlLCBcImNsYXNzTmFtZVwiLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlcihwYXRoLCBfY2xhc3MpO1xuXG4gICAgaWYgKF9jbGFzc0RlZmluZWRDYWxsYmFja1twYXRoXSkge1xuICAgICAgX2NsYXNzRGVmaW5lZENhbGxiYWNrW3BhdGhdLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICAgIF9jbGFzc0RlZmluZWRDYWxsYmFja1twYXRoXSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfSxcblxuICAvKipcbiAgICogQG1ldGhvZCBnbG9iYWxpemVcbiAgICogcGhpbmEuanMg44GM55So5oSP44GX44Gm44GE44KL5YWo44Gm44Gu44Kv44Op44K544KS44Kw44Ot44O844OQ44Or44Gr5bGV6ZaL44GX44G+44GZ44CC77yI5YW35L2T55qE44Gr44GvIHBoaW5hIOOBjOaMgeOBpOOCquODluOCuOOCp+OCr+ODiOOBjOS4gOmAmuOCiuOCsOODreODvOODkOODq+OBq+WxlemWi+OBleOCjOOBvuOBmeOAgu+8iVxuICAgKiDjgZPjga7plqLmlbDjgpLlrp/ooYzjgZnjgovjgZPjgajjgafjgIHjgYTjgaHjgYTjgaEgZ2xvYmFsIOOBi+OCieOBn+OBqeOBo+OBpuOBhOOBi+OBquOBj+OBpuOCgiBwaGluYS5qcyDjga7nlKjmhI/jgZfjgabjgYTjgovjgq/jg6njgrnjgpLjgq/jg6njgrnlkI3jgaDjgZHjgaflkbzjgbPlh7rjgZnjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICogQG1lbWJlcm9mIHBoaW5hXG4gICAqIEBzdGF0aWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIHNwcml0ZTEgPSBwaGluYS5kaXNwbGF5LlNwcml0ZShcInBpeW9cIik7IFxuICAgKiBwaGluYS5nbG9iYWxpemUoKTtcbiAgICogdmFyIHNwcml0ZTIgPSBTcHJpdGUoXCJwaXlvXCIpOyAvLyBzcHJpdGUx44Go562J5L6hXG4gICAqXG4gICAqL1xuICBnbG9iYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwaGluYS5mb3JJbihcbiAgICBmb3JJbi5jYWxsKHRoaXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHJldHVybjtcblxuICAgICAgLy8gdmFsdWUuZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgZm9ySW4uY2FsbCh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgLy8gaWYgKHBoaW5hLmdsb2JhbFtrZXldKSB7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2cobnMsIGtleSk7XG4gICAgICAgIC8vICAgcGhpbmEuZ2xvYmFsWydfJyArIGtleV0gPSB2YWx1ZTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgLy8gICBwaGluYS5nbG9iYWxba2V5XSA9IHZhbHVlO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMuZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfbWFpbkxpc3RlbmVyczogW10sXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfbWFpbkxvYWRlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbWFpblxuICAgKiBwaGluYS5qcyDjgafjg5fjg63jgrDjg6njg5/jg7PjgrDjgZnjgovpmpvjgIHjg6HjgqTjg7Pjga7lh6bnkIbjgpLoqJjov7DjgZnjgovjgZ/jgoHjga7plqLmlbDjgafjgZnjgIJcbiAgICog5Z+65pys55qE44GrIHBoaW5hLmpzIOOBp+OBruODl+ODreOCsOODqeODn+ODs+OCsOOBp+OBr+OBk+OBruS4reOBq+ODl+ODreOCsOODqeODoOOCkuabuOOBhOOBpuOBhOOBj+OBk+OBqOOBq+OBquOCiuOBvuOBmeOAglxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogQHN0YXRpY1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwaGluYS5tYWluKGZ1bmN0aW9uKCkge1xuICAgKiAgIC8v44GT44GT44Gr44Oh44Kk44Oz44Gu5Yem55CG44KS5pu444GPXG4gICAqIH0pO1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIOODoeOCpOODs+OBruWHpueQhlxuICAgKi9cbiAgbWFpbjogZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAodGhpcy5fbWFpbkxvYWRlZCkge1xuICAgICAgZnVuYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tYWluTGlzdGVuZXJzLnB1c2goZnVuYyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAbWVtYmVyb2YgcGhpbmFcbiAgICogTm9kZS5qcyDjgarjgokgZ2xvYmFs44CBIOODluODqeOCpuOCtuOBquOCiSB3aW5kb3cg44KS6L+U44GX44G+44GZ44CCXG4gICAqIOOCsuODg+OCv+ODvOOBruOBv+Wumue+qeOBleOCjOOBpuOBhOOBvuOBmeOAglxuICAgKi9cbiAgZ2V0IGdsb2JhbCgpIHtcbiAgICByZXR1cm4gR0xPQkFMO1xuICB9LFxufTtcblxudmFyIEdMT0JBTCA9IHBoaW5hLmlzTm9kZSgpID8gZ2xvYmFsIDogd2luZG93O1xuXG52YXIgZG9jID0gcGhpbmEuZ2xvYmFsLmRvY3VtZW50O1xuaWYgKHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIGRvYyAmJiBkb2MucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gIHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjbG9uZS5jYWxsKHBoaW5hLl9tYWluTGlzdGVuZXJzKTtcbiAgICAgIC8vIHZhciBsaXN0ZW5lcnMgPSBwaGluYS5fbWFpbkxpc3RlbmVycy5jbG9uZSgpO1xuICAgICAgY2xlYXIuY2FsbChwaGluYS5fbWFpbkxpc3RlbmVycyk7XG4gICAgICAvLyBwaGluYS5fbWFpbkxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgLy8gbGlzdGVuZXJzLmVhY2goZnVuY3Rpb24oZnVuYykge1xuICAgICAgICBmdW5jKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gbWFpbiDlhoXjgacgbWFpbiDjgpLov73liqDjgZfjgabjgYTjgovloLTlkIjjgYzjgYLjgovjga7jgafjgZ3jga7jg4Hjgqfjg4Pjgq9cbiAgICAgIGlmIChwaGluYS5fbWFpbkxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJ1bigpO1xuICAgICAgICAvLyBydW4oMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaGluYS5fbWFpbkxvYWRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyDjgaHjgofjgaPjgajpgYXlu7bjgZXjgZvjgoso55S76Z2i44K144Kk44K65ZWP6aGMKVxuICAgIHNldFRpbWVvdXQocnVuKTtcbiAgfSk7XG59IGVsc2Uge1xuICBwaGluYS5fbWFpbkxvYWRlZCA9IHRydWU7XG59XG5cbi8qKlxuICogQXJyYXnjgq/jg6njgrnjga5zdGF0aWPmi6HlvLVcbiAqL1xuXG4vKipcbiAqIEBtZXRob2QgcmFuZ2VcbiAqIEBzdGF0aWNcbiAqIOOCpOODs+OCueOCv+ODs+OCueODoeOCveODg+ODieOBriB7QGxpbmsgI3JhbmdlfSDjgajlkIzjgZjjgafjgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIEFycmF5LnJhbmdlKDIsIDE0LCA1KTsgLy8gPT4gWzIsIDcsIDEyXVxuICovXG5mdW5jdGlvbiByYW5nZSQxKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgcmV0dXJuIHJhbmdlLmFwcGx5KFtdLCBhcmd1bWVudHMpO1xufVxuLy8gQXJyYXkuJG1ldGhvZChcInJhbmdlXCIsIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbi8vICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5yYW5nZS5hcHBseShbXSwgYXJndW1lbnRzKTtcbi8vIH0pO1xuXG52YXIgYXJyYXlTdGF0aWNFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIHJhbmdlOiByYW5nZSQxXG59KTtcblxuLyoqXG4gKiBAY2xhc3MgZ2xvYmFsLk51bWJlclxuICogIyDmi6HlvLXjgZfjgZ8gTnVtYmVyIOOCr+ODqeOCuVxuICog5pWw5YCk44KS5omx44GGIE51bWJlciDjgq/jg6njgrnjgpLmi6HlvLXjgZfjgabjgYTjgb7jgZnjgIJcbiAqL1xuXG4vKipcbiAqIEBtZXRob2QgdGltZXNcbiAqIDAg44GL44KJ6Ieq5YiG6Ieq6Lqr44Gu5pWwLTHjgb7jgafjgIHjgqvjgqbjg7Pjgr/jgpLjgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFtdO1xuICogICAgICg1KS50aW1lcyhmdW5jdGlvbihpKXtcbiAqICAgICAgIGFyci5wdXNoKGkpO1xuICogICAgIH0pOyAvLyA9PiBbMCwgMSwgMiwgMywgNF1cbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICovXG5mdW5jdGlvbiB0aW1lcyhmbiwgc2VsZikge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidGltZXNcIiwgIGZ1bmN0aW9uKGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG4gIGZvciAodmFyIGk9MDsgaTx0aGlzOyArK2kpIHtcbiAgICBmbi5jYWxsKHNlbGYsIGksIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEBtZXRob2Qgc3RlcFxuICog6Ieq5YiG6Ieq6Lqr44Gu5YCk44GL44KJ5oyH5a6a44GX44Gf5pWw44G+44Gn44CB44Kr44Km44Oz44K/44KS5aKX5YiG44GV44Gb44Gq44GM44KJ6Zai5pWw44KS57mw44KK6L+U44GX5a6f6KGM44GX44G+44GZ44CCXG4gKlxuICog5LiK6ZmQ5YCk44KE5aKX5YiG5YCk44GvIGZsb2F0IOWei+OCkuaMh+WumuOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgdmFyIGFyciA9IFtdO1xuICogICAgICgyLjQpLnN0ZXAoNS4zLCAwLjgsIGZ1bmN0aW9uKG4pIHtcbiAqICAgICAgIGFyci5wdXNoKG4pO1xuICogICAgICB9KTsgLy8gPT4gWzIuNCwgMy4yLCA0LjAsIDQuOF1cbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBsaW1pdCDjgqvjgqbjg7Pjgr/jga7kuIrpmZDlgKRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGVwIOOCq+OCpuODs+OCv+OCkuWil+WIhuOBmeOCi+mHj1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g44Kz44O844Or44OQ44OD44Kv6Zai5pWw44CC5byV5pWw44Gr44Kr44Km44Oz44K/44GM5rih44GV44KM44KL44CCXG4gKiBAcGFyYW0ge09iamVjdH0gW3NlbGY9dGhpc10g6Zai5pWw5YaF44GnIHRoaXMg44Go44GX44Gm5Y+C54Wn44GV44KM44KL5YCk44CC44OH44OV44Kp44Or44OI44Gv6Ieq5YiG6Ieq6Lqr44CCXG4gKi9cbmZ1bmN0aW9uIHN0ZXAobGltaXQsIHN0ZXAsIGZuLCBzZWxmKSB7XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJzdGVwXCIsICBmdW5jdGlvbihsaW1pdCwgc3RlcCwgZm4sIHNlbGYpIHtcbiAgc2VsZiA9IHNlbGYgfHwgdGhpcztcbiAgZm9yICh2YXIgaT0rdGhpczsgaTw9bGltaXQ7IGkrPXN0ZXApIHtcbiAgICBmbi5jYWxsKHNlbGYsIGksIHRoaXMpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5cbi8vID09PT09PT09PT1cbi8vIOS7peS4i+ODqeOCpOODluODqeODquWGheOBp+OBr+acquS9v+eUqFxuLy8gPT09PT09PT09PVxuXG4vKipcbiAqIEBtZXRob2Qgcm91bmRcbiAqIOaMh+WumuOBl+OBn+Wwj+aVsOOBruS9jeOCkuWbm+aNqOS6lOWFpeOBl+OBn+WApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqIOiyoOOBruWApOOCkuaMh+WumuOBmeOCi+OBqOaVtOaVsOmDqOOBruS9jeOCkuWbm+aNqOS6lOWFpeOBp+OBjeOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDEzLjg3KS5yb3VuZCgpOyAvLyA9PiAxNFxuICogICAgICgtMS44Nykucm91bmQoKTsgLy8gPT4gLTJcbiAqICAgICAoLTEuMjcpLnJvdW5kKCk7IC8vID0+IC0xXG4gKiAgICAgXG4gKiAgICAgKDIuMzQ1KS5yb3VuZCgpOyAvLyA9PiAyXG4gKiAgICAgKDIuMzQ1KS5yb3VuZCgxKTsgLy8gPT4gMi4zXG4gKiAgICAgKDIuMzQ1KS5yb3VuZCgyKTsgLy8gPT4gMi4zNVxuICpcbiAqICAgICAoMTIzNDUuNjcpLnJvdW5kKC0zKTsgLy8gPT4gMTIwMDBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZmlndXJlPTBdIOWbm+aNqOS6lOWFpeOBmeOCi+S9jVxuICogQHJldHVybiB7TnVtYmVyfSDlsI/mlbDnrKwgZmlndXJlIOS9jeOBp+Wbm+aNqOS6lOWFpeOBl+OBn+WApFxuICovXG5mdW5jdGlvbiByb3VuZChmaWd1cmUpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInJvdW5kXCIsIGZ1bmN0aW9uKGZpZ3VyZSkge1xuICBmaWd1cmUgPSBmaWd1cmUgfHwgMDtcbiAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgZmlndXJlKTtcbiAgdmFyIHRlbXAgPSB0aGlzICogYmFzZTtcbiAgdGVtcCA9IE1hdGgucm91bmQodGVtcCk7XG4gIHJldHVybiB0ZW1wL2Jhc2U7XG59XG5cbi8qKlxuICogQG1ldGhvZCBjZWlsXG4gKiDmjIflrprjgZfjgZ/lsI/mlbDjga7kvY3jgpLliIfjgorkuIrjgZLjgZ/lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiDosqDjga7lgKTjgpLmjIflrprjgZnjgovjgajmlbTmlbDpg6jjga7kvY3jgpLliIfjgorkuIrjgZLjgonjgozjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgtMS4yNykuY2VpbCgpOyAvLyA9PiAtMVxuICogICAgICgtMS44NykuY2VpbCgpOyAvLyA9PiAtMVxuICogICAgIFxuICogICAgICgyLjM0NSkuY2VpbCgpOyAvLyA9PiAzXG4gKiAgICAgKDIuMzQ1KS5jZWlsKDEpOyAvLyA9PiAyLjRcbiAqICAgICAoMi4zNDUpLmNlaWwoMik7IC8vID0+IDIuMzVcbiAqXG4gKiAgICAgKDEyMzQ1LjY3KS5jZWlsKC0zKTsgLy8gPT4gMTMwMDBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZmlndXJlPTBdIOWIh+OCiuS4iuOBkuOCi+S9jVxuICogQHJldHVybiB7TnVtYmVyfSDlsI/mlbDnrKwgZmlndXJlIOS9jeOBp+WIh+OCiuS4iuOBkuOBn+WApFxuICovXG5mdW5jdGlvbiBjZWlsKGZpZ3VyZSkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiY2VpbFwiLCAgZnVuY3Rpb24oZmlndXJlKSB7XG4gIGZpZ3VyZSA9IGZpZ3VyZSB8fCAwO1xuICB2YXIgYmFzZSA9IE1hdGgucG93KDEwLCBmaWd1cmUpO1xuICB2YXIgdGVtcCA9IHRoaXMgKiBiYXNlO1xuICB0ZW1wID0gTWF0aC5jZWlsKHRlbXApO1xuICByZXR1cm4gdGVtcC9iYXNlO1xufVxuXG4vKipcbiAqIEBtZXRob2QgZmxvb3JcbiAqIOaMh+WumuOBl+OBn+Wwj+aVsOOBruS9jeOCkuWIh+OCiuS4i+OBkuOBn+WApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqIOiyoOOBruWApOOCkuaMh+WumuOBmeOCi+OBqOaVtOaVsOmDqOOBruS9jeOCkuWIh+OCiuS4i+OBkuOCieOCjOOBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKC0xLjI3KS5mbG9vcigpOyAvLyA9PiAtMlxuICogICAgICgtMS44NykuZmxvb3IoKTsgLy8gPT4gLTJcbiAqICAgICBcbiAqICAgICAoMi4zNDUpLmZsb29yKCk7IC8vID0+IDJcbiAqICAgICAoMi4zNDUpLmZsb29yKDEpOyAvLyA9PiAyLjNcbiAqICAgICAoMi4zNDUpLmZsb29yKDIpOyAvLyA9PiAyLjM0XG4gKlxuICogICAgICgxMjM0NS42NykuZmxvb3IoLTMpOyAvLyA9PiAxMjAwMFxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHBhcmFtIHtOdW1iZXJ9IFtmaWd1cmU9MF0g5YiH44KK5LiL44GS44KL5L2NXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOWwj+aVsOesrCBmaWd1cmUg5L2N44Gn5YiH44KK5LiL44GS44Gf5YCkXG4gKi9cbmZ1bmN0aW9uIGZsb29yKGZpZ3VyZSkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiZmxvb3JcIiwgIGZ1bmN0aW9uKGZpZ3VyZSkge1xuICBmaWd1cmUgPSBmaWd1cmUgfHwgMDtcbiAgdmFyIGJhc2UgPSBNYXRoLnBvdygxMCwgZmlndXJlKTtcbiAgdmFyIHRlbXAgPSB0aGlzICogYmFzZTtcbiAgdGVtcCA9IE1hdGguZmxvb3IodGVtcCk7XG4gIFxuICAvLyB+fnRoaXNcbiAgLy8gdGhpc3wwXG4gIFxuICByZXR1cm4gdGVtcC9iYXNlO1xufVxuXG4vKipcbiAqIEBtZXRob2QgdG9JbnRcbiAqIOaVsOWApOOCkuaVtOaVsOOBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDQyLjE5NSkudG9JbnQoKTsgLy8gPT4gNDJcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g5pW05pWw5YCkXG4gKi9cbmZ1bmN0aW9uIHRvSW50KCkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidG9JbnRcIiwgIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMgfCAwKTtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIHRvSGV4XG4gKiDmlbDlgKTjgpIxNumAsuaVsOihqOiomOOBq+OBl+OBn+aWh+Wtl+WIl+OCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDI2KS50b0hleCgpOyAvLyA9PiBcIjFhXCJcbiAqICAgICAoLTI2KS50b0hleCgpOyAvLyA9PiBcIi0xYVwiXG4gKiAgICAgKDI2LjI1KS50b0hleCgpOyAvLyA9PiBcIjFhLjRcIlxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7U3RyaW5nfSAxNumAsuaVsOihqOiomOOBruaWh+Wtl+WIl1xuICovXG5mdW5jdGlvbiB0b0hleCgpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInRvSGV4XCIsICBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xufVxuXG4vKipcbiAqIEBtZXRob2QgdG9CaW5cbiAqIOaVsOWApOOCkjLpgLLmlbDooajoqJjjgavjgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICg2KS50b0JpbigpOyAvLyA9PiBcIjExMFwiXG4gKiAgICAgKC02KS50b0JpbigpOyAvLyA9PiBcIi0xMTBcIlxuICogICAgICgweEEzKS50b0JpbigpOyAvLyA9PiBcIjEwMTAwMDExXCJcbiAqICAgICAoNi4yNSkudG9IZXgoKTsgLy8gPT4gXCIxMTAuMDFcIlxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7U3RyaW5nfSAy6YCy5pWw6KGo6KiY44Gu5paH5a2X5YiXXG4gKi9cbmZ1bmN0aW9uIHRvQmluKCkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidG9CaW5cIiwgIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygyKTtcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgdG9VbnNpZ25lZFxuICog5pWw5YCk44KSIHVuc2lnbmVkIGludCDlnovjgavlpInmj5vjgZfjgb7jgZnjgIJcbiAqXG4gKiDmlbDlgKTjgpLnrKblj7fnhKHjgZfmlbTmlbDjgajjgZfjgaboqZXkvqHjgZfjgZ/lgKTjgpLov5TjgZfjgb7jgZnjgIIgIFxuICogSmF2YXNjcmlwdOOBruODk+ODg+ODiOa8lOeul+OBp+OBr+aVsOWApOOCkuespuWPt+S7mOOBjeOBrjMyYml05pW05pWw44Go44GX44Gm5omx44GG44Gf44KB44CBUkdCQSDjgpJcbiAqIOaVtOaVsOWApOOBp+ihqOePvuOBl+OBpua8lOeul+OBmeOCi+WgtOWQiOOAgeacn+W+hemAmuOCiuOBrue1kOaenOOBjOW+l+OCieOCjOOBquOBhOWgtOWQiOOBjOOBguOCiuOBvuOBmeOAglxuICog44Gd44GT44Gn5pys6Zai5pWw44GnIHVuc2lnbmVkIGludCDlnovjgavlpInmj5vjgZnjgovjgZPjgajjgafmnJ/lvoXpgJrjgorjga7lgKTjgpLlvpfjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIHJnYmEgPSAweGZlZmZmZmZmICYgMHhmZjAwMDAwMDsgLy8gPT4gLTMzNTU0NDMyXG4gKiAgICAgcmdiYS50b0hleCgpOyAvLyA9PiBcIi0yMDAwMDAwXCJcbiAqICAgICByZ2JhLnRvVW5zaWduZWQoKS50b0hleCgpOyAvLyA9PiBcImZlMDAwMDAwXCJcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0gdW5zaWduZWQgaW50IOWei+OBq+WkieaPm+OBl+OBn+WApFxuICovXG5mdW5jdGlvbiB0b1Vuc2lnbmVkKCkge1xuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwidG9VbnNpZ25lZFwiLCAgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzID4+PiAwO1xufVxuXG4vKipcbiAqIEBtZXRob2QgcGFkZGluZ1xuICog5oyH5a6a44GX44Gf5qGB44Gr44Gq44KL44KI44GG44Gr5paH5a2X44KS5Z+L44KB44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAoMTIzKS5wYWRkaW5nKDUpOyAvLyA9PiBcIjAwMTIzXCJcbiAqICAgICAoMTIzKS5wYWRkaW5nKDUsIFwiX1wiKTsgLy8gPT4gXCJfXzEyM1wiXG4gKiAgICAgKC0xMikucGFkZGluZyg1KTsgLy8gPT4gXCItMDAxMlwiXG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcGFyYW0ge051bWJlcn0gbiDmoYHmlbBcbiAqIEBwYXJhbSB7U3RyaW5nfSBbY2g9XCIwXCJdIOWfi+OCgeOCi+aWh+Wtl1xuICogQHJldHVybiB7U3RyaW5nfSDmoYHmlbDjgpLmj4PjgYjjgZ/mloflrZfliJdcbiAqL1xuZnVuY3Rpb24gcGFkZGluZyQxKG4sIGNoKSB7XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJwYWRkaW5nXCIsICBmdW5jdGlvbihuLCBjaCkge1xuICB2YXIgc3RyID0gdGhpcysnJztcbiAgbiAgPSBuLXN0ci5sZW5ndGg7XG4gIGNoID0gKGNoIHx8ICcwJylbMF07XG4gIFxuICB3aGlsZShuLS0gPiAwKSB7IHN0ciA9IGNoICsgc3RyOyB9XG4gIFxuICBpZiAoc3RyLmluZGV4T2YoXCItXCIpID49IDApIHtcbiAgICBzdHIgPSBcIi1cIiArIHN0ci5yZXBsYWNlKFwiLVwiLCBcIlwiKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogQG1ldGhvZCB1cHRvXG4gKiDoh6rliIboh6rouqvjga7mlbDjgYvjgonmjIflrprjgZfjgZ/mlbDjgb7jgafjgIHjgqvjgqbjg7Pjgr/jgpLjgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jjgZfjgarjgYzjgonplqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgb7jgZnjgIJcbiAqXG4gKiDmjIflrprjgZfjgZ/mlbDjgYzoh6rliIboh6rouqvjga7mlbDjgojjgorlsI/jgZXjgYTloLTlkIjjga/plqLmlbDjga/lrp/ooYzjgZXjgozjgb7jgZvjgpPjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIGFyciA9IFtdO1xuICogICAgICg2KS51cHRvKDgsIGZ1bmN0aW9uKGkpe1xuICogICAgICAgYXJyLnB1c2goaSk7XG4gKiAgICAgfSk7XG4gKiAgICAgYXJyOyAvLyA9PiBbNiwgNywgOF1cbiAqXG4gKiAgICAgKDMpLnVwdG8oMCwgZnVuY3Rpb24oaSl7XG4gKiAgICAgICBhcnIucHVzaChpKTtcbiAqICAgICB9KTtcbiAqICAgICBhcnI7IC8vID0+IFs2LCA3LCA4XVxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g44Kz44O844Or44OQ44OD44Kv6Zai5pWw44CC5byV5pWw44Gr44Kr44Km44Oz44K/44GM5rih44GV44KM44KL44CCXG4gKiBAcGFyYW0ge09iamVjdH0gW3NlbGY9dGhpc10g6Zai5pWw5YaF44GnIHRoaXMg44Go44GX44Gm5Y+C54Wn44GV44KM44KL5YCk44CC44OH44OV44Kp44Or44OI44Gv6Ieq5YiG6Ieq6Lqr44CCXG4gKi9cbmZ1bmN0aW9uIHVwdG8odCwgZm4sIHNlbGYpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInVwdG9cIiwgIGZ1bmN0aW9uKHQsIGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG4gIGZvciAodmFyIGk9K3RoaXM7IGk8PXQ7ICsraSkge1xuICAgIGZuLmNhbGwoc2VsZiwgaSwgdGhpcyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBkb3dudG9cbiAqIOiHquWIhuiHqui6q+OBruaVsOOBi+OCieaMh+WumuOBl+OBn+aVsOOBvuOBp+OAgeOCq+OCpuODs+OCv+OCkuODh+OCr+ODquODoeODs+ODiOOBl+OBquOBjOOCiemWouaVsOOCkue5sOOCiui/lOOBl+Wun+ihjOOBl+OBvuOBmeOAglxuICpcbiAqIOaMh+WumuOBl+OBn+aVsOOBjOiHquWIhuiHqui6q+OBruaVsOOCiOOCiuWkp+OBjeOBhOWgtOWQiOOBr+mWouaVsOOBr+Wun+ihjOOBleOCjOOBvuOBm+OCk+OAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgYXJyID0gW107XG4gKiAgICAgKDcpLmRvd250byg0LCBmdW5jdGlvbihpKXtcbiAqICAgICAgIGFyci5wdXNoKGkpO1xuICogICAgIH0pOyAvLyA9PiBbNywgNiwgNSwgNF1cbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOOCs+ODvOODq+ODkOODg+OCr+mWouaVsOOAguW8leaVsOOBq+OCq+OCpuODs+OCv+OBjOa4oeOBleOCjOOCi+OAglxuICogQHBhcmFtIHtPYmplY3R9IFtzZWxmPXRoaXNdIOmWouaVsOWGheOBpyB0aGlzIOOBqOOBl+OBpuWPgueFp+OBleOCjOOCi+WApOOAguODh+ODleOCqeODq+ODiOOBr+iHquWIhuiHqui6q+OAglxuICovXG5mdW5jdGlvbiBkb3dudG8odCwgZm4sIHNlbGYpIHtcbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImRvd250b1wiLCAgZnVuY3Rpb24odCwgZm4sIHNlbGYpIHtcbiAgc2VsZiA9IHNlbGYgfHwgdGhpcztcbiAgZm9yICh2YXIgaT0rdGhpczsgaT49dDsgLS1pKSB7XG4gICAgZm4uY2FsbChzZWxmLCBpLCB0aGlzKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEBtZXRob2QgbWFwXG4gKiAw44GL44KJ6Ieq5YiG6Ieq6Lqr44Gu5YCkLTHjgb7jgafjgqvjgqbjg7Pjgr/jgpLjgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jjgZXjgZvjgarjgYzjgonjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgpLnubDjgorov5TjgZflrp/ooYzjgZfjgIFcbiAqIOOBneOBrui/lOOCiuWApOOCkuimgee0oOOBqOOBmeOCi+mFjeWIl+OCkueUn+aIkOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDUpLm1hcChmdW5jdGlvbihpKSB7XG4gKiAgICAgICByZXR1cm4gaSppO1xuICogICAgIH0pOyAvLyA9PiBbMCwgMSwgNCwgOSwgMTZdXG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgILlvJXmlbDjgavjgqvjgqbjg7Pjgr/jgYzmuKHjgZXjgozjgovjgIJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbc2VsZj10aGlzXSDplqLmlbDlhoXjgacgdGhpcyDjgajjgZfjgablj4LnhafjgZXjgozjgovlgKTjgILjg4fjg5Xjgqnjg6vjg4jjga/oh6rliIboh6rouqvjgIJcbiAqIEByZXR1cm4ge0FycmF5fSDnlJ/miJDjgZfjgZ/phY3liJdcbiAqL1xuZnVuY3Rpb24gbWFwKGZuLCBzZWxmKSB7XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJtYXBcIiwgIGZ1bmN0aW9uKGZuLCBzZWxmKSB7XG4gIHNlbGYgPSBzZWxmIHx8IHRoaXM7XG5cbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgZm9yICh2YXIgaT0wOyBpPHRoaXM7ICsraSkge1xuICAgIHZhciByID0gZm4uY2FsbChzZWxmLCBpKTtcbiAgICByZXN1bHRzLnB1c2gocik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogQG1ldGhvZCBhYnNcbiAqIOe1tuWvvuWApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKC01KS5hYnMoKTsgLy8gPT4gNVxuICogICAgICgrNSkuYWJzKCk7IC8vID0+IDVcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g57W25a++5YCkXG4gKi9cbmZ1bmN0aW9uIGFicygpIHsgcmV0dXJuIE1hdGguYWJzKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImFic1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguYWJzKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgYWNvc1xuICog44Ki44O844Kv44Kz44K144Kk44Oz77yI44Op44K444Ki44Oz5Y2Y5L2N77yJ44KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAoMCkuYXNpbigpOyAvLyA9PiAwXG4gKiAgICAgKDEpLmFzaW4oKTsgLy8gPT4gMS41NzA3OTYzMjY3OTQ4OTY2XG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOOCouODvOOCr+OCs+OCteOCpOODs1xuICovXG5mdW5jdGlvbiBhY29zKCkgeyByZXR1cm4gTWF0aC5hY29zKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImFjb3NcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNYXRoLmFjb3ModGhpcykgfSk7XG5cbi8qKlxuICogQG1ldGhvZCBhc2luXG4gKiDjgqLjg7zjgq/jgrXjgqTjg7PvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgxKS5hY29zKCk7IC8vID0+IDBcbiAqICAgICAoLTEpLmFjb3MoKTsgLy8gPT4gMy4xNDE1OTI2NTM1ODk3OTNcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44Ki44O844Kv44K144Kk44OzXG4gKi9cbmZ1bmN0aW9uIGFzaW4oKSB7IHJldHVybiBNYXRoLmFzaW4odGhpcykgfVxuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiYXNpblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguYXNpbih0aGlzKSB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIGF0YW5cbiAqIOOCouODvOOCr+OCv+ODs+OCuOOCp+ODs+ODiO+8iOODqeOCuOOCouODs+WNmOS9je+8ieOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDApLmF0YW4oKTsgLy8gPT4gMFxuICogICAgICgxKS5hdGFuKCk7IC8vID0+IDAuNzg1Mzk4MTYzMzk3NDQ4M1xuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDjgqLjg7zjgq/jgr/jg7Pjgrjjgqfjg7Pjg4hcbiAqL1xuZnVuY3Rpb24gYXRhbigpIHsgcmV0dXJuIE1hdGguYXRhbih0aGlzKSB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJhdGFuXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5hdGFuKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgY29zXG4gKiDjgrPjgrXjgqTjg7PvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIChNYXRoLlBJLzMpLmNvcygpOyAvLyA9PiAwLjVcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44Kz44K144Kk44OzXG4gKi9cbmZ1bmN0aW9uIGNvcygpIHsgcmV0dXJuIE1hdGguY29zKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImNvc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguY29zKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgZXhwXG4gKiBlPHN1cD50aGlzPC9zdXA+IOOCkui/lOOBl+OBvuOBmeOAguOBk+OBk+OBpyBlIOOBr+iHqueEtuWvvuaVsOOBruW6leOBp+OBguOCi+ODjeOCpOODlOOCouaVsO+8iOOCquOCpOODqeODvOaVsO+8ieOBp+OBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDIpLmV4cCgpOyAvLyA9PiBlPHN1cD4yPC9zdXA+XG4gKiAgICAgKDApLmV4cCgpOyAvLyA9PiAxXG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGU8c3VwPng8L3N1cD5cbiAqL1xuZnVuY3Rpb24gZXhwKCkgeyByZXR1cm4gTWF0aC5leHAodGhpcykgfVxuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwiZXhwXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5leHAodGhpcykgfSk7XG5cbi8qKlxuICogQG1ldGhvZCBsb2dcbiAqIOiHqueEtuWvvuaVsOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKE1hdGguRSAqIE1hdGguRSAqIE1hdGguRSkubG9nKCk7IC8vID0+IDNcbiAqICAgICAoMSkubG9nKCk7IC8vID0+IDBcbiAqICAgICAoMCkubG9nKCk7IC8vID0+IC1JbmZpbml0eVxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDoh6rnhLblr77mlbBcbiAqL1xuZnVuY3Rpb24gbG9nKCkgeyByZXR1cm4gTWF0aC5sb2codGhpcykgfVxuLy8gTnVtYmVyLnByb3RvdHlwZS4kbWV0aG9kKFwibG9nXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5sb2codGhpcykgfSk7XG5cbi8qKlxuICogQG1ldGhvZCBtYXhcbiAqIOiHquWIhuiHqui6q+OBqOW8leaVsOOBruWApOOCkuavlOOBueOAgeWkp+OBjeOBhOaWueOBruWApOOCkui/lOOBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDE1KS5tYXgoMTApOyAvLyA9PiAxNVxuICogICAgICgxNSkubWF4KDkwKTsgLy8gPT4gOTBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSDmr5TovIPjgZnjgovlgKRcbiAqIEByZXR1cm4ge051bWJlcn0g5pyA5aSn5YCkXG4gKi9cbmZ1bmN0aW9uIG1heCh2YWx1ZSkgeyByZXR1cm4gTWF0aC5tYXgodGhpcywgdmFsdWUpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcIm1heFwiLCBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gTWF0aC5tYXgodGhpcywgdmFsdWUpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgbWluXG4gKiDoh6rliIboh6rouqvjgajlvJXmlbDjga7lgKTjgpLmr5TjgbnjgIHlsI/jgZXjgYTmlrnjga7lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgxNSkubWluKDEwKTsgLy8gPT4gMTBcbiAqICAgICAoMTUpLm1pbig5MCk7IC8vID0+IDE1XG4gKlxuICogQHRoaXMgTnVtYmVyXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWUg5q+U6LyD44GZ44KL5YCkXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IOacgOWwj+WApFxuICovXG5mdW5jdGlvbiBtaW4odmFsdWUpIHsgcmV0dXJuIE1hdGgubWluKHRoaXMsIHZhbHVlKSB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJtaW5cIiwgZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIE1hdGgubWluKHRoaXMsIHZhbHVlKSB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsYW1wXG4gKiDmjIflrprjgZfjgZ/nr4Tlm7Ljgavlj47jgoHjgZ/lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgyMDApLmNsYW1wKDAsIDY0MCk7IC8vID0+IDIwMFxuICogICAgICgtMTUpLmNsYW1wKDAsIDY0MCk7IC8vID0+IDBcbiAqICAgICAoOTk5KS5jbGFtcCgwLCA2NDApOyAvLyA9PiA2NDBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaW4g56+E5Zuy44Gu5LiL6ZmQXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IOevhOWbsuOBruS4iumZkFxuICogQHJldHVybiB7TnVtYmVyfSDnr4Tlm7LlhoXjgavlj47jgoHjgZ/lgKRcbiAqL1xuZnVuY3Rpb24gY2xhbXAkMShtaW4sIG1heCkgeyByZXR1cm4gY2xhbXAodGhpcywgbWluLCBtYXgpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcImNsYW1wXCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLmNsYW1wKHRoaXMsIG1pbiwgbWF4KSB9KTtcblxuLyoqXG4gKiBAbWV0aG9kIHBvd1xuICog6Ieq5YiG6Ieq6Lqr44KSIGV4cG9uZW50IOS5l+OBl+OBn+WApOOAgeOBpOOBvuOCiiB0aGlzPHN1cD5leHBvbmVudDwvc3VwPiDjga7lgKTjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgICgzKS5wb3coMik7IC8vID0+IDlcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBleHBvbmVudCDntK/kuZfjgZnjgovmjIfmlbBcbiAqIEByZXR1cm4ge051bWJlcn0g57Sv5LmX44GX44Gf57WQ5p6c44Gu5YCkXG4gKi9cbmZ1bmN0aW9uIHBvdyhleHBvbmVudCkgeyByZXR1cm4gTWF0aC5wb3codGhpcywgZXhwb25lbnQpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInBvd1wiLCBmdW5jdGlvbihleHBvbmVudCkgeyByZXR1cm4gTWF0aC5wb3codGhpcywgZXhwb25lbnQpIH0pO1xuXG4vKipcbiAqIEBtZXRob2Qgc2luXG4gKiDjgrXjgqTjg7PvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIChNYXRoLlBJLzQpLnNpbigpOyAvLyA9PiAwLjcwNzEwNjc4MTE4NjU0NzZcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44K144Kk44OzXG4gKi9cbmZ1bmN0aW9uIHNpbigpIHsgcmV0dXJuIE1hdGguc2luKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInNpblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguc2luKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2Qgc3FydFxuICog5bmz5pa55qC544KS6L+U44GX44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAoNDkpLnNxcnQoKTsgLy8gPT4gN1xuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDlubPmlrnmoLlcbiAqL1xuZnVuY3Rpb24gc3FydCgpIHsgcmV0dXJuIE1hdGguc3FydCh0aGlzKSB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJzcXJ0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWF0aC5zcXJ0KHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgdGFuXG4gKiDjgr/jg7Pjgrjjgqfjg7Pjg4jvvIjjg6njgrjjgqLjg7PljZjkvY3vvInjgpLov5TjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogICAgIChNYXRoLlBJLzQpLnRhbigpOyAvLyA9PiAxLjBcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44K/44Oz44K444Kn44Oz44OIXG4gKi9cbmZ1bmN0aW9uIHRhbigpIHsgcmV0dXJuIE1hdGgudGFuKHRoaXMpIH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInRhblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGgudGFuKHRoaXMpIH0pO1xuXG4vKipcbiAqIEBtZXRob2QgdG9EZWdyZWVcbiAqIOODqeOCuOOCouODs+OCkuW6puOBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgTWF0aC5yYWRUb0RlZyhNYXRoLlBJLzQpOyAvLyA9PiA0NVxuICpcbiAqIEB0aGlzIE51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSDluqZcbiAqL1xuZnVuY3Rpb24gdG9EZWdyZWUoKSB7IHJldHVybiAodGhpcyAqIFJBRF9UT19ERUcpOyB9XG4vLyBOdW1iZXIucHJvdG90eXBlLiRtZXRob2QoXCJ0b0RlZ3JlZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuICh0aGlzKk1hdGguUkFEX1RPX0RFRyk7IH0pO1xuXG4vKipcbiAqIEBtZXRob2QgdG9SYWRpYW5cbiAqIOW6puOCkuODqeOCuOOCouODs+OBq+WkieaPm+OBl+OBvuOBmeOAglxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiAgICAgKDE4MCkudG9SYWRpYW4oKTsgLy8gPT4gMy4xNDE1OTI2NTM1ODk3OTNcbiAqXG4gKiBAdGhpcyBOdW1iZXJcbiAqIEByZXR1cm4ge051bWJlcn0g44Op44K444Ki44OzXG4gKi9cbmZ1bmN0aW9uIHRvUmFkaWFuKCkgeyByZXR1cm4gdGhpcyAqIERFR19UT19SQUQ7IH1cbi8vIE51bWJlci5wcm90b3R5cGUuJG1ldGhvZChcInRvUmFkaWFuXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcypNYXRoLkRFR19UT19SQUQ7IH0pO1xuXG52YXIgbnVtYmVyRXh0ZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICB0aW1lczogdGltZXMsXG4gIHN0ZXA6IHN0ZXAsXG4gIHJvdW5kOiByb3VuZCxcbiAgY2VpbDogY2VpbCxcbiAgZmxvb3I6IGZsb29yLFxuICB0b0ludDogdG9JbnQsXG4gIHRvSGV4OiB0b0hleCxcbiAgdG9CaW46IHRvQmluLFxuICB0b1Vuc2lnbmVkOiB0b1Vuc2lnbmVkLFxuICBwYWRkaW5nOiBwYWRkaW5nJDEsXG4gIHVwdG86IHVwdG8sXG4gIGRvd250bzogZG93bnRvLFxuICBtYXA6IG1hcCxcbiAgYWJzOiBhYnMsXG4gIGFjb3M6IGFjb3MsXG4gIGFzaW46IGFzaW4sXG4gIGF0YW46IGF0YW4sXG4gIGNvczogY29zLFxuICBleHA6IGV4cCxcbiAgbG9nOiBsb2csXG4gIG1heDogbWF4LFxuICBtaW46IG1pbixcbiAgY2xhbXA6IGNsYW1wJDEsXG4gIHBvdzogcG93LFxuICBzaW46IHNpbixcbiAgc3FydDogc3FydCxcbiAgdGFuOiB0YW4sXG4gIHRvRGVncmVlOiB0b0RlZ3JlZSxcbiAgdG9SYWRpYW46IHRvUmFkaWFuXG59KTtcblxuLyoqXG4gKiBAY2xhc3MgZ2xvYmFsLkRhdGVcbiAqICMg5ouh5by144GX44GfIERhdGUg44Kv44Op44K5XG4gKiDml6Xku5jjgpLmibHjgYYgRGF0ZSDjgq/jg6njgrnjgpLmi6HlvLXjgZfjgabjgYTjgb7jgZnjgIJcbiAqL1xuXG52YXIgTU9OVEggPSBbXG4gICdKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ1xuXTtcblxudmFyIFdFRUsgPSBbXG4gICdTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSdcbl07XG5cbi8qKlxuICogQG1ldGhvZCBmb3JtYXRcbiAqIOaMh+WumuOBl+OBn+ODleOCqeODvOODnuODg+ODiOOBq+W+k+OBo+OBpuaXpeS7mOOCkuaWh+Wtl+WIl+WMluOBl+OBvuOBmeOAglxuICpcbiAqIDx0YWJsZSBib3JkZXI9XCIxXCI+XG4gKiAgIDx0cj48dGQ+5aSJ5o+b5oyH5a6a5paH5a2X5YiXPC90ZD48dGQ+5oSP5ZGzPC90ZD48L3RyPlxuICogICA8dHI+PHRkPnl5eXk8L3RkPjx0ZD7opb/mmqblubTvvIg05qGB77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPnl5PC90ZD48dGQ+6KW/5pqm5bm077yIMuahge+8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD55PC90ZD48dGQ+6KW/5pqm5bm0PC90ZD48L3RyPlxuICogICA8dHI+PHRkPk1NTU08L3RkPjx0ZD7mnIjvvIjoi7Hoqp7lkI3vvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+TU1NPC90ZD48dGQ+5pyI77yI6Iux6Kqe55yB55Wl5ZCN77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPk1NPC90ZD48dGQ+5pyI77yIMuahgeaVsOWtl++8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5NPC90ZD48dGQ+5pyIPC90ZD48L3RyPlxuICogICA8dHI+PHRkPmRkPC90ZD48dGQ+5pel77yIMuahge+8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5kPC90ZD48dGQ+5pelPC90ZD48L3RyPlxuICogICA8dHI+PHRkPkVFRUU8L3RkPjx0ZD7mm5zml6XvvIjoi7Hoqp7lkI3vvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+RUVFPC90ZD48dGQ+5puc5pel77yI6Iux6Kqe55yB55Wl5ZCN77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPkhIPC90ZD48dGQ+5pmC77yIMjTmmYLplpPooajoqJjjg7sy5qGB77yJPC90ZD48L3RyPlxuICogICA8dHI+PHRkPkg8L3RkPjx0ZD7mmYLvvIgyNOaZgumWk+ihqOiomO+8iTwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5tbTwvdGQ+PHRkPuWIhu+8iDLmoYHvvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+bTwvdGQ+PHRkPuWIhjwvdGQ+PC90cj5cbiAqICAgPHRyPjx0ZD5zczwvdGQ+PHRkPuenku+8iDLmoYHvvIk8L3RkPjwvdHI+XG4gKiAgIDx0cj48dGQ+czwvdGQ+PHRkPuenkjwvdGQ+PC90cj5cbiAqIDwvdGFibGU+XG4gKiDmoYHmlbDjgYzmjIflrprjgZXjgozjgabjgYTjgovjgoLjga7jga8w44OR44OH44Kj44Oz44Kw44GV44KM44G+44GZ44CCXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICAobmV3IERhdGUoKSkuZm9ybWF0KFwieXl5eS1NTS1kZChFRUUpXCIpOyAvLyA9PiBcIjIwMTYtMDQtMDUoVHVlKVwiIOOBquOBqVxuICpcbiAqIEB0aGlzIERhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIOODleOCqeODvOODnuODg+ODiOaWh+Wtl+WIl1xuICogQHJldHVybiB7U3RyaW5nfSDjg5Xjgqnjg7zjg57jg4Pjg4jmloflrZfliJfjgavlvpPjgaPjgabnlJ/miJDjgZXjgozjgZ/mloflrZfliJdcbiAqL1xuZnVuY3Rpb24gZm9ybWF0JDEocGF0dGVybikge1xuLy8gRGF0ZS5wcm90b3R5cGUuJG1ldGhvZCgnZm9ybWF0JywgZnVuY3Rpb24ocGF0dGVybikge1xuICB2YXIgeWVhciAgICA9IHRoaXMuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIG1vbnRoICAgPSB0aGlzLmdldE1vbnRoKCk7XG4gIHZhciBkYXRlICAgID0gdGhpcy5nZXREYXRlKCk7XG4gIHZhciBkYXkgICAgID0gdGhpcy5nZXREYXkoKTtcbiAgdmFyIGhvdXJzICAgPSB0aGlzLmdldEhvdXJzKCk7XG4gIHZhciBtaW51dGVzID0gdGhpcy5nZXRNaW51dGVzKCk7XG4gIHZhciBzZWNvbmRzID0gdGhpcy5nZXRTZWNvbmRzKCk7XG4gIHZhciBtaWxsc2Vjb25kcyA9IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gIFxuICB2YXIgcGF0dGVybnMgPSB7XG4gICAgJ3l5eXknOiBwYWRkaW5nLmNhbGwoU3RyaW5nKHllYXIpLCA0LCAnMCcpLFxuICAgIC8vICd5eXl5JzogU3RyaW5nKHllYXIpLnBhZGRpbmcoNCwgJzAnKSxcbiAgICAneXknOiB5ZWFyLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIpLFxuICAgICd5JzogeWVhcixcblxuICAgICdNTU1NJzogTU9OVEhbbW9udGhdLFxuICAgICdNTU0nOiBNT05USFttb250aF0uc3Vic3RyKDAsIDMpLFxuICAgICdNTSc6IHBhZGRpbmcuY2FsbChTdHJpbmcobW9udGgrMSksIDIsICcwJyksXG4gICAgLy8gJ01NJzogU3RyaW5nKG1vbnRoKzEpLnBhZGRpbmcoMiwgJzAnKSxcbiAgICAnTSc6IChtb250aCsxKSxcblxuICAgICdkZCc6IHBhZGRpbmcuY2FsbChTdHJpbmcoZGF0ZSksIDIsICcwJyksXG4gICAgLy8gJ2RkJzogU3RyaW5nKGRhdGUpLnBhZGRpbmcoMiwgJzAnKSxcbiAgICAnZCc6IGRhdGUsXG5cbiAgICAnRUVFRSc6IFdFRUtbZGF5XSxcbiAgICAnRUVFJzogV0VFS1tkYXldLnN1YnN0cigwLCAzKSxcblxuICAgICdISCc6IHBhZGRpbmcuY2FsbChTdHJpbmcoaG91cnMpLCAyLCAnMCcpLFxuICAgIC8vICdISCc6IFN0cmluZyhob3VycykucGFkZGluZygyLCAnMCcpLFxuICAgICdIJzogaG91cnMsXG5cbiAgICAnbW0nOiBwYWRkaW5nLmNhbGwoU3RyaW5nKG1pbnV0ZXMpLCAyLCAnMCcpLFxuICAgIC8vICdtbSc6IFN0cmluZyhtaW51dGVzKS5wYWRkaW5nKDIsICcwJyksXG4gICAgJ20nOiBtaW51dGVzLFxuXG4gICAgJ3NzJzogcGFkZGluZy5jYWxsKFN0cmluZyhzZWNvbmRzKSwgMiwgJzAnKSxcbiAgICAvLyAnc3MnOiBTdHJpbmcoc2Vjb25kcykucGFkZGluZygyLCAnMCcpLFxuICAgICdzJzogc2Vjb25kcyxcbiAgICBcbiAgICAvLyAvLyBkYXRlXG4gICAgLy8gJ2QnOiBTdHJpbmcoJzAwJyArIGRhdGUpLnNsaWNlKC0yKSxcbiAgICAvLyAnRCc6IFdFRUtbZGF5XS5zdWJzdHIoMCwgMyksXG4gICAgLy8gJ2onOiBkYXRlLFxuICAgIC8vICdsJzogV0VFS1tkYXldLFxuICAgIFxuICAgIC8vIC8vIG1vbnRoXG4gICAgLy8gJ20nOiBTdHJpbmcoJzAwJyArIChtb250aCsxKSkuc2xpY2UoLTIpLFxuICAgIC8vICdNJzogTU9OVEhbbW9udGhdLnN1YnN0cigwLCAzKSxcbiAgICAvLyAnbic6IChtb250aCsxKSxcbiAgICAvLyAnRic6IE1PTlRIW21vbnRoXSxcbiAgICBcbiAgICAvLyAvLyB5ZWFyXG4gICAgLy8gJ3knOiB5ZWFyLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIpLFxuICAgIC8vICdZJzogeWVhcixcbiAgICBcbiAgICAvLyAvLyB0aW1lXG4gICAgLy8gJ0cnOiBob3VycyxcbiAgICAvLyAnSCc6IFN0cmluZygnMDAnICsgaG91cnMpLnNsaWNlKC0yKSxcbiAgICAvLyAnaSc6IFN0cmluZygnMDAnICsgbWludXRlcykuc2xpY2UoLTIpLFxuICAgIC8vICdzJzogU3RyaW5nKCcwMCcgKyBzZWNvbmRzKS5zbGljZSgtMiksXG4gICAgLy8gJ1MnOiBTdHJpbmcoJzAwMCcgKyBtaWxsc2Vjb25kcykuc2xpY2UoLTMpLFxuICB9O1xuXG4gIHZhciByZWdzdHIgPSAnKCcgKyBPYmplY3Qua2V5cyhwYXR0ZXJucykuam9pbignfCcpICsgJyknO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKHJlZ3N0ciwgJ2cnKTtcblxuICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKHJlLCBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gcGF0dGVybnNbc3RyXTtcbiAgfSk7XG59XG5cbnZhciBkYXRlRXh0ZW5zaW9ucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBmb3JtYXQ6IGZvcm1hdCQxXG59KTtcblxuLyoqXG4gKiBAY2xhc3MgZ2xvYmFsLkRhdGVcbiAqIERhdGXjgq/jg6njgrnjga5zdGF0aWPmi6HlvLVcbiAqL1xuXG4vKipcbiAqIEBtZXRob2QgY2FsY3VsYXRlQWdlXG4gKiBAc3RhdGljXG4gKiDmjIflrprjgZfjgZ/oqpXnlJ/ml6XjgYvjgonjgIHnj77lnKjjgb7jgZ/jga/mjIflrprjgZfjgZ/ml6Xku5jjgavjgYrjgZHjgovlubTpvaLjgpLoqIjnrpfjgZfjgb7jgZnjgIJcbiAqXG4gKiAjIyNSZWZlcmVuY2VcbiAqIC0gW0phdmFzY3JpcHTjgafoqpXnlJ/ml6XjgYvjgonnj77lnKjjga7lubTpvaLjgpLnrpflh7pdKGh0dHA6Ly9xaWl0YS5jb20vbjBiaXN1a2UvaXRlbXMvZGQ1MzdiZDRjYmU5YWI1MDFjZTgpXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqICAgICBEYXRlLmNhbGN1bGF0ZUFnZShcIjE5OTAtMDEtMTdcIik7IC8vID0+IDI2IOOBquOBqVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfERhdGV9IGJpcnRoZGF5IOiqleeUn+aXpVxuICogQHBhcmFtIHtTdHJpbmd8RGF0ZX0gW3doZW495pys5pelXSDln7rmupbjga7ml6Xku5hcbiAqIEByZXR1cm4ge051bWJlcn0g5bm06b2iXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUFnZShiaXJ0aGRheSwgd2hlbikge1xuLy8gRGF0ZS4kbWV0aG9kKCdjYWxjdWxhdGVBZ2UnLCBmdW5jdGlvbihiaXJ0aGRheSwgd2hlbikge1xuICAvLyBiaXJ0aGRheVxuICBpZiAodHlwZW9mIGJpcnRoZGF5ID09PSAnc3RyaW5nJykge1xuICAgIGJpcnRoZGF5ID0gbmV3IERhdGUoYmlydGhkYXkpO1xuICB9XG4gIC8vIHdoZW5cbiAgaWYgKCF3aGVuKSB7XG4gICAgd2hlbiA9IG5ldyBEYXRlKCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIHdoZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgd2hlbiA9IG5ldyBEYXRlKHdoZW4pO1xuICB9XG5cbiAgdmFyIGJuID0gbmV3IERhdGUoYmlydGhkYXkuZ2V0VGltZSgpKS5zZXRGdWxsWWVhcigyNTYpO1xuICB2YXIgd24gPSBuZXcgRGF0ZSh3aGVuLmdldFRpbWUoKSkuc2V0RnVsbFllYXIoMjU2KTtcbiAgdmFyIHN0ZXAgPSAod24gPCBibikgPyAxIDogMDtcblxuICByZXR1cm4gKHdoZW4uZ2V0RnVsbFllYXIoKSAtIGJpcnRoZGF5LmdldEZ1bGxZZWFyKCkpIC0gc3RlcDtcbn1cblxudmFyIGRhdGVTdGF0aWNFeHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGNhbGN1bGF0ZUFnZTogY2FsY3VsYXRlQWdlXG59KTtcblxuLyoqXG4gKiBNb3VzZUV2ZW50L1RvdWNo5ouh5by1XG4gKiDjg57jgqbjgrnjga5Y5bqn5qiZLlxuICovXG52YXIgcG9pbnRYID0ge1xuICAvKiogQHRoaXMge01vdXNlRXZlbnR8VG91Y2h9ICovXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50WCAtIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovKHRoaXMudGFyZ2V0KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICB9XG59O1xuXG4vKipcbiAqIE1vdXNlRXZlbnQvVG91Y2jmi6HlvLVcbiAqIOODnuOCpuOCueOBrlnluqfmqJkuXG4gKi9cbnZhciBwb2ludFkgPSB7XG4gIC8qKiBAdGhpcyB7TW91c2VFdmVudHxUb3VjaH0gKi9cbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRZIC0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8odGhpcy50YXJnZXQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgfVxufTtcblxuLyoqXG4gKiBUb3VjaEV2ZW505ouh5by1XG4gKiDjgr/jg4Pjg4HjgqTjg5njg7Pjg4jjga5Y5bqn5qiZLlxuICovXG52YXIgdG91Y2hQb2ludFggPSB7XG4gIC8qKiBAdGhpcyB7VG91Y2hFdmVudH0gKi9cbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50b3VjaGVzWzBdLmNsaWVudFggLSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyh0aGlzLnRhcmdldCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAvLyByZXR1cm4gdGhpcy50b3VjaGVzWzBdLnBhZ2VYIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIHRtLmdsb2JhbC5zY3JvbGxYO1xuICB9XG59O1xuXG4vKipcbiAqIFRvdWNoRXZlbnTmi6HlvLVcbiAqIOOCv+ODg+ODgeOCpOODmeODs+ODiOOBrlnluqfmqJkuXG4gKi9cbnZhciB0b3VjaFBvaW50WSA9IHtcbiAgLyoqIEB0aGlzIHtUb3VjaEV2ZW50fSAqL1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRvdWNoZXNbMF0uY2xpZW50WSAtIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovKHRoaXMudGFyZ2V0KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgLy8gcmV0dXJuIHRoaXMudG91Y2hlc1swXS5wYWdlWSAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHRtLmdsb2JhbC5zY3JvbGxZO1xuICB9XG59O1xuXG4vKipcbiAqIGdsb2JhbC5FdmVudFxuICog5pei5a2Y44GuRXZlbnTjgqrjg5bjgrjjgqfjgq/jg4jmi6HlvLVcbiAqL1xuXG4vKipcbiAqIEBtZXRob2Qgc3RvcFxuICog44Kk44OZ44Oz44OI44Gu44OH44OV44Kp44Or44OI5Yem55CGICYg5Lyd6YGU44KS5q2i44KB44KLXG4gKi9cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIC8vIOOCpOODmeODs+ODiOOCreODo+ODs+OCu+ODq1xuICB0aGlzLnByZXZlbnREZWZhdWx0KCk7XG4gIC8vIOOCpOODmeODs+ODiOS8nemBlOOCkuatouOCgeOCi1xuICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuXG5cbi8vIDsoZnVuY3Rpb24oKSB7XG5cbiAgLy8gaWYgKCFwaGluYS5nbG9iYWwuRXZlbnQpIHJldHVybiA7XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBnbG9iYWwuRXZlbnRcbiAgICog5pei5a2Y44GuRXZlbnTjgqrjg5bjgrjjgqfjgq/jg4jmi6HlvLVcbiAgICovXG4gICAgXG4gIC8vIC8qKlxuICAvLyAgKiBAbWV0aG9kIHN0b3BcbiAgLy8gICog44Kk44OZ44Oz44OI44Gu44OH44OV44Kp44Or44OI5Yem55CGICYg5Lyd6YGU44KS5q2i44KB44KLXG4gIC8vICAqL1xuICAvLyBFdmVudC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIC8vIOOCpOODmeODs+ODiOOCreODo+ODs+OCu+ODq1xuICAvLyAgIHRoaXMucHJldmVudERlZmF1bHQoKTtcbiAgLy8gICAvLyDjgqTjg5njg7Pjg4jkvJ3pgZTjgpLmraLjgoHjgotcbiAgLy8gICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuICAvLyB9O1xuXG4vLyB9KSgpO1xuXG5cbi8vIChmdW5jdGlvbigpIHtcblxuLy8gICBpZiAoIXBoaW5hLmdsb2JhbC5Nb3VzZUV2ZW50KSByZXR1cm4gO1xuXG4vLyAgIC8qKlxuLy8gICAgKiBAY2xhc3MgZ2xvYmFsLk1vdXNlRXZlbnRcbi8vICAgICogTW91c2VFdmVudCDjgq/jg6njgrlcbi8vICAgICovXG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFhcbi8vICAgICog44Oe44Km44K544GuWOW6p+aomS5cbi8vICAgICovXG4vLyAgIE1vdXNlRXZlbnQucHJvdG90eXBlLmdldHRlcihcInBvaW50WFwiLCBmdW5jdGlvbigpIHtcbi8vICAgICByZXR1cm4gdGhpcy5jbGllbnRYIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbi8vICAgICAvLyByZXR1cm4gdGhpcy5wYWdlWCAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB3aW5kb3cuc2Nyb2xsWDtcbi8vICAgfSk7XG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFlcbi8vICAgICog44Oe44Km44K544GuWeW6p+aomS5cbi8vICAgICovXG4vLyAgIE1vdXNlRXZlbnQucHJvdG90eXBlLmdldHRlcihcInBvaW50WVwiLCBmdW5jdGlvbigpIHtcbi8vICAgICByZXR1cm4gdGhpcy5jbGllbnRZIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuLy8gICAgIC8vIHJldHVybiB0aGlzLnBhZ2VZIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gd2luZG93LnNjcm9sbFk7XG4vLyAgIH0pO1xuICAgIFxuLy8gfSkoKTtcblxuXG4vLyAoZnVuY3Rpb24oKSB7XG4gICAgXG4vLyAgIGlmICghcGhpbmEuZ2xvYmFsLlRvdWNoRXZlbnQpIHJldHVybiA7XG4gIFxuICBcbi8vICAgLyoqXG4vLyAgICAqIEBjbGFzcyBnbG9iYWwuVG91Y2hFdmVudFxuLy8gICAgKiBUb3VjaEV2ZW50IOOCr+ODqeOCuVxuLy8gICAgKi9cbiAgXG4vLyAgIC8qKlxuLy8gICAgKiBAbWV0aG9kICAgIHBvaW50WFxuLy8gICAgKiDjgr/jg4Pjg4HjgqTjg5njg7Pjg4guXG4vLyAgICAqL1xuLy8gICBUb3VjaEV2ZW50LnByb3RvdHlwZS5nZXR0ZXIoXCJwb2ludFhcIiwgZnVuY3Rpb24oKSB7XG4vLyAgICAgICByZXR1cm4gdGhpcy50b3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuLy8gICAgICAgLy8gcmV0dXJuIHRoaXMudG91Y2hlc1swXS5wYWdlWCAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB0bS5nbG9iYWwuc2Nyb2xsWDtcbi8vICAgfSk7XG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFlcbi8vICAgICog44K/44OD44OB44Kk44OZ44Oz44OILlxuLy8gICAgKi9cbi8vICAgVG91Y2hFdmVudC5wcm90b3R5cGUuZ2V0dGVyKFwicG9pbnRZXCIsIGZ1bmN0aW9uKCkge1xuLy8gICAgICAgcmV0dXJuIHRoaXMudG91Y2hlc1swXS5jbGllbnRZIC0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuLy8gICAgICAgLy8gcmV0dXJuIHRoaXMudG91Y2hlc1swXS5wYWdlWSAtIHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHRtLmdsb2JhbC5zY3JvbGxZO1xuLy8gICB9KTsgIFxuICAgIFxuLy8gfSkoKTtcblxuXG4vLyAoZnVuY3Rpb24oKSB7XG4gICAgXG4vLyAgIGlmICghcGhpbmEuZ2xvYmFsLlRvdWNoKSByZXR1cm4gO1xuICBcbi8vICAgLyoqXG4vLyAgICAqIEBjbGFzcyBnbG9iYWwuVG91Y2hcbi8vICAgICogVG91Y2hFdmVudCDjgq/jg6njgrlcbi8vICAgICovXG4gIFxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFhcbi8vICAgICog44K/44OD44OB44Kk44OZ44Oz44OILlxuLy8gICAgKi9cbi8vICAgVG91Y2gucHJvdG90eXBlLmdldHRlcihcInBvaW50WFwiLCBmdW5jdGlvbigpIHtcbi8vICAgICAgIHJldHVybiB0aGlzLmNsaWVudFggLSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuLy8gICB9KTtcblxuLy8gICAvKipcbi8vICAgICogQG1ldGhvZCAgICBwb2ludFlcbi8vICAgICog44K/44OD44OB44Kk44OZ44Oz44OILlxuLy8gICAgKi9cbi8vICAgVG91Y2gucHJvdG90eXBlLmdldHRlcihcInBvaW50WVwiLCBmdW5jdGlvbigpIHtcbi8vICAgICAgIHJldHVybiB0aGlzLmNsaWVudFkgLSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4vLyAgIH0pO1xuICAgIFxuLy8gfSkoKTtcblxuLyoqIEB0eXBlZGVmIHtcIk9iamVjdFwifFwiQXJyYXlcInxcIkFycmF5U3RhdGljXCJ8XCJNYXRoXCJ8XCJTdHJpbmdcInxcIk51bWJlclwifFwiRGF0ZVwifFwiRGF0ZVN0YXRpY1wifSBFeHRlbmRhYmxlT2JqZWN0VHlwZSAqL1xuLyoqIEB0eXBlZGVmIHt7IFtrZXkgaW4gRXh0ZW5kYWJsZU9iamVjdFR5cGVdOiBhbnkgfSB9IE9iamVjdFR5cGVNYXBGb3JFeHRlbnNpb24gKi9cbi8qKiBAdHlwZWRlZiB7eyBba2V5IGluIEV4dGVuZGFibGVPYmplY3RUeXBlXTogRnVuY3Rpb24gfCBpbXBvcnQoJy4vcGhpbmEnKS5BY2Nlc3NvckV4dGVuZE9iamVjdCB8IG51bWJlciB8IHN0cmluZyB9fSBFeHRlbnNpb25NZXRob2RNYXAgKi9cblxuLyoqXG4gKiDjgqvjgrnjgr/jg6Djg6Hjgr3jg4Pjg4njgpLlrprnvqlcbiAqIEBwYXJhbSB7YW55fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKi9cbmZ1bmN0aW9uIF9kZWZpbmVNZXRob2Qob2JqLCBtZXRob2ROYW1lLCBmdW5jKSB7XG4gIHJldHVybiAkbWV0aG9kLmNhbGwob2JqLCBtZXRob2ROYW1lLCBmdW5jKTtcbiAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSwge1xuICAvLyAgIHZhbHVlOiBmdW5jLFxuICAvLyAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAvLyAgIHdyaXRhYmxlOiB0cnVlXG4gIC8vIH0pXG59XG5cbi8qKlxuICog44Kr44K544K/44Og44Ki44Kv44K744K144KS5a6a576pXG4gKiBAcGFyYW0ge2FueX0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ30gYWNjZXNzb3JOYW1lXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9waGluYScpLkFjY2Vzc29yRXh0ZW5kT2JqZWN0fSBleHRlbmRPYmpcbiAqL1xuZnVuY3Rpb24gX2RlZmluZUFjY2Vzc29yKG9iaiwgYWNjZXNzb3JOYW1lLCBleHRlbmRPYmopIHtcbiAgcmV0dXJuIGFjY2Vzc29yLmNhbGwob2JqLCBhY2Nlc3Nvck5hbWUsIGV4dGVuZE9iaik7XG59XG5cbi8qKlxuICog5rGO55So44Kq44OW44K444Kn44Kv44OI5ouh5by16Zai5pWwXG4gKiBAcGFyYW0ge2FueX0gdGFyZ2V0T2JqIOWvvuixoeODk+ODq+ODiOOCpOODs+OCquODluOCuOOCp+OCr+ODiCBleCkgQXJyYXkucHJvdG90eXBlXG4gKiBAcGFyYW0ge0V4dGVuc2lvbk1ldGhvZE1hcH0gZXh0ZW5zaW9uTWFwXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmQodGFyZ2V0T2JqLCBleHRlbnNpb25NYXApIHtcbiAgT2JqZWN0LmtleXMoZXh0ZW5zaW9uTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICB2YXIgdmFsdWUgPSBleHRlbnNpb25NYXBba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIF9kZWZpbmVNZXRob2QodGFyZ2V0T2JqLCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAodmFsdWUuZ2V0IHx8IHZhbHVlLnNldCkpIHtcbiAgICAgIF9kZWZpbmVBY2Nlc3Nvcih0YXJnZXRPYmosIGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyDjgZ3jga7ku5ZzdGF0aWPlgKTjgIFNYXRoLkRFR19UT19SQUTjgarjgalcbiAgICAgIHRhcmdldE9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jlkI3np7AgPC0+IOWun+mam+OBruOCquODluOCuOOCp+OCr+ODiFxuICogQHR5cGUge09iamVjdFR5cGVNYXBGb3JFeHRlbnNpb259XG4gKi9cbnZhciBFeHRlbmRhYmxlT2JqZWN0VHlwZU1hcCA9IHtcbiAgT2JqZWN0OiBPYmplY3QucHJvdG90eXBlLFxuICBBcnJheTogQXJyYXkucHJvdG90eXBlLFxuICBBcnJheVN0YXRpYzogQXJyYXksXG4gIE1hdGg6IE1hdGgsIC8vIE1hdGjjga9TdGF0aWPjga7jgb9cbiAgU3RyaW5nOiBTdHJpbmcucHJvdG90eXBlLFxuICBOdW1iZXI6IE51bWJlci5wcm90b3R5cGUsXG4gIERhdGU6IERhdGUucHJvdG90eXBlLFxuICBEYXRlU3RhdGljOiBEYXRlLFxufTtcblxuLyoqXG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jlkI3np7AgPC0+IOaLoeW8teODoeOCveODg+ODieODnuODg+ODl1xuICogQHR5cGUge09iamVjdFR5cGVNYXBGb3JFeHRlbnNpb259XG4gKiAqL1xudmFyIEV4dGVuc2lvblR5cGVNYXAgPSB7XG4gIE9iamVjdDogb2JqZWN0RXh0ZW5zaW9ucyxcbiAgQXJyYXk6IGFycmF5RXh0ZW5zaW9ucyxcbiAgQXJyYXlTdGF0aWM6IGFycmF5U3RhdGljRXh0ZW5zaW9ucyxcbiAgTWF0aDogbWF0aEV4dGVuc2lvbnMsXG4gIFN0cmluZzogc3RyaW5nRXh0ZW5zaW9ucyxcbiAgTnVtYmVyOiBudW1iZXJFeHRlbnNpb25zLFxuICBEYXRlOiBkYXRlRXh0ZW5zaW9ucyxcbiAgRGF0ZVN0YXRpYzogZGF0ZVN0YXRpY0V4dGVuc2lvbnMsXG59O1xuXG4vKipcbiAqIE9iamVjdOOBquOBqeOBruaomea6lue1hOOBv+i+vOOBv+OCquODluOCuOOCp+OCr+ODiOOBruaLoeW8teOCkuihjOOBhlxuICogLSDlvJXmlbDnhKHmjIflrprjgafjga/lhajjgabjga7mi6HlvLXjgpLooYzjgYZcbiAqIC0g5ouh5by144GX44Gf44GE44Kq44OW44K444Kn44Kv44OI44CB44Oh44K944OD44OJ44KS5paH5a2X5YiX44Gn5oyH5a6a44GZ44KL44GT44Go44KC5Y+v6IO9XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIOWFqOaLoeW8te+8iOW+k+adpeOBrnBoaW5hLmpz44Gu54q25oWL77yJXG4gKiBleHRlbmRCdWlsdEluT2JqZWN0KCk7XG4gKlxuICogLy8gTnVtYmVy44Kq44OW44K444Kn44Kv44OI44Gu5LiA6YOo44Oh44K944OD44OJ44Gg44GR5ouh5by1XG4gKiBleHRlbmRCdWlsdEluT2JqZWN0KFwiTnVtYmVyXCIsIFtcImNsYW1wXCIsIFwidXB0b1wiXSk7XG4gKlxuICogQHBhcmFtIHtFeHRlbmRhYmxlT2JqZWN0VHlwZX0gW29iamVjdFR5cGVdIFwiQXJyYXlcIuOBquOBqeOBruWvvuixoeOCquODluOCuOOCp+OCr+ODiOaWh+Wtl+WIl1xuICogQHBhcmFtIHtzdHJpbmdbXX0gW21ldGhvZE5hbWVMaXN0XSDjg6Hjgr3jg4Pjg4nlkI3mloflrZfliJdcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBleHRlbmRCdWlsdEluT2JqZWN0KG9iamVjdFR5cGUsIG1ldGhvZE5hbWVMaXN0KSB7XG4gIGlmICghb2JqZWN0VHlwZSkge1xuICAgIC8vIOaLoeW8teWFqOOBpuOCkuS4gOaLrOOBp+ihjOOBhlxuICAgIE9iamVjdC5rZXlzKEV4dGVuZGFibGVPYmplY3RUeXBlTWFwKS5mb3JFYWNoKChvYmpUeXBlKSA9PiB7XG4gICAgICBfZXh0ZW5kKEV4dGVuZGFibGVPYmplY3RUeXBlTWFwW29ialR5cGVdLCBFeHRlbnNpb25UeXBlTWFwW29ialR5cGVdKTtcbiAgICB9KTtcbiAgICAvLyBfZXh0ZW5kKE9iamVjdC5wcm90b3R5cGUsIG9iamVjdEV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoQXJyYXkucHJvdG90eXBlLCBhcnJheUV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoQXJyYXksIGFycmF5U3RhdGljRXh0ZW5zaW9ucyk7XG4gICAgLy8gX2V4dGVuZChTdHJpbmcucHJvdG90eXBlLCBzdHJpbmdFeHRlbnNpb25zKTtcbiAgICAvLyBfZXh0ZW5kKE51bWJlci5wcm90b3R5cGUsIG51bWJlckV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoTWF0aCwgbWF0aEV4dGVuc2lvbnMpO1xuICAgIC8vIF9leHRlbmQoRGF0ZS5wcm90b3R5cGUsIGRhdGVFeHRlbnNpb25zKTtcbiAgICAvLyBfZXh0ZW5kKERhdGUsIGRhdGVTdGF0aWNFeHRlbnNpb25zKTtcbiAgfSBlbHNlIHtcbiAgICAvLyDlgIvliKXmi6HlvLVcbiAgICB2YXIgdGFyZ2V0T2JqZWN0ID0gRXh0ZW5kYWJsZU9iamVjdFR5cGVNYXBbb2JqZWN0VHlwZV07XG4gICAgaWYgKCF0YXJnZXRPYmplY3QpIHtcbiAgICAgIC8vIGAke29iamVjdFR5cGV944Gv5ouh5by15Y+v6IO95a++6LGh44Gn44Gv44GC44KK44G+44Gb44KTYFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWV0aG9kTmFtZUxpc3QpIHtcbiAgICAgIGNvbnN0IGV4dHMgPSBFeHRlbnNpb25UeXBlTWFwW29iamVjdFR5cGVdO1xuXG4gICAgICAvKiogQHR5cGUgRXh0ZW5zaW9uTWV0aG9kTWFwICovXG4gICAgICBjb25zdCBtZXRob2RNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgbWV0aG9kTmFtZUxpc3QuZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgICAgICBpZiAoIWV4dHNbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICAvLyBUT0RPOiBubyBtZXRob2QgZXJyb3JcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0aG9kTWFwW21ldGhvZE5hbWVdID0gZXh0c1ttZXRob2ROYW1lXTtcbiAgICAgIH0pO1xuXG4gICAgICBfZXh0ZW5kKHRhcmdldE9iamVjdCwgbWV0aG9kTWFwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGFyZ2V0T2JqZWN044Gu5ouh5by15YWo44Gm44KS6KGM44GGXG4gICAgICBjb25zdCBleHRzID0gRXh0ZW5zaW9uVHlwZU1hcFtvYmplY3RUeXBlXTtcbiAgICAgIF9leHRlbmQodGFyZ2V0T2JqZWN0LCBleHRzKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBkb20vRXZlbnQg5LiA5ous5ouh5by155So44Oh44K944OD44OJXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZEV2ZW50T2JqZWN0KCkge1xuICBjb25zdCBnZXR0ZXIkMSA9IGdldHRlcjtcblxuICBbTW91c2VFdmVudCwgVG91Y2hdLmZvckVhY2goKGV2ZW50T2JqZWN0KSA9PiB7XG4gICAgZ2V0dGVyJDEuY2FsbChldmVudE9iamVjdC5wcm90b3R5cGUsIFwicG9pbnRYXCIsIHBvaW50WC5nZXQpO1xuICAgIGdldHRlciQxLmNhbGwoZXZlbnRPYmplY3QucHJvdG90eXBlLCBcInBvaW50WVwiLCBwb2ludFkuZ2V0KTtcbiAgfSk7XG5cbiAgZ2V0dGVyJDEuY2FsbChUb3VjaEV2ZW50LnByb3RvdHlwZSwgXCJwb2ludFhcIiwgdG91Y2hQb2ludFguZ2V0KTtcbiAgZ2V0dGVyJDEuY2FsbChUb3VjaEV2ZW50LnByb3RvdHlwZSwgXCJwb2ludFlcIiwgdG91Y2hQb2ludFkuZ2V0KTtcblxuICBfZGVmaW5lTWV0aG9kKEV2ZW50LnByb3RvdHlwZSwgXCJzdG9wXCIsIHN0b3ApO1xufVxuXG4vKipcbiAqIOOCq+OCueOCv+ODoOOCpOODmeODs+ODiOOBruWfuuacrOODkeODqeODoeODvOOCvyAgXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCYXNpY0V2ZW50T2JqZWN0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jlkI1cbiAqIEBwcm9wZXJ0eSB7YW55fSBbdGFyZ2V0XSDjgqTjg5njg7Pjg4jlr77osaFcbiAqL1xuXG4vKipcbiAqIOOCpOODmeODs+ODiOODquOCueODiuOBqOOBquOCi+mWouaVsCAgXG4gKiB0aGlz44Gu5Y+C54Wn44Gv5ZG844Gz5Ye644GX44Gf44Kq44OW44K444Kn44Kv44OI6Ieq6Lqr44Go44Gq44KLXG4gKiBAY2FsbGJhY2sgUGhpbmFFdmVudEhhbmRsZXJcbiAqIEBwYXJhbSB7QmFzaWNFdmVudE9iamVjdCAmIHtba2V5OnN0cmluZ106YW55fX0gZXZlbnQgQmFzaWNFdmVudE9iamVjdOOBq+WKoOOBiOOAgeiHqui6q+OBp+S7mOOBkeWKoOOBiOOBn+ODh+ODvOOCv+OCkuODkeODqeODoeODvOOCv+OBqOOBl+OBpua4oeOBmeOBk+OBqOOBjOOBp+OBjeOCi1xuICogQHR5cGVkZWYge1BoaW5hRXZlbnRIYW5kbGVyfSBQaGluYUV2ZW50TGlzdGVuZXJcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICogXG4gKiAjIOOCpOODmeODs+ODiOOCkuaJseOBhuOBn+OCgeOBruOCr+ODqeOCuVxuICog44Kk44OZ44Oz44OI44KS5omx44GG44Gf44KB44Gu44Oh44K944OD44OJ44KE44OX44Ot44OR44OG44Kj44KS5a6a576p44GX44Gm44GE44KL44Kv44Op44K544Gn44GZ44CCXG4gKiBwaGluYS5qcyDjgYzmj5DkvpvjgZnjgovjgq/jg6njgrnjga7lpJrjgY/jga/jgZPjga4gRXZlbnREaXNwYXRjaGVyIOOCr+ODqeOCueOBruOCteODluOCr+ODqeOCueOBqOOBquOBo+OBpuOBhOOCi+OBn+OCgeOAgVxuICog44G744Go44KT44Gp44Gu44Kv44Op44K544Gn5a655piT44Gr44Kk44OZ44Oz44OI44KS5omx44GG44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gKlxuICog5b2T44Kv44Op44K544GrYG9uaG9nZWDjga7jgojjgYbjgatgb25+YOOBqOOBhOOBhuWQjeWJjeOBp+ODoeOCveODg+ODieOCkuWumue+qeOBmeOCi+OBk+OBqOOBp1xuICog44Kk44OZ44Oz44OI44Oq44K544OK44KS6Kit5a6a44GZ44KL44GT44Go44KC44Gn44GN44KL44GM44CB44GC44G+44KK5o6o5aWo44GV44KM44Gq44GE44CCXG4gKiDlkbzjgbPlh7rjgZXjgozjgovpoIbluo/jga/jgIHjgb7jgZpvbn7plqLmlbDjgYzlkbzjgbPlh7rjgZXjgozjgIHjgZ3jga7lvowgYG9uYOODoeOCveODg+ODiSDjgafnmbvpjLLjgZfjgZ/poIbnlarjgIJcbiAqIFxuICogQG1lbWJlcm9mIHBoaW5hXG4gKi9cbmNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7e1trOiBzdHJpbmddOiBQaGluYUV2ZW50SGFuZGxlcltdfX1cbiAgICAgKi9cbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjg6rjgrnjg4rjgpLnmbvpjLLjgZfjgb7jgZnjgIJcbiAgICog55m76Yyy44GX44Gf44Kk44OZ44Oz44OI44Oq44K544OK44Gve0BsaW5rICNmbGFyZX0g44KEIHtAbGluayAjZmlyZX3jgpJcbiAgICog5LuL44GX44Gm5a6f6KGM77yI55m654Gr77yJ44GZ44KL44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqXG4gICAqIO+8keOBpOOBruOCpOODmeODs+ODiOOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOBr+OBhOOBj+OBpOOBp+OCgueZu+mMsuOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICAgKlxuICAgKiDjgYTjgY/jgaTjgYvjga7jgrXjg5bjgq/jg6njgrnjgavjgaTjgYTjgabjga/jg6njgqTjg5bjg6njg6rjgYznibnlrprmnaHku7bkuIvjgafnmbrngavjgZnjgovjgqTjg5njg7Pjg4jjgYzjgYLjgorjgb7jgZnjgIJcbiAgICog5L6L44GI44GwIHtAbGluayAjT2JqZWN0MkR9IOOCr+ODqeOCueOCkue2meaJv+OBl+OBn+OCr+ODqeOCueOBp+OBr+ODpuODvOOCtuODvOOCpOODs+OCv+ODqeOCr+OCt+ODp+ODs+OBq+WvvuOBl+OBplxuICAgKiBcInBvaW50c3RhcnRcIuOBquOBqeOBruOCpOODmeODs+ODiOOBjOeZuueBq+OBleOCjOOBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBteU9iaiA9IG5ldyBFdmVudERpc3BhdGNoZXIoKTtcbiAgICogbXlPYmoub24oXCJteWV2ZW50XCIsICgpPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKFwiRXZlbnQgMVwiKTtcbiAgICogfSk7XG4gICAqIG15T2JqLm9uKFwibXlldmVudFwiLCAoKT0+IHtcbiAgICogICBjb25zb2xlLmxvZyhcIkV2ZW50IDJcIik7XG4gICAqIH0pO1xuICAgKiAvLyDjgqTjg5njg7Pjg4jnmbrngatcbiAgICogbXlPYmouZmxhcmUoXCJteWV2ZW50XCIpOyAvLyBcIkV2ZW50IDFcIiBcIkV2ZW50IDJcIlxuICAgKiBcbiAgICogQGV4YW1wbGVcbiAgICogLy8gdGhpc+OBr+OCouOCr+ODhuOCo+ODluOBqlNjZW5l44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIGNvbnN0IHNoYXBlID0gbmV3IENpcmNsZVNoYXBlKClcbiAgICogICAuYWRkQ2hpbGRUbyh0aGlzKVxuICAgKiAgIC5zZXRJbnRlcmFjdGl2ZSh0cnVlKSAvLyBpbnRlcmFjdGl2ZeODl+ODreODkeODhuOCo+OCknRydWXjgavjgZnjgotcbiAgICogICAuc2V0UG9zaXRpb24oNTAsIDUwKTtcbiAgICogc2hhcGUub24oXCJwb2ludHN0YXJ0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICogICBjb25zb2xlLmxvZyhcIlBvaW50ZWQgc2hhcGVcIik7XG4gICAqIH0pO1xuICAgKlxuICAgKiBAY2hhaW5hYmxlXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jjga7nqK7poZ5cbiAgICogQHBhcmFtIHtQaGluYUV2ZW50SGFuZGxlcn0gbGlzdGVuZXIg44Kk44OZ44Oz44OI44Oq44K544OK44Go44Gq44KL6Zai5pWwXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzW3R5cGVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjg6rjgrnjg4rjgpLliYrpmaTjgZfjgb7jgZnjgIJcbiAgICogXG4gICAqIOOBguOCi+eorumhnuOBruOCpOODmeODs+ODiOOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOCkuOBmeOBueOBpuWJiumZpOOBmeOCi+OBq+OBryB7QGxpbmsgI2NsZWFyRXZlbnRMaXN0ZW5lcn0g44KS5L2/55So44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIFxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBteU9iaiA9IG5ldyBFdmVudERpc3BhdGNoZXIoKTtcbiAgICogY29uc3QgZXZlbnRIYW5kbGVyID0gKCk9PiB7XG4gICAqICAgY29uc29sZS5sb2coXCJFdmVudCBmaXJlZCFcIik7XG4gICAqIH0pXG4gICAqIG15T2JqLm9uKFwibXlldmVudFwiLCBldmVudEhhbmRsZXIpO1xuICAgKiBcbiAgICogLy8g44Kk44OZ44Oz44OI55m654GrXG4gICAqIG15T2JqLmZsYXJlKFwibXlldmVudFwiKTsgLy8gXCJFdmVudCBmaXJlZCFcIlxuICAgKiBcbiAgICogLy8g44Kk44OZ44Oz44OI5YmK6ZmkXG4gICAqIG15T2JqLm9mZihcIm15ZXZlbnRcIiwgZXZlbnRIYW5kbGVyKTtcbiAgICogXG4gICAqIEBjaGFpbmFibGVcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOOCpOODmeODs+ODiOOBrueorumhnlxuICAgKiBAcGFyYW0ge1BoaW5hRXZlbnRIYW5kbGVyfSBsaXN0ZW5lciDjgqTjg5njg7Pjg4jjg6rjgrnjg4rplqLmlbBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBvZmYodHlwZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdO1xuICAgIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOODkeODqeODoeODvOOCv+OCquODluOCuOOCp+OCr+ODiOOCkuaMh+WumuOBl+OBpuOCpOODmeODs+ODiOOCkueZuueBq+OBl+OBvuOBmeOAglxuICAgKiB7QGxpbmsgI2ZsYXJlfSDjga7lhoXpg6jlh6bnkIbjgafkvb/nlKjjgIHljZjni6zjgafkvb/nlKjjgZnjgovjgZPjgajjga/nqIBcbiAgICogXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IG15T2JqID0gbmV3IEV2ZW50RGlzcGF0Y2hlcigpO1xuICAgKiBjb25zdCBmaXJlUGFyYW0gPSB7dHlwZTogXCJteWV2ZW50XCJ9XG4gICAqIG15T2JqLm9uKFwibXlldmVudFwiLCAoZSk9PiB7XG4gICAqICAgY29uc29sZS5sb2coZSk7IC8vIHt0eXBlOiBcIm15ZXZlbnRcIiwgdGFyZ2V0OiBteU9ian1cbiAgICogICBjb25zb2xlLmxvZyhlID09PSBmaXJlUGFyYW0pOyAvLyAtPiB0cnVlXG4gICAqIH0pO1xuICAgKiBcbiAgICogbXlPYmouZmlyZShmaXJlUGFyYW0pXG4gICAqIFxuICAgKiBAY2hhaW5hYmxlXG4gICAqXG4gICAqIEBwYXJhbSB7QmFzaWNFdmVudE9iamVjdH0gZSDjgqTjg5njg7Pjg4jjg5Hjg6njg6Hjg7zjgr/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICAgZmlyZShlKSB7XG4gICAgZS50YXJnZXQgPSB0aGlzO1xuICAgIHZhciBvbGRFdmVudE5hbWUgPSAnb24nICsgZS50eXBlO1xuICAgIGlmICh0aGlzW29sZEV2ZW50TmFtZV0pIHRoaXNbb2xkRXZlbnROYW1lXShlKTtcblxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZS50eXBlXTtcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAvLyB2YXIgdGVtcCA9IGxpc3RlbmVycy5jbG9uZSgpO1xuICAgICAgdmFyIHRlbXAgPSBsaXN0ZW5lcnMuc2xpY2UoMCk7XG4gICAgICBmb3IgKHZhciBpPTAsbGVuPXRlbXAubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgICAgICAgdGVtcFtpXS5jYWxsKHRoaXMsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOWQjeOCkuaMh+WumuOBl+OBpuOCq+OCueOCv+ODoOOCpOODmeODs+ODiOOCkueZuueBq+OBl+OBvuOBmeOAglxuICAgKlxuICAgKiBwYXJhbSDlvJXmlbDjgpLmjIflrprjgZnjgovjgZPjgajjgavjgojjgorjgqvjgrnjgr/jg6DjgqTjg5njg7Pjg4jjgavku7vmhI/jga7jg5fjg63jg5Hjg4bjgqPjgpLoqK3lrprjgZnjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICog44GT44KM44Gr44KI44KK44CB5ZG844Gz5Ye644GX5YWD44GM44Kk44OZ44Oz44OI44Oq44K544OK44Gr5Lu75oSP44Gu5YCk44KS5rih44GZ44GT44Go44GM44Gn44GN44G+44GZ44CCXG4gICAqIO+8iOOBn+OBoOOBlyB0YXJnZXQg44OX44Ot44OR44OG44Kj44Gr44Gv5b+F44Ga6Ieq5YiG6Ieq6Lqr44GM5qC857SN44GV44KM44G+44GZ44CC77yJXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IG15T2JqID0gbmV3IEV2ZW50RGlzcGF0Y2hlcigpO1xuICAgKiBteU9iai5vbihcIm15ZXZlbnRcIiwgKGUpPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKGUpOyAvLyB7dHlwZTogXCJteWV2ZW50XCIsIHRhcmdldDogbXlPYmosIGZvbzogXCJmb29cIn1cbiAgICogfSk7XG4gICAqIFxuICAgKiBteU9iai5mbGFyZShcIm15ZXZlbnRcIiwge2ZvbzogXCJmb29cIn0pO1xuICAgKiBcbiAgICogQGNoYWluYWJsZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDjgqvjgrnjgr/jg6DjgqTjg5njg7Pjg4jjga7lkI3liY1cbiAgICogQHBhcmFtIHthbnl9IFtwYXJhbV0g44Kr44K544K/44Og44Kk44OZ44Oz44OI44Gr44OX44Ot44OR44OG44Kj44KS6Kit5a6a44GZ44KL44Gf44KB44Gu44Kq44OW44K444Kn44Kv44OIXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAqL1xuICBmbGFyZSh0eXBlLCBwYXJhbSkge1xuICAgIHZhciBlID0ge3R5cGU6dHlwZX07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICBmb3JJbi5jYWxsKHBhcmFtLCBmdW5jdGlvbihrZXksIHZhbCkge1xuICAgICAgLy8gcGFyYW0uZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICAgICAgZVtrZXldID0gdmFsO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuZmlyZShlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4gOW6puOBoOOBkeWun+ihjOOBleOCjOOCi+OCpOODmeODs+ODiOODquOCueODiuOCkueZu+mMsuOBl+OBvuOBmeOAglxuICAgKiDmjIflrprjgZfjgZ/jgqTjg5njg7Pjg4jjg6rjgrnjg4rjgYzkuIDluqblrp/ooYzjgZXjgozjgovjgajjgIHjgZ3jga7jgqTjg5njg7Pjg4jjg6rjgrnjg4rjga/liYrpmaTjgZXjgozjgb7jgZnjgIJcbiAgICog44Gd44KM5Lul5aSW44Gu5oyZ5YuV44GvIHtAbGluayAjb259IOOBqOWQjOOBmOOBp+OBmeOAglxuICAgKiBcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgbXlPYmogPSBuZXcgRXZlbnREaXNwYXRjaGVyKCk7XG4gICAqIG15T2JqLm9uZShcImZpcmVvbmNlXCIsIChlKT0+IHtcbiAgICogICBjb25zb2xlLmxvZyhcIkV2ZW50IGZpcmVkIVwiKTtcbiAgICogfSk7XG4gICAqIFxuICAgKiBteU9iai5mbGFyZShcImZpcmVvbmNlXCIpOyAvLyBcIkV2ZW50IGZpcmVkIVwiXG4gICAqIG15T2JqLmZsYXJlKFwiZmlyZW9uY2VcIik7IC8vIOOCpOODmeODs+ODiOODquOCueODiuOBr+WJiumZpOOBleOCjOOBpuOBhOOCi+OBn+OCgeOAgeS9leOCgui1t+OBjeOBvuOBm+OCk1xuICAgKiBcbiAgICogQGNoYWluYWJsZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDjgqTjg5njg7Pjg4jjga7nqK7poZ5cbiAgICogQHBhcmFtIHtQaGluYUV2ZW50SGFuZGxlcn0gbGlzdGVuZXIg44Kk44OZ44Oz44OI44Oq44K544OK44Go44Gq44KL6Zai5pWwXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgb25lKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgc2VsZi5vZmYodHlwZSwgZnVuYyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB0aGlzLm9uKHR5cGUsIGZ1bmMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Oq44K544OK44GM55m76Yyy44GV44KM44Gm44GE44KL44GL44Gp44GG44GL44KS6Kq/44G544G+44GZ44CCXG4gICAqIFxuICAgKiDmjIflrprjgZfjgZ/jgqTjg5njg7Pjg4jjga7nqK7poZ7jgavlr77jgZnjgovjgqTjg5njg7Pjg4jjg6rjgrnjg4rjgYznmbvpjLLjgZXjgozjgabjgYTjgovloLTlkIjjga8gdHJ1ZeOAgVxuICAgKiDjgZ3jgYbjgafjgarjgYTloLTlkIjjga8gZmFsc2Ug44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IG15T2JqID0gbmV3IEV2ZW50RGlzcGF0Y2hlcigpO1xuICAgKiBteU9iai5vbihcIm15ZXZlbnRcIiwgKGUpPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKFwiRXZlbnQgZmlyZWQhXCIpO1xuICAgKiB9KTtcbiAgICogXG4gICAqIG15T2JqLmhhcyhcIm15ZXZlbnRcIik7IC8vIHRydWVcbiAgICogbXlPYmouaGFzKFwib3RoZXJldmVudFwiKTsgLy8gZmFsc2VcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOOCpOODmeODs+ODiOOBrueorumhnlxuICAgKiBAcmV0dXJuIHtib29sZWFufSDmjIflrprjgZfjgZ/jgqTjg5njg7Pjg4jjga7jgqTjg5njg7Pjg4jjg6rjgrnjg4rjgYznmbvpjLLjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICovXG4gIGhhcyh0eXBlKSB7XG4gICAgcmV0dXJuICh0aGlzLl9saXN0ZW5lcnNbdHlwZV0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9saXN0ZW5lcnNbdHlwZV0ubGVuZ3RoICE9PSAwKSB8fCAhIXRoaXNbJ29uJyArIHR5cGVdO1xuICB9XG5cbiAgLyoqXG4gICAqIOOBguOCi+eorumhnuOBruOCpOODmeODs+ODiOOBq+WvvuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuOCkuOBmeOBueOBpuWJiumZpOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDnibnlrprjga7jgqTjg5njg7Pjg4jjg6rjgrnjg4rjga7jgb/jgpLliYrpmaTjgZnjgovjgavjga8ge0BsaW5rICNvZmZ9IOOCkuS9v+eUqOOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgbXlPYmogPSBuZXcgRXZlbnREaXNwYXRjaGVyKCk7XG4gICAqIG15T2JqLm9uKFwibXlldmVudFwiLCAoZSk9PiB7XG4gICAqICAgY29uc29sZS5sb2coXCJFdmVudCBmaXJlZCFcIik7XG4gICAqIH0pO1xuICAgKiBcbiAgICogbXlPYmouY2xlYXJFdmVudExpc3RlbmVyKFwibXlldmVudFwiKTtcbiAgICogbXlPYmouZmxhcmUoXCJteWV2ZW50XCIpOyAvLyDjgqTjg5njg7Pjg4jjg6rjgrnjg4rjga/liYrpmaTjgZXjgozjgabjgYTjgovjgZ/jgoHjgIHkvZXjgoLotbfjgY3jgb7jgZvjgpNcbiAgICogXG4gICAqIEBjaGFpbmFibGVcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOOCpOODmeODs+ODiOOBrueorumhnlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNsZWFyRXZlbnRMaXN0ZW5lcih0eXBlKSB7XG4gICAgdmFyIG9sZEV2ZW50TmFtZSA9ICdvbicgKyB0eXBlO1xuICAgIGlmICh0aGlzW29sZEV2ZW50TmFtZV0pIGRlbGV0ZSB0aGlzW29sZEV2ZW50TmFtZV07XG4gICAgdGhpcy5fbGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuLyoqXG4gKiDlvpPmnaXjga5jbGVhcuODoeOCveODg+ODieOCgui/veWKoOWumue+qVxuICog44K144OW44Kv44Op44K577yIVHdlZW5lcuOCr+ODqeOCueetie+8ieOBp2NsZWFy44GM44Kq44O844OQ44O844Op44Kk44OJ44GV44KM44KL5aC05ZCI44CBY2xlYXJMaXN0ZW5lcnPjgpLkvb/nlKjjgZnjgotcbiAqL1xuJG1ldGhvZC5jYWxsKEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUsIFwiY2xlYXJcIiwgZnVuY3Rpb24odHlwZSkge1xuICAvLyBkZXByZWNhdGVk44Oh44OD44K744O844K46KGo56S677yfXG4gIHJldHVybiB0aGlzLmNsZWFyRXZlbnRMaXN0ZW5lcih0eXBlKTtcbn0pO1xuXG4vKipcbiAqIEBtZXRob2QgYWRkRXZlbnRMaXN0ZW5lclxuICoge0BsaW5rICNvbn0g44Gu44Ko44Kk44Oq44Ki44K544Gn44GZ44CCXG4gKi9cbi8qKlxuICogQG1ldGhvZCByZW1vdmVFdmVudExpc3RlbmVyXG4gKiB7QGxpbmsgI29mZn0g44Gu44Ko44Kk44Oq44Ki44K544Gn44GZ44CCXG4gKi9cbi8qKlxuICogQG1ldGhvZCBjbGVhckV2ZW50TGlzdGVuZXJcbiAqIHtAbGluayAjY2xlYXJ9IOOBruOCqOOCpOODquOCouOCueOBp+OBmeOAglxuICovXG4vKipcbiAqIEBtZXRob2QgaGFzRXZlbnRMaXN0ZW5lclxuICoge0BsaW5rICNoYXN9IOOBruOCqOOCpOODquOCouOCueOBp+OBmeOAglxuICovXG4vKipcbiAqIEBtZXRob2QgZGlzcGF0Y2hFdmVudFxuICoge0BsaW5rICNmaXJlfSDjga7jgqjjgqTjg6rjgqLjgrnjgafjgZnjgIJcbiAqL1xuLyoqXG4gKiBAbWV0aG9kIGRpc3BhdGNoRXZlbnRCeVR5cGVcbiAqIHtAbGluayAjZmxhcmV9IOOBruOCqOOCpOODquOCouOCueOBp+OBmeOAglxuICovXG5jb25zdCBtZXRob2RNYXAgPSB7XG4gIGFkZEV2ZW50TGlzdGVuZXI6ICdvbicsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6ICdvZmYnLFxuICBoYXNFdmVudExpc3RlbmVyOiAnaGFzJyxcbiAgZGlzcGF0Y2hFdmVudDogJ2ZpcmUnLFxuICBkaXNwYXRjaEV2ZW50QnlUeXBlOiAnZmxhcmUnLFxufTtcbi8vIG1ldGhvZE1hcC5mb3JJbihmdW5jdGlvbihvbGQsIG5hbWUpIHtcbmZvckluLmNhbGwobWV0aG9kTWFwLCBmdW5jdGlvbihvbGQsIG5hbWUpIHtcbiAgLy8gRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS4kbWV0aG9kKG9sZCwgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlW25hbWVdKTtcbiAgJG1ldGhvZC5jYWxsKEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUsIG9sZCwgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZVtuYW1lXSk7XG59KTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5GbG93XG4gKiB0aWNrIG1hbmFnZW1lbnQgY2xhc3NcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIEZsb3cgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHt7IChyZXNvbHZlOiBGdW5jdGlvbiwgcmVqZWN0OiBGdW5jdGlvbik6IHZvaWQ7IH19IGZ1bmNcbiAgICogQHBhcmFtIHtib29sZWFufSBbd2FpdF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGZ1bmMsIHdhaXQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqIEB0eXBlIHtcInBlbmRpbmdcIiB8IFwicmVzb2x2ZWRcIiB8IFwicmVqZWN0ZWRcIn0gKi9cbiAgICB0aGlzLnN0YXR1cyA9ICdwZW5kaW5nJztcblxuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIHRoaXMucmVzdWx0VmFsdWUgPSBudWxsO1xuXG4gICAgLyoqIEB0eXBlIHtGdW5jdGlvbltdfSAqL1xuICAgIHRoaXMuX3F1ZXVlID0gW107XG5cbiAgICB0aGlzLmZ1bmMgPSBmdW5jO1xuXG4gICAgaWYgKHdhaXQgIT09IHRydWUpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciByZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYucmVzb2x2ZS5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgICBzZWxmLnN0YXR1cyA9ICdyZXNvbHZlZCc7XG4gICAgICB9O1xuICAgICAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnJlamVjdC5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgICBzZWxmLnN0YXR1cyA9ICdyZWplY3RlZCc7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmZ1bmMocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGUg44GK44Gd44KJ44GPXG4gICAqIOaIkOWKn1xuICAgKi9cbiAgcmVzb2x2ZShhcmcpIHtcbiAgICB0aGlzLnJlc3VsdFZhbHVlID0gYXJnO1xuXG4gICAgLy8g44Kt44Ol44O844Gr56mN44G+44KM44Gf6Zai5pWw44KS5a6f6KGMXG4gICAgdGhpcy5fcXVldWUuZm9yRWFjaChmdW5jdGlvbihmdW5jKSB7XG4gICAgICBmdW5jKHRoaXMucmVzdWx0VmFsdWUpO1xuICAgIH0sIHRoaXMpO1xuICAgIC8vIHRoaXMuX3F1ZXVlLmNsZWFyKCk7XG4gICAgY2xlYXIuY2FsbCh0aGlzLl9xdWV1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGUg44GK44Gd44KJ44GPXG4gICAqIOWkseaVl1xuICAgKi9cbiAgcmVqZWN0KCkge1xuXG4gIH1cblxuICAvKipcbiAgICog6Z2e5ZCM5pyf57WC5LqG5pmC44Gu5Yem55CG44KS55m76YyyXG4gICAqIEBwYXJhbSB7eyhyZXN1bHQ6IGFueSk6IGFueX19IGZ1bmNcbiAgICogQHJldHVybnMge0Zsb3d9XG4gICAqL1xuICB0aGVuKGZ1bmMpIHtcbiAgICAvLyDmiJDlip/jgrnjg4bjg7zjgr/jgrnjgaDjgaPjgZ/loLTlkIjjga/ljbPlrp/ooYxcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09ICdyZXNvbHZlZCcpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGZ1bmModGhpcy5yZXN1bHRWYWx1ZSk7XG4gICAgICByZXR1cm4gRmxvdy5yZXNvbHZlKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmxvdyA9IG5ldyBGbG93KGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX3F1ZXVlLnB1c2goZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHZhciByZXN1bHRWYWx1ZSA9IGZ1bmMoYXJnKTtcblxuICAgICAgICBpZiAocmVzdWx0VmFsdWUgaW5zdGFuY2VvZiBGbG93KSB7XG4gICAgICAgICAgcmVzdWx0VmFsdWUudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgZmxvdy5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmbG93LnJlc29sdmUocmVzdWx0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZsb3c7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RmxvdyB8IGFueX0gdmFsdWVcbiAgICogQHJldHVybnMge0Zsb3d9XG4gICAqL1xuICBzdGF0aWMgcmVzb2x2ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZsb3cpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmxvdyA9IG5ldyBGbG93KGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmbG93O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Zsb3dbXX0gZmxvd3NcbiAgICogQHJldHVybnMge0Zsb3d9XG4gICAqL1xuICBzdGF0aWMgYWxsKGZsb3dzKSB7XG4gICAgcmV0dXJuIG5ldyBGbG93KGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgIHZhciBhcmdzID0gW107XG5cbiAgICAgIGZsb3dzLmZvckVhY2goZnVuY3Rpb24oZmxvdykge1xuICAgICAgICBmbG93LnRoZW4oZnVuY3Rpb24oZCkge1xuICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgYXJncy5wdXNoKGQpO1xuXG4gICAgICAgICAgaWYgKGNvdW50ID49IGZsb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51dGlsLlRpY2tlclxuICogdGljayBtYW5hZ2VtZW50IGNsYXNzXG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBUaWNrZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8vIC8qKiDntYzpgY7jg5Xjg6zjg7zjg6DmlbAgKi9cbiAgLy8gZnJhbWUgPSBudWxsXG5cbiAgLy8gLyoqIDHjg5Xjg6zjg7zjg6Djga7ntYzpgY7mmYLplpMgKi9cbiAgLy8gZGVsdGFUaW1lID0gbnVsbFxuICBcbiAgLy8gLyoqIOWFqOS9k+OBrue1jOmBjuaZgumWkyAqL1xuICAvLyBlbGFwc2VkVGltZSA9IG51bGxcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX2ZwcztcblxuICAgIHRoaXMuZnBzID0gMzA7XG4gICAgdGhpcy5mcmFtZSA9IDA7XG4gICAgdGhpcy5kZWx0YVRpbWUgPSAwO1xuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuICAgIHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnJ1bm5lciA9IFRpY2tlci5ydW5uZXI7XG4gIH1cblxuICAvKipcbiAgICog44OG44Kj44OD44Kv5Yem55CG5q+O44Gr5a6f6KGM44GV44KM44KL44Kk44OZ44Oz44OI44OP44Oz44OJ44Op44KS6Kit5a6aXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi9ldmVudGRpc3BhdGNoZXJcIikuUGhpbmFFdmVudExpc3RlbmVyfSBmdW5jIFxuICAgKi9cbiAgdGljayhmdW5jKSB7XG4gICAgdGhpcy5vbigndGljaycsIGZ1bmMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOODj+ODs+ODieODqeOCkuino+mZpFxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vZXZlbnRkaXNwYXRjaGVyXCIpLlBoaW5hRXZlbnRMaXN0ZW5lcn0gZnVuYyBcbiAgICovXG4gIHVudGljayhmdW5jKSB7XG4gICAgdGhpcy5vZmYoJ3RpY2snLCBmdW5jKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDntYzpgY7mmYLplpPjgpLoqIjmuKzjg7voqJjpjLLjgZfjgarjgYzjgonjg4bjgqPjg4Pjgq/lh6bnkIbvvIjjgqLjg5fjg6rmm7TmlrDlh6bnkIbvvInjgpLooYzjgYZcbiAgICogQHJldHVybnMge251bWJlcn0g5qyh44Gu5pu05paw5Yem55CG44G+44Gn44Gu5b6F44Gh5pmC6ZaTXG4gICAqL1xuICBydW4oKSB7XG4gICAgdmFyIG5vdyA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgLy8gMeODleODrOODvOODoOOBq+aOm+OBi+OBo+OBn+aZgumWk1xuICAgIHRoaXMuZGVsdGFUaW1lID0gbm93IC0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAvLyDlhajkvZPjga7ntYzpgY7mmYLplpNcbiAgICB0aGlzLmVsYXBzZWRUaW1lID0gbm93IC0gdGhpcy5zdGFydFRpbWU7XG5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLmN1cnJlbnRUaW1lID0gbm93O1xuICAgIHRoaXMuZmxhcmUoJ3RpY2snKTtcbiAgICB2YXIgZW5kID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcblxuICAgIC8vIOODleODrOODvOODoOOCkuabtOaWsFxuICAgIHRoaXMuZnJhbWUgKz0gMTtcblxuICAgIC8vIGNhbGN1bGF0ZSBlbGFwc2VkIHRpbWVcbiAgICB2YXIgZWxhcHNlZCA9IGVuZC1zdGFydDtcblxuICAgIC8vIGNhbGN1bGF0ZSBuZXh0IHdhaXRpbmcgdGltZVxuICAgIHZhciBkZWxheSA9IE1hdGgubWF4KHRoaXMuZnJhbWVUaW1lLWVsYXBzZWQsIDApO1xuXG4gICAgcmV0dXJuIGRlbGF5O1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IHRoaXMuY3VycmVudFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuaXNQbGF5aW5nKSB7XG4gICAgICAgIHZhciBkZWxheSA9IHNlbGYucnVuKCk7XG4gICAgICAgIHNlbGYucnVubmVyKGZuLCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmbigpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXN1bWUoKSB7XG4gICAgLy8gVE9ETzogXG4gIH1cblxuICBzdG9wKCkge1xuICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXdpbmQoKSB7XG4gICAgLy8gVE9ETzogXG4gIH1cblxuICBnZXQgZnBzKCkgeyByZXR1cm4gdGhpcy5fZnBzOyB9XG4gIHNldCBmcHModikge1xuICAgIHRoaXMuX2ZwcyA9IHY7XG4gICAgdGhpcy5mcmFtZVRpbWUgPSAxMDAwL3RoaXMuX2ZwcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RpbWVySGFuZGxlcn0gcnVuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheVxuICAgKi9cbiAgc3RhdGljIHJ1bm5lcihydW4sIGRlbGF5KSB7XG4gICAgc2V0VGltZW91dChydW4sIGRlbGF5KTtcbiAgfVxuICBcbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5SYW5kb21cbiAqICMg5Lmx5pWw44KS5omx44GG44Gf44KB44Gu44Kv44Op44K5XG4gKiDkubHmlbDjgpLmibHjgYbjgZ/jgoHjga7jg6Hjgr3jg4Pjg4njgoTjg5fjg63jg5Hjg4bjgqPjgpLlrprnvqnjgZfjgabjgYTjgovjgq/jg6njgrnjgafjgZnjgIJcbiAqL1xuY2xhc3MgUmFuZG9tIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OBp+OBmeOAguW8leaVsOOBpyB7QGxpbmsgI3NlZWR9IOOCkuioreWumuOBp+OBjeOBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzZWVkID0gKERhdGUubm93KCkpIHx8IDFdIOOCt+ODvOODiVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2VlZCkge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9zZWVkO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzZWVkID0gMV1cbiAgICAgKiDkubHmlbDjga7jgrfjg7zjg4njgafjgZnjgIJcbiAgICAgKi9cbiAgICB0aGlzLnNlZWQgPSBzZWVkIHx8IChEYXRlLm5vdygpKSB8fCAxO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZG9tXG4gICAqIDB+MeOBruS5seaVsOOCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiBcbiAgICogQHJldHVybiB7TnVtYmVyfSAwfjEg44Gu5Lmx5pWwXG4gICAqL1xuICByYW5kb20oKSB7XG4gICAgdmFyIHNlZWQgPSB0aGlzLnNlZWQ7XG4gICAgc2VlZCA9IHNlZWQgXiAoc2VlZCA8PCAxMyk7XG4gICAgc2VlZCA9IHNlZWQgXiAoc2VlZCA+Pj4gMTcpO1xuICAgIHNlZWQgPSAoc2VlZCBeIChzZWVkIDw8IDUpKTtcblxuICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG5cbiAgICByZXR1cm4gKHNlZWQgPj4+IDApIC8gUmFuZG9tLk1BWDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRpbnRcbiAgICog5oyH5a6a44GV44KM44Gf56+E5Zuy5YaF44Gn44Op44Oz44OA44Og44Gq5pW05pWw5YCk44KS6L+U44GX44G+44GZ44CC5a6f6KGM44GZ44KL44GoIHtAbGluayAjc2VlZH0g44Gv5aSJ44KP44Gj44Gm44GX44G+44GE44G+44GZ44CCXG4gICAqIFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWluIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWF4IOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVtOaVsOWApFxuICAgKi9cbiAgcmFuZGludChtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKCB0aGlzLnJhbmRvbSgpKihtYXgtbWluKzEpICkgKyBtaW47XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kZmxvYXRcbiAgICog5oyH5a6a44GV44KM44Gf56+E5Zuy5YaF44Gn44Op44Oz44OA44Og44Gq5pWw5YCk44KS6L+U44GX44G+44GZ44CC5a6f6KGM44GZ44KL44GoIHtAbGluayAjc2VlZH0g44Gv5aSJ44KP44Gj44Gm44GX44G+44GE44G+44GZ44CCXG4gICAqIFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWluIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWF4IOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVsOWApFxuICAgKi9cbiAgcmFuZGZsb2F0KG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHRoaXMucmFuZG9tKCkqKG1heC1taW4pK21pbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRib29sXG4gICAqIOODqeODs+ODgOODoOOBquecn+WBveWApOOCkui/lOOBl+OBvuOBmeOAguW8leaVsOOBp+eZvuWIhueOh+OCkuaMh+WumuOBp+OBjeOBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtwZXJjZW50ID0gNTBdIOecn+OBq+OBquOCi+eZvuWIhueOh1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSDjg6njg7Pjg4Djg6DjgarnnJ/lgb3lgKRcbiAgICovXG4gIHJhbmRib29sKHBlcmNlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5yYW5kb20oKSA8IChwZXJjZW50ID09PSB1bmRlZmluZWQgPyA1MCA6IHBlcmNlbnQpIC8gMTAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZGFycmF5XG4gICAqIOS7u+aEj+OBruevhOWbsuOBp+ODqeODs+ODgOODoOOBquaVtOaVsOWApOOCkuagvOe0jeOBl+OBn+S7u+aEj+OBrumVt+OBleOBrumFjeWIl+OCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtsZW4gPSAxMDBdIOmFjeWIl+OBrumVt+OBlVxuICAgKiBAcGFyYW0ge051bWJlcn0gW21pbiA9IDBdIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW21heCA9IDEwMF0g56+E5Zuy44Gu5pyA5aSn5YCkXG4gICAqIEByZXR1cm4ge051bWJlcn0g44Op44Oz44OA44Og44Gq5pW05pWw5YCk44Gu5YWl44Gj44Gf6YWN5YiXXG4gICAqL1xuICByYW5kYXJyYXkobGVuLCBtaW4sIG1heCkge1xuICAgIGxlbiA9IGxlbiB8fCAxMDA7XG4gICAgbWluID0gbWluIHx8IDA7XG4gICAgbWF4ID0gbWF4IHx8IDEwMDtcblxuICAgIHJldHVybiBtYXAuY2FsbChsZW4sIGZ1bmN0aW9uKCkge1xuICAgIC8vIHJldHVybiAobGVuKS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYW5kaW50KG1pbiwgbWF4KTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuXG4gIGdldCBzZWVkKCkgeyByZXR1cm4gdGhpcy5fc2VlZDsgfVxuICBzZXQgc2VlZCh2KSB7IHRoaXMuX3NlZWQgPSAodiA+Pj4gMCkgfHwgMTsgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGdldFNlZWQgXG4gICAqIHtAbGluayAjc2VlZH0g44Gu5YCk44KS5Y+W5b6X44GX44G+44GZ44CCXG4gICAqIFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOOCt+ODvOODiVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgZ2V0U2VlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0U2VlZFxuICAgKiB7QGxpbmsgI3NlZWR9IOOBruWApOOCkuOCu+ODg+ODiOOBl+OBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzZWVkID0gMV0g44K344O844OJXG4gICAqIEBzdGF0aWNcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgc3RhdGljIHNldFNlZWQoc2VlZCkge1xuICAgIHRoaXMuc2VlZCA9IChzZWVkID4+PiAwKSB8fCAxO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZG9tXG4gICAqIDB+MeOBruS5seaVsOOCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjg6Hjgr3jg4Pjg4njga4ge0BsaW5rICNyYW5kb219IOOBqOWQjOOBmOOBp+OBmeOAglxuICAgKiBcbiAgICogQHJldHVybiB7TnVtYmVyfSAwfjEg44Gu5Lmx5pWwXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHN0YXRpYyByYW5kb20oKSB7XG4gICAgdGhpcy5zZWVkID0gdGhpcy54b3IzMih0aGlzLnNlZWQpO1xuICAgIHJldHVybiAodGhpcy5zZWVkID4+PiAwKSAvIHRoaXMuTUFYO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZGludFxuICAgKiDmjIflrprjgZXjgozjgZ/nr4Tlm7LlhoXjgafjg6njg7Pjg4Djg6DjgarmlbTmlbDlgKTjgpLov5TjgZfjgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544Oh44K944OD44OJ44GuIHtAbGluayAjcmFuZGludH0g44Go5ZCM44GY44Gn44GZ44CCXG4gICAqIFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWluIOevhOWbsuOBruacgOWwj+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gbWF4IOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVtOaVsOWApFxuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgcmFuZGludChtaW4sIG1heCkge1xuICAgIHJldHVybiBwaGluYS5nbG9iYWwuTWF0aC5mbG9vciggdGhpcy5yYW5kb20oKSoobWF4LW1pbisxKSApICsgbWluO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZGZsb2F0XG4gICAqIOaMh+WumuOBleOCjOOBn+evhOWbsuWGheOBp+ODqeODs+ODgOODoOOBquaVsOWApOOCkui/lOOBl+OBvuOBmeOAguWun+ihjOOBmeOCi+OBqCB7QGxpbmsgI3NlZWR9IOOBr+WkieOCj+OBo+OBpuOBl+OBvuOBhOOBvuOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjg6Hjgr3jg4Pjg4njga4ge0BsaW5rICNyYW5kZmxvYXR9IOOBqOWQjOOBmOOBp+OBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1pbiDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heCDnr4Tlm7Ljga7mnIDlpKflgKRcbiAgICogQHJldHVybiB7TnVtYmVyfSDjg6njg7Pjg4Djg6DjgarmlbDlgKRcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHJhbmRmbG9hdChtaW4sIG1heCkge1xuICAgIHJldHVybiB0aGlzLnJhbmRvbSgpKihtYXgtbWluKSttaW47XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByYW5kYm9vbFxuICAgKiDjg6njg7Pjg4Djg6DjgarnnJ/lgb3lgKTjgpLov5TjgZfjgb7jgZnjgILlvJXmlbDjgafnmb7liIbnjofjgpLmjIflrprjgafjgY3jgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544Oh44K944OD44OJ44GuIHtAbGluayAjcmFuZGJvb2x9IOOBqOWQjOOBmOOBp+OBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtwZXJjZW50ID0gNTBdIOecn+OBq+OBquOCi+eZvuWIhueOh1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSDjg6njg7Pjg4Djg6DjgarnnJ/lgb3lgKRcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHJhbmRib29sKHBlcmNlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5yYW5kaW50KDAsIDk5KSA8IChwZXJjZW50IHx8IDUwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRhcnJheVxuICAgKiDku7vmhI/jga7nr4Tlm7Ljgafjg6njg7Pjg4Djg6DjgarmlbTmlbDlgKTjgpLmoLzntI3jgZfjgZ/ku7vmhI/jga7plbfjgZXjga7phY3liJfjgpLov5TjgZfjgb7jgZnjgILlrp/ooYzjgZnjgovjgagge0BsaW5rICNzZWVkfSDjga/lpInjgo/jgaPjgabjgZfjgb7jgYTjgb7jgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544Oh44K944OD44OJ44GuIHtAbGluayAjcmFuZGFycmF5fSDjgajlkIzjgZjjgafjgZnjgIJcbiAgICogXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbGVuID0gMTAwXSDphY3liJfjga7plbfjgZVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttaW4gPSAwXSDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXggPSAxMDBdIOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODqeODs+ODgOODoOOBquaVtOaVsOWApOOBruWFpeOBo+OBn+mFjeWIl1xuICAgKiBAc3RhdGljXG4gICAqL1xuICBzdGF0aWMgcmFuZGFycmF5KGxlbiwgbWluLCBtYXgpIHtcbiAgICBsZW4gPSBsZW4gfHwgMTAwO1xuICAgIG1pbiA9IG1pbiB8fCAwO1xuICAgIG1heCA9IG1heCB8fCAxMDA7XG5cbiAgICByZXR1cm4gbWFwLmNhbGwobGVuLCBmdW5jdGlvbigpIHtcbiAgICAvLyByZXR1cm4gKGxlbikubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmFuZGludChtaW4sIG1heCk7XG4gICAgfSwgdGhpcyk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHhvcjMyXG4gICAqIHhvcnNoaWZ0IOOCkueUqOOBhOOBpueWkeS8vOS5seaVsOWIl+OCkueUn+aIkOOBl+OBvuOBmeOAglxuICAgKiBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNlZWRcbiAgICogQHJldHVybiB7TnVtYmVyfSDnlpHkvLzkubHmlbDliJdcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgc3RhdGljIHhvcjMyKHNlZWQpIHtcbiAgICBzZWVkID0gc2VlZCBeIChzZWVkIDw8IDEzKTtcbiAgICBzZWVkID0gc2VlZCBeIChzZWVkID4+PiAxNyk7XG4gICAgc2VlZCA9IChzZWVkIF4gKHNlZWQgPDwgNSkpO1xuXG4gICAgcmV0dXJuIHNlZWQ7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB1dWlkXG4gICAqIHV1aWQg44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqIFxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IHV1aWRcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9jcmVhdGUtZ3VpZC11dWlkLWluLWphdmFzY3JpcHRcbiAgc3RhdGljIHV1aWQoKSB7XG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZihwaGluYS5nbG9iYWwucGVyZm9ybWFuY2UgJiYgdHlwZW9mIHBoaW5hLmdsb2JhbC5wZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpe1xuICAgICAgZCArPSBwZXJmb3JtYW5jZS5ub3coKTsgLy91c2UgaGlnaC1wcmVjaXNpb24gdGltZXIgaWYgYXZhaWxhYmxlXG4gICAgfVxuICAgIHZhciB1dWlkID0gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgICB2YXIgciA9IChkICsgTWF0aC5yYW5kb20oKSoxNiklMTYgfCAwO1xuICAgICAgZCA9IE1hdGguZmxvb3IoZC8xNik7XG4gICAgICByZXR1cm4gKGM9PSd4JyA/IHIgOiAociYweDN8MHg4KSkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAcHJvcGVydHkge051bWJlcn0gTUFYXG4gKiDlhoXpg6jnmoTjgavkvb/nlKjjgZXjgozjgovlrprmlbDjgafjgZnjgIJcbiAqIFxuICogQHN0YXRpY1xuICovXG5SYW5kb20uTUFYID0gNDI5NDk2NzI5NTtcblxuLyoqXG4gKiBAcHJvcGVydHkge051bWJlcn0gW3NlZWQgPSAoRGF0ZS5ub3coKSldIOOCt+ODvOODiVxuICogc3RhdGljIOODoeOCveODg+ODieOBruS5seaVsOOBruOCt+ODvOODieOBp+OBmeOAglxuICogXG4gKiBAc3RhdGljXG4gKi9cblJhbmRvbS5zZWVkID0gKERhdGUubm93KCkpO1xuXG5cbi8vIHByb3RvdHlwZeaLoeW8teOBr+OBl+OBquOBhFxuLy8gTWF0aC4kbWV0aG9kKFwicmFuZGludFwiLCBmdW5jdGlvbihtaW4sIG1heCkge1xuLy8gICByZXR1cm4gcGhpbmEudXRpbC5SYW5kb20ucmFuZGludChtaW4sIG1heCk7XG4vLyB9KTtcblxuLy8gTWF0aC4kbWV0aG9kKFwicmFuZGZsb2F0XCIsIGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4vLyAgIHJldHVybiBwaGluYS51dGlsLlJhbmRvbS5yYW5kZmxvYXQobWluLCBtYXgpO1xuLy8gfSk7XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuU3VwcG9ydFxuICogXG4gKi9cbmNsYXNzIFN1cHBvcnQge31TdXBwb3J0LmNhbnZhcyA9ICEhcGhpbmEuZ2xvYmFsLkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblN1cHBvcnQud2ViR0wgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIXBoaW5hLmdsb2JhbC5DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgJiYgISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCd3ZWJnbCcpO1xufSkoKTtcblN1cHBvcnQud2ViQXVkaW8gPSAhIXBoaW5hLmdsb2JhbC5BdWRpb0NvbnRleHQgfHwgISFwaGluYS5nbG9iYWxbJ3dlYmtpdEF1ZGlvQ29udGV4dCddIHx8ICEhcGhpbmEuZ2xvYmFsWydtb3pBdWRpb0NvbnRleHQnXTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogIHdpZHRoPzogbnVtYmVyO1xuICogIGNvbHVtbnM/OiBudW1iZXI7XG4gKiAgbG9vcD86IGJvb2xlYW47XG4gKiAgb2Zmc2V0PzogbnVtYmVyO1xuICogfX0gR3JpZE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51dGlsLkdyaWRcbiAqL1xuY2xhc3MgR3JpZCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0dyaWRPcHRpb25zIHwgbnVtYmVyfSBfb3B0aW9uc09yV2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtfY29sXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtfbG9vcF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtfb2Zmc2V0XVxuICAgKi9cbiAgY29uc3RydWN0b3IoX29wdGlvbnNPcldpZHRoLCBfY29sLCBfbG9vcCwgX29mZnNldCkge1xuICAgIHZhciB3aWR0aCwgY29sdW1ucywgbG9vcCwgb2Zmc2V0O1xuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgLyoqIEB0eXBlIHtHcmlkT3B0aW9uc30gKi9cbiAgICAgIHZhciBwYXJhbSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHdpZHRoID0gcGFyYW0ud2lkdGggfHwgNjQwO1xuICAgICAgY29sdW1ucyA9IHBhcmFtLmNvbHVtbnMgfHwgMTI7XG4gICAgICBsb29wID0gcGFyYW0ubG9vcCB8fCBmYWxzZTtcbiAgICAgIG9mZnNldCA9IHBhcmFtLm9mZnNldCB8fCAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHdpZHRoICAgPSBhcmd1bWVudHNbMF0gfHwgNjQwO1xuICAgICAgY29sdW1ucyA9IGFyZ3VtZW50c1sxXSB8fCAxMjtcbiAgICAgIGxvb3AgICAgPSBhcmd1bWVudHNbMl0gfHwgZmFsc2U7XG4gICAgICBvZmZzZXQgPSBhcmd1bWVudHNbM10gfHwgMDtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0g5bmFICovXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9IOWIl+aVsCAqL1xuICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG5cbiAgICAvKiogQHR5cGUge2Jvb2xlYW59IHNwYW7mjIflrprmmYLjgavjg6vjg7zjg5fjgZnjgovjgYvjganjgYbjgYsgKi9cbiAgICB0aGlzLmxvb3AgPSBsb29wO1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9IOOCquODleOCu+ODg+ODiOWApCAqL1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9IOOCsOODquODg+ODieWNmOS9jeWApCAqL1xuICAgIHRoaXMudW5pdFdpZHRoID0gdGhpcy53aWR0aC90aGlzLmNvbHVtbnM7XG4gIH1cblxuICAvKipcbiAgICog44K544OR44Oz5oyH5a6a44Gn5YCk44KS5Y+W5b6XKOiyoOaVsOOCgm9rKVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHNwYW4oaW5kZXgpIHtcbiAgICBpZiAodGhpcy5sb29wKSB7XG4gICAgICBpbmRleCArPSB0aGlzLmNvbHVtbnM7XG4gICAgICBpbmRleCAlPSB0aGlzLmNvbHVtbnM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVuaXRXaWR0aCAqIGluZGV4ICsgdGhpcy5vZmZzZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kw44Oq44OD44OJ5Y2Y5L2N44KS6L+U44GZXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICB1bml0KCkge1xuICAgIHJldHVybiB0aGlzLnVuaXRXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldF0g5Lit5b+D44GL44KJ44Gu44Ga44KM44KS5Y2Y5L2N5pWw44Gn5oyH5a6aXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBjZW50ZXIob2Zmc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gb2Zmc2V0IHx8IDA7XG4gICAgcmV0dXJuICh0aGlzLndpZHRoLzIpICsgKHRoaXMudW5pdFdpZHRoICogaW5kZXgpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7a2V5b2YgVHdlZW4uRUFTSU5HfSBUd2VlbkVhc2luZ1R5cGUg44Kk44O844K444Oz44Kw44Gu56iu6aGe44KS6KGo44GZ5paH5a2X5YiXXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudXRpbC5Ud2VlblxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqIFxuICovXG5jbGFzcyBUd2VlbiBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogdHdlZW7ntYzpgY7mmYLplpNcbiAgICAgKi9cbiAgICB0aGlzLnRpbWUgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb258c3RyaW5nfVxuICAgICAqIOWGhemDqOOCpOODvOOCuOODs+OCsOmWouaVsFxuICAgICAqIGVhc2luZ+OCouOCr+OCu+OCteOCkuS7i+OBl+OBpuS9v+eUqCAgXG4gICAgICogc2V0dGVy44GMc3RyaW5n5Z6L44KS5Y+X44GR5LuY44GR44KL44Gu44Gr5a++44GX44CBXG4gICAgICogZ2V0dGVy44GvZnVuY3Rpb27lnovjgpLov5TjgZnjgZ/jgoHjgIHjgajjgorjgYLjgYjjgZrlhbHnlKjkvZPjgajjgZnjgotcbiAgICAgKi9cbiAgICB0aGlzLl9lYXNpbmc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IHRhcmdldFxuICAgKiBAcGFyYW0ge3sgW2s6IHN0cmluZ106IGFueTsgfX0gYmVnaW5Qcm9wc1xuICAgKiBAcGFyYW0ge3sgW2s6IHN0cmluZ106IGFueTsgfX0gZmluaXNoUHJvcHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7VHdlZW5FYXNpbmdUeXBlfSBlYXNpbmdcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmcm9tVG8odGFyZ2V0LCBiZWdpblByb3BzLCBmaW5pc2hQcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuYmVnaW5Qcm9wcyA9IGJlZ2luUHJvcHM7XG4gICAgdGhpcy5maW5pc2hQcm9wcyA9IGZpbmlzaFByb3BzO1xuICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbiB8fCAxMDAwO1xuICAgIHRoaXMuZWFzaW5nID0gZWFzaW5nO1xuXG4gICAgLy8gc2V0dXBcbiAgICB0aGlzLmNoYW5nZVByb3BzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGJlZ2luUHJvcHMpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VQcm9wc1trZXldID0gZmluaXNoUHJvcHNba2V5XSAtIGJlZ2luUHJvcHNba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7eyBbazogc3RyaW5nXTogYW55OyB9fSBmaW5pc2hQcm9wc1xuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtUd2VlbkVhc2luZ1R5cGV9IGVhc2luZ1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHRvKHRhcmdldCwgZmluaXNoUHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICB2YXIgYmVnaW5Qcm9wcyA9IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIGZpbmlzaFByb3BzKSB7XG4gICAgICBiZWdpblByb3BzW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICB9XG5cbiAgICB0aGlzLmZyb21Ubyh0YXJnZXQsIGJlZ2luUHJvcHMsIGZpbmlzaFByb3BzLCBkdXJhdGlvbiwgZWFzaW5nKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAgICogQHBhcmFtIHt7IFtrOiBzdHJpbmddOiBhbnk7IH19IGJlZ2luUHJvcHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7VHdlZW5FYXNpbmdUeXBlfSBlYXNpbmdcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmcm9tKHRhcmdldCwgYmVnaW5Qcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgICAgdmFyIGZpbmlzaFByb3BzID0ge307XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBiZWdpblByb3BzKSB7XG4gICAgICAgIGZpbmlzaFByb3BzW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBiZWdpblByb3BzW2tleV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZnJvbVRvKHRhcmdldCwgYmVnaW5Qcm9wcywgZmluaXNoUHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7eyBbazogc3RyaW5nXTogYW55OyB9fSBwcm9wc1xuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtUd2VlbkVhc2luZ1R5cGV9IGVhc2luZ1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGJ5KHRhcmdldCwgcHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICB2YXIgYmVnaW5Qcm9wcyA9IHt9O1xuICAgIHZhciBmaW5pc2hQcm9wcyA9IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICBiZWdpblByb3BzW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIGZpbmlzaFByb3BzW2tleV0gPSB0YXJnZXRba2V5XSArIHByb3BzW2tleV07XG4gICAgfVxuXG4gICAgdGhpcy5mcm9tVG8odGFyZ2V0LCBiZWdpblByb3BzLCBmaW5pc2hQcm9wcywgZHVyYXRpb24sIGVhc2luZyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPXG4gICAqL1xuICB5b3lvKCkge1xuICAgIHZhciB0ZW1wID0gdGhpcy5iZWdpblByb3BzO1xuICAgIHRoaXMuYmVnaW5Qcm9wcyA9IHRoaXMuZmluaXNoUHJvcHM7XG4gICAgdGhpcy5maW5pc2hQcm9wcyA9IHRlbXA7XG4gICAgLy8gdGhpcy5jaGFuZ2VQcm9wcy5mb3JJbihmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkge1xuICAgIGZvckluLmNhbGwodGhpcy5jaGFuZ2VQcm9wcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSwgX2luZGV4KSB7XG4gICAgICB0aGlzLmNoYW5nZVByb3BzW2tleV0gPSAtdmFsdWU7XG4gICAgICB0aGlzLnRhcmdldFtrZXldID0gdGhpcy5iZWdpblByb3BzW2tleV07XG4gICAgfSwgdGhpcyk7XG4gICAgLy8gVE9ETzogZWFzaW5nIOOCguWPjei7ouOBleOBm+OCi1xuICAgIC8vIHRoaXMuZWFzaW5nID0gZWFzaW5nO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuWApOWIhuOAgeaZgumWk+OCkumAsuOCgeOCi1xuICAgKiBAYWxpYXMgZm9yd2FyZFxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgKi9cbiAgZ2Fpbih0aW1lKSB7XG4gICAgdGhpcy5zZWVrKHRoaXMudGltZSArIHRpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuWApOWIhuOAgeaZgumWk+OCkumAsuOCgeOCi1xuICAgKiBAYWxpYXMgZ2FpblxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgKi9cbiAgZm9yd2FyZCh0aW1lKSB7XG4gICAgdGhpcy5zZWVrKHRoaXMudGltZSArIHRpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuWApOWIhuOAgeaZgumWk+OCkuaIu+OBmVxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgKi9cbiAgYmFja3dhcmQodGltZSkge1xuICAgIHRoaXMuc2Vlayh0aGlzLnRpbWUgLSB0aW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmmYLplpPjgavlv5zjgZjjgabjg5Hjg6njg6Hjg7zjgr/jgpLmm7TmlrBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZWVrKHRpbWUpIHtcbiAgICAvLyB0aGlzLnRpbWUgPSBNYXRoLmNsYW1wKHRpbWUsIDAsIHRoaXMuZHVyYXRpb24pO1xuICAgIHRoaXMudGltZSA9IGNsYW1wKHRpbWUsIDAsIHRoaXMuZHVyYXRpb24pO1xuXG4gICAgLy8gdGhpcy5iZWdpblByb3BzLmZvckluKFxuICAgIGZvckluLmNhbGwodGhpcy5iZWdpblByb3BzLCBcbiAgICAvKiogQHRoaXMgVHdlZW4gKi9cbiAgICBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgdiA9IC8qKiBAdHlwZSBmdW5jdGlvbiAqLyh0aGlzLmVhc2luZykodGhpcy50aW1lLCB2YWx1ZSwgdGhpcy5jaGFuZ2VQcm9wc1trZXldLCB0aGlzLmR1cmF0aW9uKTtcbiAgICAgIHRoaXMudGFyZ2V0W2tleV0gPSB2O1xuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgZWFzaW5nKCkgeyByZXR1cm4gdGhpcy5fZWFzaW5nOyB9XG4gIHNldCBlYXNpbmcodikge1xuICAgIHRoaXMuX2Vhc2luZyA9IFR3ZWVuLkVBU0lOR1svKipAdHlwZSB7c3RyaW5nfSovKHYpXSB8fCBUd2Vlbi5FQVNJTkcuZGVmYXVsdDtcbiAgfVxuXG59XG5cbi8qKlxuICogQHN0YXRpY1xuICog44Kk44O844K444Oz44KwXG4gKiAjIyMgUmVmZXJlbmNlXG4gKiAtIDxodHRwOi8vY29kZXJlcG9zLm9yZy9zaGFyZS93aWtpL0pTVHdlZW5lcj5cbiAqIC0gPGh0dHA6Ly9jb2RlcmVwb3Mub3JnL3NoYXJlL2Jyb3dzZXIvbGFuZy9qYXZhc2NyaXB0L2pzdHdlZW5lci90cnVuay9zcmMvSlNUd2VlbmVyLmpzPlxuICogLSA8aHR0cDovL2dzZ2QuY28udWsvc2FuZGJveC9qcXVlcnkvZWFzaW5nL2pxdWVyeS5lYXNpbmcuMS4zLmpzPlxuICogLSA8aHR0cDovL2hvc3RlZC56ZWguY29tLmJyL3R3ZWVuZXIvZG9jcy9lbi11cy9taXNjL3RyYW5zaXRpb25zLmh0bWw+XG4gKi9cblR3ZWVuLkVBU0lORyA9IHtcblxuICAvKiogZGVmYXVsdCAqL1xuICBcImRlZmF1bHRcIjogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjKnQvZCArIGI7XG4gIH0sXG4gIC8qKiBsaW5lYXIgKi9cbiAgbGluZWFyOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMqdC9kICsgYjtcbiAgfSxcbiAgLyoqIHN3aW5nICovXG4gIHN3aW5nOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jICoodC89ZCkqKHQtMikgKyBiO1xuICB9LFxuICAvKiogZWFzZUluUXVhZCAqL1xuICBlYXNlSW5RdWFkOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMqKHQvPWQpKnQgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dFF1YWQgKi9cbiAgZWFzZU91dFF1YWQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKih0Lz1kKSoodC0yKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlSW5PdXRRdWFkICovXG4gIGVhc2VJbk91dFF1YWQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZigodC89ZC8yKSA8IDEpIHJldHVybiBjLzIqdCp0ICsgYjtcbiAgICByZXR1cm4gLWMvMiAqKCgtLXQpKih0LTIpIC0gMSkgKyBiO1xuICB9LFxuICAvKiogZGVmZUluQ3ViaWMgKi9cbiAgZWFzZUluQ3ViaWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyoodC89ZCkqdCp0ICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRDdWJpYyAqL1xuICBlYXNlT3V0Q3ViaWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyooKHQ9dC9kLTEpKnQqdCArIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dEN1YmljICovXG4gIGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYoKHQvPWQvMikgPCAxKSByZXR1cm4gYy8yKnQqdCp0ICsgYjtcbiAgICByZXR1cm4gYy8yKigodC09MikqdCp0ICsgMikgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEluQ3ViaWMgKi9cbiAgZWFzZU91dEluQ3ViaWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRDdWJpYyh0KjIsIGIsIGMvMiwgZCk7XG4gICAgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlSW5DdWJpYygodCoyKS1kLCBiK2MvMiwgYy8yLCBkKTtcbiAgfSxcbiAgLyoqIGVhc2VJblF1YXJ0ICovXG4gIGVhc2VJblF1YXJ0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMqKHQvPWQpKnQqdCp0ICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRRdWFydCAqL1xuICBlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKigodD10L2QtMSkqdCp0KnQgLSAxKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlSW5PdXRRdWFydCAqL1xuICBlYXNlSW5PdXRRdWFydDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMip0KnQqdCp0ICsgYjtcbiAgICByZXR1cm4gLWMvMiAqKCh0LT0yKSp0KnQqdCAtIDIpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRJblF1YXJ0ICovXG4gIGVhc2VPdXRJblF1YXJ0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYodCA8IGQvMikgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlT3V0UXVhcnQodCoyLCBiLCBjLzIsIGQpO1xuICAgIHJldHVybiBUd2Vlbi5FQVNJTkcuZWFzZUluUXVhcnQoKHQqMiktZCwgYitjLzIsIGMvMiwgZCk7XG4gIH0sXG4gIC8qKiBlYXNlSW5RdWludCAqL1xuICBlYXNlSW5RdWludDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjKih0Lz1kKSp0KnQqdCp0ICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRRdWludCAqL1xuICBlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyooKHQ9dC9kLTEpKnQqdCp0KnQgKyAxKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlSW5PdXRRdWludCAqL1xuICBlYXNlSW5PdXRRdWludDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMip0KnQqdCp0KnQgKyBiO1xuICAgIHJldHVybiBjLzIqKCh0LT0yKSp0KnQqdCp0ICsgMikgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEluUXVpbnQgKi9cbiAgZWFzZU91dEluUXVpbnQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRRdWludCh0KjIsIGIsIGMvMiwgZCk7XG4gICAgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlSW5RdWludCgodCoyKS1kLCBiK2MvMiwgYy8yLCBkKTtcbiAgfSxcbiAgLyoqIGVhc2VJblNpbmUgKi9cbiAgZWFzZUluU2luZTogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiAtYyAqIE1hdGguY29zKHQvZCAqKE1hdGguUEkvMikpICsgYyArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0U2luZSAqL1xuICBlYXNlT3V0U2luZTogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjICogTWF0aC5zaW4odC9kICooTWF0aC5QSS8yKSkgKyBiO1xuICB9LFxuICAvKiogZWFzZUluT3V0U2luZSAqL1xuICBlYXNlSW5PdXRTaW5lOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jLzIgKihNYXRoLmNvcyhNYXRoLlBJKnQvZCkgLSAxKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5TaW5lICovXG4gIGVhc2VPdXRJblNpbmU6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRTaW5lKHQqMiwgYiwgYy8yLCBkKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJblNpbmUoKHQqMiktZCwgYitjLzIsIGMvMiwgZCk7XG4gIH0sXG4gIC8qKiBlYXNlSW5FeHBvICovXG4gIGVhc2VJbkV4cG86IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gKHQ9PTApID8gYiA6IGMgKiBNYXRoLnBvdygyLCAxMCAqKHQvZCAtIDEpKSArIGIgLSBjICogMC4wMDE7XG4gIH0sXG4gIC8qKiBlYXNlT3V0RXhwbyAqL1xuICBlYXNlT3V0RXhwbzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIHJldHVybiAodD09ZCkgPyBiK2MgOiBjICogMS4wMDEgKigtTWF0aC5wb3coMiwgLTEwICogdC9kKSArIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dEV4cG8gKi9cbiAgZWFzZUluT3V0RXhwbzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKHQ9PTApIHJldHVybiBiO1xuICAgIGlmKHQ9PWQpIHJldHVybiBiK2M7XG4gICAgaWYoKHQvPWQvMikgPCAxKSByZXR1cm4gYy8yICogTWF0aC5wb3coMiwgMTAgKih0IC0gMSkpICsgYiAtIGMgKiAwLjAwMDU7XG4gICAgcmV0dXJuIGMvMiAqIDEuMDAwNSAqKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMikgKyBiO1xuICB9LFxuICAvKiogZWFzZU91dEluRXhwbyAqL1xuICBlYXNlT3V0SW5FeHBvOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYodCA8IGQvMikgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlT3V0RXhwbyh0KjIsIGIsIGMvMiwgZCk7XG4gICAgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlSW5FeHBvKCh0KjIpLWQsIGIrYy8yLCBjLzIsIGQpO1xuICB9LFxuICAvKiogZWFzZUluQ2lyYyAqL1xuICBlYXNlSW5DaXJjOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jICooTWF0aC5zcXJ0KDEgLSh0Lz1kKSp0KSAtIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRDaXJjICovXG4gIGVhc2VPdXRDaXJjOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiBNYXRoLnNxcnQoMSAtKHQ9dC9kLTEpKnQpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dENpcmMgKi9cbiAgZWFzZUluT3V0Q2lyYzogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIC1jLzIgKihNYXRoLnNxcnQoMSAtIHQqdCkgLSAxKSArIGI7XG4gICAgcmV0dXJuIGMvMiAqKE1hdGguc3FydCgxIC0odC09MikqdCkgKyAxKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5DaXJjICovXG4gIGVhc2VPdXRJbkNpcmM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRDaXJjKHQqMiwgYiwgYy8yLCBkKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkNpcmMoKHQqMiktZCwgYitjLzIsIGMvMiwgZCk7XG4gIH0sXG4gIC8qKiBlYXNlSW5FbGFzdGljICovXG4gIGVhc2VJbkVsYXN0aWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIGEsIHApIHtcbiAgICB2YXIgcztcbiAgICBpZih0PT0wKSByZXR1cm4gYjsgIGlmKCh0Lz1kKT09MSkgcmV0dXJuIGIrYzsgIGlmKCFwKSBwPWQqLjM7XG4gICAgaWYoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7IGE9Yzsgcz1wLzQ7IH0gZWxzZSBzID0gcC8oMipNYXRoLlBJKSAqIE1hdGguYXNpbihjL2EpO1xuICAgIHJldHVybiAtKGEqTWF0aC5wb3coMiwxMCoodC09MSkpICogTWF0aC5zaW4oKHQqZC1zKSooMipNYXRoLlBJKS9wICkpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRFbGFzdGljICovXG4gIGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7XG4gICAgdmFyIHM7XG4gICAgaWYodD09MCkgcmV0dXJuIGI7ICBpZigodC89ZCk9PTEpIHJldHVybiBiK2M7ICBpZighcCkgcD1kKi4zO1xuICAgIGlmKCFhIHx8IGEgPCBNYXRoLmFicyhjKSkgeyBhPWM7IHM9cC80OyB9IGVsc2UgcyA9IHAvKDIqTWF0aC5QSSkgKiBNYXRoLmFzaW4oYy9hKTtcbiAgICByZXR1cm4oYSpNYXRoLnBvdygyLC0xMCp0KSAqIE1hdGguc2luKCh0KmQtcykqKDIqTWF0aC5QSSkvcCApICsgYyArIGIpO1xuICB9LFxuICAvKiogZWFzZUluT3V0RWxhc3RpYyAqL1xuICBlYXNlSW5PdXRFbGFzdGljOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7XG4gICAgdmFyIHM7XG4gICAgaWYodD09MCkgcmV0dXJuIGI7ICBpZigodC89ZC8yKT09MikgcmV0dXJuIGIrYzsgIGlmKCFwKSBwPWQqKC4zKjEuNSk7XG4gICAgaWYoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7IGE9Yzsgcz1wLzQ7IH0gICAgICAgZWxzZSBzID0gcC8oMipNYXRoLlBJKSAqIE1hdGguYXNpbihjL2EpO1xuICAgIGlmKHQgPCAxKSByZXR1cm4gLS41KihhKk1hdGgucG93KDIsMTAqKHQtPTEpKSAqIE1hdGguc2luKCh0KmQtcykqKDIqTWF0aC5QSSkvcCApKSArIGI7XG4gICAgcmV0dXJuIGEqTWF0aC5wb3coMiwtMTAqKHQtPTEpKSAqIE1hdGguc2luKCh0KmQtcykqKDIqTWF0aC5QSSkvcCApKi41ICsgYyArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5FbGFzdGljICovXG4gIGVhc2VPdXRJbkVsYXN0aWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIGEsIHApIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRFbGFzdGljKHQqMiwgYiwgYy8yLCBkLCBhLCBwKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkVsYXN0aWMoKHQqMiktZCwgYitjLzIsIGMvMiwgZCwgYSwgcCk7XG4gIH0sXG4gIC8qKiBlYXNlSW5CYWNrICovXG4gIGVhc2VJbkJhY2s6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIHMpIHtcbiAgICBpZihzID09IHVuZGVmaW5lZCkgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIGMqKHQvPWQpKnQqKChzKzEpKnQgLSBzKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0QmFjayAqL1xuICBlYXNlT3V0QmFjazogZnVuY3Rpb24odCwgYiwgYywgZCwgcykge1xuICAgIGlmKHMgPT0gdW5kZWZpbmVkKSBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gYyooKHQ9dC9kLTEpKnQqKChzKzEpKnQgKyBzKSArIDEpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VJbk91dEJhY2sgKi9cbiAgZWFzZUluT3V0QmFjazogZnVuY3Rpb24odCwgYiwgYywgZCwgcykge1xuICAgIGlmKHMgPT0gdW5kZWZpbmVkKSBzID0gMS43MDE1ODtcbiAgICBpZigodC89ZC8yKSA8IDEpIHJldHVybiBjLzIqKHQqdCooKChzKj0oMS41MjUpKSsxKSp0IC0gcykpICsgYjtcbiAgICByZXR1cm4gYy8yKigodC09MikqdCooKChzKj0oMS41MjUpKSsxKSp0ICsgcykgKyAyKSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5CYWNrICovXG4gIGVhc2VPdXRJbkJhY2s6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIHMpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VPdXRCYWNrKHQqMiwgYiwgYy8yLCBkLCBzKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkJhY2soKHQqMiktZCwgYitjLzIsIGMvMiwgZCwgcyk7XG4gIH0sXG4gIC8qKiBlYXNlSW5Cb3VuY2UgKi9cbiAgZWFzZUluQm91bmNlOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgLSBUd2Vlbi5FQVNJTkcuZWFzZU91dEJvdW5jZShkLXQsIDAsIGMsIGQpICsgYjtcbiAgfSxcbiAgLyoqIGVhc2VPdXRCb3VuY2UgKi9cbiAgZWFzZU91dEJvdW5jZTogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgIGlmKCh0Lz1kKSA8KDEvMi43NSkpIHtcbiAgICAgIHJldHVybiBjKig3LjU2MjUqdCp0KSArIGI7XG4gICAgfSBlbHNlIGlmKHQgPCgyLzIuNzUpKSB7XG4gICAgICByZXR1cm4gYyooNy41NjI1Kih0LT0oMS41LzIuNzUpKSp0ICsgLjc1KSArIGI7XG4gICAgfSBlbHNlIGlmKHQgPCgyLjUvMi43NSkpIHtcbiAgICAgIHJldHVybiBjKig3LjU2MjUqKHQtPSgyLjI1LzIuNzUpKSp0ICsgLjkzNzUpICsgYjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGMqKDcuNTYyNSoodC09KDIuNjI1LzIuNzUpKSp0ICsgLjk4NDM3NSkgKyBiO1xuICAgIH1cbiAgfSxcbiAgLyoqIGVhc2VJbk91dEJvdW5jZSAqL1xuICBlYXNlSW5PdXRCb3VuY2U6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICBpZih0IDwgZC8yKSByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkJvdW5jZSh0KjIsIDAsIGMsIGQpICogLjUgKyBiO1xuICAgIGVsc2UgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlT3V0Qm91bmNlKHQqMi1kLCAwLCBjLCBkKSAqIC41ICsgYyouNSArIGI7XG4gIH0sXG4gIC8qKiBlYXNlT3V0SW5Cb3VuY2UgKi9cbiAgZWFzZU91dEluQm91bmNlOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgaWYodCA8IGQvMikgcmV0dXJuIFR3ZWVuLkVBU0lORy5lYXNlT3V0Qm91bmNlKHQqMiwgYiwgYy8yLCBkKTtcbiAgICByZXR1cm4gVHdlZW4uRUFTSU5HLmVhc2VJbkJvdW5jZSgodCoyKS1kLCBiK2MvMiwgYy8yLCBkKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51dGlsLlF1ZXJ5U3RyaW5nXG4gKiBcbiAqL1xuY2xhc3MgUXVlcnlTdHJpbmcge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RleHRdIOeEoeaMh+WumuOBruOBqOOBjeOBr+ePvuWcqOODmuODvOOCuOOBrlVSTOOCkuWvvuixoeOBqOOBmeOCi1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcD1cIiZcIl0g44K744OR44Os44O844K/XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXE9XCI9XCJdIFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlY29kZV0gZGVjb2RlVVJJQ29tcG9uZW5044Gr44KI44KL44OH44Kz44O844OJ44KS6KGM44GG44GL44Gp44GG44GLXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgcGFyc2UodGV4dCwgc2VwLCBlcSwgaXNEZWNvZGUpIHtcbiAgICB0ZXh0ID0gdGV4dCB8fCBsb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpO1xuICAgIHNlcCA9IHNlcCB8fCAnJic7XG4gICAgZXEgPSBlcSB8fCAnPSc7XG4gICAgdmFyIGRlY29kZSA9IChpc0RlY29kZSkgPyBkZWNvZGVVUklDb21wb25lbnQgOiBmdW5jdGlvbihhKSB7IHJldHVybiBhOyB9O1xuICAgIHJldHVybiB0ZXh0LnNwbGl0KHNlcCkucmVkdWNlKGZ1bmN0aW9uKG9iaiwgdikge1xuICAgICAgdmFyIHBhaXIgPSB2LnNwbGl0KGVxKTtcbiAgICAgIG9ialtwYWlyWzBdXSA9IGRlY29kZShwYWlyWzFdKTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcD1cIiZcIl1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtlcT1cIj1cIl1cbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNFbmNvZGVdIGVuY29kZVVSSUNvbXBvbmVudOOBq+OCiOOCi+OCqOODs+OCs+ODvOODieOCkuihjOOBhuOBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHN0cmluZ2lmeSh2YWx1ZSwgc2VwLCBlcSwgaXNFbmNvZGUpIHtcbiAgICBzZXAgPSBzZXAgfHwgJyYnO1xuICAgIGVxID0gZXEgfHwgJz0nO1xuICAgIHZhciBlbmNvZGUgPSAoaXNFbmNvZGUpID8gZW5jb2RlVVJJQ29tcG9uZW50IDogZnVuY3Rpb24oYSkgeyByZXR1cm4gYTsgfTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBrZXkgKyBlcSArIGVuY29kZSh2YWx1ZVtrZXldKTtcbiAgICB9KS5qb2luKHNlcCk7XG4gIH1cbiAgXG59XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuQ29sb3JcbiAqIOOCq+ODqeODvOOCr+ODqeOCuVxuICovXG5jbGFzcyBDb2xvciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBfclxuICAgKiBAcGFyYW0ge251bWJlcn0gX2dcbiAgICogQHBhcmFtIHtudW1iZXJ9IF9iXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBfYVxuICAgKi9cbiAgY29uc3RydWN0b3IoX3IsIF9nLCBfYiwgX2EpIHtcbiAgICAvKiogQHR5cGUge251bWJlcn0gUuWApCAqL1xuICAgIHRoaXMuciA9IDI1NTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSBH5YCkICovXG4gICAgdGhpcy5nID0gMjU1O1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9IELlgKQgKi9cbiAgICB0aGlzLmIgPSAyNTU7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0gQeWApCAqL1xuICAgIHRoaXMuYSA9IDEuMDtcblxuICAgIHRoaXMuc2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICog44K744OD44K/44O8LlxuICAgKiBAcGFyYW0ge251bWJlcn0gclxuICAgKiBAcGFyYW0ge251bWJlcn0gZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gYlxuICAgKiBAcGFyYW0ge251bWJlcn0gYVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldChyLCBnLCBiLCBhKSB7XG4gICAgdGhpcy5yID0gcjtcbiAgICB0aGlzLmcgPSBnO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5hID0gKGEgIT09IHVuZGVmaW5lZCkgPyBhIDogMS4wO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaVsOWApOOBq+OCiOOCi+OCu+ODg+OCv+ODvC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRGcm9tTnVtYmVyKHIsIGcsIGIsIGEpIHtcbiAgICB0aGlzLnIgPSByO1xuICAgIHRoaXMuZyA9IGc7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmEgPSAoYSAhPT0gdW5kZWZpbmVkKSA/IGEgOiAxLjA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog6YWN5YiX44Gr44KI44KL44K744OD44K/44O8XG4gICAqIEBwYXJhbSB7bnVtYmVyW119IGFyclxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEZyb21BcnJheShhcnIpIHtcbiAgICByZXR1cm4gdGhpcy5zZXQuYXBwbHkodGhpcywgYXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjgavjgojjgovjgrvjg4Pjgr/jg7xcbiAgICogQHBhcmFtIHt7IHI6IG51bWJlcjsgZzogbnVtYmVyOyBiOiBudW1iZXI7IGE6IG51bWJlcjsgfX0gb2JqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0RnJvbU9iamVjdChvYmopIHtcbiAgICByZXR1cm4gdGhpcy5zZXQob2JqLnIsIG9iai5nLCBvYmouYiwgb2JqLmEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OBq+OCiOOCi+OCu+ODg+OCv+ODvFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0RnJvbVN0cmluZyhzdHIpIHtcbiAgICB2YXIgY29sb3IgPSBDb2xvci5zdHJpbmdUb051bWJlcihzdHIpO1xuICAgIHJldHVybiB0aGlzLnNldChjb2xvclswXSwgY29sb3JbMV0sIGNvbG9yWzJdLCBjb2xvclszXSk7XG4gIH1cblxuICAvKipcbiAgICog6LOi44GE44K744OD44K/44O8XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0U21hcnQoKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7XG4gICAgICB0aGlzLnNldChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRoaXMuc2V0RnJvbUFycmF5KGFyZyk7XG4gICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgIHRoaXMuc2V0RnJvbU9iamVjdChhcmcpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKGFyZykgPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5zZXRGcm9tU3RyaW5nKGFyZyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENTUyDnlKggMTbpgLLmlbDmloflrZfliJfjgavlpInmj5tcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvU3R5bGVBc0hleCgpIHtcbiAgICByZXR1cm4gZm9ybWF0LmNhbGwoXCIjezB9ezF9ezJ9XCIsXG4gICAgLy8gcmV0dXJuIFwiI3swfXsxfXsyfVwiLmZvcm1hdChcbiAgICAgIHBhZGRpbmcuY2FsbCh0aGlzLnIudG9TdHJpbmcoMTYpLCAyLCAnMCcpLFxuICAgICAgcGFkZGluZy5jYWxsKHRoaXMuZy50b1N0cmluZygxNiksIDIsICcwJyksXG4gICAgICBwYWRkaW5nLmNhbGwodGhpcy5iLnRvU3RyaW5nKDE2KSwgMiwgJzAnKVxuICAgICAgLy8gdGhpcy5yLnRvU3RyaW5nKDE2KS5wYWRkaW5nKDIsICcwJyksXG4gICAgICAvLyB0aGlzLmcudG9TdHJpbmcoMTYpLnBhZGRpbmcoMiwgJzAnKSxcbiAgICAgIC8vIHRoaXMuYi50b1N0cmluZygxNikucGFkZGluZygyLCAnMCcpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU1Mg55SoIFJHQuaWh+Wtl+WIl+OBq+WkieaPm1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHlsZUFzUkdCKCkge1xuICAgIHJldHVybiBmb3JtYXQuY2FsbChcInJnYih7cn0se2d9LHtifSlcIiwge1xuICAgIC8vIHJldHVybiBcInJnYih7cn0se2d9LHtifSlcIi5mb3JtYXQoe1xuICAgICAgcjogfn50aGlzLnIsXG4gICAgICBnOiB+fnRoaXMuZyxcbiAgICAgIGI6IH5+dGhpcy5iXG4gICAgfSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDU1Mg55SoIFJHQkHmloflrZfliJfjgavlpInmj5tcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvU3R5bGVBc1JHQkEoKSB7XG4gICAgcmV0dXJuIGZvcm1hdC5jYWxsKFwicmdiYSh7cn0se2d9LHtifSx7YX0pXCIsIHtcbiAgICAvLyByZXR1cm4gXCJyZ2JhKHtyfSx7Z30se2J9LHthfSlcIi5mb3JtYXQoe1xuICAgICAgcjogfn50aGlzLnIsXG4gICAgICBnOiB+fnRoaXMuZyxcbiAgICAgIGI6IH5+dGhpcy5iLFxuICAgICAgYTogdGhpcy5hXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ1NTIOeUqCBSR0JBIOaWh+Wtl+WIl+OBq+WkieaPm1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHlsZSgpIHtcbiAgICByZXR1cm4gZm9ybWF0LmNhbGwoXCJyZ2JhKHtyfSx7Z30se2J9LHthfSlcIiwge1xuICAgIC8vIHJldHVybiBcInJnYmEoe3J9LHtnfSx7Yn0se2F9KVwiLmZvcm1hdCh7XG4gICAgICByOiB+fnRoaXMucixcbiAgICAgIGc6IH5+dGhpcy5nLFxuICAgICAgYjogfn50aGlzLmIsXG4gICAgICBhOiB0aGlzLmFcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXIgcGhpbmEudXRpbC5Db2xvclxuICAgKiBAbWV0aG9kIHN0clRvTnVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgICogQHJldHVybnMge251bWJlcltdfVxuICAgKi9cbiAgc3RhdGljIHN0clRvTnVtKHN0cikge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ1RvTnVtYmVyKHN0cik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119XG4gICAqL1xuICBzdGF0aWMgc3RyaW5nVG9OdW1iZXIoc3RyKSB7XG4gICAgdmFyIHZhbHVlID0gbnVsbDtcbiAgICB2YXIgdHlwZSA9IG51bGw7XG5cbiAgICBpZiAoc3RyWzBdID09PSAnIycpIHtcbiAgICAgIHR5cGUgPSAoc3RyLmxlbmd0aCA9PSA0KSA/IFwiaGV4MTExXCIgOiBcImhleDIyMlwiO1xuICAgIH0gZWxzZSBpZiAoc3RyWzBdID09PSAncicgJiYgc3RyWzFdID09PSAnZycgJiYgc3RyWzJdID09PSAnYicpIHtcbiAgICAgIHR5cGUgPSAoc3RyWzNdID09ICdhJykgPyBcInJnYmFcIiA6IFwicmdiXCI7XG4gICAgfSBlbHNlIGlmIChzdHJbMF0gPT09ICdoJyAmJiBzdHJbMV0gPT09ICdzJyAmJiBzdHJbMl0gPT09ICdsJykge1xuICAgICAgdHlwZSA9IChzdHJbM10gPT0gJ2EnKSA/IFwiaHNsYVwiIDogXCJoc2xcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZSkge1xuICAgICAgdmFyIG1hdGNoX3NldCA9IE1BVENIX1NFVF9MSVNUW3R5cGVdO1xuICAgICAgdmFyIG0gPSBzdHIubWF0Y2gobWF0Y2hfc2V0LnJlZyk7XG4gICAgICB2YWx1ZSA9IG1hdGNoX3NldC5leGVjKG0pO1xuICAgIH0gZWxzZSBpZiAoQ29sb3IuQ09MT1JfTElTVFtzdHJdKSB7XG4gICAgICB2YWx1ZSA9IENvbG9yLkNPTE9SX0xJU1Rbc3RyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHN0YXRpY1xuICAgKiBAbWV0aG9kXG4gICAqIGhzbCDjgpIgcmdiIOOBq+WkieaPm1xuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxcbiAgICogQHJldHVybnMge251bWJlcltdfSByZ2LmlbDlgKTphY3liJdcbiAgICovXG4gIHN0YXRpYyBIU0x0b1JHQihoLCBzLCBsKSB7XG4gICAgdmFyIHIsIGcsIGI7XG5cbiAgICBoICU9IDM2MDtcbiAgICBoICs9IDM2MDtcbiAgICBoICU9IDM2MDtcbiAgICBzICo9IDAuMDE7XG4gICAgbCAqPSAwLjAxO1xuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIGwgPSBNYXRoLnJvdW5kKGwgKiAyNTUpO1xuICAgICAgcmV0dXJuIFtsLCBsLCBsXTtcbiAgICB9XG4gICAgdmFyIG0yID0gKGwgPCAwLjUpID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIHZhciBtMSA9IGwgKiAyIC0gbTI7XG5cbiAgICAvLyByZWRcbiAgICB2YXIgdGVtcCA9IChoICsgMTIwKSAlIDM2MDtcbiAgICBpZiAodGVtcCA8IDYwKSB7XG4gICAgICByID0gbTEgKyAobTIgLSBtMSkgKiB0ZW1wIC8gNjA7XG4gICAgfSBlbHNlIGlmICh0ZW1wIDwgMTgwKSB7XG4gICAgICByID0gbTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIgPSBtMTtcbiAgICB9XG5cbiAgICAvLyBncmVlblxuICAgIHRlbXAgPSBoO1xuICAgIGlmICh0ZW1wIDwgNjApIHtcbiAgICAgIGcgPSBtMSArIChtMiAtIG0xKSAqIHRlbXAgLyA2MDtcbiAgICB9IGVsc2UgaWYgKHRlbXAgPCAxODApIHtcbiAgICAgIGcgPSBtMjtcbiAgICB9IGVsc2UgaWYgKHRlbXAgPCAyNDApIHtcbiAgICAgIGcgPSBtMSArIChtMiAtIG0xKSAqICgyNDAgLSB0ZW1wKSAvIDYwO1xuICAgIH0gZWxzZSB7XG4gICAgICBnID0gbTE7XG4gICAgfVxuXG4gICAgLy8gYmx1ZVxuICAgIHRlbXAgPSAoKGggLSAxMjApICsgMzYwKSAlIDM2MDtcbiAgICBpZiAodGVtcCA8IDYwKSB7XG4gICAgICBiID0gbTEgKyAobTIgLSBtMSkgKiB0ZW1wIC8gNjA7XG4gICAgfSBlbHNlIGlmICh0ZW1wIDwgMTgwKSB7XG4gICAgICBiID0gbTI7XG4gICAgfSBlbHNlIGlmICh0ZW1wIDwgMjQwKSB7XG4gICAgICBiID0gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gdGVtcCkgLyA2MDtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IG0xO1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICBNYXRoLmZsb29yKHIgKiAyNTUpLFxuICAgICAgTWF0aC5mbG9vcihnICogMjU1KSxcbiAgICAgIE1hdGguZmxvb3IoYiAqIDI1NSlcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQG1ldGhvZFxuICAgKiBoc2xhIOOCkiByZ2JhIOOBq+WkieaPm1xuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFcbiAgICogQHJldHVybnMge251bWJlcltdfSByZ2Jh5pWw5YCk6YWN5YiXXG4gICAqL1xuICBzdGF0aWMgSFNMQXRvUkdCQShoLCBzLCBsLCBhKSB7XG4gICAgdmFyIHRlbXAgPSBDb2xvci5IU0x0b1JHQihoLCBzLCBsKTtcbiAgICB0ZW1wWzNdID0gYTtcbiAgICByZXR1cm4gdGVtcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZXRob2RcbiAgICogcmdiIOWApOOBi+OCiUNTUyBjb2xvcuODh+ODvOOCv+Wei+a6luaLoOOBruaWh+Wtl+WIl+OCkueUn+aIkFxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTdHlsZVJHQihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIFwicmdiYShcIiArIHIgKyBcIixcIiArIGcgKyBcIixcIiArIGIgKyBcIilcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZXRob2RcbiAgICogcmdiYSDlgKTjgYvjgolDU1MgY29sb3Ljg4fjg7zjgr/lnovmupbmi6Djga7mloflrZfliJfjgpLnlJ/miJBcbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBnXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlU3R5bGVSR0JBKHIsIGcsIGIsIGEpIHtcbiAgICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLFwiICsgYSArIFwiKVwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQG1ldGhvZFxuICAgKiBoc2wg5YCk44GL44KJQ1NTIGNvbG9y44OH44O844K/5Z6L5rqW5oug44Gu5paH5a2X5YiX44KS55Sf5oiQXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gaFxuICAgKiBAcGFyYW0ge251bWJlcn0gc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVN0eWxlSFNMKGgsIHMsIGwpIHtcbiAgICByZXR1cm4gXCJoc2woXCIgKyBoICsgXCIsXCIgKyBzICsgXCIlLFwiICsgbCArIFwiJSlcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZXRob2RcbiAgICogaHNsYSDlgKTjgYvjgolDU1MgY29sb3Ljg4fjg7zjgr/lnovmupbmi6Djga7mloflrZfliJfjgpLnlJ/miJBcbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlU3R5bGVIU0xBKGgsIHMsIGwsIGEpIHtcbiAgICByZXR1cm4gXCJoc2xhKFwiICsgaCArIFwiLFwiICsgcyArIFwiJSxcIiArIGwgKyBcIiUsXCIgKyBhICsgXCIpXCI7XG4gIH1cblxufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBlbnVtIHtudW1iZXJbXX1cbiAqIOOCq+ODqeODvOODquOCueODiFxuICovXG5Db2xvci5DT0xPUl9MSVNUID0ge1xuICAvKiogQHByb3BlcnR5IGJsYWNrICovXG4gIFwiYmxhY2tcIjogWzB4MDAsIDB4MDAsIDB4MDBdLFxuICAvKiogQHByb3BlcnR5IHNpbHZlciAqL1xuICBcInNpbHZlclwiOiBbMHhjMCwgMHhjMCwgMHhjMF0sXG4gIC8qKiBAcHJvcGVydHkgZ3JheSAqL1xuICBcImdyYXlcIjogWzB4ODAsIDB4ODAsIDB4ODBdLFxuICAvKiogQHByb3BlcnR5IHdoaXRlICovXG4gIFwid2hpdGVcIjogWzB4ZmYsIDB4ZmYsIDB4ZmZdLFxuICAvKiogQHByb3BlcnR5IG1hcm9vbiAqL1xuICBcIm1hcm9vblwiOiBbMHg4MCwgMHgwMCwgMHgwMF0sXG4gIC8qKiBAcHJvcGVydHkgcmVkICovXG4gIFwicmVkXCI6IFsweGZmLCAweDAwLCAweDAwXSxcbiAgLyoqIEBwcm9wZXJ0eSBwdXJwbGUgKi9cbiAgXCJwdXJwbGVcIjogWzB4ODAsIDB4MDAsIDB4ODBdLFxuICAvKiogQHByb3BlcnR5IGZ1Y2hzaWEgKi9cbiAgXCJmdWNoc2lhXCI6IFsweGZmLCAweDAwLCAweGZmXSxcbiAgLyoqIEBwcm9wZXJ0eSBncmVlbiAqL1xuICBcImdyZWVuXCI6IFsweDAwLCAweDgwLCAweDAwXSxcbiAgLyoqIEBwcm9wZXJ0eSBsaW1lICovXG4gIFwibGltZVwiOiBbMHgwMCwgMHhmZiwgMHgwMF0sXG4gIC8qKiBAcHJvcGVydHkgb2xpdmUgKi9cbiAgXCJvbGl2ZVwiOiBbMHg4MCwgMHg4MCwgMHgwMF0sXG4gIC8qKiBAcHJvcGVydHkgeWVsbG93ICovXG4gIFwieWVsbG93XCI6IFsweGZmLCAweGZmLCAweDAwXSxcbiAgLyoqIEBwcm9wZXJ0eSBuYXZ5ICovXG4gIFwibmF2eVwiOiBbMHgwMCwgMHgwMCwgMHg4MF0sXG4gIC8qKiBAcHJvcGVydHkgYmx1ZSAqL1xuICBcImJsdWVcIjogWzB4MDAsIDB4MDAsIDB4ZmZdLFxuICAvKiogQHByb3BlcnR5IHRlYWwgKi9cbiAgXCJ0ZWFsXCI6IFsweDAwLCAweDgwLCAweDgwXSxcbiAgLyoqIEBwcm9wZXJ0eSBhcXVhICovXG4gIFwiYXF1YVwiOiBbMHgwMCwgMHhmZiwgMHhmZl0sXG59O1xuXG4vKipcbiAqIOiJsuaWh+Wtl+WIl+OCkm51bWJlcuWei+mFjeWIl+OBq+WkieaPm+OBmeOCi+OBn+OCgeOBruato+imj+ihqOePvuOBqOmWouaVsOOBruOCu+ODg+ODiFxuICogQGVudW0ge3tyZWc6IFJlZ0V4cCwgZXhlYzogKG06bnVtYmVyW10pPT4gbnVtYmVyW119fVxuICovXG52YXIgTUFUQ0hfU0VUX0xJU1QgPSB7XG4gIFwiaGV4MTExXCI6IHtcbiAgICByZWc6IC9eIyhcXHd7MX0pKFxcd3sxfSkoXFx3ezF9KSQvLFxuICAgIGV4ZWM6IGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHBhcnNlSW50KG1bMV0gKyBtWzFdLCAxNiksXG4gICAgICAgIHBhcnNlSW50KG1bMl0gKyBtWzJdLCAxNiksXG4gICAgICAgIHBhcnNlSW50KG1bM10gKyBtWzNdLCAxNilcbiAgICAgIF07XG4gICAgfVxuICB9LFxuICBcImhleDIyMlwiOiB7XG4gICAgcmVnOiAvXiMoXFx3ezJ9KShcXHd7Mn0pKFxcd3syfSkkLyxcbiAgICBleGVjOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBwYXJzZUludChtWzFdLCAxNiksXG4gICAgICAgIHBhcnNlSW50KG1bMl0sIDE2KSxcbiAgICAgICAgcGFyc2VJbnQobVszXSwgMTYpXG4gICAgICBdO1xuICAgIH1cbiAgfSxcbiAgXCJyZ2JcIjoge1xuICAgIHJlZzogL15yZ2JcXCgoXFxkezEsM30pLFxccyooXFxkezEsM30pLFxccyooXFxkezEsM30pXFwpJC8sXG4gICAgZXhlYzogZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcGFyc2VJbnQobVsxXSksXG4gICAgICAgIHBhcnNlSW50KG1bMl0pLFxuICAgICAgICBwYXJzZUludChtWzNdKVxuICAgICAgXTtcbiAgICB9XG4gIH0sXG4gIFwicmdiYVwiOiB7XG4gICAgcmVnOiAvXnJnYmFcXCgoXFxkezEsM30pLFxccyooXFxkezEsM30pLFxccyooXFxkezEsM30pLFxccyooXFxkezF9KFxcLnsxfVxcZCspPylcXCkkLyxcbiAgICBleGVjOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBwYXJzZUludChtWzFdKSxcbiAgICAgICAgcGFyc2VJbnQobVsyXSksXG4gICAgICAgIHBhcnNlSW50KG1bM10pLFxuICAgICAgICBwYXJzZUZsb2F0KG1bNF0pXG4gICAgICBdO1xuICAgIH1cbiAgfSxcbiAgXCJoc2xcIjoge1xuICAgIHJlZzogL15oc2xcXCgoXFxkezEsM30pLFxccyooXFxkezEsM30pJSxcXHMqKFxcZHsxLDN9KSVcXCkkLyxcbiAgICBleGVjOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gQ29sb3IuSFNMdG9SR0IobVsxXSwgbVsyXSwgbVszXSk7XG4gICAgfVxuICB9LFxuICBcImhzbGFcIjoge1xuICAgIHJlZzogL15yZ2JhXFwoKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KSxcXHMqKFxcZHsxfShcXC57MX1cXGQrKT8pXFwpJC8sXG4gICAgZXhlYzogZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIENvbG9yLkhTTEF0b1JHQkEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSk7XG4gICAgfVxuICB9XG59O1xuXG4vLyDnm6Poppbjgqrjg5bjgrjjgqfjgq/jg4hcbi8vIHJlZ2lzdGVyIOOBpyBrZXkg44KS55m76YyyICjjg4fjg5Xjgqnjg6vjg4jlgKTjgoLkuIDnt5LjgavvvJ8pXG4vLyBldmVudCBkaXNwYXRjaGVyIOOCkue2meaJv1xuLy8gZXZlbnQgZGlzcGF0Y2hlciDjgaPjgaYgdXRpbCDjgZjjgoPjga3vvJ9cbi8vIHJlZ2lzdGVyIOOBp+eZu+mMsuOBl+OBn+WApOOCkuWkieabtOOBl+OBn+OCiSBjaGFuZ2Ug44Kk44OZ44Oz44OI44GM6LWw44KLXG5cblxuLy8g5ZCN5YmN5YCZ6KOcXG4vLyAgbWlkZGxlbWFuKOS7sueri+S6uilcblxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51dGlsLkNoYW5nZURpc3BhdGNoZXJcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIENoYW5nZURpc3BhdGNoZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9vYnNlcnZlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7YW55fSBkZWZhdWx0VmFsdWVcbiAgICovXG4gIHJlZ2lzdGVyKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBvYmogPSBhcmd1bWVudHNbMF07XG4gICAgICBmb3JJbi5jYWxsKG9iaiwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgLy8gb2JqLmZvckluKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihrZXksIHZhbHVlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciB0ZW1wS2V5ID0gJ19fJyArIGtleTtcbiAgICAgIHRoaXNbdGVtcEtleV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICBhY2Nlc3Nvci5jYWxsKHRoaXMsIGtleSwge1xuICAgICAgLy8gdGhpcy5hY2Nlc3NvcihrZXksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1t0ZW1wS2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgdGhpc1t0ZW1wS2V5XSA9IHY7XG4gICAgICAgICAgaWYgKHRoaXMuX29ic2VydmUpIHtcbiAgICAgICAgICAgIHRoaXMuZmxhcmUoJ2NoYW5nZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG9ic2VydmUoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZSA9IHRydWU7XG4gIH1cbiAgdW5vYnNlcnZlKCkge1xuICAgIHRoaXMuX29ic2VydmUgPSBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFqYXhSZXF1ZXN0T3B0aW9ucyBBamF444Kv44Op44K55Yid5pyf5YyW44Kq44OX44K344On44OzXG4gKiBAcHJvcGVydHkgeydHRVQnfCdQT1NUJ3wnUFVUJ3wnREVMRVRFJ30gdHlwZSBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1cmwgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbnRlbnRUeXBlXSBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcmVzcG9uc2VUeXBlXSBcbiAqIEBwcm9wZXJ0eSB7YW55fSBbZGF0YV0g5pyq5L2/55So77yfXG4gKi9cblxuIC8qKlxuICogQGNsYXNzIHBoaW5hLnV0aWwuQWpheFxuICogXG4gKi9cbmNsYXNzIEFqYXgge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FqYXhSZXF1ZXN0T3B0aW9uc30gb3B0aW9uc1xuICAgKi9cbiAgc3RhdGljIHJlcXVlc3Qob3B0aW9ucykge1xuICAgIHZhciBkYXRhID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9ucywgQWpheC5kZWZhdWx0cyk7XG4gICAgLy8gdmFyIGRhdGEgPSAoe30pLiRzYWZlKG9wdGlvbnMsIHRoaXMuZGVmYXVsdHMpO1xuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBmbG93ID0gbmV3IEZsb3coZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoWzIwMCwgMjAxLCAwXS5pbmRleE9mKHhoci5zdGF0dXMpICE9PSAtMSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgeGhyLm9wZW4oZGF0YS50eXBlLCBkYXRhLnVybCk7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gZGF0YS5yZXNwb25zZVR5cGU7XG4gICAgICB4aHIuc2VuZChudWxsKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmbG93O1xuICB9XG4gIHN0YXRpYyBnZXQodXJsKSB7XG4gICAgcmV0dXJuIEFqYXgucmVxdWVzdCh7XG4gICAgICB0eXBlOiAnR0VUJyxcbiAgICAgIHVybDogdXJsLFxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBwb3N0KHVybCkge1xuICAgIHJldHVybiBBamF4LnJlcXVlc3Qoe1xuICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgdXJsOiB1cmwsXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHB1dCh1cmwpIHtcbiAgICByZXR1cm4gQWpheC5yZXF1ZXN0KHtcbiAgICAgIHR5cGU6ICdQVVQnLFxuICAgICAgdXJsOiB1cmwsXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGRlbCh1cmwpIHtcbiAgICByZXR1cm4gQWpheC5yZXF1ZXN0KHtcbiAgICAgIHR5cGU6ICdERUxFVEUnLFxuICAgICAgdXJsOiB1cmwsXG4gICAgfSk7XG4gIH1cblxufVxuXG4vKiogXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QWpheFJlcXVlc3RPcHRpb25zfVxuICovXG5BamF4LmRlZmF1bHRzID0ge1xuICB0eXBlOiAnR0VUJyxcbiAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgZGF0YTogbnVsbCxcbiAgdXJsOiAnJyxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHJpbWl0aXZlVmVjdG9yMiB4LHnjg5fjg63jg5Hjg4bjgqPjga7jgb/jga7ljp/lp4vnmoTjgapWZWN0b3IyXG4gKiBAcHJvcGVydHkge251bWJlcn0geFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHlcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nZW9tLlZlY3RvcjJcbiAqIEBleHRlbmRzIFByaW1pdGl2ZVZlY3RvcjJcbiAqICMgMuasoeWFg+ODmeOCr+ODiOODq+OCr+ODqeOCuVxuICogMuasoeWFg+OBruODmeOCr+ODiOODq+OChOW6p+aomeOCkuihqOOBmeOCr+ODqeOCueOBp+OBmeOAglxuICogXG4gKiBAZXhhbXBsZVxuICogdiA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAqXG4gKi9cbmNsYXNzIFZlY3RvcjIge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge051bWJlcn0gW3g9MF0g44OZ44Kv44OI44Or44GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeT0wXSDjg5njgq/jg4jjg6vjga4geSDluqfmqJlcbiAgICovXG4gIGNvbnN0cnVjdG9yKHg9MCwgeT0wKSB7XG5cbiAgICAvKipcbiAgICAgKiB45bqn5qiZXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnggPSB4O1xuXG4gICAgLyoqXG4gICAgICogeeW6p+aomVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNsb25lXG4gICAqIHRoaXMg44Gu44Kz44OU44O844KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqIHYyID0gdi5jbG9uZSgpO1xuICAgKiB2Mi54ID09IHYueDsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7VmVjdG9yMn0g55Sf5oiQ44GX44Gf44OZ44Kv44OI44OrXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54LCB0aGlzLnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZXF1YWxzXG4gICAqIHRoaXMg44Gu5ZCE6KaB57Sg44GM44GZ44G544GmIG90aGVyIOOBqOetieOBl+OBhOOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNSwgNik7XG4gICAqIHYxLmVxdWFscyh2Mik7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gdiDmr5TovIPjgZnjgovlr77osaHjga7jg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g562J44GX44GE44GL44Gp44GG44GLXG4gICAqL1xuICBlcXVhbHModikge1xuICAgIHJldHVybiAodGhpcy54ID09PSB2LnggJiYgdGhpcy55ID09PSB2LnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0XG4gICAqIHRoaXMg44Gu5ZCE6KaB57Sg44Gu5YCk44KS5YaN6Kit5a6a44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqIHYuc2V0KDUsIDYpO1xuICAgKlxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOODmeOCr+ODiOODq+OBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDjg5njgq/jg4jjg6vjga4geSDluqfmqJlcbiAgICovXG4gIHNldCh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgYWRkXG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjgasgb3RoZXIg44KS5Yqg44GI44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMig1LCA2KTtcbiAgICogdjEuYWRkKHYyKTsgLy8gPT4gcGhpbmEuZ2VvbS5WZWN0b3IoOCwgMTApXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gdiDjg5njgq/jg4jjg6tcbiAgICovXG4gIGFkZCh2KSB7XG4gICAgdGhpcy54ICs9IHYueDtcbiAgICB0aGlzLnkgKz0gdi55O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc3ViXG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjgYvjgokgb3RoZXIg44KS5rib44GY44G+44GZ44CCXG4gICAqXG4gICAqIOODmeOCr+ODiOODq+OBjOW6p+aomeOCkuihqOOBmeWgtOWQiOOBr+OAgeaMh+WumuOBl+OBn+W6p+aomeOBi+OCieiHquWIhuiHqui6q+OBuOOBqOWQkeOBi+OBhuODmeOCr+ODiOODq+OBjOW+l+OCieOCjOOBvuOBmeOAglxuICAgKiBcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDUpO1xuICAgKiB2MS5zdWIodjIpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcigyLCAtMSlcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKi9cbiAgc3ViKHYpIHtcbiAgICB0aGlzLnggLT0gdi54O1xuICAgIHRoaXMueSAtPSB2Lnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtdWxcbiAgICogQGNoYWluYWJsZVxuICAgKiB0aGlzIOOBruWQhOimgee0oOOBq+aVsOWApCBuIOOCkuS5l+OBmOOBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogdjEubXVsKDMpIC8vID0+IHBoaW5hLmdlb20uVmVjdG9yKDksIDEyKVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gbiDkuZfjgZjjgovlgKRcbiAgICovXG4gIG11bChuKSB7XG4gICAgdGhpcy54ICo9IG47XG4gICAgdGhpcy55ICo9IG47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBkaXZcbiAgICogQGNoYWluYWJsZVxuICAgKiB0aGlzIOOBruWQhOimgee0oOOCkuaVsOWApCBuIOOBp+WJsuOCiuOBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMig4LCAxNik7XG4gICAqIHYxLmRpdigyKSAvLyA9PiBwaGluYS5nZW9tLlZlY3Rvcig0LCA4KVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gbiDlibLjgovlgKRcbiAgICovXG4gIGRpdihuKSB7XG4gICAgLy9jb25zb2xlLmFzc2VydChuICE9IDAsIFwiMCBkaXZpc2lvbiEhXCIpO1xuICAgIG4gPSBuIHx8IDAuMDE7XG4gICAgdGhpcy54IC89IG47XG4gICAgdGhpcy55IC89IG47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEBtZXRob2QgbmVnYXRlXG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjga7lkITopoHntKDjga7mraPosqDjgpLlj43ou6LjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogdGhpcyDjgajlkIzjgZjlpKfjgY3jgZXjgafmlrnlkJHjgYzpgIbjga7jg5njgq/jg4jjg6vjgYzlvpfjgonjgozjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgLTQpO1xuICAgKiB2MS5uZWdhdGUoKSAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcigtMywgNClcbiAgICpcbiAgICovXG4gIG5lZ2F0ZSgpIHtcbiAgICB0aGlzLnggPSAtdGhpcy54O1xuICAgIHRoaXMueSA9IC10aGlzLnk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBkb3RcbiAgICogb3RoZXIg44Go44Gu5YaF56mN44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIOaKleW9seODmeOCr+ODiOODq+OCkuaxguOCgeOBn+OCiuOAgemhnuS8vOW6puOBruioiOeul+OBq+WIqeeUqOOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KTtcbiAgICogdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTIsIDIpO1xuICAgKiB2MS5kb3QodjIpIC8vID0+IDJcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOWGheepjVxuICAgKi9cbiAgZG90KHYpIHtcbiAgICByZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY3Jvc3NcbiAgICogb3RoZXIg44Go44Gu5aSW56mN77yI44Kv44Ot44K556mN77yJ44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6vjgafjga7lpJbnqY3jga/jg5njgq/jg4jjg6vjgafjgarjgY/mlbDlgKTjgpLov5TjgZnjgZPjgajjgavms6jmhI/jgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogb3RoZXIg44KI44KKIHRoaXMg5pmC6KiI5Zue44KK44Gr44GC44KL44Go44GN44Gv5q2j44Gu5YCk44Gr44Gq44KK44CB5Y+N5pmC6KiI5Zue44KK44Gr44GC44KL44Go44GN44Gv6LKg44Gu5YCk44Gr44Gq44KK44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCAxKTtcbiAgICogdjEuY3Jvc3ModjIpIC8vID0+IC04XG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gdiDjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7TnVtYmVyfSDlpJbnqY1cbiAgICovXG4gIGNyb3NzKHYpIHtcbiAgICByZXR1cm4gKHRoaXMueCp2LnkpIC0gKHRoaXMueSp2LngpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgbGVuZ3RoXG4gICAqIHRoaXMg44Gu5aSn44GN44GV44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIChtZW1vKSBtYWduaXR1ZGUg44Gj44Gm5ZCN5YmN44Gu5pa544GM6Imv44GE44GL44KCLiDmpJzoqI7kuK0uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiB2MS5sZW5ndGgoKTsgLy8gPT4gNVxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOODmeOCr+ODiOODq+OBruWkp+OBjeOBlVxuICAgKi9cbiAgbGVuZ3RoKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCArIHRoaXMueSp0aGlzLnkpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBsZW5ndGhTcXVhcmVkXG4gICAqIHRoaXMg44Gu5aSn44GN44GV44Gu6Ieq5LmX44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEMjIOOBruWQjeWJjeOCkuW8leeUqO+8iG9yIGxlbmd0aFNxdWFyZSBvciBsZW5ndGhTcXJ077yJXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiB2MS5sZW5ndGhTcXVhcmVkKCk7IC8vID0+IDI1XG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0g44OZ44Kv44OI44Or44Gu5aSn44GN44GV44Gu6Ieq5LmXXG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKCkge1xuICAgIHJldHVybiB0aGlzLngqdGhpcy54ICsgdGhpcy55KnRoaXMueTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZGlzdGFuY2VcbiAgICogdGhpcyDjgaggb3RoZXIg44KS5bqn5qiZ44Go44G/44Gq44GX44Gf44Go44GN44GuMueCuemWk+OBrui3nembouOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigxLCAyKTtcbiAgICogdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgNik7XG4gICAqIHYxLmRpc3RhbmNlKHYyKTsgLy8gPT4gNVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0gMueCuemWk+OBrui3nembolxuICAgKi9cbiAgZGlzdGFuY2Uodikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KHRoaXMueC12LngsIDIpICsgTWF0aC5wb3codGhpcy55LXYueSwgMikgKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZGlzdGFuY2VTcXVhcmVkXG4gICAqIHRoaXMg44GoIG90aGVyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBrjLngrnplpPjga7ot53pm6Ljga7oh6rkuZfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMSwgMik7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDQsIDYpO1xuICAgKiB2MS5kaXN0YW5jZVNxdWFyZWQodjIpOyAvLyA9PiAyNVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0gMueCuemWk+OBrui3nembouOBruiHquS5l1xuICAgKi9cbiAgZGlzdGFuY2VTcXVhcmVkKHYpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codGhpcy54LXYueCwgMikgKyBNYXRoLnBvdyh0aGlzLnktdi55LCAyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOiHqui6q+OCkuinkuW6puOBjCBtaW4g44GL44KJIG1heCDjga7nr4Tlm7LvvIjluqbljZjkvY3vvInjgaflpKfjgY3jgZXjgYwgbGVuIOOBruODqeODs+ODgOODoOOBquODmeOCr+ODiOODq+OBq+WkieaPm+OBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIoKS5yYW5kb20oOTAsIDE4MCwgMSk7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigtMC41LCAwLjg2Nikg44Gq44GpXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPTBdIOinkuW6pu+8iOW6puWNmOS9je+8ieOBruS4i+mZkOWApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW21heD0zNjBdIOinkuW6pu+8iOW6puWNmOS9je+8ieOBruS4iumZkOWApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xlbj0xXSDlpKfjgY3jgZVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByYW5kb20obWluLCBtYXgsIGxlbikge1xuICAgIHZhciBkZWdyZWUgPSBSYW5kb20ucmFuZGZsb2F0KG1pbiB8fCAwLCBtYXggfHwgMzYwKTtcbiAgICB2YXIgcmFkID0gZGVncmVlKkRFR19UT19SQUQ7XG4gICAgdmFyIGxlbiA9IGxlbiB8fCAxO1xuXG4gICAgdGhpcy54ID0gTWF0aC5jb3MocmFkKSpsZW47XG4gICAgdGhpcy55ID0gTWF0aC5zaW4ocmFkKSpsZW47XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2Qgbm9ybWFsaXplXG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjgpLmraPopo/ljJbjgZfjgb7jgZnjgILjgZnjgarjgo/jgaHjgIF0aGlzIOOBqOWQjOOBmOaWueWQkeOBp+Wkp+OBjeOBleOBjDHjga7jg5njgq/jg4jjg6vjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqIHYxLm5vcm1hbGl6ZSgpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcjIoMC42LCAwLjgpXG4gICAqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbm9ybWFsaXplKCkge1xuICAgIHRoaXMuZGl2KHRoaXMubGVuZ3RoKCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9TdHJpbmdcbiAgICogdGhpcyDjgpIgSlNPTiDlvaLlvI/jgafooajnj77jgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqIHYxLnRvU3RyaW5nKCk7IC8vID0+IFwie3g6MywgeTo0fVwiXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30gSlNPTiDmloflrZfliJdcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBmb3JtYXQuY2FsbChcInt4Ont4fSwgeTp7eX19XCIsIHRoaXMpO1xuICAgIC8vIHJldHVybiBcInt4Ont4fSwgeTp7eX19XCIuZm9ybWF0KHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZ2V0RGlyZWN0aW9uXG4gICAqIHRoaXMg44Gu44GK44GK44KI44Gd44Gu5pa55ZCR44KS56S644GX44Gf5paH5a2X5YiX44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiB2MS5nZXREaXJlY3Rpb24oKTsgLy8gPT4gXCJ1cFwiXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30g5pa55ZCR44KS6KGo44GZ5paH5a2X5YiX77yIXCJ1cFwiLCBcInJpZ2h0XCIsIFwiZG93blwiLCBcImxlZnRcIu+8iVxuICAgKi9cbiAgZ2V0RGlyZWN0aW9uKCkge1xuICAgIHZhciBhbmdsZSA9IHRoaXMudG9EZWdyZWUoKTtcbiAgICBpZiAoYW5nbGUgPCA0NSkge1xuICAgICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgMTM1KSB7XG4gICAgICByZXR1cm4gXCJkb3duXCI7XG4gICAgfSBlbHNlIGlmIChhbmdsZSA8IDIyNSkge1xuICAgICAgcmV0dXJuIFwibGVmdFwiXG4gICAgfSBlbHNlIGlmIChhbmdsZSA8IDMxNSkge1xuICAgICAgcmV0dXJuIFwidXBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB0b0FuZ2xlXG4gICAqIHRoaXMg44GoIHgg6Lu444Go44Gu6KeS5bqm77yI44Op44K444Ki44Oz5Y2Y5L2N77yJ44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0yLCAwKTtcbiAgICogdjEudG9BbmdsZSgpOyAvLyA9PiAzLjE0MTU5XG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0g44OZ44Kv44OI44Or44Gu6KeS5bqm77yI44Op44K444Ki44Oz5Y2Y5L2N77yJXG4gICAqL1xuICB0b0FuZ2xlKCkge1xuICAgIHZhciByYWQgPSBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcbiAgICByZXR1cm4gKHJhZCArIE1hdGguUEkqMiklKE1hdGguUEkqMik7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIGZyb21BbmdsZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOinkuW6pu+8iOODqeOCuOOCouODs+WNmOS9je+8ieOBqOWkp+OBjeOBleOCkuaMh+WumuOBl+OBpuODmeOCr+ODiOODq+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIoKS5mcm9tQW5nbGUoTWF0aC5QSS80LCAyKTsgLy8gPT4gcGhpbmEuZ2VvbS5WZWN0b3IyKDEuNDE0MiwgMS40MTQyKVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIOinkuW6pu+8iOODqeOCuOOCouODs+WNmOS9je+8iVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xlbj0xXSDlpKfjgY3jgZVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmcm9tQW5nbGUocmFkLCBsZW4pIHtcbiAgICBsZW4gPSBsZW4gfHwgMTtcbiAgICB0aGlzLnggPSBNYXRoLmNvcyhyYWQpKmxlbjtcbiAgICB0aGlzLnkgPSBNYXRoLnNpbihyYWQpKmxlbjtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHRvRGVncmVlXG4gICAqIHRoaXMg44GoIHgg6Lu444Go44Gu6KeS5bqm77yI5bqm5Y2Y5L2N77yJ44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0yLCAyKTtcbiAgICogdjEudG9BbmdsZSgpOyAvLyA9PiAxMzVcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSDjg5njgq/jg4jjg6vjga7op5LluqbvvIjluqbljZjkvY3vvIlcbiAgICovXG4gIHRvRGVncmVlKCkge1xuICAgIHJldHVybiB0b0RlZ3JlZS5jYWxsKHRoaXMudG9BbmdsZSgpKTtcbiAgICAvLyByZXR1cm4gdGhpcy50b0FuZ2xlKCkudG9EZWdyZWUoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZnJvbURlZ3JlZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIOinkuW6pu+8iOW6puWNmOS9je+8ieOBqOWkp+OBjeOBleOCkuaMh+WumuOBl+OBpuODmeOCr+ODiOODq+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIoKS5mcm9tRGVncmVlKDYwLCAyKTsgLy8gPT4gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDEuNzMyKVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVnIOinkuW6pu+8iOW6puWNmOS9je+8iVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xlbj0xXSDlpKfjgY3jgZVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmcm9tRGVncmVlKGRlZywgbGVuKSB7XG4gICAgLy8gcmV0dXJuIHRoaXMuZnJvbUFuZ2xlKGRlZy50b1JhZGlhbigpLCBsZW4pO1xuICAgIHJldHVybiB0aGlzLmZyb21BbmdsZSh0b1JhZGlhbi5jYWxsKGRlZyksIGxlbik7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCByb3RhdGVcbiAgICogQGNoYWluYWJsZVxuICAgKiB0aGlzIOOCkuWbnui7ouOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCAxKTtcbiAgICogdjEucm90YXRlKE1hdGguUEkvMik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigtMSwgMyk7XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWQg6KeS5bqm77yI44Op44K444Ki44Oz5Y2Y5L2N77yJXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gW2NlbnRlcj1WZWN0b3IyKDAsIDApXSDlm57ou6Ljga7kuK3lv4PluqfmqJlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByb3RhdGUocmFkLCBjZW50ZXIpIHtcbiAgICBjZW50ZXIgPSBjZW50ZXIgfHwgbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICB2YXIgeDEgPSB0aGlzLnggLSBjZW50ZXIueDtcbiAgICB2YXIgeTEgPSB0aGlzLnkgLSBjZW50ZXIueTtcbiAgICB2YXIgeDIgPSB4MSAqIE1hdGguY29zKHJhZCkgLSB5MSAqIE1hdGguc2luKHJhZCk7XG4gICAgdmFyIHkyID0geDEgKiBNYXRoLnNpbihyYWQpICsgeTEgKiBNYXRoLmNvcyhyYWQpO1xuICAgIHRoaXMuc2V0KCBjZW50ZXIueCArIHgyLCBjZW50ZXIueSArIHkyICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1pblxuICAgKiBAc3RhdGljXG4gICAqIHYxIOOBqCB2MiDjga7lkITopoHntKDjgavlr77jgZfjgIHjgojjgorlsI/jgZXjgYTmlrnjgpLopoHntKDjgajjgZnjgovmlrDjgZfjgYTjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0zLCAyKTtcbiAgICogcGhpbmEuZ2VvbS5WZWN0b3IyLm1pbih2MSwgdjIpOyAvLyBwaGluYS5nZW9tLlZlY3RvcjIoLTMsIDEpO1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGEg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gYiDjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7VmVjdG9yMn0g55Sf5oiQ44GX44Gf44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgbWluKGEsIGIpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoXG4gICAgICAoYS54IDwgYi54KSA/IGEueCA6IGIueCxcbiAgICAgIChhLnkgPCBiLnkpID8gYS55IDogYi55XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1heFxuICAgKiBAc3RhdGljXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6sgdjEg44GoIHYyIOOBruWQhOimgee0oOOBq+WvvuOBl+OAgeOCiOOCiuWkp+OBjeOBhOaWueOCkuimgee0oOOBqOOBmeOCi+aWsOOBl+OBhOODmeOCr+ODiOODq+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigzLCAxKTtcbiAgICogdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoLTMsIDIpO1xuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIubWF4KHYxLCB2Mik7IC8vIHBoaW5hLmdlb20uVmVjdG9yMigzLCAyKTtcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBhIOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGIg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOeUn+aIkOOBl+OBn+ODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIG1heChhLCBiKSB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxuICAgICAgKGEueCA+IGIueCkgPyBhLnggOiBiLngsXG4gICAgICAoYS55ID4gYi55KSA/IGEueSA6IGIueVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRcbiAgICogQHN0YXRpY1xuICAgKiB2MSDjgasgdjIg44KS5Yqg566X44GX44Gf5paw44GX44GE44OZ44Kv44OI44Or44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDEpO1xuICAgKiB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMigtMywgMik7XG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5hZGQodjEsIHYyKTsgLy8gcGhpbmEuZ2VvbS5WZWN0b3IyKDAsIDMpO1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGxocyDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSByaHMg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOWKoOeul+OBl+OBn+e1kOaenFxuICAgKi9cbiAgc3RhdGljIGFkZChsaHMsIHJocykge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMihsaHMueCtyaHMueCwgbGhzLnkrcmhzLnkpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBzdWJcbiAgICogQHN0YXRpY1xuICAgKiAy5qyh5YWD44OZ44Kv44OI44OrIHYxIOOBi+OCiSB2MiDjgpLmuJvjgZjjgZ/mlrDjgZfjgYTjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog44OZ44Kv44OI44Or44GM5bqn5qiZ44KS6KGo44GZ5aC05ZCI44CBMuOBpOebruOBruW6p+aomeOBi+OCiTHjgaTnm67jga7luqfmqJnjgbjjgajlkJHjgYvjgYbjg5njgq/jg4jjg6vjgYzlvpfjgonjgozjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0zLCAyKTtcbiAgICogcGhpbmEuZ2VvbS5WZWN0b3IyLnN1Yih2MSwgdjIpOyAvLyBwaGluYS5nZW9tLlZlY3RvcjIoNiwgLTEpO1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGxocyDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSByaHMg44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOa4m+eul+OBl+OBn+e1kOaenFxuICAgKi9cbiAgc3RhdGljIHN1YihsaHMsIHJocykge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMihsaHMueC1yaHMueCwgbGhzLnktcmhzLnkpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBtdWxcbiAgICogQHN0YXRpY1xuICAgKiAy5qyh5YWD44OZ44Kv44OI44OrIHYg44Gu5ZCE6KaB57Sg44GrIG4g44KS5LmX44GY44Gf5paw44GX44GE44OZ44Kv44OI44Or44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDEpO1xuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIubXVsKHYxLCAyKTsgLy8gcGhpbmEuZ2VvbS5WZWN0b3IyKDYsIDIpXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gdiDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG4g5LmX44GY44KL5YCkXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOS5l+eul+OBl+OBn+e1kOaenFxuICAgKi9cbiAgc3RhdGljIG11bCh2LCBuKSB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHYueCpuLCB2Lnkqbik7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIGRpdlxuICAgKiBAc3RhdGljXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6sgdiDjga7lkITopoHntKDjgpIgbiDjgaflibLjgaPjgZ/mlrDjgZfjgYTjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5kaXYodjEsIDIpOyAvLyBwaGluYS5nZW9tLlZlY3RvcjIoMS41LCAwLjUpXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gdiDjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG4g5Ymy44KL5YCkXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOmZpOeul+OBl+OBn+e1kOaenFxuICAgKi9cbiAgc3RhdGljIGRpdih2LCBuKSB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHYueC9uLCB2Lnkvbik7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5lZ2F0ZVxuICAgKiBAc3RhdGljXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6sgdiDjgpLlj43ou6LjgZfjgZ/mlrDjgZfjgYTjg5njgq/jg4jjg6vjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgMSk7XG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5uZWdhdGUoKTsgLy8gcGhpbmEuZ2VvbS5WZWN0b3IyKC0zLCAtMSlcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDlj43ou6LjgZfjgZ/jg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyBuZWdhdGUodikge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMigtdi54LCAtdi55KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2QgZG90XG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2MSDjgaggdjIg44Gu5YaF56mN44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDQpO1xuICAgKiB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMigtMiwgMik7XG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5kb3QodjEsIHYyKSAvLyA9PiAyXG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gbGhzIOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHJocyDjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7TnVtYmVyfSDlhoXnqY1cbiAgICovXG4gIHN0YXRpYyBkb3QobGhzLCByaHMpIHtcbiAgICByZXR1cm4gbGhzLnggKiByaHMueCArIGxocy55ICogcmhzLnk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNyb3NzXG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2MSDjgaggdjIg44Gu5aSW56mN77yI44Kv44Ot44K556mN77yJ44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6vjgafjga7lpJbnqY3jga/jg5njgq/jg4jjg6vjgafjgarjgY/mlbDlgKTjgpLov5TjgZnjgZPjgajjgavms6jmhI/jgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogMeOBpOebruOBruODmeOCr+ODiOODq+OBjDLjgaTnm67jga7jg5njgq/jg4jjg6vjgojjgormmYLoqIjlm57jgorjgavjgYLjgovjgajjgY3jga/mraPjga7lgKTjgavjgarjgorjgIHlj43mmYLoqIjlm57jgorjgavjgYLjgovjgajjgY3jga/osqDjga7lgKTjgavjgarjgorjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDMsIDEpO1xuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIuY3Jvc3ModjEsIHYyKTsgLy8gPT4gLThcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBsaHMg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gcmhzIOODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOWkluepjVxuICAgKi9cbiAgc3RhdGljIGNyb3NzKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIChsaHMueCpyaHMueSkgLSAobGhzLnkqcmhzLngpO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBkaXN0YW5jZVxuICAgKiBAc3RhdGljXG4gICAqIHYxIOOBqCB2MiDjgpLluqfmqJnjgajjgb/jgarjgZfjgZ/jgajjgY3jga4y54K56ZaT44Gu6Led6Zui44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHYxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEsIDIpO1xuICAgKiB2MiA9IHBoaW5hLmdlb20uVmVjdG9yMig0LCA2KTtcbiAgICogcGhpbmEuZ2VvbS5WZWN0b3IyLmRpc3RhbmNlKHYxLCB2Mik7IC8vID0+IDVcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBsaHMg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gcmhzIOW6p+aomeOCkuihqOOBmeODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IDLngrnplpPjga7ot53pm6JcbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZShsaHMsIHJocykge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIE1hdGgucG93KGxocy54LXJocy54LCAyKSArIE1hdGgucG93KGxocy55LXJocy55LCAyKSApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZGlzdGFuY2VTcXVhcmVkXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBrjLngrnplpPjga7ot53pm6Ljga7oh6rkuZfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMSwgMik7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDQsIDYpO1xuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIuZGlzdGFuY2VTcXVhcmVkKHYxLCB2Mik7IC8vID0+IDI1XG4gICAqXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gbGhzIOW6p+aomeOCkuihqOOBmeODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHJocyDluqfmqJnjgpLooajjgZnjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7TnVtYmVyfSAy54K56ZaT44Gu6Led6Zui44Gu6Ieq5LmXXG4gICAqL1xuICBzdGF0aWMgZGlzdGFuY2VTcXVhcmVkKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGxocy54LXJocy54LCAyKSArIE1hdGgucG93KGxocy55LXJocy55LCAyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG1hbmhhdHRhbkRpc3RhbmNlXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBrjLngrnplpPjga7jg57jg7Pjg4/jg4Pjgr/jg7Pot53pm6LvvIjou7jjgavlubPooYzjgavpgLLjgoDjgajjgY3jga7mnIDnn63ot53pm6LvvInjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMSwgMik7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDQsIDYpO1xuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIubWFuaGF0dGFuRGlzdGFuY2UodjEsIHYyKTsgLy8gPT4gN1xuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGxocyDluqfmqJnjgpLooajjgZnjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSByaHMg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge051bWJlcn0gMueCuemWk+OBruODnuODs+ODj+ODg+OCv+ODs+i3nembolxuICAgKi9cbiAgc3RhdGljIG1hbmhhdHRhbkRpc3RhbmNlKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGxocy54LXJocy54KSArIE1hdGguYWJzKGxocy55LXJocy55KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2Qgbm9ybWFsXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuW6p+aomeOBqOOBv+OBquOBl+OBn+OBqOOBjeOBruOAgXYyIOOBi+OCiSB2MSDjgavlkJHjgYvjgYbjg5njgq/jg4jjg6vjgavlr77jgZnjgovms5Xnt5rjg5njgq/jg4jjg6vjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMSwgMik7XG4gICAqIHYyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDQsIDYpO1xuICAgKiBwaGluYS5nZW9tLlZlY3RvcjIubm9ybWFsKHYxLCB2Mik7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMig0LCAtMylcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBhIOW6p+aomeOCkuihqOOBmeODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGIg5bqn5qiZ44KS6KGo44GZ44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOazlee3muODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIG5vcm1hbChhLCBiKSB7XG4gICAgdmFyIHRlbXAgPSBWZWN0b3IyLnN1YihhLCBiKTtcblxuICAgIHJldHVybiBuZXcgVmVjdG9yMigtdGVtcC55LCB0ZW1wLngpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmVmbGVjdFxuICAgKiBAc3RhdGljXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6sgdiDjgpLlo4Hjgbjjga7lhaXlsITjg5njgq/jg4jjg6vjgajjgZfjgabjgIHlo4Hjgavlj43lsITjgZfjgZ/pmpvjga7jg5njgq/jg4jjg6vvvIjlj43lsITjg5njgq/jg4jjg6vvvInjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog5aOB44Gu5ZCR44GN44Gv5rOV57ea44OZ44Kv44OI44OrIG5vcm1hbCDjgavjgojjgaPjgabooajjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdjEgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgMyk7XG4gICAqIG5vcm1hbCA9IHBoaW5hLmdlb20uVmVjdG9yMigtMSwgMSk7XG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5yZWZsZWN0KHYxLCBub3JtYWwpOyAvLyA9PiBwaGluYS5nZW9tLlZlY3RvcjIoMiwgNSlcbiAgICpcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSB2IOWFpeWwhOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IG5vcm1hbCDlo4Hjga7ms5Xnt5rjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiB7VmVjdG9yMn0g5Y+N5bCE44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgcmVmbGVjdCh2LCBub3JtYWwpIHtcbiAgICB2YXIgbGVuID0gVmVjdG9yMi5kb3Qodiwgbm9ybWFsKTtcbiAgICB2YXIgdGVtcD0gVmVjdG9yMi5tdWwobm9ybWFsLCAyKmxlbik7XG4gICAgXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHYsIHRlbXApO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCB3YWxsXG4gICAqIEBzdGF0aWNcbiAgICogMuasoeWFg+ODmeOCr+ODiOODqyB2IOOCkuWjgeOBuOOBruWFpeWwhOODmeOCr+ODiOODq+OBqOOBl+OBpuOAgeWjgeOBq+ayv+OBo+OBn+ODmeOCr+ODiOODq++8iOWjgeOBmuOCiuOCr+ODiOODq++8ieOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiDlo4Hjga7lkJHjgY3jga/ms5Xnt5rjg5njgq/jg4jjg6sgbm9ybWFsIOOBq+OCiOOBo+OBpuihqOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMig0LCAzKTtcbiAgICogbm9ybWFsID0gcGhpbmEuZ2VvbS5WZWN0b3IyKC0xLCAxKTtcbiAgICogcGhpbmEuZ2VvbS5WZWN0b3IyLndhbGwodjEsIG5vcm1hbCk7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigzLCA0KVxuICAgKlxuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IHYg5YWl5bCE44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7UHJpbWl0aXZlVmVjdG9yMn0gbm9ybWFsIOWjgeOBruazlee3muODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDlo4HjgZrjgorjg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyB3YWxsKHYsIG5vcm1hbCkge1xuICAgIHZhciBsZW4gPSBWZWN0b3IyLmRvdCh2LCBub3JtYWwpO1xuICAgIHZhciB0ZW1wPSBWZWN0b3IyLm11bChub3JtYWwsIGxlbik7XG4gICAgXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHYsIHRlbXApO1xuICB9XG4gIFxuICAvKipcbiAgICogQG1ldGhvZCBsZXJwXG4gICAqIEBzdGF0aWNcbiAgICogdjEg44GoIHYyIOOCkuWqkuS7i+WkieaVsCB0IOOBp+e3muW9ouijnOmWk+OBl+OBvuOBmeOAglxuICAgKiB0PTAuNSDjgacgdjEg44GoIHYyIOOBruS4remWk+ODmeOCr+ODiOODq+OCkuaxguOCgeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAglxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2MSA9IHBoaW5hLmdlb20uVmVjdG9yMigxLCAyKTtcbiAgICogdjIgPSBwaGluYS5nZW9tLlZlY3RvcjIoNCwgNik7XG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5sZXJwKHYxLCB2MiwgMC41KTsgLy8gPT4gKDIuNSwgNClcbiAgICogcGhpbmEuZ2VvbS5WZWN0b3IyLmxlcnAodjEsIHYyLCAwKTsgLy8gPT4gKDEsIDIpXG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5sZXJwKHYxLCB2MiwgMSk7IC8vID0+ICg0LCA2KVxuICAgKiBcbiAgICogQHBhcmFtIHtQcmltaXRpdmVWZWN0b3IyfSBhIOODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0ge1ByaW1pdGl2ZVZlY3RvcjJ9IGIg44OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0IOWqkuS7i+WkieaVsFxuICAgKiBAcmV0dXJuIHtWZWN0b3IyfSDnt5rlvaLoo5zplpPjga7ntZDmnpxcbiAgICovXG4gIHN0YXRpYyBsZXJwKGEsIGIsIHQpIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoXG4gICAgICBhLnggKyAoYi54LWEueCkqdCxcbiAgICAgIGEueSArIChiLnktYS55KSp0XG4gICAgKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBtZXRob2Qgc2xlcnBcbiAgICogQHN0YXRpY1xuICAgKiBAdG9kb1xuICAgKiDoo5zplpPvvIjmnKrlrp/oo4XvvIlcbiAgICovXG4gIHN0YXRpYyBzbGVycChsaHMsIHJocywgdCkge1xuICAgICAgLy8gVE9ETzpcbiAgICAgIC8vIGNvcy4uLlxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmFuZG9tXG4gICAqIEBzdGF0aWNcbiAgICog6KeS5bqm44GMIG1pbiDjgYvjgokgbWF4IOOBruevhOWbsu+8iOW6puWNmOS9je+8ieOBp+Wkp+OBjeOBleOBjCBsZW4g44Gu44Op44Oz44OA44Og44Gq44OZ44Kv44OI44Or44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBoaW5hLmdlb20uVmVjdG9yMi5yYW5kb20oOTAsIDE4MCwgMSk7IC8vID0+IHBoaW5hLmdlb20uVmVjdG9yMigtMC41LCAwLjg2Nikg44Gq44GpXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPTBdIOinkuW6pu+8iOW6puWNmOS9je+8ieOBruS4i+mZkOWApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW21heD0zNjBdIOinkuW6pu+8iOW6puWNmOS9je+8ieOBruS4iumZkOWApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xlbj0xXSDlpKfjgY3jgZVcbiAgICogQHJldHVybiB7VmVjdG9yMn0g55Sf5oiQ44GX44Gf44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tKG1pbiwgbWF4LCBsZW4pIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoKS5yYW5kb20obWluLCBtYXgpLm11bChsZW58fDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gWkVSTyDjgrzjg63jg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyBnZXQgWkVSTygpIHsgcmV0dXJuIFpFUk87IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtWZWN0b3IyfSBMRUZUIOW3puaWueWQkeOBruWNmOS9jeODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIGdldCBMRUZUKCkgeyByZXR1cm4gTEVGVDsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1ZlY3RvcjJ9IFJJR0hUIOWPs+aWueWQkeOBruWNmOS9jeODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIGdldCBSSUdIVCgpIHsgcmV0dXJuIFJJR0hUOyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gVVAg5LiK5pa55ZCR44Gu5Y2Y5L2N44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgZ2V0IFVQKCkgeyByZXR1cm4gVVA7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtWZWN0b3IyfSBET1dOIOS4i+aWueWQkeOBruWNmOS9jeODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIGdldCBET1dOKCkgeyByZXR1cm4gRE9XTjsgfVxufVxuXG52YXIgWkVSTyA9IG5ldyBWZWN0b3IyKDAsIDApO1xudmFyIExFRlQgPSBuZXcgVmVjdG9yMigtMSwgMCk7XG52YXIgUklHSFQgPSBuZXcgVmVjdG9yMigxLCAwKTtcbnZhciBVUCA9IG5ldyBWZWN0b3IyKDAsIC0xKTtcbnZhciBET1dOID0gbmV3IFZlY3RvcjIoMCwgMSk7XG5cbi8vIGltcG9ydCB7IFJlY3QgfSBmcm9tIFwiLi9yZWN0XCI7XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdlb20uQ2lyY2xlXG4gKiAjIOWGhumgmOWfn+OCkuihqOOBmeOCr+ODqeOCuVxuICog44Kt44Oj44Oz44OQ44K55LiK44Gu5YaG6aCY5Z+f44KS5omx44GG44Kv44Op44K544Gn44GZ44CCXG4gKiBcbiAqL1xuY2xhc3MgQ2lyY2xlIHtcblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHhcbiAgICog5YaG44Gu5Lit5b+D44GuIHgg5bqn5qiZXG4gICAqL1xuICAvLyB4OiAwLFxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHlcbiAgICog5YaG44Gu5Lit5b+D44GuIHkg5bqn5qiZXG4gICAqL1xuICAvLyB5OiAwLFxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJhZGl1c1xuICAgKiDlhobjga7ljYrlvoRcbiAgICovXG4gIC8vIHJhZGl1czogMzIsXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaW5pdFxuICAgKiDlhobpoJjln5/jga7jgrPjg7Pjgrnjg4jjg6njgq/jgr/jgafjgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDMyLCA2NCwgMTI4KTtcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgg5YaG44Gu5Lit5b+D44GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IOWGhuOBruS4reW/g+OBriB5IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaXVzIOWNiuW+hFxuICAgKi9cbiAgY29uc3RydWN0b3IoeCwgeSwgcmFkaXVzKSB7XG4gICAgdGhpcy54ID0gMDtcbiAgICB0aGlzLnkgPSAwO1xuICAgIHRoaXMucmFkaXVzID0gMzI7XG4gICAgdGhpcy5zZXQoeCwgeSwgcmFkaXVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHNldFxuICAgKiBAY2hhaW5hYmxlXG4gICAqIHRoaXMg44Gu5ZCE5YCk44KS5YaN6Kit5a6a44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSgzMiwgNjQsIDEyOCk7XG4gICAqICAgICBjaXJjbGUuc2V0KDEwMCwgMjAwLCAzMik7XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOWGhuOCkuWbsuOBhuefqeW9ouOBruW3puS4iumggueCueOBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDlhobjgpLlm7LjgYbnn6nlvaLjga7lt6bkuIrpoILngrnjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1cyDljYrlvoRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXQoeCwgeSwgcmFkaXVzKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtb3ZlVG9cbiAgICogQGNoYWluYWJsZVxuICAgKiDlhobpoJjln5/jgpLluqfmqJkgKHgsIHkpIOOBq+enu+WLleOBl+OBvuOBmeOAgih4LCB5KSDjga/lhobjga7kuK3lv4PjgpLooajjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDMwMCwgMzAwLCA0MCk7XG4gICAqICAgICBjaXJjbGUubGVmdDsgLy8gPT4gMjYwXG4gICAqICAgICBjaXJjbGUubW92ZVRvKDEwMCwgMTAwKTtcbiAgICogICAgIGNpcmNsZS5sZWZ0OyAvLyA9PiA2MFxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDnp7vli5XlhYjjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg56e75YuV5YWI44GuIHkg5bqn5qiZXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZVRvKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtb3ZlQnlcbiAgICogQGNoYWluYWJsZVxuICAgKiDlhobpoJjln5/jgpIgKHgsIHkpIOOBoOOBkeenu+WLleOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoMzAwLCAzMDAsIDQwKTtcbiAgICogICAgIGNpcmNsZS5sZWZ0OyAvLyA9PiAyNjBcbiAgICogICAgIGNpcmNsZS5tb3ZlQnkoMTAwLCAxMDApO1xuICAgKiAgICAgY2lyY2xlLmxlZnQ7IC8vID0+IDQ2MFxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDnp7vli5Xph4/jga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg56e75YuV6YeP44GuIHkg5bqn5qiZXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZUJ5KHgsIHkpIHtcbiAgICB0aGlzLnggKz0geDtcbiAgICB0aGlzLnkgKz0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnRhaW5zXG4gICAqIOW6p+aomSAoeCwgeSkg44GM5YaG6aCY5Z+f44Gu5Lit44Gr5ZCr44G+44KM44KL44GL44Gp44GG44GL44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSgzMDAsIDMwMCwgMTAwKTtcbiAgICogICAgIGNpcmNsZS5jb250YWlucygzNTAsIDM1MCk7IC8vID0+ICB0cnVlXG4gICAqICAgICBjaXJjbGUuY29udGFpbnMoMzUwLCA0MDApOyAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDliKTlrprjgZnjgovlr77osaHjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg5Yik5a6a44GZ44KL5a++6LGh44GuIHkg5bqn5qiZXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOaMh+WumuOBl+OBn+W6p+aomeOBjOWGhumgmOWfn+OBruS4reOBq+WQq+OBvuOCjOOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgY29udGFpbnMoeCwgeSkge1xuICAgIHZhciBsZW5YID0gdGhpcy54LXg7XG4gICAgdmFyIGxlblkgPSB0aGlzLnkteTtcbiAgICB2YXIgbGVuU3F1YXJlZCA9IChsZW5YKmxlblgpKyhsZW5ZKmxlblkpO1xuXG4gICAgcmV0dXJuIGxlblNxdWFyZWQgPD0gdGhpcy5yYWRpdXMqdGhpcy5yYWRpdXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjbG9uZVxuICAgKiB0aGlzIOOBruOCs+ODlOODvOOCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoNTAsIDEwMCwgNDApO1xuICAgKiAgICAgY2lyY2xlMiA9IGNpcmNsZS5jbG9uZSgpO1xuICAgKiAgICAgY2lyY2xlMi54ID09IGNpcmNsZS54OyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEByZXR1cm4ge0NpcmNsZX0g55Sf5oiQ44GX44Gf5YaG6aCY5Z+fXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENpcmNsZSh0aGlzLngsIHRoaXMueSwgdGhpcy5yYWRpdXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9SZWN0XG4gICAqIOWGhuOBq+WkluaOpeOBmeOCi+ato+aWueW9ouOCkuihqOOBmeefqeW9oumgmOWfn+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoNTAsIDEwMCwgNDApO1xuICAgKiAgICAgcmVjdCA9IGNpcmNsZS50b1JlY3QoKTtcbiAgICogICAgIHJlY3QueDsgLy8gPT4gMTBcbiAgICogICAgIHJlY3QueTsgLy8gPT4gNjBcbiAgICogICAgIHJlY3Qud2lkdGg7IC8vID0+IDgwXG4gICAqIFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IOeUn+aIkOOBl+OBn+efqeW9oumgmOWfn1xuICAgKi9cbiAgdG9SZWN0KCkge1xuICAgIC8vIOW+queSsOWPgueFp+WbnumBv+OBruOBn+OCgeOAgVJlY3TlgbTjgaflrprnvqlcbiAgICAvLyB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAvLyByZXR1cm4gbmV3IFJlY3QodGhpcy54IC0gdGhpcy5yYWRpdXMsIHRoaXMueSAtIHRoaXMucmFkaXVzLCBzaXplLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHRvQXJyYXlcbiAgICogdGhpcyDjga7lkITlgKTjgpLopoHntKDjgajjgZnjgovphY3liJfjgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDUwLCAxMDAsIDQwKTtcbiAgICogICAgIHJlY3QudG9BcnJheSgpOyAvLyA9PiBbNTAsIDEwMCwgNDBdXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcltdfSDnlJ/miJDjgZfjgZ/phY3liJdcbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy5yYWRpdXNdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsZWZ0XG4gICAqIOOCreODo+ODs+ODkOOCueW3puerr+OBi+OCieWGhuOBruW3puerr+OBvuOBp+OBrui3nembolxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZSA9IHBoaW5hLmdlb20uQ2lyY2xlKDIwMCwgMzAwLCAxMDApO1xuICAgKiAgICAgY2lyY2xlLmxlZnQ7IC8vID0+IDEwMFxuICAgKiAgICAgY2lyY2xlLnRvcDsgLy8gPT4gMjAwXG4gICAqICAgICBjaXJjbGUucmlnaHQ7IC8vID0+IDMwMFxuICAgKiAgICAgY2lyY2xlLmJvdHRvbTsgLy8gPT4gNDAwXG4gICAqL1xuICBnZXQgbGVmdCgpICAgeyByZXR1cm4gdGhpcy54IC0gdGhpcy5yYWRpdXM7IH1cbiAgc2V0IGxlZnQodikgIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gdG9wXG4gICAqIOOCreODo+ODs+ODkOOCueS4iuerr+OBi+OCieWGhuOBruS4iuerr+OBvuOBp+OBrui3nembolxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICovXG4gIGdldCB0b3AoKSAgIHsgcmV0dXJuIHRoaXMueSAtIHRoaXMucmFkaXVzOyB9XG4gIHNldCB0b3AodikgIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gcmlnaHRcbiAgICog44Kt44Oj44Oz44OQ44K55Y+z56uv44GL44KJ5YaG44Gu5Y+z56uv44G+44Gn44Gu6Led6ZuiXG4gICAqXG4gICAqIOePvuaZgueCueOBp+OBr+iqreOBv+WPluOCiuWwgueUqOOBp+OBmeOAglxuICAgKi9cbiAgZ2V0IHJpZ2h0KCkgICB7IHJldHVybiB0aGlzLnggKyB0aGlzLnJhZGl1czsgfVxuICBzZXQgcmlnaHQodikgIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gYm90dG9tXG4gICAqIOOCreODo+ODs+ODkOOCueS4i+err+OBi+OCieWGhuOBruS4i+err+OBvuOBp+OBrui3nembolxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICovXG4gIGdldCBib3R0b20oKSAgIHsgcmV0dXJuIHRoaXMueSArIHRoaXMucmFkaXVzOyB9XG4gIHNldCBib3R0b20odikgIHtcbiAgICAvLyBUT0RPOiBcbiAgfVxuICAgIFxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHNpemVcbiAgICog5YaG44Gu55u05b6EXG4gICAqXG4gICAqIOePvuaZgueCueOBp+OBr+iqreOBv+WPluOCiuWwgueUqOOBp+OBmeOAglxuICAgKi9cbiAgZ2V0IHNpemUoKSAgIHsgcmV0dXJuIHRoaXMucmFkaXVzKjI7IH1cbiAgc2V0IHNpemUodikgIHtcbiAgICAvLyBUT0RPOiDmpJzoqI7kuK1cbiAgfVxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nZW9tLlJlY3RcbiAqICMg55+p5b2i6aCY5Z+f44KS6KGo44GZ44Kv44Op44K5XG4gKiDjgq3jg6Pjg7Pjg5DjgrnkuIrjga7nn6nlvaLpoJjln5/jgpLmibHjgYbjgq/jg6njgrnjgafjgZnjgIJcbiAqIFxuICogIyMjIEV4YW1wbGVcbiAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDgsIDE2LCAzMiwgNjQpO1xuICovXG5jbGFzcyBSZWN0IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt4XSDnn6nlvaLjga7lt6bkuIrpoILngrnjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt5XSDnn6nlvaLjga7lt6bkuIrpoILngrnjga4geSDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt3aWR0aF0g5bmFXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbaGVpZ2h0XSDpq5jjgZVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0geFxuICAgICAqIOefqeW9ouOBruW3puS4iumggueCueOBriB4IOW6p+aomVxuICAgICAqL1xuICAgIHRoaXMueCA9IDA7XG4gICAgXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHlcbiAgICAgKiDnn6nlvaLjga7lt6bkuIrpoILngrnjga4geSDluqfmqJlcbiAgICAgKi9cbiAgICB0aGlzLnkgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHdpZHRoXG4gICAgICog55+p5b2i44Gu5bmFXG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IDMyO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGhpZ2h0XG4gICAgICog55+p5b2i44Gu6auY44GVXG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSAzMjtcblxuICAgIHRoaXMuc2V0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0XG4gICAqIEBjaGFpbmFibGVcbiAgICogdGhpcyDjga7lkITlgKTjgpLlho3oqK3lrprjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoOCwgMTYsIDMyLCA2NCk7XG4gICAqICAgICByZWN0LnNldCgwLCAxNiwgMzIsIDY0KTtcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgg55+p5b2i44Gu5bem5LiK6aCC54K544GuIHgg5bqn5qiZXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IOefqeW9ouOBruW3puS4iumggueCueOBriB5IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGgg5bmFXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQg6auY44GVXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtb3ZlVG9cbiAgICogQGNoYWluYWJsZVxuICAgKiDnn6nlvaLpoJjln5/jgpLluqfmqJkgKHgsIHkpIOOBq+enu+WLleOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCg4LCAxNiwgMzIsIDY0KTtcbiAgICogICAgIHJlY3QuY2VudGVyWDsgLy8gPT4gMjRcbiAgICogICAgIHJlY3QubW92ZVRvKDAsIDApO1xuICAgKiAgICAgcmVjdC5jZW50ZXJYOyAvLyA9PiAxNlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0geCDnp7vli5XlhYjjga4geCDluqfmqJlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkg56e75YuV5YWI44GuIHkg5bqn5qiZXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZVRvKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtb3ZlQnlcbiAgICogQGNoYWluYWJsZVxuICAgKiDnn6nlvaLpoJjln5/jgpIgKHgsIHkpIOOBoOOBkeenu+WLleOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCg4LCAxNiwgMzIsIDY0KTtcbiAgICogICAgIHJlY3QubW92ZUJ5KDEwLCAtMTApO1xuICAgKiAgICAgcmVjdC54OyAvLyA9PiAxOFxuICAgKiAgICAgcmVjdC55OyAvLyA9PiA2XG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOenu+WLlemHj+OBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDnp7vli5Xph4/jga4geSDluqfmqJlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlQnkoeCwgeSkge1xuICAgIHRoaXMueCArPSB4O1xuICAgIHRoaXMueSArPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2V0U2l6c2VcbiAgICogQGNoYWluYWJsZVxuICAgKiDnn6nlvaLpoJjln5/jga7luYXjgajpq5jjgZXjgpLlpInmm7TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoOCwgMTYsIDMyLCA2NCk7XG4gICAqICAgICByZWN0LnNldFNpemUoMTAsIDIwKTtcbiAgICogICAgIHJlY3Qud2lkdGg7IC8vID0+IDEwXG4gICAqICAgICByZWN0LmhlaWdodDsgLy8gPT4gMjBcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHcg5bmFXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBoIOmrmOOBlVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFNpemUodywgaCkge1xuICAgIHRoaXMud2lkdGggPSB3O1xuICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHBhZGRpbmdcbiAgICogQGNoYWluYWJsZVxuICAgKiDnn6nlvaLpoJjln5/jga7kuK3jgavjg5Hjg4fjgqPjg7PjgrDpoJjln5/jgpLoqK3lrprjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog55+p5b2i6aCY5Z+f6Ieq5L2T44Gu44K144Kk44K644Gv44OR44OH44Kj44Oz44Kw6aCY5Z+f44Gu5YiG44Gg44GR5bCP44GV44GP44Gq44KK44G+44GZ44CCICBcbiAgICog5bmF44Gu5oyH5a6a5pa55rOV44GvIENTUyDjga4gcGFkZGluZyDmjIflrprjgajlkIzjgZjjgojjgYbjgavmmYLoqIjlm57jgorjgafjgZnjgIIgIFxuICAgKiDlvJXmlbDjgYwx44Gk44Gu5aC05ZCI44Gv5LiK5LiL5bem5Y+z44Gu5YCk44CB5byV5pWw44GMMuOBpOOBruWgtOWQiOOBr+S4iuS4i+OBqOW3puWPs+OBruWApOOAgeW8leaVsOOBjO+8k+OBpOOBruWgtOWQiOOBr+S4iuOAgeW3puWPs+OAgeS4i+OBruWApOOBqOino+mHiOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCg1MCwgMTAwLCAxNTAsIDIwMCk7XG4gICAqICAgICByZWN0LnBhZGRpbmcoMTApO1xuICAgKiAgICAgcmVjdC54OyAvLyA9PiA2MFxuICAgKiAgICAgcmVjdC55OyAvLyA9PiAxMTBcbiAgICogICAgIHJlY3Qud2lkdGg7IC8vID0+IDEzMFxuICAgKiAgICAgcmVjdC5oZWlnaHQ7IC8vID0+IDE4MFxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIOS4iui+uuOBruODkeODh+OCo+ODs+OCsOW5hVxuICAgKiBAcGFyYW0ge051bWJlcn0gcmlnaHQg5Y+z6L6644Gu44OR44OH44Kj44Oz44Kw5bmFXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib3R0b20g5LiL6L6644Gu44OR44OH44Kj44Oz44Kw5bmFXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IOW3pui+uuOBruODkeODh+OCo+ODs+OCsOW5hVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBhZGRpbmcodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KSB7XG4gICAgLy8gY3NzIOOBriBwYWRkaW5nIOOBq+WQiOOCj+OBm+OBpuaZguioiOWbnuOCiuOBq+ODkeODqeODoeODvOOCv+iqv+aVtFxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0b3AgPSByaWdodCA9IGJvdHRvbSA9IGxlZnQgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICB0b3AgICAgID0gYm90dG9tID0gYXJndW1lbnRzWzBdO1xuICAgICAgICByaWdodCAgID0gbGVmdCAgID0gYXJndW1lbnRzWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdG9wICAgICA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgcmlnaHQgICA9IGxlZnQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGJvdHRvbSAgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLnggKz0gbGVmdDtcbiAgICB0aGlzLnkgKz0gdG9wO1xuICAgIHRoaXMud2lkdGggLT0gbGVmdCtyaWdodDtcbiAgICB0aGlzLmhlaWdodC09IHRvcCArYm90dG9tO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29udGFpbnNcbiAgICog5bqn5qiZICh4LCB5KSDjgYwg55+p5b2i6aCY5Z+f44Gu5Lit44Gr5ZCr44G+44KM44KL44GL44Gp44GG44GL44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDUwLCAxMDAsIDE1MCwgMjAwKTtcbiAgICogICAgIHJlY3QuY29udGFpbnMoMzUsIDY4KTsgLy8gPT4gIHRydWVcbiAgICogICAgIHJlY3QuY29udGFpbnMoMjAwLCA2OCk7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IOWIpOWumuOBmeOCi+WvvuixoeOBriB4IOW6p+aomVxuICAgKiBAcGFyYW0ge051bWJlcn0geSDliKTlrprjgZnjgovlr77osaHjga4geSDluqfmqJlcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g5oyH5a6a44GX44Gf5bqn5qiZ44GM55+p5b2i6aCY5Z+f44Gu5Lit44Gr5ZCr44G+44KM44KL44GL44Gp44GG44GLXG4gICAqL1xuICBjb250YWlucyh4LCB5KSB7XG4gICAgcmV0dXJuIHRoaXMubGVmdCA8PSB4ICYmIHggPD0gdGhpcy5yaWdodCAmJiB0aGlzLnRvcCA8PSB5ICYmIHkgPD0gdGhpcy5ib3R0b207XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBjbG9uZVxuICAgKiB0aGlzIOOBruOCs+ODlOODvOOCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCg1MCwgMTAwLCAxNTAsIDIwMCk7XG4gICAqICAgICByZWN0MiA9IHJlY3QuY2xvbmUoKTtcbiAgICogICAgIHJlY3QyLnggPT0gcmVjdC54OyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEByZXR1cm4ge1JlY3R9IOeUn+aIkOOBl+OBn+efqeW9oumgmOWfn1xuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBSZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB0b0NpcmNsZVxuICAgKiDnn6nlvaLpoJjln5/lhoXjgavlj47jgb7jgovmnIDlpKfjga7lhobpoJjln5/jgpLnlJ/miJDjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoMzIsIDY0LCAxMDAsIDIwMCk7XG4gICAqICAgICBjaXJjbGUgPSByZWN0LnRvQ2lyY2xlKCk7XG4gICAqICAgICBjaXJjbGUueDsgLy8gPT4gODJcbiAgICogICAgIGNpcmNsZS55OyAvLyA9PiAxNjRcbiAgICogICAgIGNpcmNsZS5yYWRpdXM7IC8vID0+IDUwXG4gICAqXG4gICAqIEByZXR1cm4ge0NpcmNsZX0g55Sf5oiQ44GX44Gf5YaG6aCY5Z+fXG4gICAqL1xuICB0b0NpcmNsZSgpIHtcbiAgICB2YXIgcmFkaXVzID0gKCh0aGlzLndpZHRoIDwgdGhpcy5oZWlnaHQpID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0KS8yO1xuICAgIHJldHVybiBuZXcgQ2lyY2xlKHRoaXMuY2VudGVyWCwgdGhpcy5jZW50ZXJZLCByYWRpdXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdG9BcnJheVxuICAgKiB0aGlzIOOBruWQhOWApOOCkuimgee0oOOBqOOBmeOCi+mFjeWIl+OCkueUn+aIkOOBl+OBpui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCgzMiwgNjQsIDEwMCwgMjAwKTtcbiAgICogICAgIHJlY3QudG9BcnJheSgpOyAvLyA9PiBbMzIsIDY0LCAxMDAsIDIwMF1cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyW119IOeUn+aIkOOBl+OBn+mFjeWIl1xuICAgKi9cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG4gIH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGxlZnRcbiAgICog44Kt44Oj44Oz44OQ44K55bem56uv44GL44KJ55+p5b2i6aCY5Z+f44Gu5bem6L6644G+44Gn44Gu6Led6ZuiXG4gICAqXG4gICAqIGxlZnQg44KS5aSJ5pu044GZ44KL44Go55+p5b2i6aCY5Z+f44Gu5bmF77yId2lkdGjvvInjgYzoh6rli5XnmoTjgavoqr/mlbTjgZXjgozjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHJlY3QgPSBwaGluYS5nZW9tLlJlY3QoMzIsIDY0LCAxMDAsIDIwMCk7XG4gICAqICAgICByZWN0LmxlZnQ7IC8vID0+IDMyXG4gICAqICAgICByZWN0LndpZHRoOyAvLyA9PiAxMDBcbiAgICogICAgIHJlY3QucmlnaHQ7IC8vID0+IDEzMlxuICAgKiAgICAgXG4gICAqICAgICByZWN0LmxlZnQgPSA0MjtcbiAgICogICAgIHJlY3Qud2lkdGg7IC8vID0+IDkwXG4gICAqL1xuICBnZXQgbGVmdCgpICAgeyByZXR1cm4gdGhpcy54OyB9XG4gIHNldCBsZWZ0KHYpICB7IHRoaXMud2lkdGggLT0gdi10aGlzLng7IHRoaXMueCA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRvcFxuICAgKiDjgq3jg6Pjg7Pjg5DjgrnkuIrnq6/jgYvjgonnn6nlvaLpoJjln5/jga7kuIrovrrjgb7jgafjga7kvY3nva5cbiAgICpcbiAgICogdG9wIOOCkuWkieabtOOBmeOCi+OBqOefqeW9oumgmOWfn+OBrumrmOOBle+8iGhlaWdodO+8ieOBjOiHquWLleeahOOBq+iqv+aVtOOBleOCjOOBvuOBmeOAglxuICAgKi9cbiAgZ2V0IHRvcCgpICAgeyByZXR1cm4gdGhpcy55OyB9XG4gIHNldCB0b3AodikgIHsgdGhpcy5oZWlnaHQgLT0gdi10aGlzLnk7IHRoaXMueSA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJpZ2h0XG4gICAqIOOCreODo+ODs+ODkOOCueW3puerr+OBi+OCieefqeW9oumgmOWfn+OBruWPs+i+uuOBvuOBp+OBrui3nembolxuICAgKlxuICAgKiByaWdodCDjgpLlpInmm7TjgZnjgovjgajnn6nlvaLpoJjln5/jga7luYXvvIh3aWR0aO+8ieOBjOiHquWLleeahOOBq+iqv+aVtOOBleOCjOOBvuOBmeOAglxuICAgKi9cbiAgZ2V0IHJpZ2h0KCkgICB7IHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoOyB9XG4gIHNldCByaWdodCh2KSAgeyB0aGlzLndpZHRoICs9IHYtdGhpcy5yaWdodDsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gYm90dG9tXG4gICAqIOOCreODo+ODs+ODkOOCueS4iuerr+OBi+OCieefqeW9oumgmOWfn+OBruS4i+i+uuOBvuOBp+OBruS9jee9rlxuICAgKlxuICAgKiBib3R0b20g44KS5aSJ5pu044GZ44KL44Go55+p5b2i6aCY5Z+f44Gu6auY44GV77yIaGVpZ2h077yJ44GM6Ieq5YuV55qE44Gr6Kq/5pW044GV44KM44G+44GZ44CCXG4gICAqL1xuICBnZXQgYm90dG9tKCkgICB7IHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDsgfVxuICBzZXQgYm90dG9tKHYpICB7IHRoaXMuaGVpZ2h0ICs9IHYtdGhpcy5ib3R0b207IH1cbiAgXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gY2VudGVyWFxuICAgKiDnn6nlvaLpoJjln5/jga4geCDluqfmqJlcbiAgICpcbiAgICog54++5pmC54K544Gn44Gv6Kqt44G/5Y+W44KK5bCC55So44Gn44GZ44CCXG4gICAqL1xuICBnZXQgY2VudGVyWCgpICAgeyByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aC8yOyB9XG4gIHNldCBjZW50ZXJYKHYpICB7XG4gICAgLy8gVE9ETzog5qSc6KiO5LitXG4gIH1cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjZW50ZXJZXG4gICAqIOefqeW9oumgmOWfn+OBriB5IOW6p+aomVxuICAgKlxuICAgKiDnj77mmYLngrnjgafjga/oqq3jgb/lj5bjgorlsILnlKjjgafjgZnjgIJcbiAgICovXG4gIGdldCBjZW50ZXJZKCkgICB7IHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodC8yOyB9XG4gIHNldCBjZW50ZXJZKHYpICB7XG4gICAgLy8gVE9ETzog5qSc6KiO5LitXG4gIH1cblxufVxuXG4vKipcbiAqIENpcmNsZS50b1JlY3RcbiAqIOW+queSsOWPgueFp+OCkuWbnumBv+OBmeOCi+OBn+OCgeOAgeOBk+OBk+OBp+Wumue+qVxuICovXG5DaXJjbGUucHJvdG90eXBlLnRvUmVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgcmV0dXJuIG5ldyBSZWN0KHRoaXMueCAtIHRoaXMucmFkaXVzLCB0aGlzLnkgLSB0aGlzLnJhZGl1cywgc2l6ZSwgc2l6ZSk7XG59O1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nZW9tLk1hdHJpeDMzXG4gKiAjIOihjOWIl+OCr+ODqeOCuVxuICogM3gz44Gu6KGM5YiX44KS6KGo44GZ44Kv44Op44K544Gn44GZ44CCXG4gKiBcbiAqIDxwcmU+XG4gKiB8IG0wMCBtMDEgbTAyIHxcbiAqIHwgbTEwIG0xMSBtMTIgfFxuICogfCBtMjAgbTIxIG0yMiB8XG4gKiA8L3ByZT5cbiAqL1xuY2xhc3MgTWF0cml4MzMge1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGluaXRcbiAgICog44Oe44OI44Oq44OD44Kv44K544Kv44Op44K544Gu44Kz44Oz44K544OI44Op44Kv44K/44Gn44GZ44CCXG4gICAqXG4gICAqIOW8leaVsOOBryBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyIOOBrumghuOBq+aMh+WumuOBl+OBvuOBmeOAglxuICAgKiDlvJXmlbDjgYw55YCL44Gr5rqA44Gf44Gq44GE5aC05ZCI44Gv5Y2Y5L2N6KGM5YiX44KS55Sf5oiQ44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICAgIG1hdDIgPSBwaGluYS5nZW9tLk1hdHJpeDMzKCk7XG4gICAqICAgICBtYXQxLm0wMCArIG1hdDIubTAwOyAvLyA9PiAyXG4gICAqICAgICBtYXQxLm0wMSAtIG1hdDIubTAxOyAvLyA9PiAyXG4gICAqXG4gICAqIEBwYXJhbSB7Li4ubnVtYmVyfSBtMDAsIG0wMSwuLi4g5ZCE6KaB57Sg44Gu5YCkXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLm0wMDtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLm0wMTtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLm0wMjtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMubTEwO1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMubTExO1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMubTEyO1xuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5tMjA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5tMjE7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5tMjI7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA5KSB7XG4gICAgICB0aGlzLnNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaWRlbnRpdHkoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBzZXRcbiAgICogQGNoYWluYWJsZSB0aGlzIOOBruWQhOimgee0oOOBruWApOOCkuWGjeioreWumuOBl+OBvuOBmeOAglxuICAgKiBcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICBtYXQyID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygpO1xuICAgKiAgIG1hdDIuc2V0KDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDkpO1xuICAgKiAgIG1hdDEudG9TdHJpbmcoKSA9PSBtYXQyLnRvU3RyaW5nKCk7IC8vID0+IHRydWVcbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDBcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjBcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIyXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0KG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgICB0aGlzLm0wMCA9IG0wMDsgdGhpcy5tMDEgPSBtMDE7IHRoaXMubTAyID0gbTAyO1xuICAgIHRoaXMubTEwID0gbTEwOyB0aGlzLm0xMSA9IG0xMTsgdGhpcy5tMTIgPSBtMTI7XG4gICAgdGhpcy5tMjAgPSBtMjA7IHRoaXMubTIxID0gbTIxOyB0aGlzLm0yMiA9IG0yMjtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgaWRlbnRpdHlcbiAgICogQGNoYWluYWJsZVxuICAgKiDoh6rouqvjgpLljZjkvY3ooYzliJfjgavjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIG1hdDEgPSBwaGluYS5nZW9tLk1hdHJpeDMzKDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDkpO1xuICAgKiAgICAgbWF0MiA9IHBoaW5hLmdlb20uTWF0cml4MzMoKTtcbiAgICogICAgIG1hdDEuaWRlbnRpdHkoKS50b1N0cmluZygpID09IG1hdDIudG9TdHJpbmcoKTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGlkZW50aXR5KCkge1xuICAgIHRoaXMubTAwID0gMTsgdGhpcy5tMDEgPSAwOyB0aGlzLm0wMiA9IDA7XG4gICAgdGhpcy5tMTAgPSAwOyB0aGlzLm0xMSA9IDE7IHRoaXMubTEyID0gMDtcbiAgICB0aGlzLm0yMCA9IDA7IHRoaXMubTIxID0gMDsgdGhpcy5tMjIgPSAxO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY2xvbmVcbiAgICog6Ieq6Lqr44Gu44Kz44OU44O844KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICAgIG1hdDIgPSBtYXQxLmNsb25lKCk7XG4gICAqICAgICBtYXQxLnRvU3RyaW5nKCkgPT0gbWF0Mi50b1N0cmluZygpOyAvLyA9PiB0cnVlXG4gICAqICAgICBtYXQxID09IG1hdDI7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEByZXR1cm4ge01hdHJpeDMzfSDooYzliJfjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgTWF0cml4MzMoXG4gICAgICB0aGlzLm0wMCwgdGhpcy5tMDEsIHRoaXMubTAyLFxuICAgICAgdGhpcy5tMTAsIHRoaXMubTExLCB0aGlzLm0xMixcbiAgICAgIHRoaXMubTIwLCB0aGlzLm0yMSwgdGhpcy5tMjJcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZGV0ZXJtaW5hbnRcbiAgICog6KGM5YiX5byP44KS6L+U44GX44G+44GZXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygwLCAtMiwgMCwgLTEsIDMsIDEsIDQsIDIsIDEpO1xuICAgKiAgICAgbWF0MS5kZXRlcm1pbmFudCgpOyAvLyA9PiAtMTBcbiAgICogICAgIG1hdDEuaWRlbnRpdHkoKS5kZXRlcm1pbmFudCgpOyAvLyA9PiAxXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0g6KGM5YiX5byPXG4gICAqL1xuICBkZXRlcm1pbmFudCgpIHtcbiAgICB2YXIgbTAwID0gdGhpcy5tMDA7IHZhciBtMDEgPSB0aGlzLm0wMTsgdmFyIG0wMiA9IHRoaXMubTAyO1xuICAgIHZhciBtMTAgPSB0aGlzLm0xMDsgdmFyIG0xMSA9IHRoaXMubTExOyB2YXIgbTEyID0gdGhpcy5tMTI7XG4gICAgdmFyIG0yMCA9IHRoaXMubTIwOyB2YXIgbTIxID0gdGhpcy5tMjE7IHZhciBtMjIgPSB0aGlzLm0yMjtcbiAgICBcbiAgICByZXR1cm4gbTAwKm0xMSptMjIgKyBtMTAqbTIxKm0wMiArIG0wMSptMTIqbTIwIC0gbTAyKm0xMSptMjAgLSBtMDEqbTEwKm0yMiAtIG0xMiptMjEqbTAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdHJhbnNwb3NlXG4gICAqIEBjaGFpbmFibGVcbiAgICog6Ieq6Lqr44KS6Lui572u6KGM5YiX44Gr44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KTtcbiAgICogICAgIG1hdDIgPSBwaGluYS5nZW9tLk1hdHJpeDMzKDEsIDQsIDcsIDIsIDUsIDgsIDMsIDYsIDkpO1xuICAgKiAgICAgbWF0MS50cmFuc3Bvc2UoKS50b1N0cmluZygpID09IG1hdDIudG9TdHJpbmcoKTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHRyYW5zcG9zZSgpIHtcbiAgICB2YXIgc3dhcCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHZhciB0ZW1wID0gdGhpc1thXTtcbiAgICAgIHRoaXNbYV0gPSB0aGlzW2JdO1xuICAgICAgdGhpc1tiXSA9IHRlbXA7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgc3dhcCgnbTAxJywgJ20xMCcpO1xuICAgIHN3YXAoJ20wMicsICdtMjAnKTtcbiAgICBzd2FwKCdtMTInLCAnbTIxJyk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBpbnZlcnRcbiAgICogQGNoYWluYWJsZVxuICAgKiDoh6rouqvjgpLpgIbooYzliJfjgavjgZfjgabov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIG1hdDEgPSBwaGluYS5nZW9tLk1hdHJpeDMzKDAsIC0xLCAxLCAtMSwgNCwgLTIsIDEsIDEsIDEpO1xuICAgKiAgICAgbWF0MiA9IG1hdDEuY2xvbmUoKS5pbnZlcnQoKTtcbiAgICogICAgIG1hdDMgPSBtYXQxLmNsb25lKCkubXVsdGlwbHkobWF0Mik7XG4gICAqICAgICBtYXQzLnRvU3RyaW5nKCkgPT0gcGhpbmEuZ2VvbS5NYXRyaXgzMy5JREVOVElUWS50b1N0cmluZygpOyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgaW52ZXJ0KCkge1xuICAgIHZhciBtMDAgPSB0aGlzLm0wMDsgdmFyIG0wMSA9IHRoaXMubTAxOyB2YXIgbTAyID0gdGhpcy5tMDI7XG4gICAgdmFyIG0xMCA9IHRoaXMubTEwOyB2YXIgbTExID0gdGhpcy5tMTE7IHZhciBtMTIgPSB0aGlzLm0xMjtcbiAgICB2YXIgbTIwID0gdGhpcy5tMjA7IHZhciBtMjEgPSB0aGlzLm0yMTsgdmFyIG0yMiA9IHRoaXMubTIyO1xuXG4gICAgdmFyIGRldCA9IHRoaXMuZGV0ZXJtaW5hbnQoKTtcblxuICAgIC8vIHxtMDAsIG0wMSwgbTAyfFxuICAgIC8vIHxtMTAsIG0xMSwgbTEyfFxuICAgIC8vIHxtMjAsIG0yMSwgbTIyfFxuICAgIHRoaXMubTAwID0gKG0xMSptMjItbTEyKm0yMSkvZGV0O1xuICAgIHRoaXMubTAxID0gKG0xMCptMjItbTEyKm0yMCkvZGV0Ki0xO1xuICAgIHRoaXMubTAyID0gKG0xMCptMjEtbTExKm0yMCkvZGV0O1xuICAgIFxuICAgIHRoaXMubTEwID0gKG0wMSptMjItbTAyKm0yMSkvZGV0Ki0xO1xuICAgIHRoaXMubTExID0gKG0wMCptMjItbTAyKm0yMCkvZGV0O1xuICAgIHRoaXMubTEyID0gKG0wMCptMjEtbTAxKm0yMCkvZGV0Ki0xO1xuICAgIFxuICAgIHRoaXMubTIwID0gKG0wMSptMTItbTAyKm0xMSkvZGV0O1xuICAgIHRoaXMubTIxID0gKG0wMCptMTItbTAyKm0xMCkvZGV0Ki0xO1xuICAgIHRoaXMubTIyID0gKG0wMCptMTEtbTAxKm0xMCkvZGV0O1xuICAgIFxuICAgIHRoaXMudHJhbnNwb3NlKCk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG11bHRpcGx5XG4gICAqIEBjaGFpbmFibGVcbiAgICog6Ieq6Lqr44Gr5Yil44Gu6KGM5YiX44KS5LmX44GY44G+44GZ44CCXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBtYXQxID0gcGhpbmEuZ2VvbS5NYXRyaXgzMygwLCAtMSwgMSwgLTEsIDQsIC0yLCAxLCAxLCAxKTtcbiAgICogICAgIG1hdDIgPSBtYXQxLmNsb25lKCkuaW52ZXJ0KCk7XG4gICAqICAgICBtYXQzID0gbWF0MS5jbG9uZSgpLm11bHRpcGx5KG1hdDIpO1xuICAgKiAgICAgbWF0My50b1N0cmluZygpID09IHBoaW5hLmdlb20uTWF0cml4MzMuSURFTlRJVFkudG9TdHJpbmcoKTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcGFyYW0ge01hdHJpeDMzfSBtYXQg5LmX44GY44KL6KGM5YiXXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbXVsdGlwbHkobWF0KSB7XG4gICAgdmFyIGEwMCA9IHRoaXMubTAwLCBhMDEgPSB0aGlzLm0wMSwgYTAyID0gdGhpcy5tMDI7XG4gICAgdmFyIGExMCA9IHRoaXMubTEwLCBhMTEgPSB0aGlzLm0xMSwgYTEyID0gdGhpcy5tMTI7XG4gICAgdmFyIGEyMCA9IHRoaXMubTIwLCBhMjEgPSB0aGlzLm0yMSwgYTIyID0gdGhpcy5tMjI7XG4gICAgdmFyIGIwMCA9IG1hdC5tMDAsIGIwMSA9IG1hdC5tMDEsIGIwMiA9IG1hdC5tMDI7XG4gICAgdmFyIGIxMCA9IG1hdC5tMTAsIGIxMSA9IG1hdC5tMTEsIGIxMiA9IG1hdC5tMTI7XG4gICAgdmFyIGIyMCA9IG1hdC5tMjAsIGIyMSA9IG1hdC5tMjEsIGIyMiA9IG1hdC5tMjI7XG5cbiAgICB0aGlzLm0wMCA9IGEwMCpiMDAgKyBhMDEqYjEwICsgYTAyKmIyMDtcbiAgICB0aGlzLm0wMSA9IGEwMCpiMDEgKyBhMDEqYjExICsgYTAyKmIyMTtcbiAgICB0aGlzLm0wMiA9IGEwMCpiMDIgKyBhMDEqYjEyICsgYTAyKmIyMjtcblxuICAgIHRoaXMubTEwID0gYTEwKmIwMCArIGExMSpiMTAgKyBhMTIqYjIwO1xuICAgIHRoaXMubTExID0gYTEwKmIwMSArIGExMSpiMTEgKyBhMTIqYjIxO1xuICAgIHRoaXMubTEyID0gYTEwKmIwMiArIGExMSpiMTIgKyBhMTIqYjIyO1xuXG4gICAgdGhpcy5tMjAgPSBhMjAqYjAwICsgYTIxKmIxMCArIGEyMipiMjA7XG4gICAgdGhpcy5tMjEgPSBhMjAqYjAxICsgYTIxKmIxMSArIGEyMipiMjE7XG4gICAgdGhpcy5tMjIgPSBhMjAqYjAyICsgYTIxKmIxMiArIGEyMipiMjI7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBtdWx0aXBseVZlY3RvcjJcbiAgICog6Ieq6Lqr44GrMuasoeWFg+ODmeOCr+ODiOODqyB2IOOCkuS5l+OBmOOBvuOBmeOAglxuICAgKiAy5qyh5YWD44OZ44Kv44OI44Or44GvICh4LCB5LCAxKSDjgajjgZfjgabkuZfnrpfjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIG1hdCA9IHBoaW5hLmdlb20uTWF0cml4MzMoMCwgLTEsIDEsIC0xLCA0LCAtMiwgMSwgMSwgMSk7XG4gICAqICAgICB2ID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDIsIDQpXG4gICAqICAgICBtYXQubXVsdGlwbHlWZWN0b3IyKHYpIC8vID0+IHt4OiAtMywgeTogMTJ9XG4gICAqXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHYg5LmX44GY44KL44OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4ge1ZlY3RvcjJ9IOS5l+eul+e1kOaenOOBruODmeOCr+ODiOODq1xuICAgKi9cbiAgbXVsdGlwbHlWZWN0b3IyKHYpIHtcbiAgICB2YXIgdnggPSB0aGlzLm0wMCp2LnggKyB0aGlzLm0wMSp2LnkgKyB0aGlzLm0wMjtcbiAgICB2YXIgdnkgPSB0aGlzLm0xMCp2LnggKyB0aGlzLm0xMSp2LnkgKyB0aGlzLm0xMjtcbiAgICBcbiAgICAvLyByZXR1cm4gcGhpbmEuZ2VvbS5WZWN0b3IyKHZ4LCB2eSk7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHZ4LCB2eSk7XG4gIH1cblxuICAvLyDooYxcbiAgLyoqXG4gICAqIEBtZXRob2QgZ2V0Um93XG4gICAqIHJvdyDnlarnm67jga7ooYzjgpLphY3liJfjgafov5TjgZfjgb7jgZnjgIJyb3cg44GMIDDjgIEx44CBMiDjga7jgYTjgZrjgozjgYvjgafjgarjgZHjgozjgbAgbnVsbCDjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIG1hdDEgPSBwaGluYS5nZW9tLk1hdHJpeDMzKDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDkpO1xuICAgKiAgICAgbWF0MS5nZXRSb3coMCk7IC8vIFsxLCAyLCAzXVxuICAgKiAgICAgbWF0MS5nZXRSb3coMSk7IC8vIFs0LCA1LCA2XVxuICAgKiAgICAgbWF0MS5nZXRSb3coOSk7IC8vIG51bGxcbiAgICpcbiAgICogQHBhcmFtIHswfDF8Mn0gcm93IOihjOeVquWPt1xuICAgKiBAcmV0dXJuIHtOdW1iZXJbXXxudWxsfSDooYzjgpLooajjgZnphY3liJdcbiAgICovXG4gIGdldFJvdyhyb3cpIHtcbiAgICBpZiAoIHJvdyA9PT0gMCApIHtcbiAgICAgIHJldHVybiBbIHRoaXMubTAwLCB0aGlzLm0wMSwgdGhpcy5tMDIgXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIHJvdyA9PT0gMSApIHtcbiAgICAgIHJldHVybiBbIHRoaXMubTEwLCB0aGlzLm0xMSwgdGhpcy5tMTIgXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIHJvdyA9PT0gMiApIHtcbiAgICAgIHJldHVybiBbIHRoaXMubTIwLCB0aGlzLm0yMSwgdGhpcy5tMjIgXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBnZXRDb2xcbiAgICogY29sIOeVquebruOBruWIl+OCkumFjeWIl+OBp+i/lOOBl+OBvuOBmeOAgmNvbCDjgYwgMOOAgTHjgIEyIOOBruOBhOOBmuOCjOOBi+OBp+OBquOBkeOCjOOBsCBudWxsIOOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgbWF0MSA9IHBoaW5hLmdlb20uTWF0cml4MzMoMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSk7XG4gICAqICAgICBtYXQxLmdldENvbCgwKTsgLy8gWzEsIDQsIDddXG4gICAqICAgICBtYXQxLmdldENvbCgxKTsgLy8gWzIsIDUsIDhdXG4gICAqICAgICBtYXQxLmdldFJvdygtMSk7IC8vIG51bGxcbiAgICpcbiAgICogQHBhcmFtIHswfDF8Mn0gY29sIOWIl+eVquWPt1xuICAgKiBAcmV0dXJuIHtOdW1iZXJbXXxudWxsfSDliJfjgpLooajjgZnphY3liJdcbiAgICovXG4gIGdldENvbChjb2wpIHtcbiAgICBpZiAoIGNvbCA9PT0gMCApIHtcbiAgICAgIHJldHVybiBbIHRoaXMubTAwLCB0aGlzLm0xMCwgdGhpcy5tMjAgXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIGNvbCA9PT0gMSApIHtcbiAgICAgIHJldHVybiBbIHRoaXMubTAxLCB0aGlzLm0xMSwgdGhpcy5tMjEgXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIGNvbCA9PT0gMiApIHtcbiAgICAgIHJldHVybiBbIHRoaXMubTAyLCB0aGlzLm0xMiwgdGhpcy5tMjIgXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB0b1N0cmluZ1xuICAgKiDooYzliJfjgpIgSlNPTiDlvaLlvI/jgafooajnj77jgZfjgZ/mloflrZfliJfjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHYgPSBwaGluYS5nZW9tLlZlY3RvcjIoMywgNCk7XG4gICAqICAgICB2MiA9IHYuY2xvbmUoKTtcbiAgICogICAgIHYyLnggPT0gdi54OyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30gSlNPTiDmloflrZfliJdcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBmb3JtYXQuY2FsbChcInx7bTAwfSwge20wMX0sIHttMDJ9fFxcbnx7bTEwfSwge20xMX0sIHttMTJ9fFxcbnx7bTIwfSwge20yMX0sIHttMjJ9fFwiLCB0aGlzKTtcbiAgICAvLyByZXR1cm4gXCJ8e20wMH0sIHttMDF9LCB7bTAyfXxcXG58e20xMH0sIHttMTF9LCB7bTEyfXxcXG58e20yMH0sIHttMjF9LCB7bTIyfXxcIi5mb3JtYXQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICog44OH44OV44Kp44Or44OI5Y2Y5L2N6KGM5YiX44KS6L+U44GZXG4gICAqL1xuICBzdGF0aWMgZ2V0IElERU5USVRZKCkge1xuICAgIHJldHVybiBJREVOVElUWVxuICB9XG59XG5cbnZhciBJREVOVElUWSA9IG5ldyBNYXRyaXgzMygpLmlkZW50aXR5KCk7XG5cbi8qKlxuKiBAY2xhc3MgcGhpbmEuZ2VvbS5Db2xsaXNpb25cbiogIyDooZ3nqoHliKTlrprnlKjjgq/jg6njgrlcbiog6KGd56qB5Yik5a6a44Gu44Gf44KB44Gu44Kv44Op44K544Gn44GZ44CC44GZ44G544Gm44Gu44Oh44K944OD44OJ44GM44K544K/44OG44Kj44OD44Kv44Oh44K944OD44OJ44Gn44GZ44CCXG4qIFxuKi9cbmNsYXNzIENvbGxpc2lvbiB7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgdGVzdENpcmNsZUNpcmNsZVxuICAgKiBAc3RhdGljXG4gICAqIDLjgaTjga7lhobpoJjln5/jgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYvjgpLliKTlrprjgZfjgb7jgZlcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIGNpcmNsZTEgPSBwaGluYS5nZW9tLkNpcmNsZSgxMDAsIDEwMCwgMzApO1xuICAgKiAgICAgY2lyY2xlMiA9IHBoaW5hLmdlb20uQ2lyY2xlKDEzMCwgMTQwLCAzMCk7XG4gICAqIHBoaW5hLmdlb20uQ29sbGlzaW9uLnRlc3RDaXJjbGVDaXJjbGUoY2lyY2xlMSwgY2lyY2xlMik7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHBhcmFtIHtDaXJjbGV9IGNpcmNsZTAg5YaG6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEBwYXJhbSB7Q2lyY2xlfSBjaXJjbGUxIOWGhumgmOWfn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDpoJjln5/jgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICovXG4gIHN0YXRpYyB0ZXN0Q2lyY2xlQ2lyY2xlKGNpcmNsZTAsIGNpcmNsZTEpIHtcbiAgICB2YXIgZGlzdGFuY2VTcXVhcmVkID0gVmVjdG9yMi5kaXN0YW5jZVNxdWFyZWQoY2lyY2xlMCwgY2lyY2xlMSk7XG4gICAgcmV0dXJuIGRpc3RhbmNlU3F1YXJlZCA8PSBNYXRoLnBvdyhjaXJjbGUwLnJhZGl1cyArIGNpcmNsZTEucmFkaXVzLCAyKTtcbiAgfVxuICAvKipcbiAgICogQG1ldGhvZCB0ZXN0UmVjdFJlY3RcbiAgICogQHN0YXRpY1xuICAgKiAy44Gk44Gu55+p5b2i6aCY5Z+f44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GL44KS5Yik5a6a44GX44G+44GZXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0MSA9IHBoaW5hLmdlb20uUmVjdCgxMDAsIDEwMCwgMzAsIDQwKTtcbiAgICogICAgIHJlY3QyID0gcGhpbmEuZ2VvbS5SZWN0KDIwMCwgMjAwLCAxMCwgMTApO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5Db2xsaXNpb24udGVzdFJlY3RSZWN0KHJlY3QxLCByZWN0Mik7IC8vID0+IGZhbHNlXG4gICAqXG4gICAqIEBwYXJhbSB7UmVjdH0gcmVjdDAg55+p5b2i6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEBwYXJhbSB7UmVjdH0gcmVjdDEg55+p5b2i6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOmgmOWfn+OBjOmHjeOBquOBo+OBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgc3RhdGljIHRlc3RSZWN0UmVjdChyZWN0MCwgcmVjdDEpIHtcbiAgICByZXR1cm4gKHJlY3QwLmxlZnQgPCByZWN0MS5yaWdodCkgJiYgKHJlY3QwLnJpZ2h0ID4gcmVjdDEubGVmdCkgJiZcbiAgICAgIChyZWN0MC50b3AgPCByZWN0MS5ib3R0b20pICYmIChyZWN0MC5ib3R0b20gPiByZWN0MS50b3ApO1xuICB9XG4gIC8qKlxuICAgKiBAbWV0aG9kIHRlc3RDaXJjbGVSZWN0XG4gICAqIEBzdGF0aWNcbiAgICog5YaG6aCY5Z+f44Go55+p5b2i6aCY5Z+f44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GL44GL44KS5Yik5a6a44GX44G+44GZXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICBjaXJjbGUgPSBwaGluYS5nZW9tLkNpcmNsZSgxMDAsIDEwMCwgMzApO1xuICAgKiAgICAgcmVjdCA9IHBoaW5hLmdlb20uUmVjdCgxMDAsIDEwMCwgMzAsIDQwKTtcbiAgICogICAgIHBoaW5hLmdlb20uQ29sbGlzaW9uLnRlc3RDaXJjbGVSZWN0KGNpcmNsZSwgcmVjdCk7IC8vID0+IHRydWVcbiAgICpcbiAgICogQHBhcmFtIHtDaXJjbGV9IGNpcmNsZSDlhobpoJjln5/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogQHBhcmFtIHtSZWN0fSByZWN0IOefqeW9oumgmOWfn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDpoJjln5/jgYzph43jgarjgaPjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICovXG4gIHN0YXRpYyB0ZXN0Q2lyY2xlUmVjdChjaXJjbGUsIHJlY3QpIHtcbiAgICAvLyDjgb7jgZrjga/lpKfjgY3jgarnn6nlvaLjgafliKTlrpoo6auY6YCf5YyWKVxuICAgIHZhciBiaWdSZWN0ID0gbmV3IFJlY3QocmVjdC5sZWZ0LWNpcmNsZS5yYWRpdXMsIHJlY3QudG9wLWNpcmNsZS5yYWRpdXMsIHJlY3Qud2lkdGgrY2lyY2xlLnJhZGl1cyoyLCByZWN0LmhlaWdodCtjaXJjbGUucmFkaXVzKjIpO1xuICAgIGlmIChiaWdSZWN0LmNvbnRhaW5zKGNpcmNsZS54LCBjaXJjbGUueSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIC8vIDLnqK7poZ7jga7nn6nlvaLjgajooZ3nqoHliKTlrppcbiAgICB2YXIgciA9IG5ldyBSZWN0KHJlY3QubGVmdC1jaXJjbGUucmFkaXVzLCByZWN0LnRvcCwgcmVjdC53aWR0aCtjaXJjbGUucmFkaXVzKjIsIHJlY3QuaGVpZ2h0KTtcbiAgICBpZiAoci5jb250YWlucyhjaXJjbGUueCwgY2lyY2xlLnkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgci5zZXQocmVjdC5sZWZ0LCByZWN0LnRvcC1jaXJjbGUucmFkaXVzLCByZWN0LndpZHRoLCByZWN0LmhlaWdodCtjaXJjbGUucmFkaXVzKjIpO1xuICAgIGlmIChyLmNvbnRhaW5zKGNpcmNsZS54LCBjaXJjbGUueSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICAvLyDlhobjgajnn6nlvaLjga7vvJTngrnjga7liKTlrppcbiAgICB2YXIgYyA9IG5ldyBDaXJjbGUoY2lyY2xlLngsIGNpcmNsZS55LCBjaXJjbGUucmFkaXVzKTtcbiAgICAvLyBsZWZ0IHRvcFxuICAgIGlmIChjLmNvbnRhaW5zKHJlY3QubGVmdCwgcmVjdC50b3ApKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gcmlnaHQgdG9wXG4gICAgaWYgKGMuY29udGFpbnMocmVjdC5yaWdodCwgcmVjdC50b3ApKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gcmlnaHQgYm90dG9tXG4gICAgaWYgKGMuY29udGFpbnMocmVjdC5yaWdodCwgcmVjdC5ib3R0b20pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gbGVmdCBib3R0b21cbiAgICBpZiAoYy5jb250YWlucyhyZWN0LmxlZnQsIHJlY3QuYm90dG9tKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQG1ldGhvZCB0ZXN0Q2lyY2xlTGluZVxuICAgKiBAc3RhdGljXG4gICAqIOWGhumgmOWfn+OBqOe3muWIhuOBjOmHjeOBquOBo+OBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkuWIpOWumuOBl+OBvuOBmVxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgY2lyY2xlID0gcGhpbmEuZ2VvbS5DaXJjbGUoMTAwLCAxMDAsIDIwKTtcbiAgICogICAgIHAxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDAsIDApO1xuICAgKiAgICAgcDIgPSBwaGluYS5nZW9tLlZlY3RvcjIoMzAwLCA0MDApO1xuICAgKiAgICAgcGhpbmEuZ2VvbS5Db2xsaXNpb24udGVzdENpcmNsZUxpbmUoY2lyY2xlLCBwMSwgcDIpOyAvLyA9PiB0cnVlXG4gICAqXG4gICAqIEBwYXJhbSB7Q2lyY2xlfSBjaXJjbGUg5YaG6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAxIOe3muWIhuOBruerr+OBruW6p+aomVxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyfSBwMiDnt5rliIbjga7nq6/jga7luqfmqJlcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g5YaG6aCY5Z+f44Go57ea5YiG44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqL1xuICBzdGF0aWMgdGVzdENpcmNsZUxpbmUgKGNpcmNsZSwgcDEsIHAyKSB7XG4gICAgLy8g5YWI44Gr57ea5YiG56uv44Go44Gu5Yik5a6aXG4gICAgaWYgKGNpcmNsZS5jb250YWlucyhwMS54LCBwMS55KSB8fCBjaXJjbGUuY29udGFpbnMocDIueCwgcDIueSkpIHJldHVybiB0cnVlO1xuICAgIC8vIOWNiuW+hOOBrjLkuZdcbiAgICB2YXIgcjIgPSBjaXJjbGUucmFkaXVzICogY2lyY2xlLnJhZGl1cztcbiAgICAvLyDlhobjga7kuK3lv4PluqfmqJlcbiAgICB2YXIgcDMgPSBuZXcgVmVjdG9yMihjaXJjbGUueCwgY2lyY2xlLnkpO1xuICAgIC8vIOWQhOODmeOCr+ODiOODq1xuICAgIHZhciBwMXAyID0gVmVjdG9yMi5zdWIocDEsIHAyKTtcbiAgICB2YXIgcDFwMyA9IFZlY3RvcjIuc3ViKHAxLCBwMyk7XG4gICAgdmFyIHAycDMgPSBWZWN0b3IyLnN1YihwMiwgcDMpO1xuICAgIC8vIOWkluepjVxuICAgIHZhciBjcm9zcyA9IFZlY3RvcjIuY3Jvc3MocDFwMiwgcDFwMyk7XG4gICAgLy8g5aSW56mN44Gu57W25a++5YCk44GuMuS5l1xuICAgIHZhciBjcm9zczIgPSBjcm9zcyAqIGNyb3NzO1xuICAgIC8vIHAxcDLjga7plbfjgZXjga4y5LmXXG4gICAgdmFyIGxlbmd0aDIgPSBwMXAyLmxlbmd0aFNxdWFyZWQoKTtcbiAgICAvLyDlhobjga7kuK3lv4PjgYvjgonnt5rliIbjgb7jgafjga7lnoLnt5rjga7ot53pm6Ljga4y5LmXXG4gICAgdmFyIGQyID0gY3Jvc3MyIC8gbGVuZ3RoMjtcbiAgICAvLyDlhobjga7ljYrlvoTjga4y5LmX44KI44KK5bCP44GV44GE44Gq44KJ6YeN6KSHXG4gICAgaWYgKGQyIDw9IHIyKSB7XG4gICAgICB2YXIgZG90MSA9IFZlY3RvcjIuZG90KHAxcDMsIHAxcDIpO1xuICAgICAgdmFyIGRvdDIgPSBWZWN0b3IyLmRvdChwMnAzLCBwMXAyKTtcbiAgICAgIC8vIOmAmuW4uOOBr+WGheepjeOBruS5l+eul1xuICAgICAgaWYgKGRvdDEgKiBkb3QyIDw9IDApIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBtZXRob2QgdGVzdExpbmVMaW5lXG4gICAqIEBzdGF0aWNcbiAgICogMuOBpOOBrue3muWIhuOBjOmHjeOBquOBo+OBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkuWIpOWumuOBl+OBvuOBmVxuICAgKiDlj4LogIPvvJpodHRwOi8vd3d3NWQuYmlnbG9iZS5uZS5qcC9+dG9tb3lhMDMvc2h0bWwvYWxnb3JpdGhtL0ludGVyc2VjdGlvbi5odG1cbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgIHAxID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDEwMCwgMTAwKTtcbiAgICogICAgIHAyID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDIwMCwgMjAwKTtcbiAgICogICAgIHAzID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDE1MCwgMjQwKTtcbiAgICogICAgIHA0ID0gcGhpbmEuZ2VvbS5WZWN0b3IyKDIwMCwgMTAwKTtcbiAgICogcGhpbmEuZ2VvbS5Db2xsaXNpb24udGVzdExpbmVMaW5lKHAxLCBwMiwgcDMsIHA0KTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyfSBwMSDnt5rliIYx44Gu56uv44Gu5bqn5qiZXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAyIOe3muWIhjHjga7nq6/jga7luqfmqJlcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuL3ZlY3RvcjJcIikuUHJpbWl0aXZlVmVjdG9yMn0gcDMg57ea5YiGMuOBruerr+OBruW6p+aomVxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyfSBwNCDnt5rliIYy44Gu56uv44Gu5bqn5qiZXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IOe3muWIhjHjgajnt5rliIYy44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqL1xuICBzdGF0aWMgdGVzdExpbmVMaW5lIChwMSwgcDIsIHAzLCBwNCkge1xuICAgIC8v5ZCM5LiA77y477y56Lu45LiK44Gr5LmX44Gj44Gm44KL5aC05ZCI44Gu6Kqk5Yik5a6a5Zue6YG/XG4gICAgaWYgKHAxLnggPT0gcDIueCAmJiBwMS54ID09IHAzLnggJiYgcDEueCA9PSBwNC54KSB7XG4gICAgICB2YXIgbWluID0gTWF0aC5taW4ocDEueSwgcDIueSk7XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXgocDEueSwgcDIueSk7XG4gICAgICBpZiAobWluIDw9IHAzLnkgJiYgcDMueSA8PSBtYXggfHwgbWluIDw9IHA0LnkgJiYgcDQueSA8PSBtYXgpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocDEueSA9PSBwMi55ICYmIHAxLnkgPT0gcDMueSAmJiBwMS55ID09IHA0LnkpIHtcbiAgICAgIHZhciBtaW4gPSBNYXRoLm1pbihwMS54LCBwMi54KTtcbiAgICAgIHZhciBtYXggPSBNYXRoLm1heChwMS54LCBwMi54KTtcbiAgICAgIGlmIChtaW4gPD0gcDMueCAmJiBwMy54IDw9IG1heCB8fCBtaW4gPD0gcDQueCAmJiBwNC54IDw9IG1heCkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8v6YCa5bi45Yik5a6aXG4gICAgdmFyIGEgPSAocDEueCAtIHAyLngpICogKHAzLnkgLSBwMS55KSArIChwMS55IC0gcDIueSkgKiAocDEueCAtIHAzLngpO1xuICAgIHZhciBiID0gKHAxLnggLSBwMi54KSAqIChwNC55IC0gcDEueSkgKyAocDEueSAtIHAyLnkpICogKHAxLnggLSBwNC54KTtcbiAgICB2YXIgYyA9IChwMy54IC0gcDQueCkgKiAocDEueSAtIHAzLnkpICsgKHAzLnkgLSBwNC55KSAqIChwMy54IC0gcDEueCk7XG4gICAgdmFyIGQgPSAocDMueCAtIHA0LngpICogKHAyLnkgLSBwMy55KSArIChwMy55IC0gcDQueSkgKiAocDMueCAtIHAyLngpO1xuICAgIHJldHVybiBhICogYiA8PSAwICYmIGMgKiBkIDw9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEBtZXRob2QgdGVzdFJlY3RMaW5lXG4gICAqIEBzdGF0aWNcbiAgICog55+p5b2i44Go57ea5YiG44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GL44KS5Yik5a6a44GX44G+44GZXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqICAgICByZWN0ID0gcGhpbmEuZ2VvbS5SZWN0KDEyMCwgMTMwLCA0MCwgNTApO1xuICAgKiAgICAgcDEgPSBwaGluYS5nZW9tLlZlY3RvcjIoMTAwLCAxMDApO1xuICAgKiAgICAgcDIgPSBwaGluYS5nZW9tLlZlY3RvcjIoMjAwLCAyMDApO1xuICAgKiBwaGluYS5nZW9tLkNvbGxpc2lvbi50ZXN0UmVjdExpbmUocmVjdCwgcDEsIHAyKTsgLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiBAcGFyYW0ge1JlY3R9IHJlY3Qg55+p5b2i6aCY5Z+f44Kq44OW44K444Kn44Kv44OIXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAxIOe3muWIhuOBruerr+OBruW6p+aomVxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyfSBwMiDnt5rliIbjga7nq6/jga7luqfmqJlcbiAgICogQHJldHVybiB7Qm9vbGVhbn0g55+p5b2i44Go57ea5YiG44GM6YeN44Gq44Gj44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqL1xuICBzdGF0aWMgdGVzdFJlY3RMaW5lIChyZWN0LCBwMSwgcDIpIHtcbiAgICAgIC8v5YyF5ZCr5Yik5a6aKHAx44GM5ZCr44G+44KM44Gm44KM44Gw6Imv44GE44Gu44GncDLjga7liKTlrprjga/jgZfjgarjgYTvvIlcbiAgICAgIGlmIChyZWN0LmxlZnQgPD0gcDEueCAmJiBwMS54IDw9IHJlY3QucmlnaHQgJiYgcmVjdC50b3AgPD0gcDEueSAmJiBwMS55IDw9IHJlY3QuYm90dG9tICkgcmV0dXJuIHRydWU7XG5cbiAgICAgIC8v55+p5b2i44Gu77yU54K5XG4gICAgICB2YXIgcjEgPSBuZXcgVmVjdG9yMihyZWN0LmxlZnQsIHJlY3QudG9wKTsgICAgIC8v5bem5LiKXG4gICAgICB2YXIgcjIgPSBuZXcgVmVjdG9yMihyZWN0LnJpZ2h0LCByZWN0LnRvcCk7ICAgIC8v5Y+z5LiKXG4gICAgICB2YXIgcjMgPSBuZXcgVmVjdG9yMihyZWN0LnJpZ2h0LCByZWN0LmJvdHRvbSk7IC8v5Y+z5LiLXG4gICAgICB2YXIgcjQgPSBuZXcgVmVjdG9yMihyZWN0LmxlZnQsIHJlY3QuYm90dG9tKTsgIC8v5bem5LiLXG5cbiAgICAgIC8v55+p5b2i44Gu77yU6L6644KS44Gq44GZ57ea5YiG44Go44Gu5o6l6Kem5Yik5a6aXG4gICAgICBpZiAoQ29sbGlzaW9uLnRlc3RMaW5lTGluZShwMSwgcDIsIHIxLCByMikpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKENvbGxpc2lvbi50ZXN0TGluZUxpbmUocDEsIHAyLCByMiwgcjMpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChDb2xsaXNpb24udGVzdExpbmVMaW5lKHAxLCBwMiwgcjMsIHI0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoQ29sbGlzaW9uLnRlc3RMaW5lTGluZShwMSwgcDIsIHIxLCByNCkpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2VvbS5WZWN0b3IzXG4gKiAjIDPmrKHlhYPjg5njgq/jg4jjg6vjgq/jg6njgrnvvIjmnKrlrp/oo4XvvIlcbiAqIDPmrKHlhYPjga7jg5njgq/jg4jjg6vjgoTluqfmqJnjgpLooajjgZnjgq/jg6njgrnjgafjgZnjgIJcbiAqL1xuY2xhc3MgVmVjdG9yMyB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt6PTBdXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgLyoqXG4gICAgICogeOW6p+aomVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy54ID0geCB8fCAwO1xuXG4gICAgLyoqXG4gICAgICogeeW6p+aomVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55ID0geSB8fCAwO1xuXG4gICAgLyoqXG4gICAgICogeuW6p+aomVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy56ID0geiB8fCAwO1xuXG4gICAgLyoqXG4gICAgICogeui7uOWbnui7ouinkuW6plxuICAgICAqL1xuICAgIHRoaXMuYWxwaGEgPSAwO1xuXG4gICAgLyoqXG4gICAgICogeOi7uOWbnui7ouinkuW6plxuICAgICAqL1xuICAgIHRoaXMuYmV0YSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiB56Lu45Zue6Lui6KeS5bqmXG4gICAgICovXG4gICAgdGhpcy5nYW1tYSA9IDA7XG4gIH1cblxufVxuXG4vKipcbiAqIENhbnZhc+OBrmZpbGxzdHlsZS9zdHJva2VTdHlsZeOBruWApOOBqOOBl+OBpuS9v+eUqOOBp+OBjeOCi+Wei+OAguaWh+Wtl+WIl+OBruWgtOWQiOOAgUNTUyBjb2xvcuODh+ODvOOCv+Wei+OBq+a6luaLoOOBmeOCi+OCguOBrlxuICogQHR5cGVkZWYge3N0cmluZyB8IENhbnZhc0dyYWRpZW50IHwgQ2FudmFzUGF0dGVybn0gQ2FudmFzU3R5bGVcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5ncmFwaGljcy5DYW52YXNcbiAqIOOCreODo+ODs+ODkOOCueaLoeW8teOCr+ODqeOCuVxuICovXG5jbGFzcyBDYW52YXMge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IEhUTUxDYW52YXNFbGVtZW50fSBbY2FudmFzXSDjg5njg7zjgrnjgajjgarjgotjYW52YXPopoHntKDjgILmloflrZfliJfjgafmjIflrprjgZnjgovjgajjgY3jga9gI3BoaW5hYOOBruOCiOOBhuOBq+OCu+ODrOOCr+OCv+W9ouW8j+OBq+OBmeOCi+OAguaMh+WumuOBl+OBquOBi+OBo+OBn+WgtOWQiOOBr+aWsOimj+S9nOaIkOOBleOCjOOCi1xuICAgKi9cbiAgY29uc3RydWN0b3IoY2FudmFzKSB7XG4gICAgLyoqIEB0eXBlIEhUTUxDYW52YXNFbGVtZW50ICovXG4gICAgdGhpcy5jYW52YXM7XG4gICAgaWYgKHR5cGVvZiBjYW52YXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2FudmFzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXMgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIEhUTUxDYW52YXNFbGVtZW50ICovXG4gICAgdGhpcy5kb21FbGVtZW50ID0gdGhpcy5jYW52YXM7XG5cbiAgICAvKiogQHR5cGUgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICovXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmNvbnRleHQubGluZUNhcCA9ICdyb3VuZCc7XG4gICAgdGhpcy5jb250ZXh0LmxpbmVKb2luID0gJ3JvdW5kJztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCAgID0gd2lkdGg7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ICA9IGhlaWdodDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrjgpLnlLvpnaLvvIjjgqbjgqPjg7Pjg4njgqbjgrXjgqTjgrrvvInjgavlkIjjgo/jgZvjgabjg6rjgrvjg4Pjg4hcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTaXplVG9TY3JlZW4oKSB7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUucG9zaXRpb24gID0gXCJmaXhlZFwiO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLm1hcmdpbiAgICA9IFwiMHB4XCI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUucGFkZGluZyAgID0gXCIwcHhcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5sZWZ0ICAgICAgPSBcIjBweFwiO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLnRvcCAgICAgICA9IFwiMHB4XCI7XG4gICAgcmV0dXJuIHRoaXMuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmr5TnjofjgpLntq3mjIHjgZfjgarjgYzjgonjgrXjgqTjgrrjgpLnlLvpnaLvvIjjgqbjgqPjg7Pjg4njgqbjgrXjgqTjgrrvvInjgavlkIjjgo/jgZvjgotcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNFdmVyPXRydWVdIOOCpuOCo+ODs+ODieOCpuODquOCteOCpOOCuuOBp+WkieabtOOBjOW/heimgeOBq+OBquOCi+OBn+OBs+OBq+ODquOCteOCpOOCuuWHpueQhuOCkuOBmeOCi+OBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZpdFNjcmVlbihpc0V2ZXIpIHtcbiAgICBpc0V2ZXIgPSBpc0V2ZXIgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBpc0V2ZXI7XG5cbiAgICB2YXIgX2ZpdEZ1bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gdGhpcy5kb21FbGVtZW50O1xuICAgICAgdmFyIHMgPSBlLnN0eWxlO1xuICAgICAgXG4gICAgICBzLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgcy5tYXJnaW4gPSBcImF1dG9cIjtcbiAgICAgIHMubGVmdCA9IFwiMHB4XCI7XG4gICAgICBzLnRvcCAgPSBcIjBweFwiO1xuICAgICAgcy5ib3R0b20gPSBcIjBweFwiO1xuICAgICAgcy5yaWdodCA9IFwiMHB4XCI7XG5cbiAgICAgIHZhciByYXRlV2lkdGggPSBlLndpZHRoL3dpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgdmFyIHJhdGVIZWlnaHQ9IGUuaGVpZ2h0L3dpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHZhciByYXRlID0gZS5oZWlnaHQvZS53aWR0aDtcbiAgICAgIFxuICAgICAgaWYgKHJhdGVXaWR0aCA+IHJhdGVIZWlnaHQpIHtcbiAgICAgICAgcy53aWR0aCAgPSBNYXRoLmZsb29yKGlubmVyV2lkdGgpK1wicHhcIjtcbiAgICAgICAgcy5oZWlnaHQgPSBNYXRoLmZsb29yKGlubmVyV2lkdGgqcmF0ZSkrXCJweFwiO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHMud2lkdGggID0gTWF0aC5mbG9vcihpbm5lckhlaWdodC9yYXRlKStcInB4XCI7XG4gICAgICAgIHMuaGVpZ2h0ID0gTWF0aC5mbG9vcihpbm5lckhlaWdodCkrXCJweFwiO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKTtcbiAgICBcbiAgICAvLyDkuIDluqblrp/ooYzjgZfjgabjgYrjgY9cbiAgICBfZml0RnVuYygpO1xuXG4gICAgLy8g44Oq44K144Kk44K65pmC44Gu44Oq44K544OK44Go44GX44Gm55m76Yyy44GX44Gm44GK44GPXG4gICAgaWYgKGlzRXZlcikge1xuICAgICAgcGhpbmEuZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgX2ZpdEZ1bmMsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44KiXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgY2xlYXIoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHggPSB4IHx8IDA7XG4gICAgeSA9IHkgfHwgMDtcbiAgICB3aWR0aCA9IHdpZHRoIHx8IHRoaXMud2lkdGg7XG4gICAgaGVpZ2h0PSBoZWlnaHR8fCB0aGlzLmhlaWdodDtcbiAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2FudmFzU3R5bGV9IGZpbGxTdHlsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3hdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgY2xlYXJDb2xvcihmaWxsU3R5bGUsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICB4ID0geCB8fCAwO1xuICAgIHkgPSB5IHx8IDA7XG4gICAgd2lkdGggPSB3aWR0aCB8fCB0aGlzLndpZHRoO1xuICAgIGhlaWdodD0gaGVpZ2h0fHwgdGhpcy5oZWlnaHQ7XG5cbiAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKDEuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjApOyAvLyDooYzliJfliJ3mnJ/ljJZcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGxTdHlsZTsgICAgIC8vIOWhl+OCiuOBpOOBtuOBl+OCueOCv+OCpOODq+OCu+ODg+ODiFxuICAgIGNvbnRleHQuZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIOODkeOCueOCkumWi+Wniyjjg6rjgrvjg4Pjg4gpXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgYmVnaW5QYXRoKCkge1xuICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5HjgrnjgpLplonjgZjjgotcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjbG9zZVBhdGgoKSB7XG4gICAgdGhpcy5jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cblxuICAvKipcbiAgICog5paw6KaP44OR44K555Sf5oiQXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZVRvKHgsIHkpIHtcbiAgICB0aGlzLmNvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeOCueOBq+i/veWKoFxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGxpbmVUbyh4LCB5KSB7XG4gICAgdGhpcy5jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBxdWFkcmF0aWNDdXJ2ZVRvKCkge1xuICAgIHRoaXMuY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvLmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBiZXppZXJDdXJ2ZVRvKCkge1xuICAgIHRoaXMuY29udGV4dC5iZXppZXJDdXJ2ZVRvLmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5HjgrnlhoXjgpLloZfjgorjgaTjgbbjgZlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsKCkge1xuICAgIHRoaXMuY29udGV4dC5maWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44OR44K55LiK44Gr44Op44Kk44Oz44KS5byV44GPXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlKCkge1xuICAgIHRoaXMuY29udGV4dC5zdHJva2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5dcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBjbGlwKCkge1xuICAgIHRoaXMuY29udGV4dC5jbGlwKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAgICAgXG4gIC8qKlxuICAgKiDngrnmj4/nlLtcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBkcmF3UG9pbnQoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLnN0cm9rZVJlY3QoeCwgeSwgMSwgMSk7XG4gIH1cblxuICAvKipcbiAgICog44Op44Kk44Oz44OR44K544KS5L2c5oiQXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4MFxuICAgKiBAcGFyYW0ge251bWJlcn0geTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGxpbmUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gdGhpcy5tb3ZlVG8oeDAsIHkwKS5saW5lVG8oeDEsIHkxKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOODqeOCpOODs+OCkuaPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geDBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4MVxuICAgKiBAcGFyYW0ge251bWJlcn0geTFcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBkcmF3TGluZSh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLmxpbmUoeDAsIHkwLCB4MSwgeTEpLnN0cm9rZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODgOODg+OCt+ODpeODqeOCpOODs+OCkuaPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geDBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4MVxuICAgKiBAcGFyYW0ge251bWJlcn0geTFcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBwYXR0ZXJuXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZHJhd0Rhc2hMaW5lKHgwLCB5MCwgeDEsIHkxLCBwYXR0ZXJuKSB7XG4gICAgdmFyIHBhdHRlcm5UYWJsZSA9IG51bGw7XG4gICAgaWYgKHR5cGVvZihwYXR0ZXJuKSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICBwYXR0ZXJuVGFibGUgPSBwYXR0ZXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuIHx8IDB4ZjBmMDtcbiAgICAgIHBhdHRlcm5UYWJsZSA9IHBhdHRlcm4udG9TdHJpbmcoMik7XG4gICAgfVxuICAgIC8vIHBhdHRlcm5UYWJsZSA9IHBhdHRlcm5UYWJsZS5wYWRkaW5nKDE2LCAnMScpO1xuICAgIHBhdHRlcm5UYWJsZSA9IHBhZGRpbmcuY2FsbChwYXR0ZXJuVGFibGUsIDE2LCAnMScpO1xuICAgIFxuICAgIHZhciB2eCA9IHgxLXgwO1xuICAgIHZhciB2eSA9IHkxLXkwO1xuICAgIHZhciBsZW4gPSBNYXRoLnNxcnQodngqdnggKyB2eSp2eSk7XG4gICAgdngvPWxlbjsgdnkvPWxlbjtcbiAgICBcbiAgICB2YXIgeCA9IHgwO1xuICAgIHZhciB5ID0geTA7XG4gICAgZm9yICh2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgICBpZiAocGF0dGVyblRhYmxlW2klMTZdID09ICcxJykge1xuICAgICAgICB0aGlzLmRyYXdQb2ludCh4LCB5KTtcbiAgICAgICAgLy8gdGhpcy5maWxsUmVjdCh4LCB5LCB0aGlzLmNvbnRleHQubGluZVdpZHRoLCB0aGlzLmNvbnRleHQubGluZVdpZHRoKTtcbiAgICAgIH1cbiAgICAgIHggKz0gdng7XG4gICAgICB5ICs9IHZ5O1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiB2MCh4MCwgeTApLCB2MSh4MSwgeTEpIOOBi+OCieinkuW6puOCkuaxguOCgeOBpuefouWNsOOCkuaPj+eUu1xuICAgKiBodHRwOi8vaGFrdWhpbi5qcC9hcy9yb3RhdGlvbi5odG1sXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4MFxuICAgKiBAcGFyYW0ge251bWJlcn0geTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MVxuICAgKiBAcGFyYW0ge251bWJlcn0gYXJyb3dSYWRpdXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBkcmF3QXJyb3coeDAsIHkwLCB4MSwgeTEsIGFycm93UmFkaXVzKSB7XG4gICAgdmFyIHZ4ID0geDEteDA7XG4gICAgdmFyIHZ5ID0geTEteTA7XG4gICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMih2eSwgdngpKjE4MC9NYXRoLlBJO1xuICAgIFxuICAgIHRoaXMuZHJhd0xpbmUoeDAsIHkwLCB4MSwgeTEpO1xuICAgIHRoaXMuZmlsbFBvbHlnb24oeDEsIHkxLCBhcnJvd1JhZGl1cyB8fCA1LCAzLCBhbmdsZSk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBsaW5lc1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGxpbmVzKCkge1xuICAgIHRoaXMubW92ZVRvKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKTtcbiAgICBmb3IgKHZhciBpPTEsbGVuPWFyZ3VtZW50cy5sZW5ndGgvMjsgaTxsZW47ICsraSkge1xuICAgICAgdGhpcy5saW5lVG8oYXJndW1lbnRzW2kqMl0sIGFyZ3VtZW50c1tpKjIrMV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njgqTjg7Pjgrnjg4jjg63jg7zjgq/mj4/nlLtcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VMaW5lcygpIHtcbiAgICB0aGlzLmJlZ2luUGF0aCgpO1xuICAgIHRoaXMubGluZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnN0cm9rZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeOCpOODs+Whl+OCiuOBpOOBtuOBl+aPj+eUu1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGxMaW5lcygpIHtcbiAgICB0aGlzLmJlZ2luUGF0aCgpO1xuICAgIHRoaXMubGluZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmZpbGwoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWbm+inkuW9ouODkeOCueOCkuS9nOaIkOOBmeOCi1xuICAgKiBAcGFyYW0ge251bWJlcn0gX3hcbiAgICogQHBhcmFtIHtudW1iZXJ9IF95XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBfd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IF9oZWlnaHRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZWN0KF94LCBfeSwgX3dpZHRoLCBfaGVpZ2h0KSB7XG4gICAgdGhpcy5jb250ZXh0LnJlY3QuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5Zub6KeS5b2i5aGX44KK44Gk44G244GX5o+P55S7XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbFJlY3QoKSB7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0LmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWbm+inkuW9ouODqeOCpOODs+aPj+eUu1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZVJlY3QoKSB7XG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZVJlY3QuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog6KeS5Li45Zub6KeS5b2i44OR44K5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByb3VuZFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gICAgdmFyIGwgPSB4ICsgcmFkaXVzO1xuICAgIHZhciByID0geCArIHdpZHRoIC0gcmFkaXVzO1xuICAgIHZhciB0ID0geSArIHJhZGl1cztcbiAgICB2YXIgYiA9IHkgKyBoZWlnaHQgLSByYWRpdXM7XG4gICAgXG4gICAgLypcbiAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0O1xuICAgIGN0eC5tb3ZlVG8obCwgeSk7XG4gICAgY3R4LmxpbmVUbyhyLCB5KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4K3dpZHRoLCB5LCB4K3dpZHRoLCB0KTtcbiAgICBjdHgubGluZVRvKHgrd2lkdGgsIGIpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgrd2lkdGgsIHkraGVpZ2h0LCByLCB5K2hlaWdodCk7XG4gICAgY3R4LmxpbmVUbyhsLCB5K2hlaWdodCk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeStoZWlnaHQsIHgsIGIpO1xuICAgIGN0eC5saW5lVG8oeCwgdCk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgbCwgeSk7XG4gICAgLyoqL1xuICAgIFxuICAgIHRoaXMuY29udGV4dC5hcmMobCwgdCwgcmFkaXVzLCAgICAgLU1hdGguUEksIC1NYXRoLlBJKjAuNSwgZmFsc2UpOyAgLy8g5bem5LiKXG4gICAgdGhpcy5jb250ZXh0LmFyYyhyLCB0LCByYWRpdXMsIC1NYXRoLlBJKjAuNSwgICAgICAgICAgICAwLCBmYWxzZSk7ICAvLyDlj7PkuIpcbiAgICB0aGlzLmNvbnRleHQuYXJjKHIsIGIsIHJhZGl1cywgICAgICAgICAgICAwLCAgTWF0aC5QSSowLjUsIGZhbHNlKTsgIC8vIOWPs+S4i1xuICAgIHRoaXMuY29udGV4dC5hcmMobCwgYiwgcmFkaXVzLCAgTWF0aC5QSSowLjUsICAgICAgTWF0aC5QSSwgZmFsc2UpOyAgLy8g5bem5LiLXG4gICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDop5LkuLjlm5vop5LlvaLloZfjgorjgaTjgbbjgZdcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGxSb3VuZFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkucm91bmRSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykuZmlsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOinkuS4uOWbm+inkuW9ouOCueODiOODreODvOOCr+aPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlUm91bmRSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLnJvdW5kUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpLnN0cm9rZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWGhuOBruODkeOCueOCkuioreWumlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgY2lyY2xlKHgsIHksIHJhZGl1cykge1xuICAgIHRoaXMuY29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJKjIsIGZhbHNlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOWhl+OCiuOBpOOBtuOBl+WGhuOCkuaPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbENpcmNsZSh4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgYyA9IHRoaXMuY29udGV4dDtcbiAgICBjLmJlZ2luUGF0aCgpO1xuICAgIGMuYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSoyLCBmYWxzZSk7XG4gICAgYy5jbG9zZVBhdGgoKTtcbiAgICBjLmZpbGwoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCueODiOODreODvOOCr+WGhuOCkuaPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlQ2lyY2xlKHgsIHksIHJhZGl1cykge1xuICAgIHZhciBjID0gdGhpcy5jb250ZXh0O1xuICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgYy5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJKjIsIGZhbHNlKTtcbiAgICBjLmNsb3NlUGF0aCgpO1xuICAgIGMuc3Ryb2tlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YaG5byn44Gu44OR44K544KS6Kit5a6aXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QW5nbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FudGljbG9ja3dpc2VdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgYXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpIHtcbiAgICB0aGlzLmNvbnRleHQuYXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5aGX44KK44Gk44G244GX5YaG5byn44KS5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0QW5nbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuZEFuZ2xlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FudGljbG9ja3dpc2VdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbEFyYyh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkuYXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpLmZpbGwoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCueODiOODreODvOOCr+WGhuW8p+OCkuaPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEFuZ2xlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmRBbmdsZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthbnRpY2xvY2t3aXNlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZUFyYyh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkuYXJjKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UpLnN0cm9rZSgpO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kQW5nbGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbYW50aWNsb2Nrd2lzZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBwaWUoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG4gICAgY29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEFuZ2xlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlbmRBbmdsZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthbnRpY2xvY2t3aXNlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGxQaWUoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLnBpZSh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKS5maWxsKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRBbmdsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kQW5nbGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbYW50aWNsb2Nrd2lzZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VQaWUoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLnBpZSh4LCB5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlKS5zdHJva2UoKTtcbiAgfVxuXG4gIFxuICAvKipcbiAgICog44Od44Oq44K044Oz44OR44K5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaWRlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldEFuZ2xlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBvbHlnb24oeCwgeSwgc2l6ZSwgc2lkZXMsIG9mZnNldEFuZ2xlKSB7XG4gICAgdmFyIHJhZERpdiA9IChNYXRoLlBJKjIpL3NpZGVzO1xuICAgIHZhciByYWRPZmZzZXQgPSAob2Zmc2V0QW5nbGUhPT11bmRlZmluZWQpID8gb2Zmc2V0QW5nbGUqTWF0aC5QSS8xODAgOiAtTWF0aC5QSS8yO1xuICAgIFxuICAgIHRoaXMubW92ZVRvKHggKyBNYXRoLmNvcyhyYWRPZmZzZXQpKnNpemUsIHkgKyBNYXRoLnNpbihyYWRPZmZzZXQpKnNpemUpO1xuICAgIGZvciAodmFyIGk9MTsgaTxzaWRlczsgKytpKSB7XG4gICAgICB2YXIgcmFkID0gcmFkRGl2KmkrcmFkT2Zmc2V0O1xuICAgICAgdGhpcy5saW5lVG8oXG4gICAgICAgIHggKyBNYXRoLmNvcyhyYWQpKnNpemUsXG4gICAgICAgIHkgKyBNYXRoLnNpbihyYWQpKnNpemVcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuY2xvc2VQYXRoKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Od44Oq44K044Oz5aGX44KK44Gk44G244GXXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpZGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0QW5nbGVdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbFBvbHlnb24oeCwgeSwgcmFkaXVzLCBzaWRlcywgb2Zmc2V0QW5nbGUpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5wb2x5Z29uKHgsIHksIHJhZGl1cywgc2lkZXMsIG9mZnNldEFuZ2xlKS5maWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Od44Oq44K044Oz44K544OI44Ot44O844Kv5o+P55S7XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpZGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0QW5nbGVdXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3Ryb2tlUG9seWdvbih4LCB5LCByYWRpdXMsIHNpZGVzLCBvZmZzZXRBbmdsZSkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLnBvbHlnb24oeCwgeSwgcmFkaXVzLCBzaWRlcywgb2Zmc2V0QW5nbGUpLnN0cm9rZSgpO1xuICB9XG4gIFxuICAvKipcbiAgICogc3RhclxuICAgKiBAcGFyYW0ge251bWJlcn0gW3g9MF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXVzPTY0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NpZGVzPTVdXG4gICAqIEBwYXJhbSB7YW55fSBbc2lkZUluZGVudD0wLjM4XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldEFuZ2xlXVxuICAgKi9cbiAgc3Rhcih4LCB5LCByYWRpdXMsIHNpZGVzLCBzaWRlSW5kZW50LCBvZmZzZXRBbmdsZSkge1xuICAgIHggPSB4IHx8IDA7XG4gICAgeSA9IHkgfHwgMDtcbiAgICByYWRpdXMgPSByYWRpdXMgfHwgNjQ7XG4gICAgc2lkZXMgPSBzaWRlcyB8fCA1O1xuICAgIHZhciBzaWRlSW5kZW50UmFkaXVzID0gcmFkaXVzICogKHNpZGVJbmRlbnQgfHwgMC4zOCk7XG4gICAgdmFyIHJhZE9mZnNldCA9IChvZmZzZXRBbmdsZSkgPyBvZmZzZXRBbmdsZSpNYXRoLlBJLzE4MCA6IC1NYXRoLlBJLzI7XG4gICAgdmFyIHJhZERpdiA9IChNYXRoLlBJKjIpL3NpZGVzLzI7XG5cbiAgICB0aGlzLm1vdmVUbyhcbiAgICAgIHggKyBNYXRoLmNvcyhyYWRPZmZzZXQpKnJhZGl1cyxcbiAgICAgIHkgKyBNYXRoLnNpbihyYWRPZmZzZXQpKnJhZGl1c1xuICAgICk7XG4gICAgZm9yICh2YXIgaT0xOyBpPHNpZGVzKjI7ICsraSkge1xuICAgICAgdmFyIHJhZCA9IHJhZERpdippICsgcmFkT2Zmc2V0O1xuICAgICAgdmFyIGxlbiA9IChpJTIpID8gc2lkZUluZGVudFJhZGl1cyA6IHJhZGl1cztcbiAgICAgIHRoaXMubGluZVRvKFxuICAgICAgICB4ICsgTWF0aC5jb3MocmFkKSpsZW4sXG4gICAgICAgIHkgKyBNYXRoLnNpbihyYWQpKmxlblxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZVBhdGgoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaYn+OCkuWhl+OCiuOBpOOBtuOBl+aPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3hdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXNdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2lkZXNdXG4gICAqIEBwYXJhbSB7YW55fSBbc2lkZUluZGVudF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRBbmdsZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmaWxsU3Rhcih4LCB5LCByYWRpdXMsIHNpZGVzLCBzaWRlSW5kZW50LCBvZmZzZXRBbmdsZSkge1xuICAgIHRoaXMuYmVnaW5QYXRoKCkuc3Rhcih4LCB5LCByYWRpdXMsIHNpZGVzLCBzaWRlSW5kZW50LCBvZmZzZXRBbmdsZSkuZmlsbCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaYn+OCkuOCueODiOODreODvOOCr+aPj+eUu1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3hdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXNdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2lkZXNdXG4gICAqIEBwYXJhbSB7YW55fSBbc2lkZUluZGVudF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRBbmdsZV1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VTdGFyKHgsIHksIHJhZGl1cywgc2lkZXMsIHNpZGVJbmRlbnQsIG9mZnNldEFuZ2xlKSB7XG4gICAgdGhpcy5iZWdpblBhdGgoKS5zdGFyKHgsIHksIHJhZGl1cywgc2lkZXMsIHNpZGVJbmRlbnQsIG9mZnNldEFuZ2xlKS5zdHJva2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBoZWFydFxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGhlYXJ0KHgsIHksIHJhZGl1cywgYW5nbGUpIHtcbiAgICB2YXIgaGFsZl9yYWRpdXMgPSByYWRpdXMqMC41O1xuICAgIC8vIHZhciByYWQgPSAoYW5nbGUgPT09IHVuZGVmaW5lZCkgPyBNYXRoLlBJLzQgOiBNYXRoLmRlZ1RvUmFkKGFuZ2xlKTtcbiAgICB2YXIgcmFkID0gKGFuZ2xlID09PSB1bmRlZmluZWQpID8gTWF0aC5QSS80IDogZGVnVG9SYWQoYW5nbGUpO1xuXG4gICAgLy8g5Y2K5b6EIGhhbGZfcmFkaXVzIOOBruinkuW6piBhbmdsZSDkuIrjga7ngrnjgajjga7mjqXnt5rjgpLmsYLjgoHjgotcbiAgICB2YXIgcCA9IE1hdGguY29zKHJhZCkqaGFsZl9yYWRpdXM7XG4gICAgdmFyIHEgPSBNYXRoLnNpbihyYWQpKmhhbGZfcmFkaXVzO1xuXG4gICAgLy8g5YaG44Gu5o6l57ea44Gu5pa556iL5byPIHB4ICsgcXkgPSByXjIg44KI44KKIHkgPSAocl4yLXB4KS9xXG4gICAgdmFyIHgyID0gLWhhbGZfcmFkaXVzO1xuICAgIHZhciB5MiA9IChoYWxmX3JhZGl1cypoYWxmX3JhZGl1cy1wKngyKS9xO1xuXG4gICAgLy8g5Lit5b+D5L2N572u6Kq/5pW0XG4gICAgdmFyIGhlaWdodCA9IHkyICsgaGFsZl9yYWRpdXM7XG4gICAgdmFyIG9mZnNldFkgPSBoYWxmX3JhZGl1cy1oZWlnaHQvMjtcblxuICAgIC8vIOODkeOCueOCkuOCu+ODg+ODiFxuICAgIHRoaXMubW92ZVRvKDAreCwgeTIreStvZmZzZXRZKTtcblxuICAgIHRoaXMuYXJjKC1oYWxmX3JhZGl1cyt4LCAwK3krb2Zmc2V0WSwgaGFsZl9yYWRpdXMsIE1hdGguUEktcmFkLCBNYXRoLlBJKjIpO1xuICAgIHRoaXMuYXJjKGhhbGZfcmFkaXVzK3gsIDAreStvZmZzZXRZLCBoYWxmX3JhZGl1cywgTWF0aC5QSSwgcmFkKTtcbiAgICB0aGlzLmNsb3NlUGF0aCgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogZmlsbCBoZWFydFxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGxIZWFydCh4LCB5LCByYWRpdXMsIGFuZ2xlKSB7XG4gICAgcmV0dXJuIHRoaXMuYmVnaW5QYXRoKCkuaGVhcnQoeCwgeSwgcmFkaXVzLCBhbmdsZSkuZmlsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0cm9rZSBoZWFydFxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZUhlYXJ0KHgsIHksIHJhZGl1cywgYW5nbGUpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5oZWFydCh4LCB5LCByYWRpdXMsIGFuZ2xlKS5zdHJva2UoKTtcbiAgfVxuXG4gLyoqXG4gICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDE2OTIzNC90aGUtcmVsYXRpb24tb2YtdGhlLWJlemllci1jdXJ2ZS1hbmQtZWxsaXBzZVxuICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgKiBAcGFyYW0ge251bWJlcn0gd1xuICAqIEBwYXJhbSB7bnVtYmVyfSBoXG4gICogQHJldHVybnMge3RoaXN9XG4gICovXG4gIGVsbGlwc2UoeCwgeSwgdywgaCkge1xuICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHQ7XG4gICAgdmFyIGthcHBhID0gMC41NTIyODQ4O1xuXG4gICAgdmFyIG94ID0gKHcgLyAyKSAqIGthcHBhOyAvLyBjb250cm9sIHBvaW50IG9mZnNldCBob3Jpem9udGFsXG4gICAgdmFyIG95ID0gKGggLyAyKSAqIGthcHBhOyAvLyBjb250cm9sIHBvaW50IG9mZnNldCB2ZXJ0aWNhbFxuICAgIHZhciB4ZSA9IHggKyB3OyAgICAgICAgICAgLy8geC1lbmRcbiAgICB2YXIgeWUgPSB5ICsgaDsgICAgICAgICAgIC8vIHktZW5kXG4gICAgdmFyIHhtID0geCArIHcgLyAyOyAgICAgICAvLyB4LW1pZGRsZVxuICAgIHZhciB5bSA9IHkgKyBoIC8gMjsgICAgICAgLy8geS1taWRkbGVcblxuICAgIGN0eC5tb3ZlVG8oeCwgeW0pO1xuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHltIC0gb3ksIHhtIC0gb3gsIHksIHhtLCB5KTtcbiAgICBjdHguYmV6aWVyQ3VydmVUbyh4bSArIG94LCB5LCB4ZSwgeW0gLSBveSwgeGUsIHltKTtcbiAgICBjdHguYmV6aWVyQ3VydmVUbyh4ZSwgeW0gKyBveSwgeG0gKyBveCwgeWUsIHhtLCB5ZSk7XG4gICAgY3R4LmJlemllckN1cnZlVG8oeG0gLSBveCwgeWUsIHgsIHltICsgb3ksIHgsIHltKTtcbiAgICAvLyBjdHguY2xvc2VQYXRoKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbGxFbGxpcHNlKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICByZXR1cm4gdGhpcy5iZWdpblBhdGgoKS5lbGxpcHNlKHgsIHksIHdpZHRoLCBoZWlnaHQpLmZpbGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0cm9rZUVsbGlwc2UoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiB0aGlzLmJlZ2luUGF0aCgpLmVsbGlwc2UoeCwgeSwgd2lkdGgsIGhlaWdodCkuc3Ryb2tlKCk7XG4gIH1cblxuICAvKipcbiAgICogXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmlsbFRleHQoKSB7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0LmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdHJva2VUZXh0KCkge1xuICAgIHRoaXMuY29udGV4dC5zdHJva2VUZXh0LmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jgpLmj4/nlLtcbiAgICogQHJldHVybnMge3ZvaWR9IHRoaXPov5TjgZflv5jjgozvvJ9cbiAgICovXG4gIGRyYXdJbWFnZSgpIHtcbiAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlLmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooYzliJfjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjFcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMlxuICAgKiBAcGFyYW0ge251bWJlcn0gZHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0VHJhbnNmb3JtKG0xMSwgbTEyLCBtMjEsIG0yMiwgZHgsIGR5KSB7XG4gICAgdGhpcy5jb250ZXh0LnNldFRyYW5zZm9ybShtMTEsIG0xMiwgbTIxLCBtMjIsIGR4LCBkeSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog6KGM5YiX44KS44Oq44K744OD44OIXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmVzZXRUcmFuc2Zvcm0oKSB7XG4gICAgdGhpcy5zZXRUcmFuc2Zvcm0oMS4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIOS4reW/g+OBq+enu+WLlVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHRyYW5zZm9ybUNlbnRlcigpIHtcbiAgICB0aGlzLmNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIHRoaXMud2lkdGgvMiwgdGhpcy5oZWlnaHQvMik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog56e75YuVXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgdHJhbnNsYXRlKHgsIHkpIHtcbiAgICB0aGlzLmNvbnRleHQudHJhbnNsYXRlKHgsIHkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5Zue6LuiXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvblxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJvdGF0ZShyb3RhdGlvbikge1xuICAgIHRoaXMuY29udGV4dC5yb3RhdGUocm90YXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog44K544Kx44O844OrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNjYWxlKHNjYWxlWCwgc2NhbGVZKSB7XG4gICAgdGhpcy5jb250ZXh0LnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnirbmhYvjgpLkv53lrZhcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzYXZlKCkge1xuICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog54q25oWL44KS5b6p5YWDXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmVzdG9yZSgpIHtcbiAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBqOOBl+OBpuS/neWtmFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21pbWVfdHlwZT1cImltYWdlL3BuZ1wiXVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHNhdmVBc0ltYWdlKG1pbWVfdHlwZSkge1xuICAgIG1pbWVfdHlwZSA9IG1pbWVfdHlwZSB8fCBcImltYWdlL3BuZ1wiO1xuICAgIHZhciBkYXRhX3VybCA9IHRoaXMuY2FudmFzLnRvRGF0YVVSTChtaW1lX3R5cGUpO1xuICAgIC8vIGRhdGFfdXJsID0gZGF0YV91cmwucmVwbGFjZShtaW1lX3R5cGUsIFwiaW1hZ2Uvb2N0ZXQtc3RyZWFtXCIpO1xuICAgIHdpbmRvdy5vcGVuKGRhdGFfdXJsLCBcInNhdmVcIik7XG4gICAgXG4gICAgLy8gdG9EYXRhVVJMIOOCkuS9v+OBiOOBsOS4i+iomOOBruOCiOOBhuOBquODhOODvOODq+OBjOS9nOOCjOOCi+OBi+OCgiEhXG4gICAgLy8gVE9ETzog44OX44Ot44Kw44Op44Og44Gn57W144KS44GL44GE44Gm5L+d5a2Y44Gn44GN44KL44OE44O844OrXG4gIH1cblxuICAvKipcbiAgICog5bmFXG4gICAqL1xuICBnZXQgd2lkdGgoKSAgIHsgcmV0dXJuIHRoaXMuY2FudmFzLndpZHRoOyB9XG4gIHNldCB3aWR0aCh2KSAgeyB0aGlzLmNhbnZhcy53aWR0aCA9IHY7IH1cblxuICAvKipcbiAgICog6auY44GVXG4gICAqL1xuICBnZXQgaGVpZ2h0KCkgICB7IHJldHVybiB0aGlzLmNhbnZhcy5oZWlnaHQ7IH1cbiAgc2V0IGhlaWdodCh2KSAgeyB0aGlzLmNhbnZhcy5oZWlnaHQgPSB2OyB9XG5cbiAgZ2V0IGZpbGxTdHlsZSgpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0LmZpbGxTdHlsZTsgfVxuICBzZXQgZmlsbFN0eWxlKHYpICB7IHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB2OyB9XG5cbiAgZ2V0IHN0cm9rZVN0eWxlKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGU7IH1cbiAgc2V0IHN0cm9rZVN0eWxlKHYpICB7IHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IHY7IH1cblxuICBnZXQgZ2xvYmFsQWxwaGEoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYTsgfVxuICBzZXQgZ2xvYmFsQWxwaGEodikgIHsgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gdjsgfVxuXG4gIGdldCBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24oKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb247IH1cbiAgc2V0IGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbih2KSAgeyB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gdjsgfVxuXG4gIGdldCBzaGFkb3dCbHVyKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuc2hhZG93Qmx1cjsgfVxuICBzZXQgc2hhZG93Qmx1cih2KSAgeyB0aGlzLmNvbnRleHQuc2hhZG93Qmx1ciA9IHY7IH1cblxuICBnZXQgc2hhZG93Q29sb3IoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5zaGFkb3dDb2xvcjsgfVxuICBzZXQgc2hhZG93Q29sb3IodikgIHsgdGhpcy5jb250ZXh0LnNoYWRvd0NvbG9yID0gdjsgfVxuXG4gIGdldCBzaGFkb3dPZmZzZXRYKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WDsgfVxuICBzZXQgc2hhZG93T2Zmc2V0WCh2KSAgeyB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHY7IH1cblxuICBnZXQgc2hhZG93T2Zmc2V0WSgpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFk7IH1cbiAgc2V0IHNoYWRvd09mZnNldFkodikgIHsgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFkgPSB2OyB9XG5cbiAgZ2V0IGxpbmVDYXAoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5saW5lQ2FwOyB9XG4gIHNldCBsaW5lQ2FwKHYpICB7IHRoaXMuY29udGV4dC5saW5lQ2FwID0gdjsgfVxuXG4gIGdldCBsaW5lSm9pbigpICAgeyByZXR1cm4gdGhpcy5jb250ZXh0LmxpbmVKb2luOyB9XG4gIHNldCBsaW5lSm9pbih2KSAgeyB0aGlzLmNvbnRleHQubGluZUpvaW4gPSB2OyB9XG5cbiAgZ2V0IG1pdGVyTGltaXQoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5taXRlckxpbWl0OyB9XG4gIHNldCBtaXRlckxpbWl0KHYpICB7IHRoaXMuY29udGV4dC5taXRlckxpbWl0ID0gdjsgfVxuXG4gIGdldCBsaW5lV2lkdGgoKSAgIHsgcmV0dXJuIHRoaXMuY29udGV4dC5saW5lV2lkdGg7IH1cbiAgc2V0IGxpbmVXaWR0aCh2KSAgeyB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gdjsgfVxuXG4gIGdldCBmb250KCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuZm9udDsgfVxuICBzZXQgZm9udCh2KSAgeyB0aGlzLmNvbnRleHQuZm9udCA9IHY7IH1cblxuICBnZXQgdGV4dEFsaWduKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQudGV4dEFsaWduOyB9XG4gIHNldCB0ZXh0QWxpZ24odikgIHsgdGhpcy5jb250ZXh0LnRleHRBbGlnbiA9IHY7IH1cblxuICBnZXQgdGV4dEJhc2VsaW5lKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQudGV4dEJhc2VsaW5lOyB9XG4gIHNldCB0ZXh0QmFzZWxpbmUodikgIHsgdGhpcy5jb250ZXh0LnRleHRCYXNlbGluZSA9IHY7IH1cblxuICBnZXQgaW1hZ2VTbW9vdGhpbmdFbmFibGVkKCkgICB7IHJldHVybiB0aGlzLmNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkOyB9XG4gIHNldCBpbWFnZVNtb290aGluZ0VuYWJsZWQodikgIHtcbiAgICB0aGlzLmNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdjtcbiAgICB0aGlzLmNvbnRleHRbJ3dlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCddID0gdjtcbiAgICB0aGlzLmNvbnRleHRbJ21vekltYWdlU21vb3RoaW5nRW5hYmxlZCddID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq3jgrnjg4jjga7plbfjgZXjgpLoqIjmuKxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHJldHVybnMge1RleHRNZXRyaWNzfVxuICAgKi9cbiAgc3RhdGljIG1lYXN1cmVUZXh0KGZvbnQsIHRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0LmZvbnQgPSBmb250O1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOe3muW9ouOCsOODqeODh+ODvOOCt+ODp+ODs+OCkueUn+aIkFxuICAgKiBAcmV0dXJucyB7Q2FudmFzR3JhZGllbnR9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlTGluZWFyR3JhZGllbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQuYXBwbHkodGhpcy5fY29udGV4dCwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhoblvaLjgrDjg6njg4fjg7zjgrfjg6fjg7PjgpLnlJ/miJBcbiAgICogQHJldHVybnMge0NhbnZhc0dyYWRpZW50fVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVJhZGlhbEdyYWRpZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50LmFwcGx5KHRoaXMuX2NvbnRleHQsIGFyZ3VtZW50cyk7XG4gIH1cblxufVxuXG4vKipcbiAqIOODh+ODleOCqeODq+ODiOOBruODl+ODqeOCpOODmeODvOODiENhbnZhc+OCs+ODs+ODhuOCreOCueODiCAgXG4gKiBTdGF0aWPjg6Hjgr3jg4Pjg4nnlKhcbiAqL1xuQ2FudmFzLl9jb250ZXh0ID0gKGZ1bmN0aW9uKCkge1xuICBpZiAoU3VwcG9ydC5jYW52YXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSkoKTtcblxuLy8gaW1wb3J0IHsgZmlyc3QsIGxhc3QsIGNsZWFyIH0gZnJvbSBcIi4uL2NvcmUvYXJyYXlcIlxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5pbnB1dC5JbnB1dFxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgSW5wdXQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxEb2N1bWVudH0gZG9tRWxlbWVudCBLZXlCb2FyZOOCteODluOCr+ODqeOCueOBp+OBr0hUTUxEb2N1bWVudOOAgeOBneOCjOS7peWkluOBruOCteODluOCr+ODqeOCueOBp+OBr0hUTUxDYW52YXNFbGVtZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb21FbGVtZW50KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQgfHwgd2luZG93LmRvY3VtZW50O1xuXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIHRoaXMuZGVsdGFQb3NpdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIHRoaXMucHJldlBvc2l0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5fdGVtcFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICB0aGlzLm1heENhY2hlTnVtID0gSW5wdXQuZGVmYXVsdHMubWF4Q2FjaGVOdW07XG4gICAgdGhpcy5taW5EaXN0YW5jZSA9IElucHV0LmRlZmF1bHRzLm1pbkRpc3RhbmNlO1xuICAgIHRoaXMubWF4RGlzdGFuY2UgPSBJbnB1dC5kZWZhdWx0cy5tYXhEaXN0YW5jZTtcbiAgICB0aGlzLmNhY2hlUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5mbGlja1ZlbG9jaXR5ID0gbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICB0aGlzLmZsYWdzID0gMDtcbiAgICBcbiAgICAvKipcbiAgICAgKiBLZXlCb2FyZOOCr+ODqeOCueaLoeW8teaZguOBruWei+OCqOODqeODvOWvvuetluOBruOBn+OCgXVuaW9u5Z6L44Go44GZ44KL44GM44CB5pys44Kv44Op44K544Gn44GvbnVtYmVy44Go44GX44Gm5L2/55SoXG4gICAgICogQHR5cGUge251bWJlciB8IHtbazogc3RyaW5nXTogbnVtYmVyfX1cbiAgICAgKi9cbiAgICB0aGlzLmxhc3Q7XG4gIH1cblxuICAvKipcbiAgICog5pu05pawXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMubGFzdCA9IHRoaXMubm93O1xuICAgIHRoaXMubm93ID0gdGhpcy5mbGFncztcbiAgICB0aGlzLnN0YXJ0ID0gKHRoaXMubm93IF4gdGhpcy5sYXN0KSAmIHRoaXMubm93O1xuICAgIHRoaXMuZW5kICAgPSAodGhpcy5ub3cgXiB0aGlzLmxhc3QpICYgdGhpcy5sYXN0O1xuXG4gICAgLy8g5aSJ5YyW5YCk44KS5pu05pawXG4gICAgdGhpcy5kZWx0YVBvc2l0aW9uLnggPSB0aGlzLl90ZW1wUG9zaXRpb24ueCAtIHRoaXMucG9zaXRpb24ueDtcbiAgICB0aGlzLmRlbHRhUG9zaXRpb24ueSA9IHRoaXMuX3RlbXBQb3NpdGlvbi55IC0gdGhpcy5wb3NpdGlvbi55O1xuXG4gICAgaWYgKHRoaXMuZGVsdGFQb3NpdGlvbi54ID09PSAwICYmIHRoaXMuZGVsdGFQb3NpdGlvbi55ID09PSAwKSB7XG4gICAgICB0aGlzLl9tb3ZlRmxhZyA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX21vdmVGbGFnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGFydCkge1xuICAgICAgdGhpcy5zdGFydFBvc2l0aW9uLnNldCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSk7XG4gICAgfVxuXG4gICAgLy8g5YmN5Zue44Gu5bqn5qiZ44KS5pu05pawXG4gICAgdGhpcy5wcmV2UG9zaXRpb24uc2V0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcblxuICAgIC8vIOePvuWcqOOBruS9jee9ruOCkuabtOaWsFxuICAgIHRoaXMucG9zaXRpb24uc2V0KHRoaXMuX3RlbXBQb3NpdGlvbi54LCB0aGlzLl90ZW1wUG9zaXRpb24ueSk7XG5cbiAgICBpZiAodGhpcy5jYWNoZVBvc2l0aW9ucy5sZW5ndGggPiB0aGlzLm1heENhY2hlTnVtKSB7XG4gICAgICB0aGlzLmNhY2hlUG9zaXRpb25zLnNoaWZ0KCk7XG4gICAgfVxuICAgIHRoaXMuY2FjaGVQb3NpdGlvbnMucHVzaCh0aGlzLnBvc2l0aW9uLmNsb25lKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZmxhZz0xXSDjg4fjg5Xjgqnjg6vjg4jjga8xKHRydWUpXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3N0YXJ0KHgsIHksIGZsYWcpIHtcbiAgICBmbGFnID0gKGZsYWcgIT09IHVuZGVmaW5lZCkgPyBmbGFnIDogMTtcbiAgICAvLyBjb25zb2xlLmxvZygnc3RhcnQnLCB4LCB5KTtcbiAgICB0aGlzLl9tb3ZlKHgsIHkpO1xuXG4gICAgdGhpcy5mbGFncyB8PSBmbGFnO1xuXG4gICAgeCA9IHRoaXMuX3RlbXBQb3NpdGlvbi54O1xuICAgIHkgPSB0aGlzLl90ZW1wUG9zaXRpb24ueTtcbiAgICB0aGlzLnBvc2l0aW9uLnNldCh4LCB5KTtcbiAgICB0aGlzLnByZXZQb3NpdGlvbi5zZXQoeCwgeSk7XG5cbiAgICB0aGlzLmZsaWNrVmVsb2NpdHkuc2V0KDAsIDApO1xuICAgIC8vIHRoaXMuY2FjaGVQb3NpdGlvbnMuY2xlYXIoKTtcbiAgICB0aGlzLmNhY2hlUG9zaXRpb25zLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtmbGFnPTFdXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX2VuZChmbGFnKSB7XG4gICAgZmxhZyA9IChmbGFnICE9PSB1bmRlZmluZWQpID8gZmxhZyA6IDE7XG4gICAgdGhpcy5mbGFncyAmPSB+KGZsYWcpO1xuXG4gICAgaWYgKHRoaXMuY2FjaGVQb3NpdGlvbnMubGVuZ3RoIDwgMikgcmV0dXJuO1xuXG4gICAgLy8gdmFyIGZpcnN0ID0gdGhpcy5jYWNoZVBvc2l0aW9ucy5maXJzdDtcbiAgICAvLyB2YXIgbGFzdCA9IHRoaXMuY2FjaGVQb3NpdGlvbnMubGFzdDtcbiAgICB2YXIgZmlyc3QgPSB0aGlzLmNhY2hlUG9zaXRpb25zWzBdO1xuICAgIHZhciBsYXN0ID0gdGhpcy5jYWNoZVBvc2l0aW9uc1t0aGlzLmNhY2hlUG9zaXRpb25zLmxlbmd0aC0xXTtcblxuICAgIHZhciB2ID0gVmVjdG9yMi5zdWIobGFzdCwgZmlyc3QpO1xuXG4gICAgdmFyIGxlbiA9IHYubGVuZ3RoKCk7XG5cbiAgICBpZiAobGVuID4gdGhpcy5taW5EaXN0YW5jZSkge1xuICAgICAgLy8gdmFyIG5vcm1hbExlbiA9IGxlbi5jbGFtcCh0aGlzLm1pbkRpc3RhbmNlLCB0aGlzLm1heERpc3RhbmNlKTtcbiAgICAgIHZhciBub3JtYWxMZW4gPSBjbGFtcChsZW4sIHRoaXMubWluRGlzdGFuY2UsIHRoaXMubWF4RGlzdGFuY2UpO1xuICAgICAgdi5kaXYobGVuKS5tdWwobm9ybWFsTGVuKTtcbiAgICAgIHRoaXMuZmxpY2tWZWxvY2l0eS5zZXQodi54LCB2LnkpO1xuICAgIH1cblxuICAgIC8vIHRoaXMuY2FjaGVQb3NpdGlvbnMuY2xlYXIoKTtcbiAgICB0aGlzLmNhY2hlUG9zaXRpb25zLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44K544Kx44O844Or44KS6ICD5oWu44GX44Gm5L2N572u44KS56e75YuVXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX21vdmUoeCwgeSkge1xuICAgIHRoaXMuX3RlbXBQb3NpdGlvbi54ID0geDtcbiAgICB0aGlzLl90ZW1wUG9zaXRpb24ueSA9IHk7XG5cbiAgICAvLyBhZGp1c3Qgc2NhbGVcbiAgICB2YXIgZWxtID0gLyoqIEB0eXBlIHtIVE1MQ2FudmFzRWxlbWVudH0gKi8odGhpcy5kb21FbGVtZW50KTtcbiAgICB2YXIgcmVjdCA9IGVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAocmVjdC53aWR0aCkge1xuICAgICAgdGhpcy5fdGVtcFBvc2l0aW9uLnggKj0gZWxtLndpZHRoIC8gcmVjdC53aWR0aDtcbiAgICB9XG4gICAgaWYgKHJlY3QuaGVpZ2h0KSB7XG4gICAgICB0aGlzLl90ZW1wUG9zaXRpb24ueSAqPSBlbG0uaGVpZ2h0IC8gcmVjdC5oZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICB4XG4gICAqIHjluqfmqJnlgKRcbiAgICovXG4gIGdldCB4KCkgeyByZXR1cm4gdGhpcy5wb3NpdGlvbi54OyB9XG4gIHNldCB4KHYpIHsgdGhpcy5wb3NpdGlvbi54ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgeVxuICAgKiB55bqn5qiZ5YCkXG4gICAqL1xuICBnZXQgeSgpIHsgcmV0dXJuIHRoaXMucG9zaXRpb24ueTsgfVxuICBzZXQgeSh2KSB7IHRoaXMucG9zaXRpb24ueSA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGR4XG4gICAqIGR45YCkXG4gICAqL1xuICBnZXQgZHgoKSB7IHJldHVybiB0aGlzLmRlbHRhUG9zaXRpb24ueDsgfVxuICBzZXQgZHgodikgeyB0aGlzLmRlbHRhUG9zaXRpb24ueCA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGR5XG4gICAqIGR55YCkXG4gICAqL1xuICBnZXQgZHkoKSB7IHJldHVybiB0aGlzLmRlbHRhUG9zaXRpb24ueTsgfVxuICBzZXQgZHkodikgeyB0aGlzLmRlbHRhUG9zaXRpb24ueSA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGZ4XG4gICAqIGZ45YCkXG4gICAqL1xuICBnZXQgZngoKSB7IHJldHVybiB0aGlzLmZsaWNrVmVsb2NpdHkueDsgfVxuICBzZXQgZngodikgeyB0aGlzLmZsaWNrVmVsb2NpdHkueCA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGZ5XG4gICAqIGZ55YCkXG4gICAqL1xuICBnZXQgZnkoKSB7IHJldHVybiB0aGlzLmZsaWNrVmVsb2NpdHkueTsgfVxuICBzZXQgZnkodikgeyB0aGlzLmZsaWNrVmVsb2NpdHkueSA9IHY7IH1cblxufVxuXG5JbnB1dC5kZWZhdWx0cyA9IHtcbiAgbWF4Q2FjaGVOdW06IDMsXG4gIG1pbkRpc3RhbmNlOiAxMCxcbiAgbWF4RGlzdGFuY2U6IDEwMCxcbn07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmlucHV0LktleWJvYXJkXG4gKiBfZXh0ZW5kcyBwaGluYS5pbnB1dC5JbnB1dFxuICovXG5jbGFzcyBLZXlib2FyZCBleHRlbmRzIElucHV0IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvbUVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbUVsZW1lbnQpIHtcbiAgICBzdXBlcihkb21FbGVtZW50KTtcblxuICAgIC8qKiBAdHlwZSB7SFRNTERvY3VtZW50fSAqL1xuICAgIHRoaXMuZG9tRWxlbWVudDtcblxuICAgIC8qKiBAdHlwZSB7e1trOiBudW1iZXJdOiBib29sZWFufX0gKi9cbiAgICB0aGlzLmtleSA9IHt9O1xuICAgIC8qKiBAdHlwZSB7e1trOiBudW1iZXJdOiBhbnl9fSB0cnVlfGZhbHNlIG9yIDF8MCAqL1xuICAgIHRoaXMucHJlc3MgID0ge307XG4gICAgLyoqIEB0eXBlIHt7W2s6IG51bWJlcl06IGFueX19ICovXG4gICAgdGhpcy5kb3duICAgPSB7fTtcbiAgICAvKiogQHR5cGUge3tbazogbnVtYmVyXTogYW55fX0gKi9cbiAgICB0aGlzLnVwICAgICA9IHt9O1xuICAgIC8qKiBAdHlwZSB7e1trOiBudW1iZXJdOiBhbnl9fSAqL1xuICAgIHRoaXMubGFzdCAgID0ge307XG5cbiAgICAvKiogQHR5cGUge251bWJlciB8IG51bGx9ICovXG4gICAgdGhpcy5fa2V5ZG93biA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtudW1iZXIgfCBudWxsfSAqL1xuICAgIHRoaXMuX2tleXVwID0gbnVsbDtcbiAgICAvKiogQHR5cGUge251bWJlciB8IG51bGx9ICovXG4gICAgdGhpcy5fa2V5cHJlc3MgPSBudWxsO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5rZXlbZS5rZXlDb2RlXSA9IHRydWU7XG4gICAgICBzZWxmLl9rZXlkb3duID0gZS5rZXlDb2RlO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5rZXlbZS5rZXlDb2RlXSA9IGZhbHNlO1xuICAgICAgc2VsZi5fa2V5dXAgPSBlLmtleUNvZGU7XG4gICAgfSk7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5fa2V5cHJlc3MgPSBlLmtleUNvZGU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog5oOF5aCx5pu05paw5Yem55CGXG4gICAqIOavjuODleODrOODvOODoOWRvOOCk+OBp+S4i+OBleOBhC5cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgLy8gVE9ETzog5LiA5ous44OT44OD44OI5ryU566X44Gn6KGM44GG44KI44GG5L+u5q2j44GZ44KLXG4gICAgZm9yICh2YXIgayBpbiB0aGlzLmtleSkge1xuICAgICAgdGhpcy5sYXN0W2tdICAgID0gdGhpcy5wcmVzc1trXTtcbiAgICAgIHRoaXMucHJlc3Nba10gICA9IHRoaXMua2V5W2tdO1xuICAgICAgXG4gICAgICB0aGlzLmRvd25ba10gPSAodGhpcy5wcmVzc1trXSBeIHRoaXMubGFzdFtrXSkgJiB0aGlzLnByZXNzW2tdO1xuICAgICAgdGhpcy51cFtrXSA9ICh0aGlzLnByZXNzW2tdIF4gdGhpcy5sYXN0W2tdKSAmIHRoaXMubGFzdFtrXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fa2V5ZG93bikge1xuICAgICAgdGhpcy5mbGFyZSgna2V5ZG93bicsIHsga2V5Q29kZTogdGhpcy5fa2V5ZG93biB9KTtcbiAgICAgIHRoaXMuX2tleWRvd24gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5fa2V5dXApIHtcbiAgICAgIHRoaXMuZmxhcmUoJ2tleXVwJywgeyBrZXlDb2RlOiB0aGlzLl9rZXl1cCB9KTtcbiAgICAgIHRoaXMuX2tleXVwID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2tleXByZXNzKSB7XG4gICAgICB0aGlzLmZsYXJlKCdrZXlwcmVzcycsIHsga2V5Q29kZTogdGhpcy5fa2V5cHJlc3MgfSk7XG4gICAgICB0aGlzLl9rZXlwcmVzcyA9IG51bGw7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCreODvOOCkuaKvOOBl+OBpuOBhOOCi+OBi+OCkuODgeOCp+ODg+OCr1xuICAgKiBAcGFyYW0gICB7bnVtYmVyfGtleW9mIHR5cGVvZiBLZXlib2FyZC5LRVlfQ09ERX0ga2V5IGtleUNvZGUgb3Iga2V5TmFtZVxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gICDjg4Hjgqfjg4Pjgq/ntZDmnpxcbiAgICovXG4gIGdldEtleShrZXkpIHtcbiAgICBpZiAodHlwZW9mKGtleSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGtleSA9IEtleWJvYXJkLktFWV9DT0RFW2tleV07XG4gICAgfVxuICAgIHJldHVybiAhIXRoaXMucHJlc3Nba2V5XSA9PT0gdHJ1ZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCreODvOOCkuaKvOOBl+OBn+OBi+OCkuODgeOCp+ODg+OCr1xuICAgKiBAcGFyYW0gICB7bnVtYmVyfGtleW9mIHR5cGVvZiBLZXlib2FyZC5LRVlfQ09ERX0ga2V5IGtleUNvZGUgb3Iga2V5TmFtZVxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gICDjg4Hjgqfjg4Pjgq/ntZDmnpxcbiAgICovXG4gIGdldEtleURvd24oa2V5KSB7XG4gICAgaWYgKHR5cGVvZihrZXkpID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGtleSA9IEtleWJvYXJkLktFWV9DT0RFW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRvd25ba2V5XSA9PSB0cnVlO1xuICB9XG4gIFxuICAvKipcbiAgICog44Kt44O844KS6Zui44GX44Gf44GL44KS44OB44Kn44OD44KvXG4gICAqIEBwYXJhbSAgIHtudW1iZXJ8a2V5b2YgdHlwZW9mIEtleWJvYXJkLktFWV9DT0RFfSBrZXkga2V5Q29kZSBvciBrZXlOYW1lXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAgIOODgeOCp+ODg+OCr+e1kOaenFxuICAgKi9cbiAgZ2V0S2V5VXAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZihrZXkpID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGtleSA9IEtleWJvYXJkLktFWV9DT0RFW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVwW2tleV0gPT0gdHJ1ZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIOOCreODvOOBruaWueWQkeOCkiBBbmdsZShEZWdyZWUpIOOBp+WPluW+l1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gICDop5LluqYoRGVncmVlKVxuICAgKi9cbiAgZ2V0S2V5QW5nbGUoKSB7XG4gICAgdmFyIGFuZ2xlID0gbnVsbDtcbiAgICB2YXIgYXJyb3dCaXQgPVxuICAgICAgLy8gKHRoaXMuZ2V0S2V5KFwibGVmdFwiKSAgIDw8IDMpIHwgLy8gMTAwMFxuICAgICAgLy8gKHRoaXMuZ2V0S2V5KFwidXBcIikgICAgIDw8IDIpIHwgLy8gMDEwMFxuICAgICAgLy8gKHRoaXMuZ2V0S2V5KFwicmlnaHRcIikgIDw8IDEpIHwgLy8gMDAxMFxuICAgICAgLy8gKHRoaXMuZ2V0S2V5KFwiZG93blwiKSk7ICAgICAgICAgLy8gMDAwMVxuICAgICAgKHRoaXMuZ2V0S2V5KFwibGVmdFwiKSA/IDEgOiAwICAgPDwgMykgfCAvLyAxMDAwXG4gICAgICAodGhpcy5nZXRLZXkoXCJ1cFwiKSA/IDEgOiAwICAgICA8PCAyKSB8IC8vIDAxMDBcbiAgICAgICh0aGlzLmdldEtleShcInJpZ2h0XCIpID8gMSA6IDAgIDw8IDEpIHwgLy8gMDAxMFxuICAgICAgKHRoaXMuZ2V0S2V5KFwiZG93blwiKSA/IDEgOiAwKTsgICAgICAgICAvLyAwMDAxXG4gICAgXG4gICAgaWYgKGFycm93Qml0ICE9PSAwICYmIEtleWJvYXJkLkFSUk9XX0JJVF9UT19BTkdMRV9UQUJMRS5oYXNPd25Qcm9wZXJ0eShhcnJvd0JpdCkpIHtcbiAgICAgIGFuZ2xlID0gS2V5Ym9hcmQuQVJST1dfQklUX1RPX0FOR0xFX1RBQkxFW2Fycm93Qml0XTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGFuZ2xlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCreODvOOBruaKvOOBl+OBpuOBhOOCi+WQkeOBjeOCkuWPluW+l1xuICAgKiDmraPopo/ljJbjgZXjgozjgabjgYTjgotcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9XG4gICAqL1xuICBnZXRLZXlEaXJlY3Rpb24oKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gICAgaWYgKHRoaXMuZ2V0S2V5KFwibGVmdFwiKSkge1xuICAgICAgZGlyZWN0aW9uLnggPSAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5nZXRLZXkoXCJyaWdodFwiKSkge1xuICAgICAgZGlyZWN0aW9uLnggPSAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5nZXRLZXkoXCJ1cFwiKSkge1xuICAgICAgZGlyZWN0aW9uLnkgPSAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5nZXRLZXkoXCJkb3duXCIpKSB7XG4gICAgICBkaXJlY3Rpb24ueSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbi54ICYmIGRpcmVjdGlvbi55KSB7XG4gICAgICBkaXJlY3Rpb24uZGl2KE1hdGguU1FSVDIpO1xuICAgIH1cblxuICAgIHJldHVybiBkaXJlY3Rpb247XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjgq3jg7zjga7nirbmhYvjgpLoqK3lrprjgZnjgotcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZsYWdcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRLZXkoa2V5LCBmbGFnKSB7XG4gICAgaWYgKHR5cGVvZihrZXkpID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGtleSA9IEtleWJvYXJkLktFWV9DT0RFW2tleV07XG4gICAgfVxuICAgIHRoaXMua2V5W2tleV0gPSBmbGFnO1xuICAgIFxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCreODvOOCkuWFqOOBpumbouOBl+OBn+OBk+OBqOOBq+OBmeOCi1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNsZWFyS2V5KCkge1xuICAgIHRoaXMua2V5ID0ge307XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG5cbi8qKlxuICogQHN0YXRpY1xuICogQGVudW0ge251bWJlcn1cbiAqIOaWueWQkeOBruOCouODs+OCsOODqyBqc2R1Y2vjgafjga/mlbDlrZfjgpLjg5fjg63jg5Hjg4bjgqPjgavmjIflrprjgafjgY3jgarjgYTvvJ9cbiAqL1xuS2V5Ym9hcmQuQVJST1dfQklUX1RPX0FOR0xFX1RBQkxFID0ge1xuICAvKiBAcHJvcGVydHkg5LiLICovXG4gIDB4MDE6IDI3MCxcbiAgLyogQHByb3BlcnR5IOWPsyAqL1xuICAweDAyOiAgIDAsXG4gIC8qIEBwcm9wZXJ0eSDkuIogKi9cbiAgMHgwNDogIDkwLFxuICAvKiBAcHJvcGVydHkg5bemICovXG4gIDB4MDg6IDE4MCxcblxuICAvKiBAcHJvcGVydHkg5Y+z5LiKICovXG4gIDB4MDY6ICA0NSxcbiAgLyogQHByb3BlcnR5IOWPs+S4iyAqL1xuICAweDAzOiAzMTUsXG4gIC8qIEBwcm9wZXJ0eSDlt6bkuIogKi9cbiAgMHgwYzogMTM1LFxuICAvKiBAcHJvcGVydHkg5bem5LiLICovXG4gIDB4MDk6IDIyNSxcblxuICAvLyDkuInmlrnlkJHlkIzmmYLmirzjgZflr77lv5xcbiAgLy8g5oOz5a6a5aSW44Gu5pON5L2c44Gg44GM5a++5b+c44GX44Go44GE44Gf44G744GG44GM54Sh6ZujXG4gIC8qIEBwcm9wZXJ0eSDlj7PkuIrlt6YgKi9cbiAgMHgwZTogIDkwLFxuICAvKiBAcHJvcGVydHkg5LiK5bem5LiLICovXG4gIDB4MGQ6IDE4MCxcbiAgLyogQHByb3BlcnR5IOW3puS4i+WPsyAqL1xuICAweDBiOiAyNzAsXG4gIC8qIEBwcm9wZXJ0eSDkuIvlj7PkuIogKi9cbiAgMHgwNzogICAwLFxufTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAZW51bSB7bnVtYmVyfVxuICog44Kt44O855Wq5Y+3XG4gKi9cbktleWJvYXJkLktFWV9DT0RFID0ge1xuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJiYWNrc3BhY2VcIiA6IDgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInRhYlwiICAgICAgIDogOSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZW50ZXJcIiAgICAgOiAxMyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicmV0dXJuXCIgICAgOiAxMyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwic2hpZnRcIiAgICAgOiAxNixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiY3RybFwiICAgICAgOiAxNyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiYWx0XCIgICAgICAgOiAxOCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicGF1c2VcIiAgICAgOiAxOSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiY2Fwc2xvY2tcIiAgOiAyMCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZXNjYXBlXCIgICAgOiAyNyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicGFnZXVwXCIgICAgOiAzMyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicGFnZWRvd25cIiAgOiAzNCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZW5kXCIgICAgICAgOiAzNSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiaG9tZVwiICAgICAgOiAzNixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibGVmdFwiICAgICAgOiAzNyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwidXBcIiAgICAgICAgOiAzOCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicmlnaHRcIiAgICAgOiAzOSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZG93blwiICAgICAgOiA0MCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiaW5zZXJ0XCIgICAgOiA0NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZGVsZXRlXCIgICAgOiA0NixcbiAgXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjBcIiA6IDQ4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCIxXCIgOiA0OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiMlwiIDogNTAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjNcIiA6IDUxLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCI0XCIgOiA1MixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiNVwiIDogNTMsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjZcIiA6IDU0LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCI3XCIgOiA1NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiOFwiIDogNTYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIjlcIiA6IDU3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXG4gIFwiYVwiIDogNjUsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkFcIiA6IDY1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJiXCIgOiA2NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiQlwiIDogNjYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImNcIiA6IDY3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJDXCIgOiA2NyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZFwiIDogNjgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkRcIiA6IDY4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJlXCIgOiA2OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiRVwiIDogNjksXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImZcIiA6IDcwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJGXCIgOiA3MCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZ1wiIDogNzEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkdcIiA6IDcxLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJoXCIgOiA3MixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiSFwiIDogNzIsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImlcIiA6IDczLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJJXCIgOiA3MyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwialwiIDogNzQsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIkpcIiA6IDc0LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJrXCIgOiA3NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiS1wiIDogNzUsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImxcIiA6IDc2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJMXCIgOiA3NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibVwiIDogNzcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIk1cIiA6IDc3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJuXCIgOiA3OCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiTlwiIDogNzgsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm9cIiA6IDc5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJPXCIgOiA3OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwicFwiIDogODAsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIlBcIiA6IDgwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJxXCIgOiA4MSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiUVwiIDogODEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInJcIiA6IDgyLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJSXCIgOiA4MixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwic1wiIDogODMsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIlNcIiA6IDgzLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJ0XCIgOiA4NCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiVFwiIDogODQsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInVcIiA6IDg1LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJVXCIgOiA4NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwidlwiIDogODYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIlZcIiA6IDg2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJ3XCIgOiA4NyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiV1wiIDogODcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInhcIiA6IDg4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJYXCIgOiA4OCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwieVwiIDogODksXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIllcIiA6IDg5LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJ6XCIgOiA5MCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiWlwiIDogOTAsXG4gIFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQwXCIgOiA5NixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtcGFkMVwiIDogOTcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDJcIiA6IDk4LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQzXCIgOiA5OSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtcGFkNFwiIDogMTAwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQ1XCIgOiAxMDEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDZcIiA6IDEwMixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibnVtcGFkN1wiIDogMTAzLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJudW1wYWQ4XCIgOiAxMDQsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bXBhZDlcIiA6IDEwNSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwibXVsdGlwbHlcIiAgICAgIDogMTA2LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJhZGRcIiAgICAgICAgICAgOiAxMDcsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInN1YnRyYWN0XCIgICAgICA6IDEwOSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZGVjaW1hbHBvaW50XCIgIDogMTEwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJkaXZpZGVcIiAgICAgICAgOiAxMTEsXG5cbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjFcIiAgICA6IDExMixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjJcIiAgICA6IDExMyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjNcIiAgICA6IDExNCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjRcIiAgICA6IDExNSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjVcIiAgICA6IDExNixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjZcIiAgICA6IDExNyxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjdcIiAgICA6IDExOCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjhcIiAgICA6IDExOSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjlcIiAgICA6IDEyMCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjEwXCIgICA6IDEyMSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjExXCIgICA6IDEyMixcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZjEyXCIgICA6IDEyMyxcbiAgXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm51bWxvY2tcIiAgIDogMTQ0LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJzY3JvbGxsb2NrXCI6IDE0NSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwic2VtaWNvbG9uXCIgOiAxODYsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcImVxdWFsc2lnblwiIDogMTg3LFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJjb21tYVwiICAgICA6IDE4OCxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiZGFzaFwiICAgICAgOiAxODksXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInBlcmlvZFwiICAgIDogMTkwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJmb3J3YXJkIHNsYXNoXCIgOiAxOTEsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIi9cIjogMTkxLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJncmF2ZSBhY2NlbnRcIiAgOiAxOTIsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcIm9wZW4gYnJhY2tldFwiICA6IDIxOSxcbiAgLyogQHByb3BlcnR5ICovXG4gIFwiYmFjayBzbGFzaFwiICAgIDogMjIwLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJjbG9zZSBicmFja2V0XCIgIDogMjIxLFxuICAvKiBAcHJvcGVydHkgKi9cbiAgXCJzaW5nbGUgcXVvdGVcIiAgOiAyMjIsXG4gIC8qIEBwcm9wZXJ0eSAqL1xuICBcInNwYWNlXCIgICAgICAgICA6IDMyXG5cbn07XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmlucHV0Lk1vdXNlXG4gKiBfZXh0ZW5kcyBwaGluYS5pbnB1dC5JbnB1dFxuICovXG5jbGFzcyBNb3VzZSBleHRlbmRzIElucHV0IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGRvbUVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbUVsZW1lbnQpIHtcbiAgICBzdXBlcihkb21FbGVtZW50KTtcblxuICAgIHRoaXMuaWQgPSAwO1xuXG4gICAgLyoqIEB0eXBlIHtIVE1MQ2FudmFzRWxlbWVudH0gKi9cbiAgICB0aGlzLmRvbUVsZW1lbnQ7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHNlbGYuX3N0YXJ0KHBvaW50WC5nZXQuY2FsbChlKSwgcG9pbnRZLmdldC5jYWxsKGUpLCAxPDxlLmJ1dHRvbik7XG4gICAgICAvLyBzZWxmLl9zdGFydChlLnBvaW50WCwgZS5wb2ludFksIDE8PGUuYnV0dG9uKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5fZW5kKDE8PGUuYnV0dG9uKTtcbiAgICB9KTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5fbW92ZShwb2ludFguZ2V0LmNhbGwoZSksIHBvaW50WS5nZXQuY2FsbChlKSk7XG4gICAgICAvLyBzZWxmLl9tb3ZlKGUucG9pbnRYLCBlLnBvaW50WSk7XG4gICAgfSk7XG5cbiAgICAvLyDjg57jgqbjgrnjgYzjgq3jg6Pjg7Pjg5DjgrnopoHntKDjga7lpJbjgavlh7rjgZ/loLTlkIjjga7lr77lv5xcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBmdW5jdGlvbihlKSAge1xuICAgICAgc2VsZi5fZW5kKDEpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnOOCv+ODs+WPluW+l1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gYnV0dG9uXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0QnV0dG9uKGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICBidXR0b24gPSBCVVRUT05fTUFQW2J1dHRvbl07XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAodGhpcy5ub3cgJiBidXR0b24pICE9IDA7XG4gIH1cblxuICAvKipcbiAgICog44Oc44K/44Oz44OA44Km44Oz5Y+W5b6XXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBidXR0b25cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRCdXR0b25Eb3duKGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1dHRvbiA9IEJVVFRPTl9NQVBbYnV0dG9uXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuc3RhcnQgJiBidXR0b24pICE9IDA7XG4gIH1cbiAgICAgIFxuICAvKipcbiAgICog44Oc44K/44Oz44Ki44OD44OX5Y+W5b6XXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBidXR0b25cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRCdXR0b25VcChidXR0b24pIHtcbiAgICBpZiAodHlwZW9mKGJ1dHRvbikgPT0gXCJzdHJpbmdcIikge1xuICAgICAgYnV0dG9uID0gQlVUVE9OX01BUFtidXR0b25dO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKHRoaXMuZW5kICYgYnV0dG9uKSAhPSAwO1xuICB9XG5cbn1cblxuLyoqIEBzdGF0aWMgQHByb3BlcnR5ICovXG5Nb3VzZS5CVVRUT05fTEVGVCA9IDB4MTtcbi8qKiBAc3RhdGljIEBwcm9wZXJ0eSAqL1xuTW91c2UuQlVUVE9OX01JRERMRSA9IDB4Mjtcbi8qKiBAc3RhdGljIEBwcm9wZXJ0eSAqL1xuTW91c2UuQlVUVE9OX1JJR0hUID0gMHg0O1xuXG4vKipcbiAqIEB0eXBlIHt7W2s6IHN0cmluZ106IG51bWJlcn19XG4gKi9cbnZhciBCVVRUT05fTUFQID0ge1xuICBcImxlZnRcIiAgOiBNb3VzZS5CVVRUT05fTEVGVCxcbiAgXCJtaWRkbGVcIjogTW91c2UuQlVUVE9OX01JRERMRSxcbiAgXCJyaWdodFwiIDogTW91c2UuQlVUVE9OX1JJR0hUXG59O1xuXG5Nb3VzZS5wcm90b3R5cGUuZ2V0UG9pbnRpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZ2V0QnV0dG9uKFwibGVmdFwiKTsgfTtcbk1vdXNlLnByb3RvdHlwZS5nZXRQb2ludGluZ1N0YXJ0ID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmdldEJ1dHRvbkRvd24oXCJsZWZ0XCIpOyB9O1xuTW91c2UucHJvdG90eXBlLmdldFBvaW50aW5nRW5kID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmdldEJ1dHRvblVwKFwibGVmdFwiKTsgfTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuaW5wdXQuVG91Y2hcbiAqIF9leHRlbmRzIHBoaW5hLmlucHV0LklucHV0XG4gKi9cbmNsYXNzIFRvdWNoJDEgZXh0ZW5kcyBJbnB1dCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBkb21FbGVtZW50XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzTXVsdGldXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb21FbGVtZW50LCBpc011bHRpKSB7XG4gICAgc3VwZXIoZG9tRWxlbWVudCk7XG5cbiAgICB0aGlzLmlkID0gbnVsbDtcblxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLnJlbGVhc2VkID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGlzTXVsdGkgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5fc3RhcnQodG91Y2hQb2ludFguZ2V0LmNhbGwoZSksIHRvdWNoUG9pbnRZLmdldC5jYWxsKGUpKTtcbiAgICAgIC8vIHNlbGYuX3N0YXJ0KGUucG9pbnRYLCBlLnBvaW50WSwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLl9lbmQoKTtcbiAgICB9KTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24oZSkge1xuICAgICAgc2VsZi5fbW92ZSh0b3VjaFBvaW50WC5nZXQuY2FsbChlKSwgdG91Y2hQb2ludFkuZ2V0LmNhbGwoZSkpO1xuICAgICAgLy8gc2VsZi5fbW92ZShlLnBvaW50WCwgZS5wb2ludFkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgeOBl+OBpuOBhOOCi+OBi+OCkuWIpOWumlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldFRvdWNoKCkge1xuICAgIHJldHVybiB0aGlzLm5vdyAhPSAwO1xuICB9XG4gIFxuICAvKipcbiAgICog44K/44OD44OB6ZaL5aeL5pmC44GrIHRydWVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRUb3VjaFN0YXJ0KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0ICE9IDA7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4HntYLkuobmmYLjgasgdHJ1ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldFRvdWNoRW5kKCkge1xuICAgIHJldHVybiB0aGlzLmVuZCAhPSAwO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAbWV0aG9kXG4gKiDjg53jgqTjg7Pjg4bjgqPjg7PjgrDnirbmhYvlj5blvpcobW91c2Ug44Go44Gu5beu55Ww5a++562WKVxuICovXG5Ub3VjaCQxLnByb3RvdHlwZS5nZXRQb2ludGluZyAgICAgICAgPSBUb3VjaCQxLnByb3RvdHlwZS5nZXRUb3VjaDtcbi8qKlxuICogQG1ldGhvZFxuICog44Od44Kk44Oz44OG44Kj44Oz44Kw44KS6ZaL5aeL44GX44Gf44GL44KS5Y+W5b6XKG1vdXNlIOOBqOOBruW3rueVsOWvvuetlilcbiAqL1xuVG91Y2gkMS5wcm90b3R5cGUuZ2V0UG9pbnRpbmdTdGFydCAgID0gVG91Y2gkMS5wcm90b3R5cGUuZ2V0VG91Y2hTdGFydDtcbi8qKlxuICogQG1ldGhvZFxuICog44Od44Kk44Oz44OG44Kj44Oz44Kw44KS57WC5LqG44GX44Gf44GL44KS5Y+W5b6XKG1vdXNlIOOBqOOBruW3rueVsOWvvuetlilcbiAqL1xuVG91Y2gkMS5wcm90b3R5cGUuZ2V0UG9pbnRpbmdFbmQgICAgID0gVG91Y2gkMS5wcm90b3R5cGUuZ2V0VG91Y2hFbmQ7XG5cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuaW5wdXQuVG91Y2hMaXN0XG4gKi9cbmNsYXNzIFRvdWNoTGlzdCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGRvbUVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbUVsZW1lbnQpIHtcbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb21FbGVtZW50O1xuXG4gICAgLyoqIEB0eXBlIHtUb3VjaFtdfSAqL1xuICAgIHRoaXMudG91Y2hlcyA9IFtdO1xuXG4gICAgLyoqIEB0eXBlIHt7W2lkOm51bWJlcl06IFRvdWNofX0gKi9cbiAgICB2YXIgdG91Y2hNYXAgPSB0aGlzLnRvdWNoTWFwID0ge307XG5cbiAgICAvLyAzMmJpdCDlkajmnJ/jgadJROOCkuODq+ODvOODl+OBleOBm+OCi1xuICAgIHRoaXMuX2lkID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBlYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihlKSB7XG4gICAgICBlYWNoLmNhbGwoZS5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgdG91Y2ggPSBzZWxmLmdldEVtcHR5KCk7XG4gICAgICAgIHRvdWNoTWFwW3QuaWRlbnRpZmllcl0gPSB0b3VjaDtcbiAgICAgICAgdG91Y2guX3N0YXJ0KHBvaW50WC5nZXQuY2FsbCh0KSwgcG9pbnRZLmdldC5jYWxsKHQpKTtcbiAgICAgICAgLy8gdG91Y2guX3N0YXJ0KHQucG9pbnRYLCB0LnBvaW50WSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVhY2guY2FsbChlLmNoYW5nZWRUb3VjaGVzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBpZCA9IHQuaWRlbnRpZmllcjtcbiAgICAgICAgdmFyIHRvdWNoID0gdG91Y2hNYXBbaWRdO1xuICAgICAgICB0b3VjaC5fZW5kKCk7XG4gICAgICAgIGRlbGV0ZSB0b3VjaE1hcFtpZF07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24oZSkge1xuICAgICAgZWFjaC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHRvdWNoID0gdG91Y2hNYXBbdC5pZGVudGlmaWVyXTtcbiAgICAgICAgdG91Y2guX21vdmUocG9pbnRYLmdldC5jYWxsKHQpLCBwb2ludFkuZ2V0LmNhbGwodCkpO1xuICAgICAgICAvLyB0b3VjaC5fbW92ZSh0LnBvaW50WCwgdC5wb2ludFkpO1xuICAgICAgfSk7XG4gICAgICBzdG9wLmNhbGwoZSk7XG4gICAgfSk7XG5cbiAgICAvLyBpUGhvbmUg44Gn44GvIDbmnKzmjIfku6XkuIrjgr/jg4Pjg4HjgZnjgovjgajlvLfliLbnmoTjgavjgZnjgbnjgabjga7jgr/jg4Pjg4HjgYzop6PpmaTjgZXjgozjgotcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ+OBk+OBruerr+acq+OBp+OBruWQjOaZguOCv+ODg+ODgeaVsOOBruWItumZkOOCkui2heOBiOOBvuOBl+OBn+OAgicpO1xuICAgICAgZWFjaC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGlkID0gdC5pZGVudGlmaWVyO1xuICAgICAgICB2YXIgdG91Y2ggPSB0b3VjaE1hcFtpZF07XG4gICAgICAgIHRvdWNoLl9lbmQoKTtcbiAgICAgICAgZGVsZXRlIHRvdWNoTWFwW2lkXTtcbiAgICAgIH0pO1xuICAgICAgc3RvcC5jYWxsKGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIOepuuOBrlRvdWNo44Kv44Op44K544KS55Sf5oiQ44GX44Gm6L+95Yqg44CB6L+U44GZXG4gICAqIEByZXR1cm5zIHtUb3VjaH1cbiAgICovXG4gIGdldEVtcHR5KCkge1xuICAgIHZhciB0b3VjaCA9IG5ldyBUb3VjaCQxKHRoaXMuZG9tRWxlbWVudCwgdHJ1ZSk7XG4gIFxuICAgIHRvdWNoLmlkID0gdGhpcy5pZDtcbiAgICB0aGlzLnRvdWNoZXMucHVzaCh0b3VjaCk7XG5cbiAgICByZXR1cm4gdG91Y2g7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGlkXG4gICAqIEByZXR1cm5zIHtUb3VjaH1cbiAgICovXG4gIGdldFRvdWNoKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMudG91Y2hNYXBbaWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VG91Y2h9IHRvdWNoXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgcmVtb3ZlVG91Y2godG91Y2gpIHtcbiAgICB2YXIgaSA9IHRoaXMudG91Y2hlcy5pbmRleE9mKHRvdWNoKTtcbiAgICB0aGlzLnRvdWNoZXMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMudG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHRvdWNoKSB7XG4gICAgICBpZiAoIXRvdWNoLnJlbGVhc2VkKSB7XG4gICAgICAgIHRvdWNoLnVwZGF0ZSgpO1xuXG4gICAgICAgIGlmICh0b3VjaC5mbGFncyA9PT0gMCkge1xuICAgICAgICAgIHRvdWNoLnJlbGVhc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRvdWNoLnJlbGVhc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVtb3ZlVG91Y2godG91Y2gpO1xuICAgICAgfVxuXG4gICAgfSwgdGhpcyk7XG4gIH1cblxuICBnZXQgaWQoKSB7IHJldHVybiB0aGlzLl9pZFswXSsrOyB9XG5cbn1cblxuLyoqXG4gKiBHYW1lcGFkIEFQSeaMh+WumuOCpOODs+OCv+ODvOODleOCp+OCpOOCue+8mmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HYW1lcGFkXG4gKiDmt7flkIzlm57pgb/jga7jgZ/jgoHjga7jgqjjgqTjg6rjgqLjgrlcbiAqIEB0eXBlZGVmIHtHYW1lcGFkfSBSYXdHYW1lcGFkXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuaW5wdXQuR2FtZXBhZE1hbmFnZXJcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKiBcbiAqIOOCsuODvOODoOODkeODg+ODieODnuODjeODvOOCuOODo+ODvC5cbiAqIOOCsuODvOODoOODkeODg+ODieaOpee2mueKtuazgeOBruebo+imluOAgeWAi+OAheOBruOCsuODvOODoOODkeODg+ODieOBruWFpeWKm+eKtuaFi+OBruabtOaWsOOCkuihjOOBhi5cbiAqL1xuY2xhc3MgR2FtZXBhZE1hbmFnZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiDkvZzmiJDmuIjjgb9waGluYS5pbnB1dC5HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44Gu44Oq44K544OIXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxudW1iZXIsIFBoaW5hR2FtZXBhZD59XG4gICAgICovXG4gICAgdGhpcy5nYW1lcGFkcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICog5L2c5oiQ5riI44G/44Ky44O844Og44OR44OD44OJ44GuaW5kZXjjga7jg6rjgrnjg4hcbiAgICAgKiBcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqL1xuICAgIHRoaXMuX2NyZWF0ZWQgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIOODqeODg+ODl+WJjUdhbWVwYWTjga7jg6rjgrnjg4hcbiAgICAgKiBcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge1Jhd0dhbWVwYWRbXX1cbiAgICAgKi9cbiAgICB0aGlzLl9yYXdnYW1lcGFkcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogUmF3R2FtZXBhZOOBrnRpbWVzdGFtcOOBqOOBruavlOi8g+eUqFxuICAgICAqIFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxudW1iZXIsIG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5fcHJldlRpbWVzdGFtcHMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEdhbWVwYWTlj5blvpfplqLmlbBcbiAgICAgKiBcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge3R5cGVvZiBOYXZpZ2F0b3IucHJvdG90eXBlLmdldEdhbWVwYWRzIHwgKCgpPT4gdm9pZCl9XG4gICAgICovXG4gICAgdGhpcy5fZ2V0R2FtZXBhZHM7XG5cbiAgICAvKiogQHR5cGUge2dsb2JhbFRoaXN9ICovXG4gICAgdmFyIGdsb2JhbCA9IHBoaW5hLmdsb2JhbDtcbiAgICB2YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcbiAgICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5nZXRHYW1lcGFkcykge1xuICAgICAgdGhpcy5fZ2V0R2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMuYmluZChuYXZpZ2F0b3IpO1xuICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yICYmIC8qKiBAdHlwZSB7YW55fSAqLyhuYXZpZ2F0b3IpWyd3ZWJraXRHZXRHYW1lcGFkcyddKSB7XG4gICAgICB0aGlzLl9nZXRHYW1lcGFkcyA9IC8qKiBAdHlwZSB7YW55fSAqLyhuYXZpZ2F0b3IpWyd3ZWJraXRHZXRHYW1lcGFkcyddLmJpbmQobmF2aWdhdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZ2V0R2FtZXBhZHMgPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cblxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkY29ubmVjdGVkJywgXG4gICAgLyoqIEB0aGlzIEdhbWVwYWRNYW5hZ2VyICovXG4gICAgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGdhbWVwYWQgPSB0aGlzLmdldChlLmdhbWVwYWQuaW5kZXgpO1xuICAgICAgZ2FtZXBhZC5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5mbGFyZSgnY29ubmVjdGVkJywge1xuICAgICAgICBnYW1lcGFkOiBnYW1lcGFkLFxuICAgICAgfSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkZGlzY29ubmVjdGVkJyxcbiAgICAvKiogQHRoaXMgR2FtZXBhZE1hbmFnZXIgKi9cbiAgICBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZ2FtZXBhZCA9IHRoaXMuZ2V0KGUuZ2FtZXBhZC5pbmRleCk7XG4gICAgICBnYW1lcGFkLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5mbGFyZSgnZGlzY29ubmVjdGVkJywge1xuICAgICAgICBnYW1lcGFkOiBnYW1lcGFkLFxuICAgICAgfSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDlh6bnkIZcbiAgICog6KaB5q+O44OV44Os44O844Og5a6f6KGMXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9wb2xsKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gdGhpcy5fY3JlYXRlZC5sZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5fY3JlYXRlZFtpXTtcbiAgICAgIHZhciByYXdnYW1lcGFkID0gdGhpcy5fcmF3Z2FtZXBhZHNbaW5kZXhdO1xuXG4gICAgICBpZiAoIXJhd2dhbWVwYWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyYXdnYW1lcGFkLnRpbWVzdGFtcCAmJiAocmF3Z2FtZXBhZC50aW1lc3RhbXAgPT09IHRoaXMuX3ByZXZUaW1lc3RhbXBzW2ldKSkge1xuICAgICAgICB0aGlzLmdhbWVwYWRzW2luZGV4XS5fdXBkYXRlU3RhdGVFbXB0eSgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcHJldlRpbWVzdGFtcHNbaV0gPSByYXdnYW1lcGFkLnRpbWVzdGFtcDtcbiAgICAgIHRoaXMuZ2FtZXBhZHNbaW5kZXhdLl91cGRhdGVTdGF0ZShyYXdnYW1lcGFkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GV44KM44GfaW5kZXjjga5HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44KS6L+U44GZLlxuICAgKiDmnKrkvZzmiJDjga7loLTlkIjjga/kvZzmiJDjgZfjgabov5TjgZkuXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PTBdXG4gICAqIEByZXR1cm5zIHtQaGluYUdhbWVwYWR9XG4gICAqL1xuICBnZXQoaW5kZXgpIHtcbiAgICBpbmRleCA9IGluZGV4IHx8IDA7XG5cbiAgICBpZiAoIXRoaXMuZ2FtZXBhZHNbaW5kZXhdKSB7XG4gICAgICB0aGlzLl9jcmVhdGVkLnB1c2goaW5kZXgpO1xuICAgICAgdGhpcy5nYW1lcGFkc1tpbmRleF0gPSBuZXcgUGhpbmFHYW1lcGFkKGluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nYW1lcGFkc1tpbmRleF07XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GV44KM44GfaW5kZXjjga5HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44KS56C05qOE44GZ44KLLlxuICAgKiDnoLTmo4TjgZXjgozjgZ9HYW1lcGFk44Kq44OW44K444Kn44Kv44OI44Gv5Lul6ZmN5pu05paw44GV44KM44Gq44GELlxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZGlzcG9zZShpbmRleCkge1xuICAgIGlmIChjb250YWlucy5jYWxsKHRoaXMuX2NyZWF0ZWQsIGluZGV4KSkge1xuICAgIC8vIGlmICh0aGlzLl9jcmVhdGVkLmNvbnRhaW5zKGluZGV4KSkge1xuICAgICAgdmFyIGdhbWVwYWQgPSB0aGlzLmdldChpbmRleCk7XG4gICAgICBkZWxldGUgdGhpcy5nYW1lcGFkc1tpbmRleF07XG4gICAgICBlcmFzZS5jYWxsKHRoaXMuX2NyZWF0ZWQsIGluZGV4KTtcbiAgICAgIC8vIHRoaXMuX2NyZWF0ZWQuZXJhc2UoaW5kZXgpO1xuXG4gICAgICBnYW1lcGFkLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgZXjgozjgZ9pbmRleOOBruOCsuODvOODoOODkeODg+ODieOBjOaOpee2muS4reOBi+OBqeOBhuOBi+OCkui/lOOBmS5cbiAgICogR2FtZXBhZOOCquODluOCuOOCp+OCr+ODiOOBjOacquS9nOaIkOOBruWgtOWQiOOBp+OCguWLleS9nOOBmeOCiy5cbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9MF1cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0Nvbm5lY3RlZChpbmRleCkge1xuICAgIGluZGV4ID0gaW5kZXggfHwgMDtcblxuICAgIHJldHVybiB0aGlzLl9yYXdnYW1lcGFkc1tpbmRleF0gJiYgdGhpcy5fcmF3Z2FtZXBhZHNbaW5kZXhdLmNvbm5lY3RlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3BvbGwoKSB7XG4gICAgdmFyIHJhd0dhbWVwYWRzID0gdGhpcy5fZ2V0R2FtZXBhZHMoKTtcbiAgICBpZiAocmF3R2FtZXBhZHMpIHtcbiAgICAgIGNsZWFyLmNhbGwodGhpcy5fcmF3Z2FtZXBhZHMpO1xuICAgICAgLy8gdGhpcy5fcmF3Z2FtZXBhZHMuY2xlYXIoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHJhd0dhbWVwYWRzLmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIGlmIChyYXdHYW1lcGFkc1tpXSkge1xuICAgICAgICAgIHRoaXMuX3Jhd2dhbWVwYWRzLnB1c2goXG4gICAgICAgICAgICAvKiogQHR5cGUge1Jhd0dhbWVwYWR9ICovIChyYXdHYW1lcGFkc1tpXSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gX3N0YXRpYzoge1xuICAvLyAgIC8qKiDjg5bjg6njgqbjgrbjgYxHYW1lcGFkIEFQSeOBq+WvvuW/nOOBl+OBpuOBhOOCi+OBiy4gKi9cbiAgLy8gICBpc0F2YWlsYWJsZTogKGZ1bmN0aW9uKCkge1xuICAvLyAgICAgdmFyIG5hdiA9IHBoaW5hLmdsb2JhbC5uYXZpZ2F0b3I7XG4gIC8vICAgICBpZiAoIW5hdikgcmV0dXJuIGZhbHNlO1xuXG4gIC8vICAgICByZXR1cm4gKCEhbmF2LmdldEdhbWVwYWRzKSB8fCAoISFuYXYud2Via2l0R2V0R2FtZXBhZHMpO1xuICAvLyAgIH0pKCksXG4gIC8vIH1cblxufVxuXG4vLyBzdGF0aWMgcHJvcHNcbi8qKiDjg5bjg6njgqbjgrbjgYxHYW1lcGFkIEFQSeOBq+WvvuW/nOOBl+OBpuOBhOOCi+OBiy4gKi9cbkdhbWVwYWRNYW5hZ2VyLmlzQXZhaWxhYmxlID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgbmF2ID0gcGhpbmEuZ2xvYmFsLm5hdmlnYXRvcjtcbiAgaWYgKCFuYXYpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gKCEhbmF2LmdldEdhbWVwYWRzKSB8fCAoISFuYXZbJ3dlYmtpdEdldEdhbWVwYWRzJ10pO1xufSkoKTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBoaW5hR2FtZXBhZEJ1dHRvblN0YXRlIGdhbWVwYWTjg5zjgr/jg7Pjg5Hjg6njg6Hjg7zjgr9cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB2YWx1ZSDjg5zjgr/jg7Pjga7nirbmhYvjgpLooajjgZlkb3VibGXlnovjga7mlbDlgKQg5Y+C6ICD77yaaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dhbWVwYWRCdXR0b24vdmFsdWVcbiAqIEBwcm9wZXJ0eSB7Kn0gcHJlc3NlZCAwIHwgMSAoZmFsc2UgfCB0cnVlKVxuICogQHByb3BlcnR5IHsqfSBsYXN0IDAgfCAxIChmYWxzZSB8IHRydWUpXG4gKiBAcHJvcGVydHkgeyp9IGRvd24gMCB8IDEgKGZhbHNlIHwgdHJ1ZSlcbiAqIEBwcm9wZXJ0eSB7Kn0gdXAgMCB8IDEgKGZhbHNlIHwgdHJ1ZSlcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5pbnB1dC5HYW1lcGFkXG4gKiDjgrLjg7zjg6Djg5Hjg4Pjg4lcbiAqXG4gKiDnm7TmjqXjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZvjgZrjgIFwaGluYS5pbnB1dC5HYW1lcGFkTWFuYWdlcuOCquODluOCuOOCp+OCr+ODiOOBi+OCieWPluW+l+OBl+OBpuS9v+eUqOOBmeOCiy5cbiAqIFxuICog4oC7XCJHYW1lcGFkXCLjgajjgYTjgYblkI3liY3jga7jgqTjg7Pjgr/jg7zjg5XjgqfjgqTjgrnjgYzjgZnjgafjgavlrZjlnKjjgZnjgovjgZ/jgoHjgIFcbiAqIO+8iGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HYW1lcGFk77yJXG4gKiDmt7flkIzlm57pgb/jga7jgZ/jgoHjgq/jg6njgrnlkI3jgpLlpInmm7RcbiAqL1xuY2xhc3MgUGhpbmFHYW1lcGFkIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0wXVxuICAgKi9cbiAgY29uc3RydWN0b3IoaW5kZXgpIHtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXggfHwgMDtcblxuICAgIC8qKiBAdHlwZSB7UGhpbmFHYW1lcGFkQnV0dG9uU3RhdGVbXX0gKi9cbiAgICAvLyB0aGlzLmJ1dHRvbnMgPSBBcnJheS5yYW5nZSgwLCAxNikubWFwKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYnV0dG9ucyA9IHJhbmdlLmNhbGwoW10sIDAsIDE2KS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgcHJlc3NlZDogZmFsc2UsXG4gICAgICAgIGxhc3Q6IGZhbHNlLFxuICAgICAgICBkb3duOiBmYWxzZSxcbiAgICAgICAgdXA6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIOOCouODiuODreOCsOOCueODhuOCo+ODg+OCr+WCvuOBjeeuoeeQhueUqFxuICAgICAqIFxuICAgICAqIEB0eXBlIHtWZWN0b3IyW119XG4gICAgICovXG4gICAgdGhpcy5zdGlja3MgPSByYW5nZS5jYWxsKFtdLCAwLCAyKS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgLy8gdGhpcy5zdGlja3MgPSBBcnJheS5yYW5nZSgwLCAyKS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgfSk7XG4gICAgdGhpcy5pZCA9IG51bGw7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm1hcHBpbmcgPSBudWxsO1xuICAgIHRoaXMudGltZXN0YW1wID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5zjgr/jg7PjgYzmirzjgZXjgozjgabjgYTjgovjgYsuXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcnxrZXlvZiB0eXBlb2YgUGhpbmFHYW1lcGFkLkJVVFRPTl9DT0RFfSBidXR0b24g44Oc44K/44Oz44Kz44O844OJ5pWw5YCk44CB44GC44KL44GE44Gv44Op44OZ44Or5paH5a2X5YiXXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0S2V5KGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1dHRvbiA9IFBoaW5hR2FtZXBhZC5CVVRUT05fQ09ERVtidXR0b25dO1xuICAgIH1cbiAgICBpZiAodGhpcy5idXR0b25zW2J1dHRvbl0pIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1dHRvbnNbYnV0dG9uXS5wcmVzc2VkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODnOOCv+ODs+OCkuaKvOOBl+OBny5cbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfGtleW9mIHR5cGVvZiBQaGluYUdhbWVwYWQuQlVUVE9OX0NPREV9IGJ1dHRvbiDjg5zjgr/jg7PjgrPjg7zjg4nmlbDlgKTjgIHjgYLjgovjgYTjga/jg6njg5njg6vmloflrZfliJdcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRLZXlEb3duKGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YoYnV0dG9uKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1dHRvbiA9IFBoaW5hR2FtZXBhZC5CVVRUT05fQ09ERVtidXR0b25dO1xuICAgIH1cbiAgICBpZiAodGhpcy5idXR0b25zW2J1dHRvbl0pIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1dHRvbnNbYnV0dG9uXS5kb3duO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODnOOCv+ODs+OCkumbouOBl+OBny5cbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfGtleW9mIHR5cGVvZiBQaGluYUdhbWVwYWQuQlVUVE9OX0NPREV9IGJ1dHRvbiDjg5zjgr/jg7PjgrPjg7zjg4nmlbDlgKTjgIHjgYLjgovjgYTjga/jg6njg5njg6vmloflrZfliJdcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRLZXlVcChidXR0b24pIHtcbiAgICBpZiAodHlwZW9mKGJ1dHRvbikgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidXR0b24gPSBQaGluYUdhbWVwYWQuQlVUVE9OX0NPREVbYnV0dG9uXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYnV0dG9uc1tidXR0b25dKSB7XG4gICAgICByZXR1cm4gdGhpcy5idXR0b25zW2J1dHRvbl0udXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Y2B5a2X44Kt44O844Gu5YWl5Yqb44GV44KM44Gm44GE44KL5pa55ZCR44KS5bqm5pWw5Y2Y5L2N44Gn6L+U44GZ44CCXG4gICAqIFxuICAgKiBAcmV0dXJucyB7bnVtYmVyIHwgbnVsbH0g44Gp44Gu5pa55ZCR44Gr44KC5b2T44Gm44Gv44G+44KJ44Gq44GE5pmC44GvbnVsbFxuICAgKi9cbiAgZ2V0S2V5QW5nbGUoKSB7XG4gICAgdmFyIGFuZ2xlID0gbnVsbDtcbiAgICB2YXIgYXJyb3dCaXQgPVxuICAgICAgKHRoaXMuZ2V0S2V5KCdsZWZ0JykgPyAxIDogMCA8PCAzKSB8IC8vIDEwMDBcbiAgICAgICh0aGlzLmdldEtleSgndXAnKSA/IDEgOiAwIDw8IDIpIHwgLy8gMDEwMFxuICAgICAgKHRoaXMuZ2V0S2V5KCdyaWdodCcpID8gMSA6IDAgPDwgMSkgfCAvLyAwMDEwXG4gICAgICAodGhpcy5nZXRLZXkoJ2Rvd24nKSA/IDEgOiAwKTsgLy8gMDAwMVxuXG4gICAgaWYgKGFycm93Qml0ICE9PSAwICYmIEFSUk9XX0JJVF9UT19BTkdMRV9UQUJMRS5oYXNPd25Qcm9wZXJ0eShhcnJvd0JpdCkpIHtcbiAgICAgIGFuZ2xlID0gQVJST1dfQklUX1RPX0FOR0xFX1RBQkxFW1xuICAgICAgICAvKiogQHR5cGUge2tleW9mIHR5cGVvZiBBUlJPV19CSVRfVE9fQU5HTEVfVEFCTEV9ICovIChhcnJvd0JpdClcbiAgICAgIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuZ2xlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWNgeWtl+OCreODvOOBruWFpeWKm+OBleOCjOOBpuOBhOOCi+aWueWQkeOCklZlY3RvcjLjgadcbiAgICog5q2j6KaP5YyW44GV44KM44Gm44GE44KLLlxuICAgKiBcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9XG4gICAqL1xuICBnZXRLZXlEaXJlY3Rpb24oKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gICAgaWYgKHRoaXMuZ2V0S2V5KCdsZWZ0JykpIHtcbiAgICAgIGRpcmVjdGlvbi54ID0gLTE7XG4gICAgfSBlbHNlIGlmICh0aGlzLmdldEtleSgncmlnaHQnKSkge1xuICAgICAgZGlyZWN0aW9uLnggPSAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5nZXRLZXkoJ3VwJykpIHtcbiAgICAgIGRpcmVjdGlvbi55ID0gLTE7XG4gICAgfSBlbHNlIGlmICh0aGlzLmdldEtleSgnZG93bicpKSB7XG4gICAgICBkaXJlY3Rpb24ueSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbi54ICYmIGRpcmVjdGlvbi55KSB7XG4gICAgICBkaXJlY3Rpb24uZGl2KE1hdGguU1FSVDIpO1xuICAgIH1cblxuICAgIHJldHVybiBkaXJlY3Rpb247XG4gIH1cblxuICAvKipcbiAgICog44K544OG44Kj44OD44Kv44Gu5YWl5Yqb44GV44KM44Gm44GE44KL5pa55ZCRLlxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGlja0lkPTBdXG4gICAqIEByZXR1cm5zIHtudW1iZXIgfCBudWxsfSDlr77lv5zjgZnjgovjgrnjg4bjgqPjg4Pjgq/jgYzjgarjgYTloLTlkIjjga9udWxsXG4gICAqL1xuICBnZXRTdGlja0FuZ2xlKHN0aWNrSWQpIHtcbiAgICBzdGlja0lkID0gc3RpY2tJZCB8fCAwO1xuICAgIHZhciBzdGljayA9IHRoaXMuc3RpY2tzW3N0aWNrSWRdO1xuICAgIHJldHVybiBzdGljayA/IE1hdGguYXRhbjIoLXN0aWNrLnksIHN0aWNrLngpIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjg4bjgqPjg4Pjgq/jga7lhaXlipvjgZXjgozjgabjgYTjgovmlrnlkJHjgpJWZWN0b3Iy44Gn5Y+W5b6XXG4gICAqIFxuICAgKiBWZWN0b3Iy44Gv5Y+C54Wn44Gn44Gv44Gq44GP44CB6KSH6KO944GV44KM44Gm6L+U5Y2044GV44KM44KLXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0aWNrSWQ9MF0g55yB55Wl44GZ44KL44GoMO+8iOmAmuW4uOW3puOCouODiuODreOCsOOCueODhuOCo+ODg+OCr+OBq+WvvuW/nOOBmeOCi2lk77yJ44Go44Gq44KLXG4gICAqIEByZXR1cm5zIHtWZWN0b3IyfSDlr77lv5zjgZnjgovjgrnjg4bjgqPjg4Pjgq/jgYzlrZjlnKjjgZfjgarjgYTloLTlkIjjga/liJ3mnJ/ljJbjgZfjgZ9WZWN0b3Iy44KS6L+U5Y20XG4gICAqL1xuICBnZXRTdGlja0RpcmVjdGlvbihzdGlja0lkKSB7XG4gICAgc3RpY2tJZCA9IHN0aWNrSWQgfHwgMDtcbiAgICByZXR1cm4gdGhpcy5zdGlja3MgPyB0aGlzLnN0aWNrc1tzdGlja0lkXS5jbG9uZSgpIDogbmV3IFZlY3RvcjIoMCwgMCk7XG4gIH1cblxuICAvKipcbiAgICogQHB1YmxpYyBHYW1lcGFkTWFuYWdlcuOBi+OCieOCouOCr+OCu+OCuVxuICAgKiBAcGFyYW0ge1Jhd0dhbWVwYWR9IGdhbWVwYWRcbiAgICovXG4gIF91cGRhdGVTdGF0ZShnYW1lcGFkKSB7XG4gICAgdGhpcy5pZCA9IGdhbWVwYWQuaWQ7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBnYW1lcGFkLmNvbm5lY3RlZDtcbiAgICB0aGlzLm1hcHBpbmcgPSBnYW1lcGFkLm1hcHBpbmc7XG4gICAgdGhpcy50aW1lc3RhbXAgPSBnYW1lcGFkLnRpbWVzdGFtcDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpZW5kID0gZ2FtZXBhZC5idXR0b25zLmxlbmd0aDsgaSA8IGllbmQ7IGkrKykge1xuICAgICAgdGhpcy5fdXBkYXRlQnV0dG9uKGdhbWVwYWQuYnV0dG9uc1tpXSwgaSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGplbmQgPSBnYW1lcGFkLmF4ZXMubGVuZ3RoOyBqIDwgamVuZDsgaiArPSAyKSB7XG4gICAgICB0aGlzLl91cGRhdGVTdGljayhnYW1lcGFkLmF4ZXNbaiArIDBdLCBqIC8gMiwgJ3gnKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVN0aWNrKGdhbWVwYWQuYXhlc1tqICsgMV0sIGogLyAyLCAneScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5zjgr/jg7Pjga7lhaXlipvnirbmhYvjgpLjg6rjgrvjg4Pjg4hcbiAgICogXG4gICAqIEBwdWJsaWMgR2FtZXBhZE1hbmFnZXLjgYvjgonjgqLjgq/jgrvjgrlcbiAgICovXG4gIF91cGRhdGVTdGF0ZUVtcHR5KCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpZW5kID0gdGhpcy5idXR0b25zLmxlbmd0aDsgaSA8IGllbmQ7IGkrKykge1xuICAgICAgdGhpcy5idXR0b25zW2ldLmRvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuYnV0dG9uc1tpXS51cCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gICAvKipcbiAgICAqIEBwcm90ZWN0ZWRcbiAgICAqIEBwYXJhbSB7bnVtYmVyIHwgR2FtZXBhZEJ1dHRvbn0gdmFsdWVcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBidXR0b25JZFxuICAgICovXG4gICBfdXBkYXRlQnV0dG9uKHZhbHVlLCBidXR0b25JZCkge1xuICAgIGlmICh0aGlzLmJ1dHRvbnNbYnV0dG9uSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuYnV0dG9uc1tidXR0b25JZF0gPSB7XG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICBwcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgbGFzdDogZmFsc2UsXG4gICAgICAgIGRvd246IGZhbHNlLFxuICAgICAgICB1cDogZmFsc2UsXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICB2YXIgYnV0dG9uID0gdGhpcy5idXR0b25zW2J1dHRvbklkXTtcblxuICAgIGJ1dHRvbi5sYXN0ID0gYnV0dG9uLnByZXNzZWQ7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgYnV0dG9uLnZhbHVlID0gdmFsdWUudmFsdWU7XG4gICAgICBidXR0b24ucHJlc3NlZCA9IHZhbHVlLnByZXNzZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1dHRvbi52YWx1ZSA9IHZhbHVlO1xuICAgICAgYnV0dG9uLnByZXNzZWQgPSB2YWx1ZSA+IFBoaW5hR2FtZXBhZC5BTkFMT0dVRV9CVVRUT05fVEhSRVNIT0xEO1xuICAgIH1cblxuICAgIGJ1dHRvbi5kb3duID0gKGJ1dHRvbi5wcmVzc2VkIF4gYnV0dG9uLmxhc3QpICYgYnV0dG9uLnByZXNzZWQ7XG4gICAgYnV0dG9uLnVwID0gKGJ1dHRvbi5wcmVzc2VkIF4gYnV0dG9uLmxhc3QpICYgYnV0dG9uLmxhc3Q7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0aWNrSWRcbiAgICogQHBhcmFtIHtcInhcInxcInlcIn0gYXhpc05hbWVcbiAgICovXG4gIF91cGRhdGVTdGljayh2YWx1ZSwgc3RpY2tJZCwgYXhpc05hbWUpIHtcbiAgICBpZiAodGhpcy5zdGlja3Nbc3RpY2tJZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdGlja3Nbc3RpY2tJZF0gPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICB9XG4gICAgdGhpcy5zdGlja3Nbc3RpY2tJZF1bYXhpc05hbWVdID0gdmFsdWU7XG4gIH1cblxufVxuXG4vKiog44OW44Op44Km44K244GMR2FtZXBhZCBBUEnjgavlr77lv5zjgZfjgabjgYTjgovjgYsuICovXG5QaGluYUdhbWVwYWQuaXNBdmFpbGFibGUgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBuYXYgPSBwaGluYS5nbG9iYWwubmF2aWdhdG9yO1xuICBpZiAoIW5hdikgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiAoISFuYXYuZ2V0R2FtZXBhZHMpIHx8ICghIW5hdlsnd2Via2l0R2V0R2FtZXBhZHMnXSk7XG59KSgpO1xuXG4vKiog44Ki44OK44Ot44Kw5YWl5Yqb5a++5b+c44Gu44Oc44K/44Oz44Gu5aC05ZCI44CB44Gp44Gu56iL5bqm44G+44Gn5oq844GX6L6844KA44Gob27jgavjgarjgovjgYvjgpLooajjgZnjgZfjgY3jgYTlgKQuICovXG5QaGluYUdhbWVwYWQuQU5BTE9HVUVfQlVUVE9OX1RIUkVTSE9MRCA9IDAuNTtcblxuLyoqIOODnOOCv+ODs+WQjeOBqOODnOOCv+ODs0lE44Gu44Oe44OD44OXLiAqL1xuUGhpbmFHYW1lcGFkLkJVVFRPTl9DT0RFID0ge1xuICAnYSc6IDAsXG4gICdiJzogMSxcbiAgJ3gnOiAyLFxuICAneSc6IDMsXG5cbiAgJ2wxJzogNCxcbiAgJ3IxJzogNSxcbiAgJ2wyJzogNixcbiAgJ3IyJzogNyxcblxuICAnc2VsZWN0JzogOCxcbiAgJ3N0YXJ0JzogOSxcblxuICAnbDMnOiAxMCxcbiAgJ3IzJzogMTEsXG5cbiAgJ3VwJzogMTIsXG4gICdkb3duJzogMTMsXG4gICdsZWZ0JzogMTQsXG4gICdyaWdodCc6IDE1LFxuXG4gICdzcGVjaWFsJzogMTYsXG5cbiAgJ0EnOiAwLFxuICAnQic6IDEsXG4gICdYJzogMixcbiAgJ1knOiAzLFxuXG4gICdMMSc6IDQsXG4gICdSMSc6IDUsXG4gICdMMic6IDYsXG4gICdSMic6IDcsXG5cbiAgJ1NFTEVDVCc6IDgsXG4gICdTVEFSVCc6IDksXG5cbiAgJ0wzJzogMTAsXG4gICdSMyc6IDExLFxuXG4gICdVUCc6IDEyLFxuICAnRE9XTic6IDEzLFxuICAnTEVGVCc6IDE0LFxuICAnUklHSFQnOiAxNSxcblxuICAnU1BFQ0lBTCc6IDE2LFxufTtcblxudmFyIEFSUk9XX0JJVF9UT19BTkdMRV9UQUJMRSA9IHtcbiAgMHgwMDogbnVsbCxcblxuICAvKiBAcHJvcGVydHkg5LiLICovXG4gIDB4MDE6IDI3MCxcbiAgLyogQHByb3BlcnR5IOWPsyAqL1xuICAweDAyOiAwLFxuICAvKiBAcHJvcGVydHkg5LiKICovXG4gIDB4MDQ6IDkwLFxuICAvKiBAcHJvcGVydHkg5bemICovXG4gIDB4MDg6IDE4MCxcblxuICAvKiBAcHJvcGVydHkg5Y+z5LiKICovXG4gIDB4MDY6IDQ1LFxuICAvKiBAcHJvcGVydHkg5Y+z5LiLICovXG4gIDB4MDM6IDMxNSxcbiAgLyogQHByb3BlcnR5IOW3puS4iiAqL1xuICAweDBjOiAxMzUsXG4gIC8qIEBwcm9wZXJ0eSDlt6bkuIsgKi9cbiAgMHgwOTogMjI1LFxuXG4gIC8vIOS4ieaWueWQkeWQjOaZguaKvOOBl+WvvuW/nFxuICAvLyDmg7PlrprlpJbjga7mk43kvZzjgaDjgYzlr77lv5zjgZfjgajjgYTjgZ/jgbvjgYbjgYznhKHpm6NcbiAgLyogQHByb3BlcnR5IOWPs+S4iuW3piAqL1xuICAweDBlOiA5MCxcbiAgLyogQHByb3BlcnR5IOS4iuW3puS4iyAqL1xuICAweDBkOiAxODAsXG4gIC8qIEBwcm9wZXJ0eSDlt6bkuIvlj7MgKi9cbiAgMHgwYjogMjcwLFxuICAvKiBAcHJvcGVydHkg5LiL5Y+z5LiKICovXG4gIDB4MDc6IDAsXG59O1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5pbnB1dC5BY2NlbGVyb21ldGVyXG4gKiDjgrnjg57jg7zjg4jjg5Xjgqnjg7Pjga7jgrvjg7PjgrXjg7zmg4XloLFcbiAqL1xuY2xhc3MgQWNjZWxlcm9tZXRlciB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8qKiBAcHJvcGVydHkgIGdyYXZpdHkg6YeN5Yqb44K744Oz44K144O8ICovXG4gICAgdGhpcy5ncmF2aXR5ICAgICAgICA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuXG4gICAgLyoqIEBwcm9wZXJ0eSAgYWNjZWxlcmF0aW9uIOWKoOmAn+W6puOCu+ODs+OCteODvCAqL1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uICAgPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcblxuICAgIC8qKiBAcHJvcGVydHkgIHJvdGF0aW9uIOWbnui7ouWKoOmAn+W6puOCu+ODs+OCteODvCAqL1xuICAgIHRoaXMucm90YXRpb24gICAgICAgPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcblxuICAgIC8qKiBAcHJvcGVydHkgIG9yaWVudGF0aW9uIOOCueODnuODvOODiOODleOCqeODs+OBruWCvuOBjSAqL1xuICAgIHRoaXMub3JpZW50YXRpb24gICAgPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcblxuICAgIGlmIChwaGluYS5pc01vYmlsZSgpKSB7XG4gICAgICBwaGluYS5nbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZW1vdGlvblwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBhY2NlbGVyYXRpb24gPSBzZWxmLmFjY2VsZXJhdGlvbjtcbiAgICAgICAgdmFyIGdyYXZpdHkgPSBzZWxmLmdyYXZpdHk7XG4gICAgICAgIHZhciByb3RhdGlvbiA9IHNlbGYucm90YXRpb247XG4gICAgICAgIFxuICAgICAgICBpZiAoZS5hY2NlbGVyYXRpb24pIHtcbiAgICAgICAgICBhY2NlbGVyYXRpb24ueCA9IGUuYWNjZWxlcmF0aW9uLng7XG4gICAgICAgICAgYWNjZWxlcmF0aW9uLnkgPSBlLmFjY2VsZXJhdGlvbi55O1xuICAgICAgICAgIGFjY2VsZXJhdGlvbi56ID0gZS5hY2NlbGVyYXRpb24uejtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5KSB7XG4gICAgICAgICAgZ3Jhdml0eS54ID0gZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lng7XG4gICAgICAgICAgZ3Jhdml0eS55ID0gZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lnk7XG4gICAgICAgICAgZ3Jhdml0eS56ID0gZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lno7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUucm90YXRpb25SYXRlKSB7XG4gICAgICAgICAgcm90YXRpb24ueCA9IHJvdGF0aW9uLmJldGEgID0gZS5yb3RhdGlvblJhdGUuYmV0YTtcbiAgICAgICAgICByb3RhdGlvbi55ID0gcm90YXRpb24uZ2FtbWEgPSBlLnJvdGF0aW9uUmF0ZS5nYW1tYTtcbiAgICAgICAgICByb3RhdGlvbi56ID0gcm90YXRpb24uYWxwaGEgPSBlLnJvdGF0aW9uUmF0ZS5hbHBoYTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlb3JpZW50YXRpb25cIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgb3JpZW50YXRpb24gPSBzZWxmLm9yaWVudGF0aW9uO1xuICAgICAgICBvcmllbnRhdGlvbi5hbHBoYSAgID0gZS5hbHBoYTsgIC8vIHooMH4zNjApXG4gICAgICAgIG9yaWVudGF0aW9uLmJldGEgICAgPSBlLmJldGE7ICAgLy8geCgtMTgwfjE4MClcbiAgICAgICAgb3JpZW50YXRpb24uZ2FtbWEgICA9IGUuZ2FtbWE7ICAvLyB5KC05MH45MClcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFwcC5VcGRhdGVyXG4gKi9cbmNsYXNzIFVwZGF0ZXIge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ2FtZS9nYW1lYXBwJykuQXBwVW5pb259IGFwcFxuICAgKi9cbiAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2FwcC9zY2VuZScpLlNjZW5lfSByb290IFxuICAgKi9cbiAgdXBkYXRlKHJvb3QpIHtcbiAgICB0aGlzLl91cGRhdGVFbGVtZW50KHJvb3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAvZWxlbWVudCcpLkVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIF91cGRhdGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgYXBwID0gdGhpcy5hcHA7XG5cbiAgICAvLyDmm7TmlrDjgZnjgovjgYvjgpLliKTlrppcbiAgICBpZiAoZWxlbWVudC5hd2FrZSA9PT0gZmFsc2UpIHJldHVybiA7XG5cbiAgICAvLyDjgqjjg7Pjgr/jg7zjg5Xjg6zjg7zjg6DjgqTjg5njg7Pjg4hcbiAgICBpZiAoZWxlbWVudC5oYXMoJ2VudGVyZnJhbWUnKSkge1xuICAgICAgZWxlbWVudC5mbGFyZSgnZW50ZXJmcmFtZScsIHtcbiAgICAgICAgYXBwOiB0aGlzLmFwcCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIOabtOaWsFxuICAgIGlmIChlbGVtZW50LnVwZGF0ZSkgZWxlbWVudC51cGRhdGUoYXBwKTtcblxuICAgIC8vIOWtkOS+m+OCkuabtOaWsFxuICAgIHZhciBsZW4gPSBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAoZWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGVtcENoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGxlbjsgKytpKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUVsZW1lbnQodGVtcENoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEludGVyYWN0aXZl44Kv44Op44K544GuYXBw44Go44GX44Gm5b+F6KaB44Gq44OX44Ot44OR44OG44KjXG4gKiBAdHlwZWRlZiB7e1xuICogICBvbjogdHlwZW9mIGltcG9ydCgnLi4vdXRpbC9ldmVudGRpc3BhdGNoZXInKS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLm9uXG4gKiAgIGRvbUVsZW1lbnQ/OiBIVE1MQ2FudmFzRWxlbWVudFxuICogICBwb2ludGVyPzogaW1wb3J0KCcuLi9kaXNwbGF5L2RvbWFwcCcpLlBvaW50ZXJcbiAqICAgcG9pbnRlcnM/OiBpbXBvcnQoJy4uL2Rpc3BsYXkvZG9tYXBwJykuUG9pbnRlcltdXG4gKiB9fSBJbnRlcmFjdGFibGVBcHBcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hcHAuSW50ZXJhY3RpdmVcbiAqL1xuY2xhc3MgSW50ZXJhY3RpdmUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ludGVyYWN0YWJsZUFwcH0gYXBwIFxuICAgKi9cbiAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5fZW5hYmxlID0gdHJ1ZTtcbiAgICB0aGlzLm11bHRpVG91Y2ggPSB0cnVlO1xuICAgIHRoaXMuY3Vyc29yID0ge1xuICAgICAgbm9ybWFsOiAnJyxcbiAgICAgIGhvdmVyOiAncG9pbnRlcicsXG4gICAgfTtcblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL29iamVjdDJkJykuT2JqZWN0MkRbXX0gKi9cbiAgICB0aGlzLl9ob2xkcyA9IFtdO1xuICAgIHRoaXMuYXBwLm9uKCdjaGFuZ2VzY2VuZScsIGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXIuY2FsbCh0aGlzLl9ob2xkcyk7XG4gICAgICAvLyB0aGlzLl9ob2xkcy5jbGVhcigpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBlbmFibGUoKSB7XG4gICAgdGhpcy5fZW5hYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5fZW5hYmxlID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a6KaB57Sg44Gu44Kk44Oz44K/44Op44Kv44K344On44Oz44OB44Kn44OD44Kv6ZaL5aeLICBcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4vZWxlbWVudCcpLkVsZW1lbnQgfCBpbXBvcnQoJy4vb2JqZWN0MmQnKS5PYmplY3QyRH0gcm9vdCBTY2VuZeOCr+ODqeOCueOBq+a4oeOBleOCjOOCi+OBn+OCgVxuICAgKi9cbiAgY2hlY2socm9vdCkge1xuICAgIC8vIOOCq+ODvOOCveODq+OBruOCueOCv+OCpOODq+OCkuWPjeaYoFxuICAgIGlmICh0aGlzLmFwcC5kb21FbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faG9sZHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmFwcC5kb21FbGVtZW50LnN0eWxlLmN1cnNvciA9IHRoaXMuY3Vyc29yLmhvdmVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwLmRvbUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gdGhpcy5jdXJzb3Iubm9ybWFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5fZW5hYmxlIHx8ICF0aGlzLmFwcC5wb2ludGVycykgcmV0dXJuIDtcbiAgICB0aGlzLl9jaGVja0VsZW1lbnQocm9vdCk7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a6KaB57Sg44Gu44Kk44Oz44K/44Op44Kv44K344On44Oz44OB44Kn44OD44KvICBcbiAgICog5a2Q5L6b44GM44GE44KM44Gw5YaN5biw5Yem55CGXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuL2VsZW1lbnQnKS5FbGVtZW50IHwgaW1wb3J0KCcuL29iamVjdDJkJykuT2JqZWN0MkR9IGVsZW1lbnQgXG4gICAqL1xuICBfY2hlY2tFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgYXBwID0gdGhpcy5hcHA7XG5cbiAgICAvLyDmm7TmlrDjgZnjgovjgYvjgpLliKTlrppcbiAgICBpZiAoZWxlbWVudC5hd2FrZSA9PT0gZmFsc2UpIHJldHVybiA7XG5cbiAgICAvLyDlrZDkvpvjgpLmm7TmlrBcbiAgICB2YXIgbGVuID0gZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHRlbXBDaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4uc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxsZW47ICsraSkge1xuICAgICAgICB0aGlzLl9jaGVja0VsZW1lbnQodGVtcENoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjgr/jg4Pjg4HliKTlrppcbiAgICB0aGlzLl9jaGVja1BvaW50KGVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgeWIpOWumuOCkuihjOOBhlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9lbGVtZW50JykuRWxlbWVudCB8IGltcG9ydCgnLi9vYmplY3QyZCcpLk9iamVjdDJEfSBvYmogXG4gICAqL1xuICBfY2hlY2tQb2ludChvYmopIHtcbiAgICB2YXIgX29iaiA9IC8qKiBAdHlwZSB7aW1wb3J0KCcuL29iamVjdDJkJykuT2JqZWN0MkR9ICovKG9iaik7XG4gICAgaWYgKHRoaXMubXVsdGlUb3VjaCkge1xuICAgICAgdGhpcy5hcHAucG9pbnRlcnMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICAgIGlmIChwLmlkICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fX2NoZWNrUG9pbnQoX29iaiwgcCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX19jaGVja1BvaW50KF9vYmosIHRoaXMuYXBwLnBvaW50ZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9vYmplY3QyZCcpLk9iamVjdDJEfSBvYmpcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2Rpc3BsYXkvZG9tYXBwJykuUG9pbnRlcn0gcFxuICAgKi9cbiAgX19jaGVja1BvaW50KG9iaiwgcCkge1xuICAgIGlmICghb2JqLmludGVyYWN0aXZlKSByZXR1cm4gO1xuXG4gICAgdmFyIHByZXZPdmVyRmxhZyA9IG9iai5fb3ZlckZsYWdzW3AuaWRdO1xuICAgIHZhciBvdmVyRmxhZyA9IG9iai5oaXRUZXN0KHAueCwgcC55KTtcbiAgICBvYmouX292ZXJGbGFnc1twLmlkXSA9IG92ZXJGbGFnO1xuXG4gICAgdmFyIGUgPSB7XG4gICAgICBwb2ludGVyOiBwLFxuICAgICAgaW50ZXJhY3RpdmU6IHRoaXMsXG4gICAgICBvdmVyOiBvdmVyRmxhZyxcbiAgICB9O1xuXG4gICAgaWYgKCFwcmV2T3ZlckZsYWcgJiYgb3ZlckZsYWcpIHtcbiAgICAgIG9iai5mbGFyZSgncG9pbnRvdmVyJywgZSk7XG5cbiAgICAgIGlmIChvYmouYm91bmRpbmdUeXBlICYmIG9iai5ib3VuZGluZ1R5cGUgIT09ICdub25lJykge1xuICAgICAgICB0aGlzLl9ob2xkcy5wdXNoKG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2T3ZlckZsYWcgJiYgIW92ZXJGbGFnKSB7XG4gICAgICBvYmouZmxhcmUoJ3BvaW50b3V0JywgZSk7XG4gICAgICAvLyB0aGlzLl9ob2xkcy5lcmFzZShvYmopO1xuICAgICAgZXJhc2UuY2FsbCh0aGlzLl9ob2xkcywgb2JqKTtcbiAgICB9XG5cbiAgICBpZiAob3ZlckZsYWcpIHtcbiAgICAgIGlmIChwLmdldFBvaW50aW5nU3RhcnQoKSkge1xuICAgICAgICBvYmouX3RvdWNoRmxhZ3NbcC5pZF0gPSB0cnVlO1xuICAgICAgICBvYmouZmxhcmUoJ3BvaW50c3RhcnQnLCBlKTtcbiAgICAgICAgLy8g44Kv44Oq44OD44Kv44OV44Op44Kw44KS56uL44Gm44KLXG4gICAgICAgIG9iai5fY2xpY2tlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9iai5fdG91Y2hGbGFnc1twLmlkXSkge1xuICAgICAgb2JqLmZsYXJlKCdwb2ludHN0YXknLCBlKTtcbiAgICAgIGlmIChwLl9tb3ZlRmxhZykge1xuICAgICAgICBvYmouZmxhcmUoJ3BvaW50bW92ZScsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvYmouX3RvdWNoRmxhZ3NbcC5pZF09PT10cnVlICYmIHAuZ2V0UG9pbnRpbmdFbmQoKSkge1xuICAgICAgb2JqLl90b3VjaEZsYWdzW3AuaWRdID0gZmFsc2U7XG4gICAgICBvYmouZmxhcmUoJ3BvaW50ZW5kJywgZSk7XG5cbiAgICAgIGlmIChwaGluYS5pc01vYmlsZSgpICYmIG9iai5fb3ZlckZsYWdzW3AuaWRdKSB7XG4gICAgICAgIG9iai5fb3ZlckZsYWdzW3AuaWRdID0gZmFsc2U7XG4gICAgICAgIG9iai5mbGFyZSgncG9pbnRvdXQnLCBlKTtcbiAgICAgICAgLy8gdGhpcy5faG9sZHMuZXJhc2Uob2JqKTtcbiAgICAgICAgZXJhc2UuY2FsbCh0aGlzLl9ob2xkcywgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEFjY2Vzc29yeeOBrnRhcmdldOODl+ODreODkeODhuOCo+OBqOOBl+OBpuacgOS9jumZkOOBi+OBqeOBhuOBi1xuICogQHR5cGVkZWYge3tcbiAqICAgZGV0YWNoOiAoYWNjZXNzb3I6IEFjY2Vzc29yeSk9PiBhbnlcbiAqICAgW2s6IHN0cmluZ106IGFueVxuICogfX0gQWNjZXNzb3J5VGFyZ2V0XG4gKi9cblxuLyoqXG4gKiBBY2Nlc3NvcnnjgqLjgr/jg4Pjg4Hlj6/og73jgqrjg5bjgrjjgqfjgq/jg4hcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGF0dGFjaDogKGFjY2Vzc29yOiBBY2Nlc3NvcnkpPT4gYW55XG4gKiB9ICYgQWNjZXNzb3J5VGFyZ2V0IH0gQWNjZXNzb3J5QXR0YWNoYWJsZVxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFjY2Vzc29yeS5BY2Nlc3NvcnlcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIEFjY2Vzc29yeSBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0FjY2Vzc29yeVRhcmdldH0gW3RhcmdldF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiDmk43kvZzlr77osaFcbiAgICAgKiBAdHlwZSB7QWNjZXNzb3J5VGFyZ2V0IHwgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOmWouaVsFxuICAgKiDjgqLjgr/jg4Pjg4HjgZfjgZ90YXJnZXTjga5lbnRlcmZyYW1l44Kk44OZ44Oz44OI44KS57WM55Sx44GX44GmXG4gICAqIOavjuODleODrOODvOODoOWun+ihjOOBleOCjOOCi1xuICAgKiBcbiAgICog5Li744Gr44K144OW44Kv44Op44K544Gn5ouh5by144GX44GmQWNjZXNzb3J544Go44GX44Gm44Gu54m55b6044Gl44GR44KS6KGM44GGXG4gICAqIFxuICAgKiBAdmlydHVhbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7Kn0gX2FwcCBBcHDjgq/jg6njgrnjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHVwZGF0ZShfYXBwKSB7fVxuXG4gIC8qKlxuICAgKiDmk43kvZzlr77osaHjgpLoqK3lrppcbiAgICogXG4gICAqIEBwYXJhbSB7QWNjZXNzb3J5VGFyZ2V0fSB0YXJnZXRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRUYXJnZXQodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0YXJnZXQpIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Ki44K/44OD44OB5a++6LGh44KS6L+U44GZXG4gICAqIFxuICAgKiBAcmV0dXJucyB7QWNjZXNzb3J5VGFyZ2V0IHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0VGFyZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjgr/jg4Pjg4Hlr77osaHjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYtcbiAgICogXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNBdHRhY2hlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLnRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlr77osaHjgavoh6rouqvjgpLjgqLjgr/jg4Pjg4HjgZXjgZvjgotcbiAgICogXG4gICAqIEB0ZW1wbGF0ZSB7QWNjZXNzb3J5QXR0YWNoYWJsZX0gVFxuICAgKiBAcGFyYW0ge1R9IGVsZW1lbnRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBhdHRhY2hUbyhlbGVtZW50KSB7XG4gICAgZWxlbWVudC5hdHRhY2godGhpcyk7XG4gICAgdGhpcy5zZXRUYXJnZXQoZWxlbWVudCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogdGFyZ2V044Gr6Ieq6Lqr44G444Gu44Ki44K/44OD44OB44KS5aSW44GV44Gb44CBdGFyZ2V05Y+C54Wn44KS5YiH44KLXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHJlbW92ZSgpIHtcbiAgICBpZiAoIXRoaXMudGFyZ2V0KSByZXR1cm47XG4gICAgdGhpcy50YXJnZXQuZGV0YWNoKHRoaXMpO1xuICAgIHRoaXMudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICB9XG5cbn1cblxuLy8gRWxlbWVudOWBtOOBp+aLoeW8tVxuLy8gcGhpbmEuYXBwLkVsZW1lbnQucHJvdG90eXBlLiRtZXRob2QoJ2F0dGFjaCcsIGZ1bmN0aW9uKGFjY2Vzc29yeSkge1xuLy8gICBpZiAoIXRoaXMuYWNjZXNzb3JpZXMpIHtcbi8vICAgICB0aGlzLmFjY2Vzc29yaWVzID0gW107XG4vLyAgICAgdGhpcy5vbignZW50ZXJmcmFtZScsIGZ1bmN0aW9uKGUpIHtcbi8vICAgICAgIHRoaXMuYWNjZXNzb3JpZXMuZWFjaChmdW5jdGlvbihhY2Nlc3NvcnkpIHtcbi8vICAgICAgICAgYWNjZXNzb3J5LnVwZGF0ZSAmJiBhY2Nlc3NvcnkudXBkYXRlKGUuYXBwKTtcbi8vICAgICAgIH0pO1xuLy8gICAgIH0pO1xuLy8gICB9XG5cbi8vICAgdGhpcy5hY2Nlc3Nvcmllcy5wdXNoKGFjY2Vzc29yeSk7XG4vLyAgIGFjY2Vzc29yeS5zZXRUYXJnZXQodGhpcyk7XG4vLyAgIGFjY2Vzc29yeS5mbGFyZSgnYXR0YWNoZWQnKTtcblxuLy8gICByZXR1cm4gdGhpcztcbi8vIH0pO1xuXG4vLyBwaGluYS5hcHAuRWxlbWVudC5wcm90b3R5cGUuJG1ldGhvZCgnZGV0YWNoJywgZnVuY3Rpb24oYWNjZXNzb3J5KSB7XG4vLyAgIGlmICh0aGlzLmFjY2Vzc29yaWVzKSB7XG4vLyAgICAgdGhpcy5hY2Nlc3Nvcmllcy5lcmFzZShhY2Nlc3NvcnkpO1xuLy8gICAgIGFjY2Vzc29yeS5zZXRUYXJnZXQobnVsbCk7XG4vLyAgICAgYWNjZXNzb3J5LmZsYXJlKCdkZXRhY2hlZCcpO1xuLy8gICB9XG5cbi8vICAgcmV0dXJuIHRoaXM7XG4vLyB9KTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7XCJub3JtYWxcIiB8IFwiZGVsdGFcIiB8IFwiZnBzXCJ9IFR3ZWVuZXJVcGRhdGVUeXBlIHR3ZWVuZXLmm7TmlrDjgr/jgqTjg5dcbiAqIFxuICogQHR5cGVkZWYge1widG9cIiB8IFwiYnlcIiB8IFwiZnJvbVwifSBUd2VlbmVyVGFza01vZGUgdHdlZW5lcuOCv+OCueOCr+ODouODvOODiVxuICogXG4gKiBAdHlwZWRlZiB7e1xuICogICB0eXBlOiBcInR3ZWVuXCIsXG4gKiAgIG1vZGU6IFR3ZWVuZXJUYXNrTW9kZSxcbiAqICAgcHJvcHM6IE9iamVjdCxcbiAqICAgZHVyYXRpb24/OiBudW1iZXIsXG4gKiAgIGVhc2luZz86IGltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlLFxuICogfX0gVHdlZW5UeXBlVGFza1BhcmFtIFR3ZWVu44Kv44Op44K544KS5L2/55So44GZ44KL44K/44K544Kv44Gu6Kit5a6a55So44OR44Op44Oh44O844K/XG4gKiBcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHR5cGU6IFwid2FpdFwiIHwgXCJjYWxsXCIgfCBcInNldFwiLFxuICogICBkYXRhOiB7W2tleTogc3RyaW5nXTogYW55fVxuICogfX0gQ29tbW9uVHlwZVRhc2tQYXJhbSDjgZ3jga7ku5bjga7msY7nlKjjgr/jgrnjgq/nlKjjg5Hjg6njg6Hjg7zjgr9cbiAqIFxuICogQHR5cGVkZWYge1R3ZWVuVHlwZVRhc2tQYXJhbSB8IENvbW1vblR5cGVUYXNrUGFyYW19IFRhc2tQYXJhbVVuaW9uXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYWNjZXNzb3J5LlR3ZWVuZXJcbiAqICMgVHdlZW5lclxuICogVHdlZW5lcuOBr+OCquODluOCuOOCp+OCr+ODiOOBruODl+ODreODkeODhuOCo+OBq+WvvuOBl+OBpuOAgVxuICogVHdlZW7jgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjga7lirnmnpzjgpLkuI7jgYjjgovjgq/jg6njgrnjgafjgZnjgIIgIFxuICog5Li744GrIHtAbGluayBwaGluYS5hcHAuRWxlbWVudH0g44Go44Gd44Gu44K144OW44Kv44Op44K544Gn5L2/55So44GV44KM44G+44GZ44CCXG4gKiBfZXh0ZW5kcyBwaGluYS5hY2Nlc3NvcnkuQWNjZXNzb3J5XG4gKi9cbmNsYXNzIFR3ZWVuZXIgZXh0ZW5kcyBBY2Nlc3Nvcnkge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuL2FjY2Vzc29yeVwiKS5BY2Nlc3NvcnlUYXJnZXR9IFt0YXJnZXRdXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICBzdXBlcih0YXJnZXQpO1xuXG4gICAgLyoqXG4gICAgICog44Ki44OL44Oh44O844K344On44Oz44KS5pu05paw44GZ44KL5pa55rOV44KS5oyH5a6a44GX44G+44GZ44CCICBcbiAgICAgKiDlpInmm7TjgZnjgovjgahkdXJhdGlvbuOBq+OCiOOCi+aZgumWk+OBrumAsuOBv+aWueOBjOWkieOCj+OCiuOBvuOBmeOAgiAgXG4gICAgICog6Kmz44GX44GP44Gve0BsaW5rICNVUERBVEVfTUFQfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgICAqIEB0eXBlIHtUd2VlbmVyVXBkYXRlVHlwZX1cbiAgICAgKi9cbiAgICB0aGlzLnVwZGF0ZVR5cGUgPSAnZGVsdGEnO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIOWIneacn+WMllxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuXG4gICAgLyoqIEB0eXBlIHtUYXNrUGFyYW1VbmlvbltdfSAqL1xuICAgIHRoaXMuX3Rhc2tzID0gW107XG5cbiAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICB0aGlzLl91cGRhdGUgPSB0aGlzLl91cGRhdGVUYXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAvYmFzZWFwcCcpLkJhc2VBcHB9IGFwcFxuICAgKi9cbiAgdXBkYXRlKGFwcCkge1xuICAgIHRoaXMuX3VwZGF0ZShhcHApO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayAjdXBkYXRlVHlwZX3jgpLlpInmm7TjgZfjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge1R3ZWVuZXJVcGRhdGVUeXBlfSB0eXBlIOabtOaWsOaWueazleOCkuihqOOBmeaWh+Wtl+WIl1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFVwZGF0ZVR5cGUodHlwZSkge1xuICAgIHRoaXMudXBkYXRlVHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogcHJvcHPjgafmjIflrprjgZfjgZ/lgKTjgavjgarjgovjgb7jgafjgIFkdXJhdGlvbuOBp+aMh+WumuOBl+OBn+aZgumWk+OCkuOBi+OBkeOBpuOAgeOCouODi+ODoeODvOOCt+ODp+ODs+OBleOBm+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7e1trZXk6IHN0cmluZ106IGFueX19IHByb3BzIOWkieabtOOBl+OBn+OBhOODl+ODreODkeODhuOCo+OCkmtleeOBqOOBl+OBn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgdG8ocHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICB0aGlzLl9hZGQoe1xuICAgICAgdHlwZTogJ3R3ZWVuJyxcbiAgICAgIG1vZGU6ICd0bycsXG4gICAgICBwcm9wczogcHJvcHMsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBlYXNpbmc6IGVhc2luZyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pplovlp4vmmYLjga7lgKTjgahwcm9wc+OBp+aMh+WumuOBl+OBn+WApOOCkuWKoOeul+OBl+OBn+WApOOBq+OBquOCi+OBvuOBp+OAgWR1cmF0aW9u44Gn5oyH5a6a44GX44Gf5pmC6ZaT44KS44GL44GR44Gm44CB44Ki44OL44Oh44O844K344On44Oz44GV44Gb44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHt7W2tleTogc3RyaW5nXTogYW55fX0gcHJvcHMg5aSJ5pu044GX44Gf44GE44OX44Ot44OR44OG44Kj44KSa2V544Go44GX44Gf44Kq44OW44K444Kn44Kv44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZHVyYXRpb25dIChvcHRpb25hbCkg44Ki44OL44Oh44O844K344On44Oz44Gr44GL44GR44KL5pmC6ZaTXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmddIChvcHRpb25hbCkgZWFzaW5nIHtAbGluayBwaGluYS51dGlsLlR3ZWVuI0VBU0lOR33jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBieShwcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAndHdlZW4nLFxuICAgICAgbW9kZTogJ2J5JyxcbiAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGVhc2luZzogZWFzaW5nLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogcHJvcHPjgafmjIflrprjgZfjgZ/lgKTjgYvjgonjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pplovlp4vmmYLjga7lgKTjgavjgarjgovjgb7jgafjgIFkdXJhdGlvbuOBp+aMh+WumuOBl+OBn+aZgumWk+OCkuOBi+OBkeOBpuOAgeOCouODi+ODoeODvOOCt+ODp+ODs+OBleOBm+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7e1trZXk6IHN0cmluZ106IGFueX19IHByb3BzIOWkieabtOOBl+OBn+OBhOODl+ODreODkeODhuOCo+OCkmtleeOBqOOBl+OBn+OCquODluOCuOOCp+OCr+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZnJvbShwcm9wcywgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAndHdlZW4nLFxuICAgICAgbW9kZTogJ2Zyb20nLFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiBlYXNpbmcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GX44Gf5pmC6ZaT44GM57WM6YGO44GZ44KL44G+44Gn5b6F5qmf44GX44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgd2FpdOOBmeOCi+aZgumWk1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHdhaXQodGltZSkge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAnd2FpdCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGxpbWl0OiB0aW1lLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjoqK3lrprjgZXjgozjgabjgYTjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/mmYLjgavlkbzjgbPlh7rjgZXjgozjgovplqLmlbDjgpLjgrvjg4Pjg4jjgZfjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIOWRvOOBs+WHuuOBleOCjOOCi+mWouaVsFxuICAgKiBAcGFyYW0ge09iamVjdH0gW3NlbGZdIChvcHRpb25hbCkgZnVuY+WGheOBp3RoaXPjgavjgZfjgZ/jgYTjgqrjg5bjgrjjgqfjgq/jg4jjgIJcbiAgICogQHBhcmFtIHtPYmplY3RbXX0gW2FyZ3NdIChvcHRpb25hbCkgZnVuY+OBruW8leaVsOOBq+OBl+OBn+OBhOWApFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNhbGwoZnVuYywgc2VsZiwgYXJncykge1xuICAgIHRoaXMuX2FkZCh7XG4gICAgICB0eXBlOiAnY2FsbCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGZ1bmM6IGZ1bmMsXG4gICAgICAgIHNlbGY6IHNlbGYgfHwgdGhpcyxcbiAgICAgICAgYXJnczogYXJncyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo6Kit5a6a44GV44KM44Gm44GE44KL44Ki44OL44Oh44O844K344On44Oz44GM57WC5LqG44GX44Gf5pmC44Gr44OX44Ot44OR44OG44Kj44KS44K744OD44OI44GX44G+44GZ44CCICBcbiAgICog56ys5LiA5byV5pWw44Gr44Kq44OW44K444Kn44Kv44OI44KS44K744OD44OI44GZ44KL44GT44Go44KC44Gn44GN44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtTdHJpbmcgfCBPYmplY3R9IGtleSB2YWx1ZeOCkuOCu+ODg+ODiOOBmeOCi+ODl+ODreODkeODhuOCo+WQjeOBi+OAgeWkieabtOOBl+OBn+OBhOODl+ODreODkeODhuOCo+OCkmtleeOBqOOBl+OBn+OCquODluOCuOOCp+OCr+ODiOOAglxuICAgKiBAcGFyYW0ge09iamVjdH0gW3ZhbHVlXSAob3B0aW9uYWwpIOOCu+ODg+ODiOOBmeOCi+WApFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlcyA9IG51bGw7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xuICAgICAgdmFsdWVzID0ge307XG4gICAgICB2YWx1ZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbHVlcyA9IGtleTtcbiAgICB9XG4gICAgdGhpcy5fdGFza3MucHVzaCh7XG4gICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgZGF0YToge1xuICAgICAgICB2YWx1ZXM6IHZhbHVlc1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogeCwgeeOBq+WvvuOBl+OBpuOAgSB7QGxpbmsgI3RvfSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgbW92ZVRvKHgsIHksIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50byh7IHg6IHgsIHk6IHkgfSwgZHVyYXRpb24sIGVhc2luZyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiB4LCB544Gr5a++44GX44Gm44CBIHtAbGluayAjYnl9IOOBruWHpueQhuOCkuihjOOBhOOBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZHVyYXRpb25dIChvcHRpb25hbCkg44Ki44OL44Oh44O844K344On44Oz44Gr44GL44GR44KL5pmC6ZaTXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmddIChvcHRpb25hbCkgZWFzaW5nIHtAbGluayBwaGluYS51dGlsLlR3ZWVuI0VBU0lOR33jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlQnkoeCwgeSwgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLmJ5KHsgeDogeCwgeTogeSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByb3RhdGlvbuOBq+WvvuOBl+OBpuOAgSB7QGxpbmsgI3RvfSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcm90YXRpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gKG9wdGlvbmFsKSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgavjgYvjgZHjgovmmYLplpNcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZ10gKG9wdGlvbmFsKSBlYXNpbmcge0BsaW5rIHBoaW5hLnV0aWwuVHdlZW4jRUFTSU5HfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJvdGF0ZVRvKHJvdGF0aW9uLCBkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudG8oeyByb3RhdGlvbjogcm90YXRpb24gfSwgZHVyYXRpb24sIGVhc2luZyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiByb3RhdGlvbuOBq+WvvuOBl+OBpuOAgSB7QGxpbmsgI2J5fSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcm90YXRpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gKG9wdGlvbmFsKSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgavjgYvjgZHjgovmmYLplpNcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZ10gKG9wdGlvbmFsKSBlYXNpbmcge0BsaW5rIHBoaW5hLnV0aWwuVHdlZW4jRUFTSU5HfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJvdGF0ZUJ5KHJvdGF0aW9uLCBkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYnkoeyByb3RhdGlvbjogcm90YXRpb24gfSwgZHVyYXRpb24sIGVhc2luZyk7XG4gIH1cblxuICAvKipcbiAgICogc2NhbGVYLCBzY2FsZVnjgavlr77jgZfjgaYge0BsaW5rICN0b30g44Gu5Yem55CG44KS6KGM44GE44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHNjYWxlWOOBqHNjYWxlWeOBq+ioreWumuOBmeOCi+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2NhbGVUbyhzY2FsZSwgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLnRvKHsgc2NhbGVYOiBzY2FsZSwgc2NhbGVZOiBzY2FsZSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuICAvKipcbiAgICogc2NhbGVYLCBzY2FsZVnjgavlr77jgZfjgaYge0BsaW5rICNieX0g44Gu5Yem55CG44KS6KGM44GE44G+44GZ44CCXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHNjYWxlWOOBqHNjYWxlWeOBq+ioreWumuOBmeOCi+WApFxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2NhbGVCeShzY2FsZSwgZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLmJ5KHsgc2NhbGVYOiBzY2FsZSwgc2NhbGVZOiBzY2FsZSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhbHBoYeOBq+WvvuOBl+OBpiB7QGxpbmsgI3RvfSDjga7lh6bnkIbjgpLooYzjgYTjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgYWxwaGHjgavoqK3lrprjgZnjgovlgKRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gKG9wdGlvbmFsKSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgavjgYvjgZHjgovmmYLplpNcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZ10gKG9wdGlvbmFsKSBlYXNpbmcge0BsaW5rIHBoaW5hLnV0aWwuVHdlZW4jRUFTSU5HfeOCkuWPgueFp+OBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZhZGUodmFsdWUsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50byh7IGFscGhhOiB2YWx1ZSB9LCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhbHBoYeOCkjDjgavjgZnjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLoqK3lrprjgZfjgb7jgZnjgIJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSAob3B0aW9uYWwpIOOCouODi+ODoeODvOOCt+ODp+ODs+OBq+OBi+OBkeOCi+aZgumWk1xuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3V0aWwvdHdlZW5cIikuVHdlZW5FYXNpbmdUeXBlfSBbZWFzaW5nXSAob3B0aW9uYWwpIGVhc2luZyB7QGxpbmsgcGhpbmEudXRpbC5Ud2VlbiNFQVNJTkd944KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZmFkZU91dChkdXJhdGlvbiwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZmFkZSgwLjAsIGR1cmF0aW9uLCBlYXNpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFscGhh44KSMeOBq+OBmeOCi+OCouODi+ODoeODvOOCt+ODp+ODs+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbZHVyYXRpb25dIChvcHRpb25hbCkg44Ki44OL44Oh44O844K344On44Oz44Gr44GL44GR44KL5pmC6ZaTXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vdXRpbC90d2VlblwiKS5Ud2VlbkVhc2luZ1R5cGV9IFtlYXNpbmddIChvcHRpb25hbCkgZWFzaW5nIHtAbGluayBwaGluYS51dGlsLlR3ZWVuI0VBU0lOR33jgpLlj4LnhafjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmYWRlSW4oZHVyYXRpb24sIGVhc2luZykge1xuICAgIHJldHVybiB0aGlzLmZhZGUoMS4wLCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pplovlp4tcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBsYXkoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLkuIDmmYLlgZzmraJcbiAgICogQGNoYWluYWJsZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODi+ODoeODvOOCt+ODp+ODs+OCkuWBnOatouOBl+OAgeacgOWIneOBvuOBp+W3u+OBjeaIu+OBl+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJld2luZCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODi+ODoeODvOOCt+ODp+ODs+OCkuW3u+OBjeaIu+OBmVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmV3aW5kKCkge1xuICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVRhc2s7XG4gICAgdGhpcy5faW5kZXggPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgeW95bygpIHtcbiAgICAvLyBUT0RPOiDmnIDliJ3jga7lgKTjgYzliIbjgYvjgonjgarjgYTjga7jgaflj43ou6LjgafjgY3jgarjgYQuLi5cbiAgICB0aGlzLl91cGRhdGUgPSB0aGlzLl91cGRhdGVUYXNrO1xuICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICBlYWNoJDEuY2FsbCh0aGlzLl90YXNrcywgZnVuY3Rpb24odGFzaykge1xuICAgIC8vIHRoaXMuX3Rhc2tzLmVhY2goZnVuY3Rpb24odGFzaykge1xuICAgICAgaWYgKHRhc2sudHlwZSA9PT0gJ3R3ZWVuJykgO1xuICAgIH0pO1xuICAgIHRoaXMucGxheSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Ki44OL44Oh44O844K344On44Oz44Or44O844OX6Kit5a6aXG4gICAqIEBjaGFpbmFibGVcbiAgICogQHBhcmFtIHtCb29sZWFufSBmbGFnXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0TG9vcChmbGFnKSB7XG4gICAgdGhpcy5fbG9vcCA9IGZsYWc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Ki44OL44Oh44O844K344On44Oz44KS44Kv44Oq44KiXG4gICAqIEBjaGFpbmFibGVcbiAgICogQG92ZXJyaWRlIHtFdmVudERpc3BhdGNoZXIjY2xlYXJ944KS5LiK5pu444GNXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtbc3RyaW5nLCAuLi5hbnldfSBUd2VlblBhcmFtQXJyYXlcbiAgICogSlNPTuW9ouW8j+OBp+OCouODi+ODoeODvOOCt+ODp+ODs+OCkuioreWumuOBl+OBvuOBmeOAglxuICAgKiBAY2hhaW5hYmxlXG4gICAqIFxuICAgKiBgYGBcbiAgICogW1xuICAgKiAgIFttZXRob2QsIGFyZzEsIGFyZzIsLCxdLFxuICAgKiAgIFsndG8nLCB7dmFsdWU6IDEwMH0sIDEwMDAsICdzd2luZyddLFxuICAgKiAgIFsnd2FpdCcsIDEwMDBdLFxuICAgKiAgIFsnc2V0JywgJ3RleHQnLCAnRU5EJ11cbiAgICogXVxuICAgKiBgYGBcbiAgICogXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0ganNvbi5sb29wIChvcHRpb25hbCkg44Or44O844OX44GZ44KL5aC05ZCIdHJ1ZVxuICAgKiBAcGFyYW0ge1R3ZWVuUGFyYW1BcnJheX0ganNvbi50d2VlbnMg6Kit5a6a44GZ44KL44Ki44OL44Oh44O844K344On44OzXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgZnJvbUpTT04oanNvbikge1xuICAgIGlmIChqc29uLmxvb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zZXRMb29wKGpzb24ubG9vcCk7XG4gICAgfVxuXG4gICAgZWFjaCQxLmNhbGwoanNvbi50d2VlbnMsIFxuICAgIC8vIGpzb24udHdlZW5zLmVhY2goXG4gICAgICAvKipcbiAgICAgICAqIEB0aGlzIFR3ZWVuZXJcbiAgICAgICAqIEBwYXJhbSB7VHdlZW5QYXJhbUFycmF5fSB0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdCA9IGNsb25lLmNhbGwodCk7XG4gICAgICAgIC8vIHQgPSB0LmNsb25lKCk7XG4gICAgICAgIHZhciBtZXRob2QgPSB0LnNoaWZ0KCk7XG4gICAgICAgIHRoaXNbbWV0aG9kXS5hcHBseSh0aGlzLCB0KTtcbiAgICAgIH0sIHRoaXNcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUYXNrUGFyYW1Vbmlvbn0gcGFyYW1zXG4gICAqL1xuICBfYWRkKHBhcmFtcykge1xuICAgIHRoaXMuX3Rhc2tzLnB1c2gocGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYXBwL2Jhc2VhcHAnKS5CYXNlQXBwfSBhcHBcbiAgICovXG4gIF91cGRhdGVUYXNrKGFwcCkge1xuICAgIGlmICghdGhpcy5wbGF5aW5nKSByZXR1cm4gO1xuXG4gICAgdmFyIHRhc2sgPSB0aGlzLl90YXNrc1t0aGlzLl9pbmRleF07XG4gICAgaWYgKCF0YXNrKSB7XG4gICAgICBpZiAodGhpcy5fbG9vcCkge1xuICAgICAgICB0aGlzLnJld2luZCgpO1xuICAgICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgKyt0aGlzLl9pbmRleDtcbiAgICB9XG5cbiAgICBpZiAodGFzay50eXBlID09PSAndHdlZW4nKSB7XG4gICAgICAvLyB0aGlzLl90d2VlbiA9IHBoaW5hLnV0aWwuVHdlZW4oKTtcbiAgICAgIHRoaXMuX3R3ZWVuID0gbmV3IFR3ZWVuKCk7XG5cbiAgICAgIHZhciBkdXJhdGlvbiA9IHRhc2suZHVyYXRpb24gfHwgdGhpcy5fZ2V0RGVmYXVsdER1cmF0aW9uKCk7XG4gICAgICBpZiAodGFzay5tb2RlID09PSAndG8nKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuLnRvKHRoaXMudGFyZ2V0LCB0YXNrLnByb3BzLCBkdXJhdGlvbiwgdGFzay5lYXNpbmcpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGFzay5tb2RlID09PSAnYnknKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuLmJ5KHRoaXMudGFyZ2V0LCB0YXNrLnByb3BzLCBkdXJhdGlvbiwgdGFzay5lYXNpbmcpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuLmZyb20odGhpcy50YXJnZXQsIHRhc2sucHJvcHMsIGR1cmF0aW9uLCB0YXNrLmVhc2luZyk7XG4gICAgICB9XG4gICAgICB0aGlzLl91cGRhdGUgPSB0aGlzLl91cGRhdGVUd2VlbjtcbiAgICAgIHRoaXMuX3VwZGF0ZShhcHApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YXNrLnR5cGUgPT09ICd3YWl0Jykge1xuICAgICAgdGhpcy5fd2FpdCA9IHtcbiAgICAgICAgdGltZTogMCxcbiAgICAgICAgbGltaXQ6IHRhc2suZGF0YS5saW1pdCxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVdhaXQ7XG4gICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFzay50eXBlID09PSAnY2FsbCcpIHtcbiAgICAgIHRhc2suZGF0YS5mdW5jLmFwcGx5KHRhc2suZGF0YS5zZWxmLCB0YXNrLmRhdGEuYXJncyk7XG4gICAgICAvLyAx44OV44Os44O844Og5raI6LK744GX44Gq44GE44KI44GG5YaN5biwXG4gICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFzay50eXBlID09PSAnc2V0Jykge1xuICAgICAgJGV4dGVuZC5jYWxsKHRoaXMudGFyZ2V0LCB0YXNrLmRhdGEudmFsdWVzKTtcbiAgICAgIC8vIHRoaXMudGFyZ2V0LiRleHRlbmQodGFzay5kYXRhLnZhbHVlcyk7XG4gICAgICAvLyAx44OV44Os44O844Og5raI6LK744GX44Gq44GE44KI44GG5YaN5biwXG4gICAgICB0aGlzLl91cGRhdGUoYXBwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2FwcC9iYXNlYXBwJykuQmFzZUFwcH0gYXBwXG4gICAqL1xuICBfdXBkYXRlVHdlZW4oYXBwKSB7XG4gICAgdmFyIHR3ZWVuID0gdGhpcy5fdHdlZW47XG4gICAgdmFyIHRpbWUgPSB0aGlzLl9nZXRVbml0VGltZShhcHApO1xuXG4gICAgdHdlZW4uZm9yd2FyZCh0aW1lKTtcbiAgICB0aGlzLmZsYXJlKCd0d2VlbicpO1xuXG4gICAgaWYgKHR3ZWVuLnRpbWUgPj0gdHdlZW4uZHVyYXRpb24pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl90d2VlbjtcbiAgICAgIHRoaXMuX3R3ZWVuID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVRhc2s7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAvYmFzZWFwcCcpLkJhc2VBcHB9IGFwcFxuICAgKi9cbiAgX3VwZGF0ZVdhaXQoYXBwKSB7XG4gICAgdmFyIHdhaXQgPSB0aGlzLl93YWl0O1xuICAgIHZhciB0aW1lID0gdGhpcy5fZ2V0VW5pdFRpbWUoYXBwKTtcbiAgICB3YWl0LnRpbWUgKz0gdGltZTtcblxuICAgIGlmICh3YWl0LnRpbWUgPj0gd2FpdC5saW1pdCkge1xuICAgICAgZGVsZXRlIHRoaXMuX3dhaXQ7XG4gICAgICB0aGlzLl93YWl0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHRoaXMuX3VwZGF0ZVRhc2s7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9hcHAvYmFzZWFwcCcpLkJhc2VBcHB9IGFwcFxuICAgKi9cbiAgX2dldFVuaXRUaW1lKGFwcCkge1xuICAgIHZhciBvYmogPSBVUERBVEVfTUFQW3RoaXMudXBkYXRlVHlwZV07XG4gICAgaWYgKG9iaikge1xuICAgICAgcmV0dXJuIG9iai5mdW5jKGFwcCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIDEwMDAgLyBhcHAuZnBzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldERlZmF1bHREdXJhdGlvbigpIHtcbiAgICB2YXIgb2JqID0gVVBEQVRFX01BUFt0aGlzLnVwZGF0ZVR5cGVdO1xuICAgIHJldHVybiBvYmogJiYgb2JqLmR1cmF0aW9uO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiB7QGxpbmsgI3VwZGF0ZVR5cGV944Gr6Kit5a6a44GZ44KL5pu05paw5pa55rOV44Gu5a6a576p44Gn44GZ44CCXG4gKiDkuIvoqJjjga7ooajjgavlrprnvqnmuIjjgb/jga7mm7TmlrDmlrnms5XjgpJ7QGxpbmsgI3VwZGF0ZVR5cGV944Gr6Kit5a6a44GZ44KL44GT44Go44Gn44CBXG4gKiDjgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjga7mm7TmlrDmlrnms5XjgpLlpInmm7TjgZnjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAqIFxuICogfCDmm7TmlrDmlrnms5UgfCDljZjkvY0o44OH44OV44Kp44Or44OI5YCkKSB8IDHjg5Xjg6zjg7zjg6DjgYLjgZ/jgorjga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7PpgJ/luqYgfFxuICogfC18LXwtfFxuICogfCBub3JtYWwgfCDjg5/jg6rnp5IoMTAwMCkgfCBhcHAuZnBz44Gr44KI44Gj44Gm5aSJ5YyWIHxcbiAqIHwgZGVsdGEgfCDjg5/jg6rnp5IoMTAwMCkgfCDntYzpgY7mmYLplpPjgavjgojjgaPjgablpInljJYgfFxuICogfCBmcHMgfCDjg5Xjg6zjg7zjg6AoMzApIHwg5b+F44Ga5ZCM44GY6YCf5bqm44Gn5aSJ5YyWIHxcbiAqIFxuICogQHR5cGUge3tcbiAqICAgW2tleSBpbiBUd2VlbmVyVXBkYXRlVHlwZV06IHtcbiAqICAgICBmdW5jOiAoYXBwOiBpbXBvcnQoJy4uL2FwcC9iYXNlYXBwJykuQmFzZUFwcCk9PiBudW1iZXIsXG4gKiAgICAgZHVyYXRpb246IG51bWJlcixcbiAqICAgfVxuICogfX1cbiAqL1xudmFyIFVQREFURV9NQVAgPSBUd2VlbmVyLlVQREFURV9NQVAgPSB7XG4gIG5vcm1hbDoge1xuICAgIGZ1bmM6IGZ1bmN0aW9uKGFwcCkge1xuICAgICAgcmV0dXJuIDEwMDAgLyBhcHAuZnBzO1xuICAgIH0sXG4gICAgZHVyYXRpb246IDEwMDAsXG4gIH0sXG5cbiAgZGVsdGE6IHtcbiAgICBmdW5jOiBmdW5jdGlvbihhcHApIHtcbiAgICAgIHJldHVybiBhcHAudGlja2VyLmRlbHRhVGltZTtcbiAgICB9LFxuICAgIGR1cmF0aW9uOiAxMDAwLFxuICB9LFxuXG4gIGZwczoge1xuICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSxcbiAgICBkdXJhdGlvbjogMzAsXG4gIH0sXG5cbn07XG5cbi8vIEVsZW1lbnTlgbTjgafmi6HlvLVcbi8vIC8qKlxuLy8gICogQG1lbWJlciBwaGluYS5hcHAuRWxlbWVudFxuLy8gICogQHByb3BlcnR5IHR3ZWVuZXJcbi8vICAqIOiHqui6q+OBq+OCouOCv+ODg+ODgea4iOOBv+OBrntAbGluayBwaGluYS5hY2Nlc3NvcnkuVHdlZW5lcn3jgqrjg5bjgrjjgqfjgq/jg4jjgIJcbi8vICAqL1xuLy8gcGhpbmEuYXBwLkVsZW1lbnQucHJvdG90eXBlLmdldHRlcigndHdlZW5lcicsIGZ1bmN0aW9uKCkge1xuLy8gICBpZiAoIXRoaXMuX3R3ZWVuZXIpIHtcbi8vICAgICB0aGlzLl90d2VlbmVyID0gcGhpbmEuYWNjZXNzb3J5LlR3ZWVuZXIoKS5hdHRhY2hUbyh0aGlzKTtcbi8vICAgfVxuLy8gICByZXR1cm4gdGhpcy5fdHdlZW5lcjtcbi8vIH0pO1xuXG4vKipcbiAqIERyYWdnYWJsZeOBrnRhcmdldOOBq+aMh+WumuWPr+iDveOBquOCquODluOCuOOCp+OCr+ODiOWei1xuICogQHR5cGVkZWYge3tcbiAqICAgeDogbnVtYmVyXG4gKiAgIHk6IG51bWJlclxuICogICBmbGFyZTogKHR5cGU6IHN0cmluZyk9PiBhbnlcbiAqICAgc2V0SW50ZXJhY3RpdmU6IChmbGFnOiBib29sZWFuKT0+IGFueVxuICogfSAmIGltcG9ydChcIi4vYWNjZXNzb3J5XCIpLkFjY2Vzc29yeUF0dGFjaGFibGUgfSBEcmFnZ2FibGVUYXJnZXRcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hY2Nlc3NvcnkuRHJhZ2dhYmxlXG4gKiBfZXh0ZW5kcyBwaGluYS5hY2Nlc3NvcnkuQWNjZXNzb3J5XG4gKiBcbiAqIOWvvuixoeOCkuODieODqeODg+OCsOWPr+iDveOBq+OBmeOCi0FjY2Vzc29yeea0vueUn+OCr+ODqeOCuVxuICogXG4gKiBwaGluYS5hcHAuRWxlbWVudOa0vueUn+OCr+ODqeOCueOBp+OBguOCjOOBsOOAgVxuICogZHJhZ2dhYmxl44Ky44OD44K/44O844Gr44Ki44Kv44K744K544GZ44KL44Gg44GR44Gn5pyJ5Yq55YyW44GZ44KL44GT44Go44KC5Y+v6IO9XG4gKiBcbiAqICMjIyDjgqTjg5njg7Pjg4jnmbrngavjgavjgaTjgYTjgaZcbiAqIOODieODqeODg+OCsOmWi+Wni+aZguOBq2BkcmFnc3RhcnRg44CBXG4gKiDjg4njg6njg4PjgrDnp7vli5Xmr47jgatgZHJhZ2DjgIFcbiAqIOODieODqeODg+OCsOe1guS6huaZguOBq+aZguOBq2BkcmFnZW5kYFxuICog44Kk44OZ44Oz44OI44KS44Gd44KM44Ge44KM6Ieq6Lqr44GK44KI44Gz5a++6LGh44Kq44OW44K444Kn44Kv44OI5Lih5pa544Gn55m654Gr44GZ44KLXG4gKiBcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB0YXJnZXQgPSBuZXcgcGhpbmEuZGlzcGxheS5TcHJpdGUoXCJwbGF5ZXJcIik7XG4gKiBjb25zdCBkcmFnZ2FibGUgPSBuZXcgcGhpbmEuYWNjZXNzb3J5LkRyYWdnYWJsZSgpLmF0dGFjaFRvKHRhcmdldCk7XG4gKiBkcmFnZ2FibGUub24oXCJkcmFnZW5kXCIsICgpPT4ge1xuICogICBpZiAoIWlzVmFsaWRhdGVQb3NpdGlvbih0YXJnZXQpKSBkcmFnZ2FibGUuYmFjaygpXG4gKiB9KVxuICogXG4gKiBAZXhhbXBsZVxuICogLy8gQWN0aXZhdGUgYnkgZ2V0dGVyXG4gKiBjb25zdCBlbCA9IG5ldyBwaGluYS5hcHAuRWxlbWVudCgpO1xuICogZWwuZHJhZ2dhYmxlO1xuICogXG4gKi9cbmNsYXNzIERyYWdnYWJsZSBleHRlbmRzIEFjY2Vzc29yeSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBcbiAgICogQHBhcmFtIHtEcmFnZ2FibGVUYXJnZXR9IFt0YXJnZXRdXG4gICAqIHRhcmdldOOCkuWPl+OBkeWPluOCi+OBjOOAgeOBneOCjOOBoOOBkeOBp+OBr+acieWKueWMluOBleOCjOOBquOBhOOBk+OBqOOBq+azqOaEj1xuICAgKiDlkIzmmYLjgavmnInlirnljJbjgZnjgovloLTlkIjjga9hdHRhY2hUb+OCkuS9v+OBo+OBpuS7mOS4juOBmeOCi1xuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIodGFyZ2V0KTtcblxuICAgIC8qKiBAdHlwZSB7RHJhZ2dhYmxlVGFyZ2V0fSAqL1xuICAgIHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9kcmFnZ2luZyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiDigLvmnKrkvb/nlKhcbiAgICAgKi9cbiAgICB0aGlzLl9lbmFibGU7XG5cbiAgICAvKipcbiAgICAgKiDjg4njg6njg4PjgrDplovlp4vkvY3nva7jgIHlh6bnkIbmr47jgavmm7TmlrDjgZXjgozjgotcbiAgICAgKiBAdHlwZSB7VmVjdG9yMn1cbiAgICAgKi9cbiAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMub24oJ2F0dGFjaGVkJyxcbiAgICAvKiogQHRoaXMge0RyYWdnYWJsZX0gKi9cbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnNldEludGVyYWN0aXZlKHRydWUpO1xuXG4gICAgICBzZWxmLl9kcmFnZ2luZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLnRhcmdldC5vbigncG9pbnRzdGFydCcsIFxuICAgICAgLyoqIEB0aGlzIHtEcmFnZ2FibGVUYXJnZXR9ICovXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKERyYWdnYWJsZS5fbG9jaykgcmV0dXJuIDtcblxuICAgICAgICBzZWxmLl9kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIHNlbGYuaW5pdGlhbFBvc2l0aW9uLnggPSB0aGlzLng7XG4gICAgICAgIHNlbGYuaW5pdGlhbFBvc2l0aW9uLnkgPSB0aGlzLnk7XG4gICAgICAgIHNlbGYuZmxhcmUoJ2RyYWdzdGFydCcpO1xuICAgICAgICB0aGlzLmZsYXJlKCdkcmFnc3RhcnQnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnRhcmdldC5vbigncG9pbnRtb3ZlJywgXG4gICAgICAvKiogQHRoaXMge0RyYWdnYWJsZVRhcmdldH0gKi9cbiAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCFzZWxmLl9kcmFnZ2luZykgcmV0dXJuIDtcblxuICAgICAgICB0aGlzLnggKz0gZS5wb2ludGVyLmR4O1xuICAgICAgICB0aGlzLnkgKz0gZS5wb2ludGVyLmR5O1xuICAgICAgICBzZWxmLmZsYXJlKCdkcmFnJyk7XG4gICAgICAgIHRoaXMuZmxhcmUoJ2RyYWcnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnRhcmdldC5vbigncG9pbnRlbmQnLCBcbiAgICAgIC8qKiBAdGhpcyB7RHJhZ2dhYmxlVGFyZ2V0fSAqL1xuICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoIXNlbGYuX2RyYWdnaW5nKSByZXR1cm4gO1xuXG4gICAgICAgIHNlbGYuX2RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHNlbGYuZmxhcmUoJ2RyYWdlbmQnKTtcbiAgICAgICAgdGhpcy5mbGFyZSgnZHJhZ2VuZCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog44OJ44Op44OD44Kw6ZaL5aeL5L2N572u44Gr44K/44O844Ky44OD44OI44KS5oi744GZXG4gICAqIOODkeODqeODoeODvOOCv+aMh+WumuOBmeOCi+OBk+OBqOOBp3R3ZWVuZXLjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLkvb/jgaPjgabmiLvjgZnjgZPjgajjgoLlj6/og71cbiAgICogXG4gICAqIOe1guS6huaZguOBq2BiYWNrZW5kYOOCpOODmeODs+ODiOOCkueZuueBq1xuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lXSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PmmYLplpPvvIjjg5/jg6rnp5LvvInjgILnhKHmjIflrprjga7loLTlkIjjga/ljbPluqfjgavmiLvjgZlcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi91dGlsL3R3ZWVuXCIpLlR3ZWVuRWFzaW5nVHlwZX0gW2Vhc2luZz0nZWFzZU91dEVsYXN0aWMnXSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PnqK7poZ5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBiYWNrKHRpbWUsIGVhc2luZykge1xuICAgIGlmICh0aW1lKSB7XG4gICAgICB2YXIgdCA9IHRoaXMudGFyZ2V0O1xuICAgICAgdC5zZXRJbnRlcmFjdGl2ZShmYWxzZSk7XG4gICAgICB2YXIgdHdlZW5lciA9IG5ldyBUd2VlbmVyKCkuYXR0YWNoVG8odCk7XG4gICAgICB0d2VlbmVyXG4gICAgICAgIC50byh7XG4gICAgICAgICAgeDogdGhpcy5pbml0aWFsUG9zaXRpb24ueCxcbiAgICAgICAgICB5OiB0aGlzLmluaXRpYWxQb3NpdGlvbi55LFxuICAgICAgICB9LCB0aW1lLCBlYXNpbmcgfHwgJ2Vhc2VPdXRFbGFzdGljJylcbiAgICAgICAgLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdHdlZW5lci5yZW1vdmUoKTtcblxuICAgICAgICAgIHQuc2V0SW50ZXJhY3RpdmUodHJ1ZSk7XG4gICAgICAgICAgdGhpcy5mbGFyZSgnYmFja2VuZCcpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRhcmdldC54ID0gdGhpcy5pbml0aWFsUG9zaXRpb24ueDtcbiAgICAgIHRoaXMudGFyZ2V0LnkgPSB0aGlzLmluaXRpYWxQb3NpdGlvbi55O1xuICAgICAgdGhpcy5mbGFyZSgnYmFja2VuZCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSDigLvmnKrkvb/nlKjjga7jgZ/jgoFcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBlbmFibGUoKSB7XG4gICAgdGhpcy5fZW5hYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgabjga7jgqTjg7Pjgrnjgr/jg7Pjgrnjgafjg4njg6njg4PjgrDjgpLnhKHlirnljJbjgZnjgotcbiAgICogXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIGxvY2soKSB7XG4gICAgdGhpcy5fbG9jayA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5YWo44Gm44Gu44Kk44Oz44K544K/44Oz44K544Gn44OJ44Op44OD44Kw54Sh5Yq55YyW44KS6Kej6ZmkXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyB1bmxvY2soKSB7XG4gICAgdGhpcy5fbG9jayA9IGZhbHNlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUge2Jvb2xlYW59XG4gKi9cbkRyYWdnYWJsZS5fbG9jayA9IGZhbHNlO1xuXG4vLyBFbGVtZW505YG044Gn5a6a576pXG4vLyBwaGluYS5hcHAuRWxlbWVudC5wcm90b3R5cGUuZ2V0dGVyKCdkcmFnZ2FibGUnLCBmdW5jdGlvbigpIHtcbi8vICAgaWYgKCF0aGlzLl9kcmFnZ2FibGUpIHtcbi8vICAgICB0aGlzLl9kcmFnZ2FibGUgPSBwaGluYS5hY2Nlc3NvcnkuRHJhZ2dhYmxlKCkuYXR0YWNoVG8odGhpcyk7XG4vLyAgIH1cbi8vICAgcmV0dXJuIHRoaXMuX2RyYWdnYWJsZTtcbi8vIH0pO1xuXG4vKipcbiAqIFRPRE86IEVsZW1lbnTjga7jg5fjg63jg5Hjg4bjgqPjgpLlvJXjgY3ntpnjgY7jgZ/jgYTigKZcbiAqIEB0eXBlZGVmIHtFbGVtZW50IHwgYW55fSBFbGVtZW50QmFzZWRPYmplY3RcbiAqIF90eXBlZGVmIHt7W2s6IHN0cmluZ106IGFueX0gJiBFbGVtZW50fSBFbGVtZW50QmFzZWRPYmplY3RcbiAqL1xuXG4vKipcbiAqIEVsZW1lbnTjgavpganlkIjjgZnjgovjgZ/jgoHjga7jg5fjg63jg5Hjg4bjgqPjgpLkv53mjIHjgZfjgabjgovjgYvjg4Hjgqfjg4Pjgq86IHRlbXBsYXRl55SoXG4gKiBAdHlwZWRlZiB7e1xuICogICBhZGRDaGlsZDogKGVsOiBFbGVtZW50aXphYmxlKT0+IEVsZW1lbnRpemFibGVcbiAqICAgcmVtb3ZlOiAoKT0+IEVsZW1lbnRpemFibGVcbiAqICAgcGFyZW50PzogRWxlbWVudGl6YWJsZVxuICogICBoYXM6ICh0eXBlOnN0cmluZyk9PiBib29sZWFuXG4gKiAgIGZsYXJlOiAodHlwZTpzdHJpbmcpPT4gYW55XG4gKiB9fSBFbGVtZW50aXphYmxlIFxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFwcC5FbGVtZW50XG4gKiBfZXh0ZW5kcyBwaGluYS51dGlsLkV2ZW50RGlzcGF0Y2hlclxuICogIyDkuLvjgavopoHntKDjga7opqrlrZDplqLkv4LjgpLmibHjgYbjgq/jg6njgrlcbiAqIOS4u+OBq+imquWtkOmWouS/guetieOCkuWumue+qeOBmeOCi+OCr+ODqeOCueOBp+OBmeOAglxuICovXG5jbGFzcyBFbGVtZW50IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnRCYXNlZE9iamVjdCB8IG51bGx9XG4gICAgICog6Kaq6KaB57SgXG4gICAgICovXG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnRCYXNlZE9iamVjdFtdfVxuICAgICAqIOWtkOimgee0oOmFjeWIl1xuICAgICAqL1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIOacieWKueOBi+OBqeOBhuOBi1xuICAgICAqL1xuICAgIHRoaXMuYXdha2UgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICog6KaB57Sg44Kv44Oq44OD44Kv566h55CG55So44OV44Op44KwXG4gICAgICovXG4gICAgdGhpcy5fY2xpY2tlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2ltcG9ydCgnLi4vYWNjZXNzb3J5L2FjY2Vzc29yeScpLkFjY2Vzc29yeVtdfVxuICAgICAqIEFjY2Vzc29yeemFjeWIl1xuICAgICAqIGF0dGFjaOODoeOCveODg+ODieOBq+OCiOOBo+OBpuWIneacn+WMllxuICAgICAqL1xuICAgIHRoaXMuYWNjZXNzb3JpZXMgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtUd2VlbmVyfVxuICAgICAqIOWGhemDqFR3ZWVuZXLjgq/jg6njgrlcbiAgICAgKiB0d2VlbmVy44Ki44Kv44K744K144Gr44KI44Gj44Gm5Yid5pyf5YyWXG4gICAgICovXG4gICAgdGhpcy5fdHdlZW5lciA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0RyYWdnYWJsZX1cbiAgICAgKi9cbiAgICB0aGlzLl9kcmFnZ2FibGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBhZGRDaGlsZFxuICAgKiDoh6rouqvjgavlrZDopoHntKDjgpLov73liqDjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog6Ieq6Lqr44KS5a2Q6KaB57Sg44Go44GX44Gm5byV5pWw44Gn5oyH5a6a44GX44Gf6KaB57Sg44Gr6L+95Yqg44GZ44KL44Gr44GvIHtAbGluayAjYWRkQ2hpbGRUb30g44KS5L2/55So44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSB7RWxlbWVudGl6YWJsZX0gVFxuICAgKiBAcGFyYW0ge1R9IGNoaWxkIOi/veWKoOOBmeOCi+WtkOimgee0oFxuICAgKiBAcmV0dXJucyB7VH0g6L+95Yqg44GX44Gf5a2Q6KaB57SgXG4gICAqL1xuICBhZGRDaGlsZChjaGlsZCkge1xuICAgIGlmIChjaGlsZC5wYXJlbnQpIGNoaWxkLnJlbW92ZSgpO1xuXG4gICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuXG4gICAgY2hpbGQuaGFzKCdhZGRlZCcpICYmIGNoaWxkLmZsYXJlKCdhZGRlZCcpO1xuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgYWRkQ2hpbGRUb1xuICAgKiDoh6rouqvjgpLlrZDopoHntKDjgajjgZfjgablvJXmlbDjgafmjIflrprjgZfjgZ/opoHntKDjgavov73liqDjgZfjgb7jgZnjgIJcbiAgICpcbiAgICog6Ieq6Lqr44Gr5a2Q6KaB57Sg44KS6L+95Yqg44GZ44KL44Gr44GvIHtAbGluayAjYWRkQ2hpbGR9IOOCkuS9v+eUqOOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKlxuICAgKiBAdGVtcGxhdGUge0VsZW1lbnRpemFibGV9IFRcbiAgICogQHBhcmFtIHtUfSBwYXJlbnQg6Ieq6Lqr44KS5a2Q6KaB57Sg44Go44GX44Gm6L+95Yqg44GZ44KL6KaB57SgXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgYWRkQ2hpbGRUbyhwYXJlbnQpIHtcbiAgICBwYXJlbnQuYWRkQ2hpbGQodGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGFkZENoaWxkQXRcbiAgICog6Ieq6Lqr44KS44CB5oyH5a6a44GX44Gf6KaB57Sg44Gu5a2Q6KaB57Sg44Gu5Lu75oSP44Gu6YWN5YiX44Kk44Oz44OH44OD44Kv44K544Gr6L+95Yqg44GX44G+44GZ44CCXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSB7RWxlbWVudGl6YWJsZX0gVFxuICAgKiBAcGFyYW0ge1R9IGNoaWxkIOi/veWKoOOBmeOCi+WtkOimgee0oFxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXgg44Kk44Oz44OH44OD44Kv44K555Wq5Y+3XG4gICAqIEByZXR1cm5zIHtUfSDov73liqDjgZfjgZ/lrZDopoHntKBcbiAgICovXG4gIGFkZENoaWxkQXQoY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKGNoaWxkLnBhcmVudCkgY2hpbGQucmVtb3ZlKCk7XG5cbiAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBjaGlsZCk7XG5cbiAgICBjaGlsZC5oYXMoJ2FkZGVkJykgJiYgY2hpbGQuZmxhcmUoJ2FkZGVkJyk7XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBnZXRDaGlsZEF0XG4gICAqIOaMh+WumuOBl+OBn+OCpOODs+ODh+ODg+OCr+OCueOBruWtkOimgee0oOOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXgg44Kk44Oz44OH44OD44Kv44K555Wq5Y+3XG4gICAqIEByZXR1cm5zIHtFbGVtZW50QmFzZWRPYmplY3R9IOaMh+WumuOBl+OBn+OCpOODs+ODh+ODg+OCr+OCueOBruWtkOimgee0oFxuICAgKi9cbiAgZ2V0Q2hpbGRBdChpbmRleCkge1xuICAgIC8vIHJldHVybiB0aGlzLmNoaWxkcmVuLmF0KGluZGV4KTtcbiAgICByZXR1cm4gYXQuY2FsbCh0aGlzLmNoaWxkcmVuLCBpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogQHRvZG9cbiAgICogQG1ldGhvZCBnZXRDaGlsZEJ5TmFtZVxuICAgKiDmjIflrprjgZfjgZ/lkI3liY3jga7lrZDopoHntKDjgpLov5TjgZfjgb7jgZnjgILvvIjmnKrlrp/oo4XvvIlcbiAgICovXG4gIGdldENoaWxkQnlOYW1lKG5hbWUpIHtcbiAgICAvLyBUT0RPOlxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZ2V0Q2hpbGRJbmRleFxuICAgKiDmjIflrprjgZfjgZ/lrZDopoHntKDjga7jgqTjg7Pjg4fjg4Pjgq/jgrnnlarlj7fjgpLov5TjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50QmFzZWRPYmplY3R9IGNoaWxkIOWtkOimgee0oFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IOaMh+WumuOBl+OBn+WtkOimgee0oOOBruOCpOODs+ODh+ODg+OCr+OCueeVquWPt1xuICAgKi9cbiAgZ2V0Q2hpbGRJbmRleChjaGlsZCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZ2V0UGFyZW50XG4gICAqIOaMh+WumuOBl+OBn+imgee0oOOBruimquimgee0oOOCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50QmFzZWRPYmplY3R9IOaMh+WumuOBl+OBn+imgee0oOOBruimquimgee0oFxuICAgKi9cbiAgZ2V0UGFyZW50KCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGdldFJvb3RcbiAgICog5oyH5a6a44GX44Gf6KaB57Sg44Gu6ZqO5bGk44OE44Oq44O844Gu44Or44O844OI44KS6L+U44GX44G+44GZ44CCXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnRCYXNlZE9iamVjdH0g5oyH5a6a44GX44Gf6KaB57Sg44Gu6ZqO5bGk44OE44Oq44O844Gu44Or44O844OIXG4gICAqL1xuICBnZXRSb290KCkge1xuICAgIC8qKiBAdHlwZSB7RWxlbWVudEJhc2VkT2JqZWN0fSAqL1xuICAgIHZhciBlbG0gPSB0aGlzO1xuICAgIGZvciAoZWxtPXRoaXMucGFyZW50OyBlbG0ucGFyZW50ICE9IG51bGw7IGVsbSA9IGVsbS5wYXJlbnQpIHtcblxuICAgIH1cbiAgICByZXR1cm4gZWxtO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmVtb3ZlQ2hpbGRcbiAgICogQGNoYWluYWJsZVxuICAgKiDmjIflrprjgZfjgZ/opoHntKDjgpLoh6rouqvjga7lrZDopoHntKDjgYvjgonliYrpmaTjgZfjgb7jgZnjgIJcbiAgICpcbiAgICogQHRlbXBsYXRlIHtFbGVtZW50aXphYmxlfSBUXG4gICAqIEBwYXJhbSB7VH0gY2hpbGQg6KaB57SgXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGNoaWxkLmhhcygncmVtb3ZlZCcpICYmIGNoaWxkLmZsYXJlKCdyZW1vdmVkJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgcmVtb3ZlXG4gICAqIOiHqui6q+OCkuimquimgee0oOOBruWtkOimgee0oOOBi+OCieWJiumZpOOBl+OBvuOBmeOAglxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJlbW92ZSgpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gO1xuXG4gICAgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBpc0F3YWtlXG4gICAqIOiHqui6q+OBjOacieWKueOBi+OBqeOBhuOBi+OCkui/lOOBl+OBvuOBmeOAglxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSDmnInlirnjgYvjganjgYbjgYtcbiAgICovXG4gIGlzQXdha2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXdha2U7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCB3YWtlVXBcbiAgICog6Ieq6Lqr44KS5pyJ5Yq544Gr44GX44G+44GZ44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgd2FrZVVwKCkge1xuICAgIHRoaXMuYXdha2UgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2xlZXBcbiAgICog6Ieq6Lqr44KS54Sh5Yq544Gr44GX44G+44GZ44CCXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2xlZXAoKSB7XG4gICAgdGhpcy5hd2FrZSA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEB2aXJ0dWFsXG4gICAqIOabtOaWsOeUqOS7ruaDs+mWouaVsFxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dhbWUvZ2FtZWFwcFwiKS5BcHBVbmlvbn0gW19hcHBdIOOCouODl+ODquOCseODvOOCt+ODp+ODs+OCr+ODqeOCuVxuICAgKiBAcmV0dXJucyB7YW55fVxuICAgKi9cbiAgdXBkYXRlKF9hcHApIHt9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZnJvbUpTT05cbiAgICogSlNPTiDlvaLlvI/jgpLkvb/jgaPjgaboh6rouqvjgavlrZDopoHntKDjgpLov73liqDjgZnjgovjgZPjgajjgYzjgafjgY3jgb7jgZnjgIJcbiAgICpcbiAgICogIyMjIEV4YW1wbGVcbiAgICogICAgICB0aGlzLmZyb21KU09OKHtcbiAgICogICAgICAgIFwiY2hpbGRyZW5cIjoge1xuICAgKiAgICAgICAgICBcImxhYmVsXCI6IHsgICAgICAgICAgICAgICAgICAvL+OCreODvOWQjeOBjOi/veWKoOOBmeOCi+WtkOimgee0oOOBruWQjeWJjeOBq+OBquOCi1xuICAgKiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiTGFiZWxcIiwgICAgIC8v44Kv44Op44K5XG4gICAqICAgICAgICAgICAgXCJhcmd1bWVudHNcIjogWydoZWxsbyEnXSwgIC8v5Yid5pyf5YyW5pmC44Gu5byV5pWwXG4gICAqICAgICAgICAgICAgXCJ4XCI6MzIwLCAgICAgICAgICAgICAgICAgIC8v44Gd44Gu5LuW44OX44Ot44OR44OG44KjXG4gICAqICAgICAgICAgICAgXCJ5XCI6NDgwLFxuICAgKiAgICAgICAgICB9LFxuICAgKiAgICAgICAgfSxcbiAgICogICAgICB9KTtcbiAgICogXG4gICAqIEB0eXBlZGVmIHt7XG4gICAqICAgY2hpbGRyZW4/OiBmcm9tSlNPTkRhdGFcbiAgICogICBjbGFzc05hbWU/OiBzdHJpbmcgfCAobmV3ICguLi5hcmdzOiBhbnkpPT4gYW55KVxuICAgKiAgIGFyZ3VtZW50cz86IGFueVxuICAgKiAgIFtvdGhlclByb3A6IHN0cmluZ106IGFueVxuICAgKiB9fSBmcm9tSlNPTkRhdGFcbiAgICogQHBhcmFtIHtmcm9tSlNPTkRhdGF9IGpzb24gSlNPTiDlvaLlvI9cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBmcm9tSlNPTihqc29uKSB7XG5cbiAgICB2YXIgY3JlYXRlQ2hpbGRyZW4gPSBcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IG5hbWVcbiAgICAgICAqIEBwYXJhbSB7ZnJvbUpTT05EYXRhfSBkYXRhXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgIHZhciBhcmdzID0gZGF0YS5hcmd1bWVudHM7XG4gICAgICBhcmdzID0gKGFyZ3MgaW5zdGFuY2VvZiBBcnJheSkgPyBhcmdzIDogW2FyZ3NdO1xuXG4gICAgICB2YXIgX2NsYXNzO1xuICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICBpZiAodHlwZW9mIGRhdGEuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBpcyBwaGluYSBjbGFzc1xuICAgICAgICBfY2xhc3MgPSBwaGluYS51c2luZyhkYXRhLmNsYXNzTmFtZSk7XG4gICAgICAgIGVsZW1lbnQgPSBfY2xhc3MuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhLmNsYXNzTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBpcyBFUyBjbGFzc1xuICAgICAgICAvLyBGSVhNRTog44Kk44Oz44K544K/44Oz44K55YyW44Gr44K544OX44Os44OD44OJ5qeL5paH44GM5b+F6KaB44Gq44Gf44KB44CBZXM144K144Od44O844OI44Gu5aC05ZCIYmFiZWzjgYzlv4XopoFcbiAgICAgICAgZWxlbWVudCA9IG5ldyBkYXRhLmNsYXNzTmFtZSguLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXNbbmFtZV0gPSBlbGVtZW50O1xuXG4gICAgICBlbGVtZW50LmZyb21KU09OKGRhdGEpO1xuICAgICAgZWxlbWVudC5hZGRDaGlsZFRvKHRoaXMpO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIGZvckluLmNhbGwoanNvbiwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIC8vIGpzb24uZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgICBmb3JJbi5jYWxsKHZhbHVlLCBmdW5jdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIC8vIHZhbHVlLmZvckluKGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbihuYW1lLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJ3R5cGUnICYmIGtleSAhPT0gJ2NsYXNzTmFtZScpIHtcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyAvKipcbiAgLy8gICogQG1ldGhvZCB0b0pTT05cbiAgLy8gICog6Ieq6Lqr44Gu5a2Q6KaB57Sg44KSIEpTT04g5b2i5byP44Gn6L+U44GX44G+44GZ44CCXG4gIC8vICAqXG4gIC8vICAqIEByZXR1cm4ge0pTT059IEpTT07lvaLlvI9cbiAgLy8gICovXG4gIC8vIHRvSlNPTigpIHtcbiAgLy8gICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBoaW5hLnVzaW5nKHRoaXMuY2xhc3NOYW1lKS5kZWZhdWx0cyB8fCB7fSk7XG5cbiAgLy8gICB0aGlzLl9oaWVyYXJjaGllcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgLy8gICAgIHZhciBkID0gZS5kZWZhdWx0cztcbiAgLy8gICAgIGlmIChkKSB7XG4gIC8vICAgICAgIE9iamVjdC5rZXlzKGQpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAvLyAgICAgICAgIGlmIChrZXlzLmluZGV4T2YoaykgPT09IC0xKSB7XG4gIC8vICAgICAgICAgICBrZXlzLnB1c2goayk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgICB9KTtcbiAgLy8gICAgIH1cbiAgLy8gICB9KTtcblxuICAvLyAgIGtleXMucHVzaCgnbmFtZScsICdjbGFzc05hbWUnKTtcblxuICAvLyAgIHZhciBqc29uID0ge307XG4gIC8vICAgLy8ga2V5cy5lYWNoKGZ1bmN0aW9uKGtleSkge1xuICAvLyAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgLy8gICAgIGpzb25ba2V5XSA9IHRoaXNba2V5XTtcbiAgLy8gICB9LCB0aGlzKTtcblxuICAvLyAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gIC8vICAgICByZXR1cm4gY2hpbGQudG9KU09OKCk7XG4gIC8vICAgfSk7XG5cbiAgLy8gICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gIC8vICAgICBqc29uLmNoaWxkcmVuID0ge307XG4gIC8vICAgICAvLyBjaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGNoaWxkLCBpKSB7XG4gIC8vICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkLCBpKSB7XG4gIC8vICAgICAgIGpzb24uY2hpbGRyZW5bY2hpbGQubmFtZSB8fCAoY2hpbGQuY2xhc3NOYW1lICsgJ18nICsgaSldID0gY2hpbGQ7XG4gIC8vICAgICB9KTtcbiAgLy8gICB9XG5cbiAgLy8gICByZXR1cm4ganNvbjtcbiAgLy8gfVxuXG4gIC8qKlxuICAgKiBhY2Nlc3NvcnnjgpLku5jkuI7jgZnjgotcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9hY2Nlc3NvcnkvYWNjZXNzb3J5JykuQWNjZXNzb3J5fSBhY2Nlc3NvcnkgQWNjZXNzb3J557aZ5om/44Kv44Op44K5XG4gICAqIEByZXR1cm4ge3RoaXN9XG4gICAqL1xuICBhdHRhY2goYWNjZXNzb3J5KSB7XG4gICAgaWYgKCF0aGlzLmFjY2Vzc29yaWVzKSB7XG4gICAgICB0aGlzLmFjY2Vzc29yaWVzID0gW107XG4gICAgICB0aGlzLm9uKCdlbnRlcmZyYW1lJywgZnVuY3Rpb24oZSkge1xuICAgICAgICB0aGlzLmFjY2Vzc29yaWVzLmZvckVhY2goZnVuY3Rpb24oYWNjZXNzb3J5KSB7XG4gICAgICAgICAgYWNjZXNzb3J5LnVwZGF0ZSAmJiBhY2Nlc3NvcnkudXBkYXRlKGUuYXBwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmFjY2Vzc29yaWVzLnB1c2goYWNjZXNzb3J5KTtcbiAgICBhY2Nlc3Nvcnkuc2V0VGFyZ2V0KHRoaXMpO1xuICAgIGFjY2Vzc29yeS5mbGFyZSgnYXR0YWNoZWQnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIGFjY2Vzc29yeeOCkuWJiumZpFxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2FjY2Vzc29yeS9hY2Nlc3NvcnknKS5BY2Nlc3Nvcnl9IGFjY2Vzc29yeSBBY2Nlc3Nvcnnntpnmib/jgq/jg6njgrlcbiAgICogQHJldHVybiB7dGhpc31cbiAgICovXG4gIGRldGFjaChhY2Nlc3NvcnkpIHtcbiAgICBpZiAodGhpcy5hY2Nlc3Nvcmllcykge1xuICAgICAgLy8gdGhpcy5hY2Nlc3Nvcmllcy5lcmFzZShhY2Nlc3NvcnkpO1xuICAgICAgZXJhc2UuY2FsbCh0aGlzLmFjY2Vzc29yaWVzLCBhY2Nlc3NvcnkpO1xuICAgICAgYWNjZXNzb3J5LnNldFRhcmdldChudWxsKTtcbiAgICAgIGFjY2Vzc29yeS5mbGFyZSgnZGV0YWNoZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rouqvjgavku5jkuI7vvIhhdHRhY2jvvInjgZXjgozjgZ/lhoXpg6h0d2VlbmVy44Kq44OW44K444Kn44Kv44OI44KS6L+U5Y20XG4gICAqIFxuICAgKiDjgqLjgq/jgrvjgrnmmYLjgavlrZjlnKjjgZfjgarjgYTloLTlkIjjgIHmlrDjgZ/jgatUd2VlbmVy44KS55Sf5oiQ44O75LuY5LiO44GZ44KLXG4gICAqL1xuICBnZXQgdHdlZW5lcigpIHtcbiAgICBpZiAoIXRoaXMuX3R3ZWVuZXIpIHtcbiAgICAgIHRoaXMuX3R3ZWVuZXIgPSBuZXcgVHdlZW5lcigpLmF0dGFjaFRvKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdHdlZW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDoh6rouqvjgavku5jkuI7vvIhhdHRhY2jvvInjgZXjgozjgZ/lhoXpg6hkcmFnZ2FibGXjgqrjg5bjgrjjgqfjgq/jg4jjgpLov5TljbRcbiAgICogXG4gICAqIOOCouOCr+OCu+OCueaZguOBq+WtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBn+OBq0RyYWdnYWJsZeOCkueUn+aIkOODu+S7mOS4juOBmeOCi1xuICAgKiDjgZ3jga7pmpvoh6rli5XjgafmnInlirnljJbjgZXjgozjgovjgZ/jgoHjgIHjgqLjgq/jgrvjgrnjgZfjgZ/lnLDngrnjgafjg4njg6njg4PjgrDlj6/og73jgavjgarjgotcbiAgICovXG4gIGdldCBkcmFnZ2FibGUoKSB7XG4gICAgaWYgKCF0aGlzLl9kcmFnZ2FibGUpIHtcbiAgICAgIHRoaXMuX2RyYWdnYWJsZSA9IG5ldyBEcmFnZ2FibGUoKS5hdHRhY2hUbyh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RyYWdnYWJsZTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtzdHJpbmd8bnVtYmVyfSBTY2VuZUxhYmVsXG4gKi9cblxuLyoqXG4gKiBleGl044Oh44K944OD44OJ55So44OR44Op44Oh44O844K/XG4gKiBAdHlwZWRlZiB7e1xuICogICBuZXh0TGFiZWw/OiBTY2VuZUxhYmVsXG4gKiAgIFtrZXk6IHN0cmluZ106IGFueSxcbiAqIH19IE5leHRBcmd1bWVudHNGb3JFeGl0XG4gKi9cblxuLyoqXG4gKiBTY2VuZeOBrkFwcOOCr+ODqeOCueWPgueFp+OBqOOBl+OBpuacgOS9jumZkOOBruOCpOODs+OCv+ODleOCp+ODvOOCueOCkuWCmeOBiOOBn+Wei1xuICogQHR5cGVkZWYge3tcbiAqICAgcG9wU2NlbmU6IHR5cGVvZiBpbXBvcnQoXCIuL2Jhc2VhcHBcIikuQmFzZUFwcC5wcm90b3R5cGUucG9wU2NlbmVcbiAqICAgW2tleTogc3RyaW5nXTogYW55LFxuICogfX0gU2NlbmVBcHBBcHBsaWFibGVcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hcHAuU2NlbmVcbiAqIF9leHRlbmRzIHBoaW5hLmFwcC5FbGVtZW50XG4gKi9cbmNsYXNzIFNjZW5lIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEFwcOOCr+ODqeOCueWPgueFp1xuICAgICAqIEB0eXBlIHtTY2VuZUFwcEFwcGxpYWJsZT99XG4gICAgICovXG4gICAgdGhpcy5hcHA7XG5cbiAgICAvKipcbiAgICAgKiDmrKHjga7jgrfjg7zjg7PjgpLooajjgZnjg6njg5njg6tcbiAgICAgKiBAdHlwZSB7U2NlbmVMYWJlbH1cbiAgICAgKi9cbiAgICB0aGlzLm5leHRMYWJlbDtcblxuICAgIC8qKlxuICAgICAqIOasoeOBruOCt+ODvOODs+OBq+a4oeOBleOCjOOCi+W8leaVsOOCkuS/neaMgVxuICAgICAqIE1hbmFnZXJTY2VuZeOCr+ODqeOCueOBp+S9v+eUqFxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgdGhpcy5uZXh0QXJndW1lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruOCt+ODvOODs+OCkuaKnOOBkeOCi1xuICAgKiBcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgc2NlbmUgPSBuZXcgU2NlbmUoKTtcbiAgICogc2NlbmUuZXhpdChcIm5leHRzY2VuZWxhYmVsXCIsIHtzY29yZTogMTI4fSlcbiAgICogLy8gb3JcbiAgICogc2NlbmUuZXhpdCh7bmV4dExhYmVsOlwibmV4dHNjZW5lbGFiZWxcIiwgc2NvcmU6IDEyOH0pXG4gICAqIFxuICAgKiBAcGFyYW0ge1NjZW5lTGFiZWwgfCBOZXh0QXJndW1lbnRzRm9yRXhpdH0gW25leHRMYWJlbE9yQXJndW1lbnRzXVxuICAgKiDmrKHjgrfjg7zjg7Pjga7jg6njg5njg6vjgIHjgoLjgZfjgY/jga/jg6njg5njg6vovrzjgb/jga7lvJXmlbDjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICogXG4gICAqIEBwYXJhbSB7YW55fSBbbmV4dEFyZ3VtZW50c11cbiAgICog5byV5pWw44Kq44OW44K444Kn44Kv44OIXG4gICAqIOesrOS4gOW8leaVsOOCkuODqeODmeODq+aWh+Wtl+WIl+OBp+aMh+WumuOBl+OBn+WgtOWQiOOBq+ioreWumlxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBleGl0KG5leHRMYWJlbE9yQXJndW1lbnRzLCBuZXh0QXJndW1lbnRzKSB7XG4gICAgaWYgKCF0aGlzLmFwcCkgcmV0dXJuIDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG5leHRMYWJlbE9yQXJndW1lbnRzID0gYXJndW1lbnRzWzBdLm5leHRMYWJlbCB8fCB0aGlzLm5leHRMYWJlbDtcbiAgICAgICAgbmV4dEFyZ3VtZW50cyA9IGFyZ3VtZW50c1swXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZXh0TGFiZWwgPSAvKiogQHR5cGUge1NjZW5lTGFiZWx9ICovKG5leHRMYWJlbE9yQXJndW1lbnRzKTtcbiAgICAgIHRoaXMubmV4dEFyZ3VtZW50cyA9IG5leHRBcmd1bWVudHM7XG4gICAgfVxuXG4gICAgdGhpcy5hcHAucG9wU2NlbmUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7KFxuICogICBTY2VuZSB8XG4gKiAgIGltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZSB8XG4gKiAgIGltcG9ydChcIi4uL2dhbWUvbWFuYWdlcnNjZW5lLmpzXCIpLk1hbmFnZXJTY2VuZVxuICogKX0gU2NlbmVUeXBlVW5pb25cbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hcHAuQmFzZUFwcFxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqIFxuICog44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K544Gu5Z+65bqV44Kv44Op44K5XG4gKi9cbmNsYXNzIEJhc2VBcHAgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiDjgrfjg7zjg7Pjga7jgrnjgr/jg4Pjgq9cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge1NjZW5lVHlwZVVuaW9uW119XG4gICAgICovXG4gICAgdGhpcy5fc2NlbmVzID0gW25ldyBTY2VuZSgpXTtcblxuICAgIC8qKlxuICAgICAqIOOCt+ODvOODs+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgICAqIOOCouOCr+ODhuOCo+ODluS4reOBruOCt+ODvOODs+euoeeQhuOBq+S9v+eUqFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3NjZW5lSW5kZXggPSAwO1xuXG4gICAgLyoqXG4gICAgICog5pu05paw5Yem55CG44GM5pyJ5Yq544Gq54q25oWL44GL44Gp44GG44GLXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5hd2FrZSA9IHRydWU7XG5cbiAgICAvKiogQHR5cGUge1VwZGF0ZXJ9ICovXG4gICAgdGhpcy51cGRhdGVyID0gbmV3IFVwZGF0ZXIodGhpcyk7XG5cbiAgICAvKiogQHR5cGUge0ludGVyYWN0aXZlfSAqL1xuICAgIHRoaXMuaW50ZXJhY3RpdmUgPSBuZXcgSW50ZXJhY3RpdmUodGhpcyk7XG5cbiAgICAvKiogQHR5cGUge1RpY2tlcn0gKi9cbiAgICB0aGlzLnRpY2tlciA9IG5ldyBUaWNrZXIoKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiB0aWNrZXLjgavjgojjgaPjgabmr47jg5Xjg6zjg7zjg6Dlrp/ooYzjgZXjgozjgovjgqLjg5fjg6rlhoXpg6jlh6bnkIZcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi91dGlsL2V2ZW50ZGlzcGF0Y2hlclwiKS5QaGluYUV2ZW50SGFuZGxlciB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fbG9vcENhbGxlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgpLplovlp4tcbiAgICogXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgcnVuKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl9sb29wQ2FsbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLl9sb29wKCk7XG4gICAgfTtcbiAgICB0aGlzLnRpY2tlci50aWNrKHRoaXMuX2xvb3BDYWxsZXIpO1xuXG4gICAgdGhpcy50aWNrZXIuc3RhcnQoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODl+ODquOCseODvOOCt+ODp+ODs+OCkuWujOWFqOWBnOatolxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBraWxsKCkge1xuICAgIHRoaXMudGlja2VyLnN0b3AoKTtcbiAgICBpZiAodGhpcy5fbG9vcENhbGxlcikgdGhpcy50aWNrZXIudW50aWNrKHRoaXMuX2xvb3BDYWxsZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBl+OBn+OCt+ODvOODs+OBq+WIh+OCiuabv+OBiOOCi1xuICAgKiBcbiAgICogQHBhcmFtIHtTY2VuZVR5cGVVbmlvbn0gc2NlbmVcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZXBsYWNlU2NlbmUoc2NlbmUpIHtcbiAgICB0aGlzLmZsYXJlKCdyZXBsYWNlJyk7XG4gICAgdGhpcy5mbGFyZSgnY2hhbmdlc2NlbmUnKTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnRTY2VuZSkge1xuICAgICAgdGhpcy5jdXJyZW50U2NlbmUuYXBwID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50U2NlbmUgPSBzY2VuZTtcbiAgICB0aGlzLmN1cnJlbnRTY2VuZS5hcHAgPSB0aGlzO1xuICAgIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdlbnRlcicsIHtcbiAgICAgIGFwcDogdGhpcyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBl+OBn3NjZW5l44Gr6YG356e744GZ44KLXG4gICAqIFxuICAgKiByZXBsYWNlU2NlbmXjgajjga/pgZXjgYTjgIHpgbfnp7vliY3jga7jgrfjg7zjg7Pjga/lgZzmraLjgZfjgabkv53mjIHjgZfntprjgZHjgovjgIJcbiAgICog44Gd44Gu44Gf44KB44CB44Od44O844K644KE44Kq44OW44K344On44Oz55S76Z2i44Gq44Gp44Gu5LiA5pmC55qE44Gq44K344O844Oz44Gn44Gu5L2/55So44Gr5pyA6YGpXG4gICAqIFxuICAgKiDlhbfkvZPnmoTjgavjga/jgrfjg7zjg7Pjgrnjgr/jg4Pjgq/jgavjgrfjg7zjg7PjgpLov73liqDjgZfjgaTjgaTjgIFcbiAgICog44Kk44Oz44OH44OD44Kv44K55YCk44KS6YCy44KB44KL44GT44Go44Gn44K344O844Oz6YG356e744GZ44KLXG4gICAqIFxuICAgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHB1c2hTY2VuZShzY2VuZSkge1xuICAgIHRoaXMuZmxhcmUoJ3B1c2gnKTtcbiAgICB0aGlzLmZsYXJlKCdjaGFuZ2VzY2VuZScpO1xuXG4gICAgdGhpcy5jdXJyZW50U2NlbmUuZmxhcmUoJ3BhdXNlJywge1xuICAgICAgYXBwOiB0aGlzLFxuICAgIH0pO1xuXG4gICAgdGhpcy5fc2NlbmVzLnB1c2goc2NlbmUpO1xuICAgICsrdGhpcy5fc2NlbmVJbmRleDtcblxuICAgIHRoaXMuZmxhcmUoJ3B1c2hlZCcpO1xuXG4gICAgc2NlbmUuYXBwID0gdGhpcztcbiAgICBzY2VuZS5mbGFyZSgnZW50ZXInLCB7XG4gICAgICBhcHA6IHRoaXMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7PjgpLmipzjgZHjgIHnm7TliY3jga7jgrfjg7zjg7PjgavmiLvjgotcbiAgICog44Od44O844K644KE44Kq44OW44K344On44Oz55S76Z2i44Gq44Gp44CB5LiA5pmC55qE44Gq44K344O844Oz44KS5oqc44GR44KL6Zqb44Gr5L2/55SoXG4gICAqIFxuICAgKiBwdXNoU2NlbmXlkIzmp5jjgIHjgrfjg7zjg7Pjgrnjgr/jg4Pjgq/jga7mk43kvZzjgavjgojjgaPjgaZcbiAgICog44Ki44Kv44OG44Kj44OW44Gq44K344O844Oz44KS5YiH44KK5pu/44GI44KLXG4gICAqIFxuICAgKiBAcmV0dXJucyB7U2NlbmUgfCB2b2lkfSDmipzjgZHjgZ9TY2VuZeOCquODluOCuOOCp+OCr+ODiOOAgeWHpueQhuOBp+OBjeOBquOBi+OBo+OBn+WgtOWQiOOBr+S9leOCgui/lOOBleOBquOBhFxuICAgKi9cbiAgcG9wU2NlbmUoKSB7XG4gICAgdGhpcy5mbGFyZSgncG9wJyk7XG4gICAgdGhpcy5mbGFyZSgnY2hhbmdlc2NlbmUnKTtcblxuICAgIC8vIEtlZXAgcm9vdFNjZW5lXG4gICAgaWYgKHRoaXMuX3NjZW5lcy5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgdmFyIHNjZW5lID0gLyoqIEB0eXBlIHtTY2VuZX0gKi8odGhpcy5fc2NlbmVzLnBvcCgpKTtcbiAgICAtLXRoaXMuX3NjZW5lSW5kZXg7XG5cbiAgICBzY2VuZS5mbGFyZSgnZXhpdCcsIHtcbiAgICAgIGFwcDogdGhpcyxcbiAgICB9KTtcbiAgICBzY2VuZS5hcHAgPSBudWxsO1xuXG4gICAgdGhpcy5mbGFyZSgncG9wZWQnKTtcblxuICAgIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdyZXN1bWUnLCB7XG4gICAgICBhcHA6IHRoaXMsXG4gICAgICBwcmV2U2NlbmU6IHNjZW5lLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNjZW5lO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODl+ODquOCseODvOOCt+ODp+ODs+OBruWGjemWi1xuICAgKiDmm7TmlrDlh6bnkIbjga7lrp/ooYzjgpLlho3plovjgZnjgotcbiAgICogXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5hd2FrZSA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7Pjga7kuIDmmYLlgZzmraJcbiAgICog5pu05paw5Yem55CG44KS5a6f6KGM44GX44Gq44GE44KI44GG44Gr44GZ44KLXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5hd2FrZSA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogc3RhdHMuanMoIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2Ivc3RhdHMuanMvICnjgpLlrp/ooYzjgZfjgIFcbiAgICog44OR44OV44Kp44O844Oe44Oz44K544Oi44OL44K/44O844KS6KGo56S644GZ44KLXG4gICAqIFxuICAgKiBzdGF0cy5qc+OBjOOCsOODreODvOODkOODq+OBp+iqreOBv+i+vOOBvuOCjOOBpuOBhOOBquOBhOWgtOWQiOOAgVxuICAgKiBjZG5qc+OBi+OCiXIxNOeJiOOCueOCr+ODquODl+ODiOOCkuiqreOBv+i+vOOCgFxuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBlbmFibGVTdGF0cygpIHtcbiAgICBpZiAocGhpbmEuZ2xvYmFsWydTdGF0cyddKSB7XG4gICAgICB0aGlzLnN0YXRzID0gbmV3IHBoaW5hLmdsb2JhbFsnU3RhdHMnXSgpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnN0YXRzLmRvbUVsZW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGNvbnNvbGUud2FybihcIm5vdCBkZWZpbmVkIHN0YXRzLlwiKTtcbiAgICAgIHZhciBTVEFUU19VUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvc3RhdHMuanMvcjE0L1N0YXRzLmpzJztcbiAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC5zcmMgPSBTVEFUU19VUkw7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlU3RhdHMoKTtcbiAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogZGF0LkdVSSggaHR0cHM6Ly9naXRodWIuY29tL2RhdGFhcnRzL2RhdC5ndWkgKeOCkuWIneacn+WMluOBl+OAgVxuICAgKiDjgZ3jga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgavmuKHjgZfjgablrp/ooYxcbiAgICogXG4gICAqIGRhdC5HVUnjgYzjgrDjg63jg7zjg5Djg6vjgafoqq3jgb/ovrzjgb7jgozjgabjgYTjgarjgYTloLTlkIjjgIFcbiAgICogY2RuanPjgYvjgol2MC41LjHniYjjgrnjgq/jg6rjg5fjg4jjgpLoqq3jgb/ovrzjgoBcbiAgICogXG4gICAqIEBwYXJhbSB7KGRhdEdVSU9iamVjdD86IGFueSkgPT4gYW55fSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGVuYWJsZURhdEdVSShjYWxsYmFjaykge1xuICAgIGlmIChwaGluYS5nbG9iYWxbJ2RhdCddKSB7XG4gICAgICB2YXIgZ3VpID0gbmV3IHBoaW5hLmdsb2JhbFsnZGF0J10uR1VJKCk7XG4gICAgICBjYWxsYmFjayhndWkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGNvbnNvbGUud2FybihcIm5vdCBkZWZpbmVkIGRhdC5HVUkuXCIpO1xuICAgICAgdmFyIFVSTCA9ICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXQtZ3VpLzAuNS4xL2RhdC5ndWkuanMnO1xuICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0LnNyYyA9IFVSTDtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGd1aSA9IG5ldyBwaGluYS5nbG9iYWxbJ2RhdCddLkdVSSgpO1xuICAgICAgICBjYWxsYmFjayhndWkpO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIOODq+ODvOODl+WHpueQhumWouaVsFxuICAgKiBcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfbG9vcCgpIHtcbiAgICB0aGlzLl91cGRhdGUoKTtcbiAgICB0aGlzLmludGVyYWN0aXZlLmNoZWNrKHRoaXMuY3VycmVudFNjZW5lKTtcbiAgICB0aGlzLl9kcmF3KCk7XG5cbiAgICAvLyBzdGF0cyB1cGRhdGVcbiAgICBpZiAodGhpcy5zdGF0cykgdGhpcy5zdGF0cy51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIOabtOaWsOWHpueQhumWouaVsFxuICAgKiBcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBfdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmF3YWtlKSB7XG4gICAgICAvLyDjgqjjg7Pjgr/jg7zjg5Xjg6zjg7zjg6DjgqTjg5njg7Pjg4hcbiAgICAgIGlmICh0aGlzLmhhcygnZW50ZXJmcmFtZScpKSB7XG4gICAgICAgIHRoaXMuZmxhcmUoJ2VudGVyZnJhbWUnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGUgJiYgdGhpcy51cGRhdGUoKTtcbiAgICAgIHRoaXMudXBkYXRlci51cGRhdGUodGhpcy5jdXJyZW50U2NlbmUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDnlKjku67mg7PplqLmlbBcbiAgICogXG4gICAqIEB2aXJ0dWFsXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICB1cGRhdGUoKSB7fVxuXG4gIC8qKlxuICAgKiDmj4/nlLvnlKjku67mg7PplqLmlbBcbiAgICogXG4gICAqIEB2aXJ0dWFsXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBfZHJhdygpIHt9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOCouOCr+ODhuOCo+ODluS4reOBruOCt+ODvOODs1xuICAgKi9cbiAgZ2V0IGN1cnJlbnRTY2VuZSgpICAgeyByZXR1cm4gdGhpcy5fc2NlbmVzW3RoaXMuX3NjZW5lSW5kZXhdOyB9XG4gIHNldCBjdXJyZW50U2NlbmUodikgIHsgdGhpcy5fc2NlbmVzW3RoaXMuX3NjZW5lSW5kZXhdID0gdjsgfVxuXG4gIC8qKlxuICAgKiDmoLnmnKzjgrfjg7zjg7PjgILjgqTjg7Pjgrnjgr/jg7PjgrnljJbjga7pmpvjgavoh6rli5XnmoTjgavoqK3lrppcbiAgICovXG4gIGdldCByb290U2NlbmUoKSAgIHsgcmV0dXJuIHRoaXMuX3NjZW5lc1swXTsgfVxuICBzZXQgcm9vdFNjZW5lKHYpICB7IHRoaXMuX3NjZW5lc1swXSA9IHY7IH1cblxuICAvKipcbiAgICog57WM6YGO44OV44Os44O844Og5pWwXG4gICAqL1xuICBnZXQgZnJhbWUoKSB7IHJldHVybiB0aGlzLnRpY2tlci5mcmFtZTsgfVxuICBzZXQgZnJhbWUodikgeyB0aGlzLnRpY2tlci5mcmFtZSA9IHY7IH1cblxuICAvKipcbiAgICogRnJhbWUgcGVyIHNlY29uZCAgXG4gICAqIOenkumWk+OBruabtOaWsOOBiuOCiOOBs+aPj+eUu+WHpueQhuWbnuaVsFxuICAgKi9cbiAgZ2V0IGZwcygpIHsgcmV0dXJuIHRoaXMudGlja2VyLmZwczsgfVxuICBzZXQgZnBzKHYpIHsgdGhpcy50aWNrZXIuZnBzID0gdjsgfVxuXG4gIC8qKlxuICAgKiDliY3jg5Xjg6zjg7zjg6Djgafjga7lh6bnkIbjgavjgYvjgYvjgaPjgZ/mmYLplpNcbiAgICovXG4gIGdldCBkZWx0YVRpbWUoKSB7IHJldHVybiB0aGlzLnRpY2tlci5kZWx0YVRpbWU7IH1cblxuICAvKipcbiAgICog44Ki44OX44Oq44Kx44O844K344On44Oz6ZaL5aeL44GL44KJ44Gu57WM6YGO5pmC6ZaTXG4gICAqL1xuICBnZXQgZWxhcHNlZFRpbWUoKSB7IHJldHVybiB0aGlzLnRpY2tlci5lbGFwc2VkVGltZTsgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7mmYLplpPvvIjmnIDlvozjga7mm7TmlrDmmYLjga5VTklY44K/44Kk44Og44K544K/44Oz44OX77yJXG4gICAqL1xuICBnZXQgY3VycmVudFRpbWUoKSB7IHJldHVybiB0aGlzLnRpY2tlci5jdXJyZW50VGltZTsgfVxuXG4gIC8qKlxuICAgKiDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7Pplovlp4vmmYLplpPvvIhVTklY44K/44Kk44Og44K544K/44Oz44OX77yJXG4gICAqL1xuICBnZXQgc3RhcnRUaW1lKCkgeyByZXR1cm4gdGhpcy50aWNrZXIuc3RhcnRUaW1lOyB9XG59XG5cbi8qKlxuICog5Yik5a6a5Yem55CG44Gu6Zqb44CB44Gp44Gu44KI44GG44Gq5b2i54q244Go44GX44Gm5omx44GG44GLXG4gKiBAdHlwZWRlZiB7XCJyZWN0XCJ8XCJjaXJjbGVcInxcIm5vbmVcIn0gT2JqZWN0MkRCb3VuZGluZ1R5cGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgeD86IE51bWJlcixcbiAqICB5PzogTnVtYmVyLFxuICogIHNjYWxlWD86IE51bWJlcixcbiAqICBzY2FsZVk/OiBOdW1iZXIsXG4gKiAgcm90YXRpb24/OiBOdW1iZXIsXG4gKiAgb3JpZ2luWD86IE51bWJlcixcbiAqICBvcmlnaW5ZPzogTnVtYmVyLFxuICogIHdpZHRoPzogTnVtYmVyLFxuICogIGhlaWdodD86IE51bWJlcixcbiAqICByYWRpdXM/OiBOdW1iZXIsXG4gKiAgYm91bmRpbmdUeXBlPzogT2JqZWN0MkRCb3VuZGluZ1R5cGUsXG4gKiB9fSBPYmplY3QyRE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hcHAuT2JqZWN0MkRcbiAqIE9iamVjdDJEXG4gKiBfZXh0ZW5kcyBwaGluYS5hcHAuRWxlbWVudFxuICovXG5jbGFzcyBPYmplY3QyRCBleHRlbmRzIEVsZW1lbnQge1xuXG4gIC8vIC8qKiDkvY3nva4gKi9cbiAgLy8gcG9zaXRpb246IG51bGwsXG4gIC8vIC8qKiDlm57ou6IgKi9cbiAgLy8gcm90YXRpb246IDAsXG4gIC8vIC8qKiDjgrnjgrHjg7zjg6sgKi9cbiAgLy8gc2NhbGU6IG51bGwsXG4gIC8vIC8qKiDln7rmupbkvY3nva4gKi9cbiAgLy8gb3JpZ2luOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdDJET3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zLCBPYmplY3QyRC5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucywgcGhpbmEuYXBwLk9iamVjdDJELmRlZmF1bHRzKTtcblxuICAgIC8qKiBAdHlwZSB7VmVjdG9yMn0g5L2N572uICovXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWN0b3IyKG9wdGlvbnMueCwgb3B0aW9ucy55KTtcblxuICAgIC8qKiBAdHlwZSB7VmVjdG9yMn0g44K544Kx44O844OrICovXG4gICAgdGhpcy5zY2FsZSAgICA9IG5ldyBWZWN0b3IyKG9wdGlvbnMuc2NhbGVYLCBvcHRpb25zLnNjYWxlWSk7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0g5Zue6Lui77yI5bqm5pWw5Y2Y5L2N77yJICovXG4gICAgdGhpcy5yb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb24gfHwgMDtcblxuICAgIC8qKiBAdHlwZSB7VmVjdG9yMn0g5Z+65rqW5L2N572u44CB5Zue6Lui6Lu4ICovXG4gICAgdGhpcy5vcmlnaW4gICA9IG5ldyBWZWN0b3IyKG9wdGlvbnMub3JpZ2luWCwgb3B0aW9ucy5vcmlnaW5ZKTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge01hdHJpeDMzfVxuICAgICAqIOODreODvOOCq+ODq+WkieaPm+ihjOWIl1xuICAgICAqL1xuICAgIHRoaXMuX21hdHJpeCA9IG5ldyBNYXRyaXgzMygpLmlkZW50aXR5KCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hdHJpeDMzIHwgbnVsbH1cbiAgICAgKiDjg6/jg7zjg6vjg4nlpInmj5vooYzliJdcbiAgICAgKi9cbiAgICB0aGlzLl93b3JsZE1hdHJpeCA9IG5ldyBNYXRyaXgzMygpLmlkZW50aXR5KCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IOihjOWIl+ioiOeul+eUqOOCreODo+ODg+OCt+ODpeWApFxuICAgICAqL1xuICAgIHRoaXMuX2NhY2hlZFJvdGF0aW9uO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge251bWJlcn0g6KGM5YiX6KiI566X55So44Kt44Oj44OD44K344Ol5YCkXG4gICAgICovXG4gICAgdGhpcy5fc3I7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSDooYzliJfoqIjnrpfnlKjjgq3jg6Pjg4Pjgrfjg6XlgKRcbiAgICAgKi9cbiAgICB0aGlzLl9jcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIOOCpOODs+OCv+ODqeOCr+OCt+ODp+ODs+WPr+iDveOBi+OBqeOBhuOBi1xuICAgICAqL1xuICAgIHRoaXMuaW50ZXJhY3RpdmUgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7eyBbaWQ6IG51bWJlcl06IGJvb2xlYW4gfX1cbiAgICAgKiBJbnRlcmFjdGl2ZeOCr+ODqeOCueOBp+OBruODleODqeOCsOWHpueQhueUqFxuICAgICAqL1xuICAgIHRoaXMuX292ZXJGbGFncyA9IHt9O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHt7IFtpZDogbnVtYmVyXTogYm9vbGVhbiB9fVxuICAgICAqIEludGVyYWN0aXZl44Kv44Op44K544Gn44Gu44OV44Op44Kw5Yem55CG55SoXG4gICAgICovXG4gICAgdGhpcy5fdG91Y2hGbGFncyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fd2lkdGg7XG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5faGVpZ2h0O1xuICAgIC8qKlxuICAgICAqIOWNiuW+hDogYm91bmRpbmdUeXBl44GMY2lyY2xl44Gu5aC05ZCI44Gu44G/5L2/55SoXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3JhZGl1cztcbiAgICAvKipcbiAgICAgKiDnm7TlvoQ6IGJvdW5kaW5nVHlwZeOBjGNpcmNsZeOBrumam+OBq3dpZHRoL2hlaWdodOWApOOBqOOBl+OBpuS9v+eUqCAgXG4gICAgICogcmFkaXVz44Ki44Kv44K744K1c2V044Gu6Zqb44Gr5pu05pawXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX2RpYW1ldGVyO1xuXG4gICAgdGhpcy53aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICB0aGlzLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICAgIC8qKlxuICAgICAqIOW9k+OBn+OCiuWIpOWumuevhOWbsuOBrueoruWIpVxuICAgICAqIEB0eXBlIHtPYmplY3QyREJvdW5kaW5nVHlwZX1cbiAgICAgKi9cbiAgICB0aGlzLmJvdW5kaW5nVHlwZSA9IG9wdGlvbnMuYm91bmRpbmdUeXBlO1xuXG4gICAgLyoqIEB0eXBlIHtPYmplY3QyRHxQaGluYUVsZW1lbnR9ICovXG4gICAgdGhpcy5wYXJlbnQ7XG4gIH1cblxuICAvKipcbiAgICog54K544Go6KGd56qB44GX44Gm44GE44KL44GL44KS5Yik5a6aXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqL1xuICBoaXRUZXN0KHgsIHkpIHtcbiAgICBpZiAodGhpcy5ib3VuZGluZ1R5cGUgPT09ICdyZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuaGl0VGVzdFJlY3QoeCwgeSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuYm91bmRpbmdUeXBlID09PSAnY2lyY2xlJykge1xuICAgICAgcmV0dXJuIHRoaXMuaGl0VGVzdENpcmNsZSh4LCB5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBub25lIOOBruWgtOWQiFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOiHqui6q+OCkuefqeW9ouOBqOOBl+OBpuOAgeeCueOBqOihneeqgeOBl+OBpuOBhOOCi+OBi+OCkuWIpOWumlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGhpdFRlc3RSZWN0KHgsIHkpIHtcbiAgICB2YXIgcCA9IHRoaXMuZ2xvYmFsVG9Mb2NhbChuZXcgVmVjdG9yMih4LCB5KSk7XG5cbiAgICB2YXIgbGVmdCAgID0gLXRoaXMud2lkdGgqdGhpcy5vcmlnaW5YO1xuICAgIHZhciByaWdodCAgPSArdGhpcy53aWR0aCooMS10aGlzLm9yaWdpblgpO1xuICAgIHZhciB0b3AgICAgPSAtdGhpcy5oZWlnaHQqdGhpcy5vcmlnaW5ZO1xuICAgIHZhciBib3R0b20gPSArdGhpcy5oZWlnaHQqKDEtdGhpcy5vcmlnaW5ZKTtcblxuICAgIHJldHVybiAoIGxlZnQgPCBwLnggJiYgcC54IDwgcmlnaHQgKSAmJiAoIHRvcCAgPCBwLnkgJiYgcC55IDwgYm90dG9tICk7XG4gIH1cblxuICAvKipcbiAgICog6Ieq6Lqr44KS5YaG5b2i44Go44GX44Gm44CB54K544Go6KGd56qB44GX44Gm44GE44KL44GL44KS5Yik5a6aXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGl0VGVzdENpcmNsZSh4LCB5KSB7XG4gICAgLy8g5YaG5Yik5a6aXG4gICAgdmFyIHAgPSB0aGlzLmdsb2JhbFRvTG9jYWwobmV3IFZlY3RvcjIoeCwgeSkpO1xuICAgIGlmICgoKHAueCkqKHAueCkrKHAueSkqKHAueSkpIDwgKHRoaXMucmFkaXVzKnRoaXMucmFkaXVzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOBqOihneeqgeOBl+OBpuOBhOOCi+OBi+OCkuWIpOWumlxuICAgKiBAcGFyYW0ge09iamVjdDJEfSBlbG1cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoaXRUZXN0RWxlbWVudChlbG0pIHtcbiAgICB2YXIgcmVjdDAgPSB0aGlzO1xuICAgIHZhciByZWN0MSA9IGVsbTtcbiAgICByZXR1cm4gKHJlY3QwLmxlZnQgPCByZWN0MS5yaWdodCkgJiYgKHJlY3QwLnJpZ2h0ID4gcmVjdDEubGVmdCkgJiZcbiAgICAgICAgICAgKHJlY3QwLnRvcCA8IHJlY3QxLmJvdHRvbSkgJiYgKHJlY3QwLmJvdHRvbSA+IHJlY3QxLnRvcCk7XG4gIH1cblxuICAvKipcbiAgICog5rih44GV44KM44Gf5bqn5qiZ44KS44Ot44O844Kr44Or5bqn5qiZ44Gr5aSJ5o+b44GX44Gm6L+U44GZXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZ2VvbS92ZWN0b3IyXCIpLlByaW1pdGl2ZVZlY3RvcjJ9IHAg5YCk44Gv5aSJ5pu044GX44G+44Gb44KTXG4gICAqIEByZXR1cm5zIHtWZWN0b3IyfSDmlrDopo/kvZzmiJDjgZXjgozjgZ/jg63jg7zjgqvjg6vluqfmqJnjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIGdsb2JhbFRvTG9jYWwocCkge1xuICAgIHZhciBtYXRyaXggPSB0aGlzLl93b3JsZE1hdHJpeC5jbG9uZSgpO1xuICAgIG1hdHJpeC5pbnZlcnQoKTtcbiAgICAvLyBtYXRyaXgudHJhbnNwb3NlKCk7XG5cbiAgICB2YXIgdGVtcCA9IG1hdHJpeC5tdWx0aXBseVZlY3RvcjIocCk7XG5cbiAgICByZXR1cm4gdGVtcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgr/jg6njgq/jgrfjg6fjg7Plj6/og73jgYvjganjgYbjgYvjgpLlpInmm7QgIFxuICAgKiDlkIzmmYLjgatib3VuZGluZ1R5cGXjgoLlpInmm7Tlj6/og71cbiAgICogQHBhcmFtIHtib29sZWFufSBmbGFnXG4gICAqIEBwYXJhbSB7T2JqZWN0MkRCb3VuZGluZ1R5cGV9IFt0eXBlXVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldEludGVyYWN0aXZlKGZsYWcsIHR5cGUpIHtcbiAgICB0aGlzLmludGVyYWN0aXZlID0gZmxhZztcbiAgICBpZiAodHlwZSkge1xuICAgICAgdGhpcy5ib3VuZGluZ1R5cGUgPSB0eXBlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFgg5bqn5qiZ5YCk44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0WCh4KSB7XG4gICAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIFkg5bqn5qiZ5YCk44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0WSh5KSB7XG4gICAgdGhpcy5wb3NpdGlvbi55ID0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIFhZIOW6p+aomeOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFBvc2l0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggPSB4O1xuICAgIHRoaXMucG9zaXRpb24ueSA9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5Zue6Lui44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByb3RhdGlvblxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFJvdGF0aW9uKHJvdGF0aW9uKSB7XG4gICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueOCseODvOODq+OCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0gW3ldIOecgeeVpeOBl+OBn+WgtOWQiOOAgXjjg5Hjg6njg6Hjg7zjgr/lgKTjgYzpgannlKjjgZXjgozjgb7jgZlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTY2FsZSh4LCB5KSB7XG4gICAgdGhpcy5zY2FsZS54ID0geDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHRoaXMuc2NhbGUueSA9IHg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zY2FsZS55ID0geTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDln7rmupbngrnjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRPcmlnaW4oeCwgeSkge1xuICAgIHRoaXMub3JpZ2luLnggPSB4O1xuICAgIHRoaXMub3JpZ2luLnkgPSB5O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog5bmF44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFdpZHRoKHdpZHRoKSB7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICAvKipcbiAgICog6auY44GV44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRIZWlnaHQoaGVpZ2h0KSB7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDjgrXjgqTjgroo5bmFLCDpq5jjgZUp44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdGhpcy53aWR0aCAgPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdDJEQm91bmRpbmdUeXBlfSB0eXBlXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0Qm91bmRpbmdUeXBlKHR5cGUpIHtcbiAgICB0aGlzLmJvdW5kaW5nVHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBtb3ZlVG8oeCwgeSkge1xuICAgIHRoaXMucG9zaXRpb24ueCA9IHg7XG4gICAgdGhpcy5wb3NpdGlvbi55ID0geTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIG1vdmVCeSh4LCB5KSB7XG4gICAgdGhpcy5wb3NpdGlvbi54ICs9IHg7XG4gICAgdGhpcy5wb3NpdGlvbi55ICs9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Kw44Ot44O844OQ44Or6KGM5YiX44KS6KiI566XXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgX2NhbGNXb3JsZE1hdHJpeCgpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gO1xuXG4gICAgLy8gY2FjaGUgY2hlY2tcbiAgICBpZiAodGhpcy5yb3RhdGlvbiAhPSB0aGlzLl9jYWNoZWRSb3RhdGlvbikge1xuICAgICAgdGhpcy5fY2FjaGVkUm90YXRpb24gPSB0aGlzLnJvdGF0aW9uO1xuXG4gICAgICB2YXIgciA9IHRoaXMucm90YXRpb24qKE1hdGguUEkvMTgwKTtcbiAgICAgIHRoaXMuX3NyID0gTWF0aC5zaW4ocik7XG4gICAgICB0aGlzLl9jciA9IE1hdGguY29zKHIpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbCA9IHRoaXMuX21hdHJpeDtcbiAgICB2YXIgcGFyZW50ID0gLyoqIEB0eXBlIHtPYmplY3QyRH0gKi8odGhpcy5wYXJlbnQpLl93b3JsZE1hdHJpeCB8fCBNYXRyaXgzMy5JREVOVElUWTtcbiAgICB2YXIgd29ybGQgPSB0aGlzLl93b3JsZE1hdHJpeDtcblxuICAgIC8vIOODreODvOOCq+ODq+OBruihjOWIl+OCkuioiOeul1xuICAgIGxvY2FsLm0wMCA9IHRoaXMuX2NyICogdGhpcy5zY2FsZS54O1xuICAgIGxvY2FsLm0wMSA9LXRoaXMuX3NyICogdGhpcy5zY2FsZS55O1xuICAgIGxvY2FsLm0xMCA9IHRoaXMuX3NyICogdGhpcy5zY2FsZS54O1xuICAgIGxvY2FsLm0xMSA9IHRoaXMuX2NyICogdGhpcy5zY2FsZS55O1xuICAgIGxvY2FsLm0wMiA9IHRoaXMucG9zaXRpb24ueDtcbiAgICBsb2NhbC5tMTIgPSB0aGlzLnBvc2l0aW9uLnk7XG5cbiAgICAvLyBjYWNoZVxuICAgIHZhciBhMDAgPSBsb2NhbC5tMDA7IHZhciBhMDEgPSBsb2NhbC5tMDE7IHZhciBhMDIgPSBsb2NhbC5tMDI7XG4gICAgdmFyIGExMCA9IGxvY2FsLm0xMDsgdmFyIGExMSA9IGxvY2FsLm0xMTsgdmFyIGExMiA9IGxvY2FsLm0xMjtcbiAgICB2YXIgYjAwID0gcGFyZW50Lm0wMDsgdmFyIGIwMSA9IHBhcmVudC5tMDE7IHZhciBiMDIgPSBwYXJlbnQubTAyO1xuICAgIHZhciBiMTAgPSBwYXJlbnQubTEwOyB2YXIgYjExID0gcGFyZW50Lm0xMTsgdmFyIGIxMiA9IHBhcmVudC5tMTI7XG5cbiAgICAvLyDopqrjga7ooYzliJfjgajmjpvjgZHlkIjjgo/jgZvjgotcbiAgICB3b3JsZC5tMDAgPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTA7XG4gICAgd29ybGQubTAxID0gYjAwICogYTAxICsgYjAxICogYTExO1xuICAgIHdvcmxkLm0wMiA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMjtcblxuICAgIHdvcmxkLm0xMCA9IGIxMCAqIGEwMCArIGIxMSAqIGExMDtcbiAgICB3b3JsZC5tMTEgPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTE7XG4gICAgd29ybGQubTEyID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIHhcbiAgICogeOW6p+aomeWApFxuICAgKi9cbiAgZ2V0IHgoKSAgIHsgcmV0dXJuIHRoaXMucG9zaXRpb24ueDsgfVxuICBzZXQgeCh2KSAgeyB0aGlzLnBvc2l0aW9uLnggPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICB5XG4gICAqIHnluqfmqJnlgKRcbiAgICovXG4gIGdldCB5KCkgICB7IHJldHVybiB0aGlzLnBvc2l0aW9uLnk7IH1cbiAgc2V0IHkodikgIHsgdGhpcy5wb3NpdGlvbi55ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgb3JpZ2luWFxuICAgKiB45bqn5qiZ5YCkXG4gICAqL1xuICBnZXQgb3JpZ2luWCgpICAgeyByZXR1cm4gdGhpcy5vcmlnaW4ueDsgfVxuICBzZXQgb3JpZ2luWCh2KSAgeyB0aGlzLm9yaWdpbi54ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgb3JpZ2luWVxuICAgKiB55bqn5qiZ5YCkXG4gICAqL1xuICBnZXQgb3JpZ2luWSgpICAgeyByZXR1cm4gdGhpcy5vcmlnaW4ueTsgfVxuICBzZXQgb3JpZ2luWSh2KSAgeyB0aGlzLm9yaWdpbi55ID0gdjsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgc2NhbGVYXG4gICAqIOOCueOCseODvOODq1jlgKRcbiAgICovXG4gIGdldCBzY2FsZVgoKSAgIHsgcmV0dXJuIHRoaXMuc2NhbGUueDsgfVxuICBzZXQgc2NhbGVYKHYpICB7IHRoaXMuc2NhbGUueCA9IHY7IH1cbiAgXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgc2NhbGVZXG4gICAqIOOCueOCseODvOODq1nlgKRcbiAgICovXG4gIGdldCBzY2FsZVkoKSAgIHsgcmV0dXJuIHRoaXMuc2NhbGUueTsgfVxuICBzZXQgc2NhbGVZKHYpICB7IHRoaXMuc2NhbGUueSA9IHY7IH1cbiAgXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgd2lkdGhcbiAgICogd2lkdGhcbiAgICovXG4gIGdldCB3aWR0aCgpICAge1xuICAgIHJldHVybiAodGhpcy5ib3VuZGluZ1R5cGUgPT09ICdyZWN0JykgP1xuICAgICAgdGhpcy5fd2lkdGggOiB0aGlzLl9kaWFtZXRlcjtcbiAgfVxuICBzZXQgd2lkdGgodikgIHsgdGhpcy5fd2lkdGggPSB2OyB9XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSAgICBoZWlnaHRcbiAgICogaGVpZ2h0XG4gICAqL1xuICBnZXQgaGVpZ2h0KCkgICB7XG4gICAgcmV0dXJuICh0aGlzLmJvdW5kaW5nVHlwZSA9PT0gJ3JlY3QnKSA/XG4gICAgICB0aGlzLl9oZWlnaHQgOiB0aGlzLl9kaWFtZXRlcjtcbiAgfVxuICBzZXQgaGVpZ2h0KHYpICB7IHRoaXMuX2hlaWdodCA9IHY7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIHJhZGl1c1xuICAgKiDljYrlvoRcbiAgICovXG4gIGdldCByYWRpdXMoKSAgIHtcbiAgICByZXR1cm4gKHRoaXMuYm91bmRpbmdUeXBlID09PSAncmVjdCcpID9cbiAgICAgICh0aGlzLndpZHRoK3RoaXMuaGVpZ2h0KS80IDogdGhpcy5fcmFkaXVzO1xuICB9XG4gIHNldCByYWRpdXModikgIHtcbiAgICB0aGlzLl9yYWRpdXMgPSB2O1xuICAgIHRoaXMuX2RpYW1ldGVyID0gdioyO1xuICB9XG4gIFxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIHRvcFxuICAgKiDlt6ZcbiAgICovXG4gIGdldCB0b3AoKSAgIHsgcmV0dXJuIHRoaXMueSAtIHRoaXMuaGVpZ2h0KnRoaXMub3JpZ2luWTsgfVxuICBzZXQgdG9wKHYpICB7IHRoaXMueSA9IHYgKyB0aGlzLmhlaWdodCp0aGlzLm9yaWdpblk7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIHJpZ2h0XG4gICAqIOW3plxuICAgKi9cbiAgZ2V0IHJpZ2h0KCkgICB7IHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoKigxLXRoaXMub3JpZ2luWCk7IH1cbiAgc2V0IHJpZ2h0KHYpICB7IHRoaXMueCA9IHYgLSB0aGlzLndpZHRoKigxLXRoaXMub3JpZ2luWCk7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGJvdHRvbVxuICAgKiDlt6ZcbiAgICovXG4gIGdldCBib3R0b20oKSAgIHsgcmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0KigxLXRoaXMub3JpZ2luWSk7IH1cbiAgc2V0IGJvdHRvbSh2KSAgeyB0aGlzLnkgPSB2IC0gdGhpcy5oZWlnaHQqKDEtdGhpcy5vcmlnaW5ZKTsgfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgbGVmdFxuICAgKiDlt6ZcbiAgICovXG4gIGdldCBsZWZ0KCkgICB7IHJldHVybiB0aGlzLnggLSB0aGlzLndpZHRoKnRoaXMub3JpZ2luWDsgfVxuICBzZXQgbGVmdCh2KSAgeyB0aGlzLnggPSB2ICsgdGhpcy53aWR0aCp0aGlzLm9yaWdpblg7IH1cblxuICAvKipcbiAgICogQHByb3BlcnR5ICAgIGNlbnRlclhcbiAgICogY2VudGVyWFxuICAgKi9cbiAgZ2V0IGNlbnRlclgoKSAgIHsgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGgvMiAtIHRoaXMud2lkdGgqdGhpcy5vcmlnaW5YOyB9XG4gIC8vIHNldCBjZW50ZXJYKHYpICB7XG4gIC8vICAgLy8gVE9ETzog44Gp44GG44GX44KI44GG44GL44GqPz9cbiAgLy8gfVxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgICAgY2VudGVyWVxuICAgKiBjZW50ZXJZXG4gICAqL1xuICBnZXQgY2VudGVyWSgpICAgeyByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQvMiAtIHRoaXMuaGVpZ2h0KnRoaXMub3JpZ2luWTsgfVxuICAvLyBzZXQgY2VudGVyWSh2KSAge1xuICAvLyAgIC8vIFRPRE86IOOBqeOBhuOBl+OCiOOBhuOBi+OBqj8/XG4gIC8vIH1cbn1cblxuLyoqXG4gKiBAdHlwZSB7T2JqZWN0MkRPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5PYmplY3QyRC5kZWZhdWx0cyA9IHtcbiAgeDogMCxcbiAgeTogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDEsXG4gIHJvdGF0aW9uOiAwLFxuICBvcmlnaW5YOiAwLjUsXG4gIG9yaWdpblk6IDAuNSxcbiAgd2lkdGg6IDY0LFxuICBoZWlnaHQ6IDY0LFxuICByYWRpdXM6IDMyLFxuICBib3VuZGluZ1R5cGU6ICdyZWN0Jyxcbn07XG5cbi8qKlxuICogcGhpbmHni6zoh6rjga5Qb2ludGVy5Z6LXG4gKiBAdHlwZWRlZiB7TW91c2UgfCBQaGluYVRvdWNofSBQb2ludGVyXG4gKi9cblxuLyoqXG4gKiBEb21BcHDliJ3mnJ/ljJbjgqrjg5fjgrfjg6fjg7MgIFxuICogZG9tRWxlbWVudOOCguOBl+OBj+OBr3F1ZXJ544GE44Ga44KM44GL44Gv5b+F44Ga5oyH5a6a44GZ44KL44GT44GoXG4gKiBAdHlwZWRlZiB7e1xuICogIGRvbUVsZW1lbnQ/OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAqICBxdWVyeT86IHN0cmluZzsgXG4gKiAgZnBzPzogbnVtYmVyOyBcbiAqICBydW5uZXI/OiAocnVuOiBUaW1lckhhbmRsZXIsIGRlbGF5OiBudW1iZXIpID0+IHZvaWQ7XG4gKiB9fSBEb21BcHBPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5Eb21BcHBcbiAqIF9leHRlbmRzIHBoaW5hLmFwcC5CYXNlQXBwXG4gKi9cbmNsYXNzIERvbUFwcCBleHRlbmRzIEJhc2VBcHAge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtEb21BcHBPcHRpb25zfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSBIVE1MQ2FudmFzRWxlbWVudCAqL1xuICAgIHRoaXMuZG9tRWxlbWVudDtcblxuICAgIGlmIChvcHRpb25zLmRvbUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudCA9IG9wdGlvbnMuZG9tRWxlbWVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5xdWVyeSkge1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMucXVlcnkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KCdlcnJvcicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmZwcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmZwcyA9IG9wdGlvbnMuZnBzO1xuICAgIH1cbiAgICBcbiAgICBpZih0eXBlb2Ygb3B0aW9ucy5ydW5uZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMudGlja2VyLnJ1bm5lciA9IG9wdGlvbnMucnVubmVyO1xuICAgIH1cblxuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2UodGhpcy5kb21FbGVtZW50KTtcbiAgICB0aGlzLnRvdWNoID0gbmV3IFRvdWNoJDEodGhpcy5kb21FbGVtZW50KTtcbiAgICB0aGlzLnRvdWNoTGlzdCA9IG5ldyBUb3VjaExpc3QodGhpcy5kb21FbGVtZW50KTtcbiAgICB0aGlzLmtleWJvYXJkID0gbmV3IEtleWJvYXJkKGRvY3VtZW50KTtcbiAgICAvLyAvLyDliqDpgJ/luqbjgrvjg7PjgrXjg7zjgpLnlJ/miJBcbiAgICAvLyB0aGlzLmFjY2VsZXJvbWV0ZXIgPSBwaGluYS5pbnB1dC5BY2NlbGVyb21ldGVyKCk7XG5cbiAgICAvLyDjg53jgqTjg7Pjgr/jgpLjgrvjg4Pjg4goUEMg44Gn44GvIE1vdXNlLCBNb2JpbGUg44Gn44GvIFRvdWNoKVxuICAgIC8qKiBAdHlwZSB7UG9pbnRlcn0gKi9cbiAgICB0aGlzLnBvaW50ZXIgPSB0aGlzLnRvdWNoO1xuICAgIC8qKiBAdHlwZSB7UG9pbnRlcltdfSAqL1xuICAgIHRoaXMucG9pbnRlcnMgPSB0aGlzLnRvdWNoTGlzdC50b3VjaGVzO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBcbiAgICAvKiogQHRoaXMgRG9tQXBwICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wb2ludGVyID0gdGhpcy50b3VjaDtcbiAgICAgIHRoaXMucG9pbnRlcnMgPSB0aGlzLnRvdWNoTGlzdC50b3VjaGVzO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgXG4gICAgLyoqIEB0aGlzIERvbUFwcCAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucG9pbnRlciA9IHRoaXMubW91c2U7XG4gICAgICB0aGlzLnBvaW50ZXJzID0gW3RoaXMubW91c2VdO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAvLyBrZXlib2FyZCBldmVudFxuICAgIHRoaXMua2V5Ym9hcmQub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRTY2VuZSAmJiB0aGlzLmN1cnJlbnRTY2VuZS5mbGFyZSgna2V5ZG93bicsIHtcbiAgICAgICAga2V5Q29kZTogZS5rZXlDb2RlLFxuICAgICAgfSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmtleWJvYXJkLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuY3VycmVudFNjZW5lICYmIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdrZXl1cCcsIHtcbiAgICAgICAga2V5Q29kZTogZS5rZXlDb2RlLFxuICAgICAgfSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmtleWJvYXJkLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuY3VycmVudFNjZW5lICYmIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdrZXlwcmVzcycsIHtcbiAgICAgICAga2V5Q29kZTogZS5rZXlDb2RlLFxuICAgICAgfSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIGNsaWNrIOWvvuW/nFxuICAgIHZhciBldmVudE5hbWUgPSBwaGluYS5pc01vYmlsZSgpID8gJ3RvdWNoZW5kJyA6ICdtb3VzZXVwJztcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuX2NoZWNrQ2xpY2suYmluZCh0aGlzKSk7XG5cbiAgICAvLyDmsbrlrprmmYLjga7lh6bnkIbjgpLjgqrjg5XjgavjgZnjgosoaVBob25lIOaZguOBruOBoeOCieOBpOOBjeWvvuetlilcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZnVuY3Rpb24oZSkgeyBzdG9wLmNhbGwoZSk7IH0pO1xuICAgIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGZ1bmN0aW9uKGUpIHsgc3RvcC5jYWxsKGUpOyB9KTtcblxuICAgIC8vIOOCpuOCo+ODs+ODieOCpuODleOCqeODvOOCq+OCueaZguOCpOODmeODs+ODiOODquOCueODiuOCkueZu+mMslxuICAgIHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5mbGFyZSgnZm9jdXMnKTtcbiAgICAgIHRoaXMuY3VycmVudFNjZW5lLmZsYXJlKCdmb2N1cycpO1xuICAgIH0uYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIC8vIOOCpuOCo+ODs+ODieOCpuODluODqeODvOaZguOCpOODmeODs+ODiOODquOCueODiuOCkueZu+mMslxuICAgIHBoaW5hLmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZsYXJlKCdibHVyJyk7XG4gICAgICB0aGlzLmN1cnJlbnRTY2VuZS5mbGFyZSgnYmx1cicpO1xuICAgIH0uYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgLy8g5pu05paw6Zai5pWw44KS55m76YyyXG4gICAgdGhpcy5vbignZW50ZXJmcmFtZScsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5tb3VzZS51cGRhdGUoKTtcbiAgICAgIHRoaXMudG91Y2gudXBkYXRlKCk7XG4gICAgICB0aGlzLnRvdWNoTGlzdC51cGRhdGUoKTtcbiAgICAgIHRoaXMua2V5Ym9hcmQudXBkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogdG91Y2hlbmQvbW91c2V1cOOBp+OBrueWkeS8vGNsaWNr44Kk44OZ44Oz44OI5Yem55CGXG4gICAqIEBwYXJhbSB7Kn0gX2UgXG4gICAqL1xuICBfY2hlY2tDbGljayhfZSkge1xuICAgIC8qKiBAcGFyYW0ge2ltcG9ydCgnLi4vYXBwL2VsZW1lbnQnKS5FbGVtZW50fSBlbGVtZW50ICovXG4gICAgdmFyIF9jaGVjayA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgX2NoZWNrKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5fY2xpY2tlZCAmJiBlbGVtZW50LmhhcygnY2xpY2snKSkge1xuICAgICAgICBlbGVtZW50LmZsYXJlKCdjbGljaycpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5fY2xpY2tlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfY2hlY2sodGhpcy5jdXJyZW50U2NlbmUpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vYXBwL2VsZW1lbnRcIikuRWxlbWVudCAmIHtcbiAqICAgYmFja2dyb3VuZENvbG9yPzogaW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlXG4gKiB9fSBSZW5kZXJhYmxlU2NlbmVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCIuL2Rpc3BsYXllbGVtZW50XCIpLkRpc3BsYXlFbGVtZW50ICYge1xuICogICBjbGlwPzogKGNhbnZhczogaW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXMpPT4gYW55LFxuICogICBkcmF3PzogKGNhbnZhczogaW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXMpPT4gYW55XG4gKiB9fSBSZW5kZXJhYmxlRWxlbWVudFxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuQ2FudmFzUmVuZGVyZXJcbiAqL1xuY2xhc3MgQ2FudmFzUmVuZGVyZXIge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNhbnZhcykge1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMuX2NvbnRleHQgPSB0aGlzLmNhbnZhcy5jb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyYWJsZVNjZW5lfSBzY2VuZVxuICAgKi9cbiAgcmVuZGVyKHNjZW5lKSB7XG4gICAgdGhpcy5jYW52YXMuY2xlYXIoKTtcbiAgICBpZiAoc2NlbmUuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICB0aGlzLmNhbnZhcy5jbGVhckNvbG9yKHNjZW5lLmJhY2tncm91bmRDb2xvcik7XG4gICAgfVxuXG4gICAgdGhpcy5fY29udGV4dC5zYXZlKCk7XG4gICAgdGhpcy5yZW5kZXJDaGlsZHJlbihzY2VuZSk7XG4gICAgdGhpcy5fY29udGV4dC5yZXN0b3JlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9hcHAvZWxlbWVudFwiKS5FbGVtZW50QmFzZWRPYmplY3R9IG9ialxuICAgKi9cbiAgcmVuZGVyQ2hpbGRyZW4ob2JqKSB7XG4gICAgLy8g5a2Q5L6b44Gf44Gh44KC5a6f6KGMXG4gICAgaWYgKG9iai5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGVtcENoaWxkcmVuID0gLyoqIEB0eXBlIHtSZW5kZXJhYmxlRWxlbWVudFtdfSovKG9iai5jaGlsZHJlbi5zbGljZSgpKTtcbiAgICAgIGZvciAodmFyIGk9MCxsZW49dGVtcENoaWxkcmVuLmxlbmd0aDsgaTxsZW47ICsraSkge1xuICAgICAgICB0aGlzLnJlbmRlck9iamVjdCh0ZW1wQ2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlbmRlcmFibGVFbGVtZW50fSBvYmpcbiAgICovXG4gIHJlbmRlck9iamVjdChvYmopIHtcbiAgICBpZiAob2JqLnZpc2libGUgPT09IGZhbHNlICYmICFvYmouaW50ZXJhY3RpdmUpIHJldHVybjtcblxuICAgIG9iai5fY2FsY1dvcmxkTWF0cml4ICYmIG9iai5fY2FsY1dvcmxkTWF0cml4KCk7XG5cbiAgICBpZiAob2JqLnZpc2libGUgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICBvYmouX2NhbGNXb3JsZEFscGhhICYmIG9iai5fY2FsY1dvcmxkQWxwaGEoKTtcblxuICAgIHZhciBjb250ZXh0ID0gdGhpcy5jYW52YXMuY29udGV4dDtcblxuICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvYmouX3dvcmxkQWxwaGE7XG4gICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBvYmouYmxlbmRNb2RlO1xuXG4gICAgaWYgKG9iai5fd29ybGRNYXRyaXgpIHtcbiAgICAgIC8vIOihjOWIl+OCkuOCu+ODg+ODiFxuICAgICAgdmFyIG0gPSBvYmouX3dvcmxkTWF0cml4O1xuICAgICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oIG0ubTAwLCBtLm0xMCwgbS5tMDEsIG0ubTExLCBtLm0wMiwgbS5tMTIgKTtcbiAgICB9XG5cbiAgICBpZiAob2JqLmNsaXApIHtcblxuICAgICAgY29udGV4dC5zYXZlKCk7XG5cbiAgICAgIG9iai5jbGlwKHRoaXMuY2FudmFzKTtcbiAgICAgIGNvbnRleHQuY2xpcCgpO1xuXG4gICAgICBpZiAob2JqLmRyYXcpIG9iai5kcmF3KHRoaXMuY2FudmFzKTtcblxuICAgICAgLy8g5a2Q5L6b44Gf44Gh44KC5a6f6KGMXG4gICAgICBpZiAob2JqLnJlbmRlckNoaWxkQnlTZWxmID09PSBmYWxzZSAmJiBvYmouY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciB0ZW1wQ2hpbGRyZW4gPSBvYmouY2hpbGRyZW4uc2xpY2UoKTtcbiAgICAgICAgICBmb3IgKHZhciBpPTAsbGVuPXRlbXBDaGlsZHJlbi5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJPYmplY3QodGVtcENoaWxkcmVuW2ldKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChvYmouZHJhdykgb2JqLmRyYXcodGhpcy5jYW52YXMpO1xuXG4gICAgICAvLyDlrZDkvpvjgZ/jgaHjgoLlrp/ooYxcbiAgICAgIGlmIChvYmoucmVuZGVyQ2hpbGRCeVNlbGYgPT09IGZhbHNlICYmIG9iai5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciB0ZW1wQ2hpbGRyZW4gPSBvYmouY2hpbGRyZW4uc2xpY2UoKTtcbiAgICAgICAgZm9yICh2YXIgaT0wLGxlbj10ZW1wQ2hpbGRyZW4ubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJPYmplY3QodGVtcENoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICB3aWR0aD86IG51bWJlcixcbiAqICAgaGVpZ2h0PzogbnVtYmVyLFxuICogICBpbWFnZVNtb290aGluZz86IGJvb2xlYW4sXG4gKiAgIGJhY2tncm91bmRDb2xvcj86IGltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXNTdHlsZSxcbiAqIH19IERpc3BsYXlTY2VuZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuYXBwLlNjZW5lXG4gKi9cbmNsYXNzIERpc3BsYXlTY2VuZSBleHRlbmRzIFNjZW5lIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtEaXNwbGF5U2NlbmVPcHRpb25zfSBbcGFyYW1zXVxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHBhcmFtcyA9ICRzYWZlLmNhbGwoe30sIHBhcmFtcywgRGlzcGxheVNjZW5lLmRlZmF1bHRzKTtcbiAgICAvLyBwYXJhbXMgPSAoe30pLiRzYWZlKHBhcmFtcywgRGlzcGxheVNjZW5lLmRlZmF1bHRzKTtcblxuICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcygpO1xuICAgIHRoaXMuY2FudmFzLnNldFNpemUocGFyYW1zLndpZHRoLCBwYXJhbXMuaGVpZ2h0KTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IENhbnZhc1JlbmRlcmVyKHRoaXMuY2FudmFzKTtcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IChwYXJhbXMuYmFja2dyb3VuZENvbG9yKSA/IHBhcmFtcy5iYWNrZ3JvdW5kQ29sb3IgOiBudWxsO1xuXG4gICAgdGhpcy53aWR0aCA9IHBhcmFtcy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHBhcmFtcy5oZWlnaHQ7XG4gICAgdGhpcy5ncmlkWCA9IG5ldyBHcmlkKHBhcmFtcy53aWR0aCwgMTYpO1xuICAgIHRoaXMuZ3JpZFkgPSBuZXcgR3JpZChwYXJhbXMuaGVpZ2h0LCAxNik7XG5cbiAgICAvLyBUT0RPOiDkuIDml6bjgoDjgorjgoTjgorlr77lv5xcbiAgICB0aGlzLmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAvLyB0aGlzLnNldEludGVyYWN0aXZlID0gZnVuY3Rpb24oZmxhZykge1xuICAgIC8vICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZsYWc7XG4gICAgLy8gfTtcbiAgICB0aGlzLl9vdmVyRmxhZ3MgPSB7fTtcbiAgICB0aGlzLl90b3VjaEZsYWdzID0ge307XG5cbiAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dDtcbiAgICBpZiAocGFyYW1zLmltYWdlU21vb3RoaW5nID09PSBmYWxzZSkge1xuICAgICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgY3R4Wyd3ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQnXSA9IGZhbHNlO1xuICAgICAgY3R4Wydtc0ltYWdlU21vb3RoaW5nRW5hYmxlZCddID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZ1xuICAgKi9cbiAgc2V0SW50ZXJhY3RpdmUoZmxhZykge1xuICAgIHRoaXMuaW50ZXJhY3RpdmUgPSBmbGFnO1xuICB9XG5cbiAgaGl0VGVzdCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdmlydHVhbFxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2Rpc3BsYXkvY2FudmFzYXBwXCIpLkNhbnZhc0FwcH0gW19hcHBdIOOCouODl+ODquOCseODvOOCt+ODp+ODs+acrOS9k+OBruWPgueFp1xuICAgKi9cbiAgdXBkYXRlKF9hcHApIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3VwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy51cGRhdGUpIHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3JlbmRlcigpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzKTtcbiAgfVxuXG59XG5cbi8qKiBAdHlwZSBEaXNwbGF5U2NlbmVPcHRpb25zICovXG5EaXNwbGF5U2NlbmUuZGVmYXVsdHMgPSB7XG4gIHdpZHRoOiA2NDAsXG4gIGhlaWdodDogOTYwLFxuICBpbWFnZVNtb290aGluZzogdHJ1ZSxcbn07XG5cbi8qKlxuICogQ2FudmFzQXBw5Yid5pyf5YyW44Kq44OX44K344On44OzICBcbiAqIERpc3BsYXlTY2VuZeOBruWIneacn+WMluOBq+S9v+OCj+OCjOOCi+OBk+OBqOOCguiAg+OBiOOAgeOBneOBruOCquODl+OCt+ODp+ODs+ODkeODqeODoeODvOOCv+OCgue2meaJv1xuICogQHR5cGVkZWYge3sgXG4gKiAgYXBwZW5kPzogYm9vbGVhblxuICogIGNvbHVtbnM/OiBudW1iZXJcbiAqICBiYWNrZ3JvdW5kQ29sb3I/OiBpbXBvcnQoXCIuLi9ncmFwaGljcy9jYW52YXNcIikuQ2FudmFzU3R5bGVcbiAqICBmaXQ/OiBib29sZWFuXG4gKiAgcGl4ZWxhdGVkPzogYm9vbGVhblxuICogfSBcbiAqICYgaW1wb3J0KFwiLi9kb21hcHBcIikuRG9tQXBwT3B0aW9uc1xuICogJiBpbXBvcnQoXCIuL2Rpc3BsYXlzY2VuZVwiKS5EaXNwbGF5U2NlbmVPcHRpb25zIH0gQ2FudmFzQXBwT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuQ2FudmFzQXBwXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRvbUFwcFxuICovXG5jbGFzcyBDYW52YXNBcHAgZXh0ZW5kcyBEb21BcHAge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtDYW52YXNBcHBPcHRpb25zfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoKG9wdGlvbnMgfHwge30pLCBDYW52YXNBcHAuZGVmYXVsdHMpO1xuICAgIC8vIG9wdGlvbnMgPSAob3B0aW9ucyB8fCB7fSkuJHNhZmUoQ2FudmFzQXBwLmRlZmF1bHRzKTtcbiAgICBcbiAgICBpZiAoIW9wdGlvbnMucXVlcnkgJiYgIW9wdGlvbnMuZG9tRWxlbWVudCkge1xuICAgICAgb3B0aW9ucy5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICBpZiAob3B0aW9ucy5hcHBlbmQpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvcHRpb25zLmRvbUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuZ3JpZFggPSBuZXcgR3JpZCh7XG4gICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICAgIGNvbHVtbnM6IG9wdGlvbnMuY29sdW1ucyxcbiAgICB9KTtcbiAgICB0aGlzLmdyaWRZID0gbmV3IEdyaWQoe1xuICAgICAgd2lkdGg6IG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgY29sdW1uczogb3B0aW9ucy5jb2x1bW5zLFxuICAgIH0pO1xuXG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKHRoaXMuZG9tRWxlbWVudCk7XG4gICAgdGhpcy5jYW52YXMuc2V0U2l6ZShvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCk7XG5cbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IChvcHRpb25zLmJhY2tncm91bmRDb2xvciAhPT0gdW5kZWZpbmVkKSA/IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yIDogJ3doaXRlJztcblxuICAgIHRoaXMucmVwbGFjZVNjZW5lKG5ldyBEaXNwbGF5U2NlbmUoe1xuICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0LFxuICAgIH0pKTtcblxuICAgIGlmIChvcHRpb25zLmZpdCkge1xuICAgICAgdGhpcy5maXRTY3JlZW4oKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5waXhlbGF0ZWQpIHtcbiAgICAgIC8vIOODgeODqeOBpOOBjemYsuatolxuICAgICAgLy8g44OJ44OD44OI57W144Ky44O844Og44Gu44K144Od44O844OIXG4gICAgICAvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWltYWdlcy8jdGhlLWltYWdlLXJlbmRlcmluZ1xuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ltYWdlLXJlbmRlcmluZyNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9GaXJlZm94XFwvXFxkKy8pKSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5zdHlsZS5pbWFnZVJlbmRlcmluZyA9ICdjcmlzcC1lZGdlcyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuc3R5bGUuaW1hZ2VSZW5kZXJpbmcgPSAncGl4ZWxhdGVkJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwdXNoU2NlbmUsIHBvcFNjZW5lIOWvvuetllxuICAgIHRoaXMub24oJ3B1c2gnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIG9uZW50ZXIg5a++562W44Gn5o+P55S744GX44Gm44GK44GPXG4gICAgICBpZiAodGhpcy5jdXJyZW50U2NlbmUuY2FudmFzKSB7XG4gICAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICog5o+P55S75Yem55CGXG4gICAqL1xuICBfZHJhdygpIHtcbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyQ29sb3IodGhpcy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhcy5jbGVhcigpO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U2NlbmUgPSAvKiogQHR5cGUge0Rpc3BsYXlTY2VuZX0gKi8odGhpcy5jdXJyZW50U2NlbmUpO1xuICAgIGlmIChjdXJyZW50U2NlbmUuY2FudmFzKSB7XG4gICAgICBjdXJyZW50U2NlbmUuX3JlbmRlcigpO1xuXG4gICAgICAvLyB0aGlzLl9zY2VuZXMuZWFjaChcbiAgICAgIHRoaXMuX3NjZW5lcy5mb3JFYWNoKFxuICAgICAgLyoqIEBwYXJhbSB7RGlzcGxheVNjZW5lfSBzY2VuZSAqL1xuICAgICAgZnVuY3Rpb24oc2NlbmUpIHtcbiAgICAgICAgdmFyIGMgPSBzY2VuZS5jYW52YXM7XG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgdGhpcy5jYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoYy5kb21FbGVtZW50LCAwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYW52YXPjgq/jg6njgrnjga5maXRTY3JlZW7jgpLlrp/ooYxcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmaXRTY3JlZW4oKSB7XG4gICAgdGhpcy5jYW52YXMuZml0U2NyZWVuKCk7XG4gIH1cblxufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtDYW52YXNBcHBPcHRpb25zfVxuICovXG5DYW52YXNBcHAuZGVmYXVsdHMgPSB7XG4gIHdpZHRoOiA2NDAsXG4gIGhlaWdodDogOTYwLFxuICBjb2x1bW5zOiAxMixcbiAgZml0OiB0cnVlLFxuICBhcHBlbmQ6IHRydWUsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGFscGhhPzogbnVtYmVyLFxuICogICB2aXNpYmxlPzogYm9vbGVhbixcbiAqIH0gJiBpbXBvcnQoXCIuLi9hcHAvb2JqZWN0MmRcIikuT2JqZWN0MkRPcHRpb25zfSBEaXNwbGF5RWxlbWVudE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbihodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2dsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbikg44GudHlwZeOBqOWQjOOBmFxuICogQHR5cGVkZWYgeyAnc291cmNlLW92ZXInIHwgJ3NvdXJjZS1pbicgfCAnc291cmNlLW91dCcgfCAnc291cmNlLWF0b3AnIHwgJ2Rlc3RpbmF0aW9uLW92ZXInIHwgJ2Rlc3RpbmF0aW9uLWluJyB8ICdkZXN0aW5hdGlvbi1vdXQnIHwgJ2Rlc3RpbmF0aW9uLWF0b3AnIHwgJ2xpZ2h0ZXInIHwgJ2NvcHknIHwgJ3hvcicgfCAnbXVsdGlwbHknIHwgJ3NjcmVlbicgfCAnb3ZlcmxheScgfCAnZGFya2VuJyB8ICdsaWdodGVuJyB8ICdjb2xvci1kb2RnZScgfCAnY29sb3ItYnVybicgfCAnaGFyZC1saWdodCcgfCAnc29mdC1saWdodCcgfCAnZGlmZmVyZW5jZScgfCAnZXhjbHVzaW9uJyB8ICdodWUnIHwgJ3NhdHVyYXRpb24nIHwgJ2NvbG9yJyB8ICdsdW1pbm9zaXR5J30gQmxlbmRNb2RlXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5EaXNwbGF5RWxlbWVudFxuICogX2V4dGVuZHMgcGhpbmEuYXBwLk9iamVjdDJEXG4gKi9cbmNsYXNzIERpc3BsYXlFbGVtZW50IGV4dGVuZHMgT2JqZWN0MkQge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Rpc3BsYXlFbGVtZW50T3B0aW9uc30gW29wdGlvbnNdIFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgRGlzcGxheUVsZW1lbnQuZGVmYXVsdHMpO1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMgfHwge30sIHBoaW5hLmRpc3BsYXkuRGlzcGxheUVsZW1lbnQuZGVmYXVsdHMpO1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICog6KGo56S644OV44Op44KwXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy52aXNpYmxlID0gKG9wdGlvbnMudmlzaWJsZSAhPSBudWxsKSA/IG9wdGlvbnMudmlzaWJsZSA6IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiDjgqLjg6vjg5XjgqHlgKRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuYWxwaGEgPSAob3B0aW9ucy5hbHBoYSAhPSBudWxsKSA/IG9wdGlvbnMuYWxwaGEgOiAxLjA7XG5cbiAgICAvKipcbiAgICAgKiDjg5bjg6zjg7Pjg4njg6Ljg7zjg4lcbiAgICAgKiBAdHlwZSB7QmxlbmRNb2RlfVxuICAgICAqL1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJzb3VyY2Utb3ZlclwiO1xuXG4gICAgLyoqXG4gICAgICog5a2Q5L6b44KSIOiHquWIhuOBrkNhbnZhc1JlbmRlcmVyIOOBp+aPj+eUu+OBmeOCi+OBi1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMucmVuZGVyQ2hpbGRCeVNlbGYgPSBmYWxzZTtcblxuICAgIC8qKiBAdHlwZSB7RGlzcGxheUVsZW1lbnR9IOWei+OCouOCteODvOOCt+ODp+ODsyAqL1xuICAgIHRoaXMucGFyZW50O1xuXG4gICAgLyoqXG4gICAgICog44Kw44Ot44O844OQ44Or44Ki44Or44OV44Kh5YaF6YOo5YCkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl93b3JsZEFscGhhID0gMS4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouODq+ODleOCoeWApOOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge251bWJlcn0gYWxwaGFcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRBbHBoYShhbHBoYSkge1xuICAgIHRoaXMuYWxwaGEgPSBhbHBoYTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDooajnpLov6Z2e6KGo56S644KS44K744OD44OIXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZ1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFZpc2libGUoZmxhZykge1xuICAgIHRoaXMudmlzaWJsZSA9IGZsYWc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog6KGo56S6XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOmdnuihqOekulxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGhpZGUoKSB7XG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Kw44Ot44O844OQ44Or44Ki44Or44OV44Kh5YCk44Gu5YaN6KiI566XXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX2NhbGNXb3JsZEFscGhhKCkge1xuICAgIGlmICh0aGlzLmFscGhhIDwgMCkge1xuICAgICAgdGhpcy5fd29ybGRBbHBoYSA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuX3dvcmxkQWxwaGEgPSB0aGlzLmFscGhhO1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgd29ybGRBbHBoYSA9ICh0aGlzLnBhcmVudC5fd29ybGRBbHBoYSAhPT0gdW5kZWZpbmVkKSA/IHRoaXMucGFyZW50Ll93b3JsZEFscGhhIDogMS4wO1xuICAgICAgLy8gYWxwaGFcbiAgICAgIHRoaXMuX3dvcmxkQWxwaGEgPSB3b3JsZEFscGhhICogdGhpcy5hbHBoYTtcbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtEaXNwbGF5RWxlbWVudE9wdGlvbnN9XG4gKi9cbkRpc3BsYXlFbGVtZW50LmRlZmF1bHRzID0ge1xuICBhbHBoYTogMS4wLFxuICB2aXNpYmxlOiB0cnVlLFxufTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuQXNzZXRNYW5hZ2VyXG4gKiBcbiAqL1xuY2xhc3MgQXNzZXRNYW5hZ2VyIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgXCJzb3VuZFwi44CBXCJpbWFnZVwi44Gq44Gp44Gu44Ki44K744OD44OI56iu6aGeXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkg44Ki44K744OD44OI44Gu44Kt44O8XG4gICAqL1xuICBzdGF0aWMgZ2V0KHR5cGUsIGtleSkge1xuICAgIHJldHVybiB0aGlzLmFzc2V0c1t0eXBlXSAmJiB0aGlzLmFzc2V0c1t0eXBlXVtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSB0eXBlIFwic291bmRcIuOAgVwiaW1hZ2VcIuOBquOBqeOBruOCouOCu+ODg+ODiOeorumhnlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0ga2V5IOOCouOCu+ODg+ODiOeZu+mMsuOCreODvFxuICAgKiBAcGFyYW0ge2FueX0gYXNzZXQgQXNzZXTjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIHN0YXRpYyBzZXQodHlwZSwga2V5LCBhc3NldCkge1xuICAgIGlmICghdGhpcy5hc3NldHNbdHlwZV0pIHtcbiAgICAgIHRoaXMuYXNzZXRzW3R5cGVdID0ge307XG4gICAgfVxuICAgIHRoaXMuYXNzZXRzW3R5cGVdW2tleV0gPSBhc3NldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnKrlrp/oo4VcbiAgICogQHBhcmFtIHsqfSB0eXBlIFxuICAgKiBAcGFyYW0geyp9IGtleSBcbiAgICovXG4gIHN0YXRpYyBjb250YWlucyh0eXBlLCBrZXkpIHtcbiAgICByZXR1cm4gO1xuICB9XG5cbn1cblxuQXNzZXRNYW5hZ2VyLmFzc2V0cyA9IHtcbiAgaW1hZ2U6IHt9LFxuICBzb3VuZDoge30sXG4gIHNwcml0ZXNoZWV0OiB7fSxcbn07XG5cbi8qKlxuICogU3ByaXRl55S75YOP44K944O844K544Go44GX44Gm5L2/44GI44KL44Kq44OW44K444Kn44Kv44OI5Z6LXG4gKiBUZXh0dXJl44Kv44Op44K544KEQ2FudmFz44Kv44Op44K544Gq44GpXG4gKiBAdHlwZWRlZiB7e1xuICogICBkb21FbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnQ7XG4gKiAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAqIH19IFNwcml0ZUltYWdlXG4gKi9cblxuLyoqXG4gKiBBc3NldE1hbmFnZXLjgavnmbvpjLLjgZfjgZ/nlLvlg4/jgq3jg7zjgIHjgoLjgZfjgY/jga9TcHJpdGVJbWFnZeOCquODluOCuOOCp+OCr+ODiFxuICogQHR5cGVkZWYge3N0cmluZyB8IFNwcml0ZUltYWdlfSBTcHJpdGVJbWFnZVNyY1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuU3ByaXRlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlFbGVtZW50XG4gKi9cbmNsYXNzIFNwcml0ZSBleHRlbmRzIERpc3BsYXlFbGVtZW50IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtTcHJpdGVJbWFnZVNyY30gaW1hZ2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpbWFnZSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiDjgrnjg5fjg6njgqTjg4jlhYPnlLvlg4/vvIjjg4bjgq/jgrnjg4Hjg6PvvInjgIJzZXRJbWFnZeOBp+WIneacn+WMllxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge1Nwcml0ZUltYWdlfVxuICAgICAqL1xuICAgIHRoaXMuX2ltYWdlO1xuXG4gICAgLyoqXG4gICAgICog44OV44Os44O844Og44Kk44Oz44OH44OD44Kv44K544CCc2V0SW1hZ2XjgafliJ3mnJ/ljJZcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fZnJhbWVJbmRleDtcblxuICAgIC8qKlxuICAgICAqIOeUu+WDj+aPj+eUu+evhOWbslxuICAgICAqIEB0eXBlIHtSZWN0fVxuICAgICAqL1xuICAgIHRoaXMuc3JjUmVjdCA9IG5ldyBSZWN0KCk7XG5cbiAgICB0aGlzLnNldEltYWdlKGltYWdlLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIGRyYXcoY2FudmFzKSB7XG4gICAgdmFyIGltYWdlID0gdGhpcy5pbWFnZS5kb21FbGVtZW50O1xuXG4gICAgLy8gY2FudmFzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLFxuICAgIC8vICAgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCxcbiAgICAvLyAgIC10aGlzLndpZHRoKnRoaXMub3JpZ2luLngsIC10aGlzLmhlaWdodCp0aGlzLm9yaWdpbi55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodFxuICAgIC8vICAgKTtcblxuICAgIHZhciBzcmNSZWN0ID0gdGhpcy5zcmNSZWN0O1xuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSxcbiAgICAgIHNyY1JlY3QueCwgc3JjUmVjdC55LCBzcmNSZWN0LndpZHRoLCBzcmNSZWN0LmhlaWdodCxcbiAgICAgIC10aGlzLl93aWR0aCp0aGlzLm9yaWdpblgsIC10aGlzLl9oZWlnaHQqdGhpcy5vcmlnaW5ZLCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0XG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueODl+ODqeOCpOODiOWFg+eUu+WDj+OCkuioreWumlxuICAgKiBAcGFyYW0ge1Nwcml0ZUltYWdlU3JjfSBpbWFnZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodF1cbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRJbWFnZShpbWFnZSwgd2lkdGgsIGhlaWdodCkge1xuICAgIGlmICh0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbWFnZSA9IEFzc2V0TWFuYWdlci5nZXQoJ2ltYWdlJywgaW1hZ2UpO1xuICAgIH1cbiAgICB0aGlzLl9pbWFnZSA9IC8qKkB0eXBlIHtTcHJpdGVJbWFnZX0gKi8gKGltYWdlKTtcbiAgICB0aGlzLndpZHRoID0gdGhpcy5faW1hZ2UuZG9tRWxlbWVudC53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuX2ltYWdlLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgaWYgKHdpZHRoKSB7IHRoaXMud2lkdGggPSB3aWR0aDsgfVxuICAgIGlmIChoZWlnaHQpIHsgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7IH1cblxuICAgIHRoaXMuZnJhbWVJbmRleCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjg6zjg7zjg6DjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmjIflrprjgZfjgIHjgZ3jga7jg5Xjg6zjg7zjg6DjgavlkIjjgo/jgZvjgabmj4/nlLvnr4Tlm7LjgpLmm7TmlrAgIFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgg44OV44Os44O844Og44Kk44Oz44OH44OD44Kv44K544CC5pyA5aSn5YCk44KS6LaF44GI44Gf5aC05ZCI44Gv44Or44O844OXXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGhdIOODleODrOODvOODoOOCteOCpOOCuuW5hVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodF0g44OV44Os44O844Og44K144Kk44K66auY44GVXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0RnJhbWVJbmRleChpbmRleCwgd2lkdGgsIGhlaWdodCkge1xuICAgIHZhciB0dyAgPSB3aWR0aCB8fCB0aGlzLl93aWR0aDsgICAgICAvLyB0d1xuICAgIHZhciB0aCAgPSBoZWlnaHQgfHwgdGhpcy5faGVpZ2h0OyAgICAvLyB0aFxuICAgIHZhciByb3cgPSB+fih0aGlzLmltYWdlLmRvbUVsZW1lbnQud2lkdGggLyB0dyk7XG4gICAgdmFyIGNvbCA9IH5+KHRoaXMuaW1hZ2UuZG9tRWxlbWVudC5oZWlnaHQgLyB0aCk7XG4gICAgdmFyIG1heEluZGV4ID0gcm93KmNvbDtcbiAgICBpbmRleCA9IGluZGV4JW1heEluZGV4O1xuICAgIFxuICAgIHZhciB4ID0gaW5kZXglcm93O1xuICAgIHZhciB5ID0gfn4oaW5kZXgvcm93KTtcbiAgICB0aGlzLnNyY1JlY3QueCA9IHgqdHc7XG4gICAgdGhpcy5zcmNSZWN0LnkgPSB5KnRoO1xuICAgIHRoaXMuc3JjUmVjdC53aWR0aCAgPSB0dztcbiAgICB0aGlzLnNyY1JlY3QuaGVpZ2h0ID0gdGg7XG5cbiAgICB0aGlzLl9mcmFtZUluZGV4ID0gaW5kZXg7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCBpbWFnZSgpIHtyZXR1cm4gdGhpcy5faW1hZ2U7fVxuICBzZXQgaW1hZ2Uodikge1xuICAgIHRoaXMuc2V0SW1hZ2Uodik7XG4gIH1cblxuICBnZXQgZnJhbWVJbmRleCgpIHtyZXR1cm4gdGhpcy5fZnJhbWVJbmRleDt9XG4gIHNldCBmcmFtZUluZGV4KGlkeCkge1xuICAgIHRoaXMuc2V0RnJhbWVJbmRleChpZHgpO1xuICB9XG59XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuUGxhaW5FbGVtZW50XG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlFbGVtZW50XG4gKi9cbmNsYXNzIFBsYWluRWxlbWVudCBleHRlbmRzIERpc3BsYXlFbGVtZW50IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtEaXNwbGF5RWxlbWVudC5kZWZhdWx0c30gb3B0aW9ucyBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXMoKTtcbiAgICB0aGlzLmNhbnZhcy5zZXRTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NhbnZhc30gY2FudmFzXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZHJhdyhjYW52YXMpIHtcbiAgICB2YXIgaW1hZ2UgPSB0aGlzLmNhbnZhcy5kb21FbGVtZW50O1xuICAgIHZhciB3ID0gaW1hZ2Uud2lkdGg7XG4gICAgdmFyIGggPSBpbWFnZS5oZWlnaHQ7XG5cbiAgICB2YXIgeCA9IC13KnRoaXMub3JpZ2luLng7XG4gICAgdmFyIHkgPSAtaCp0aGlzLm9yaWdpbi55O1xuXG4gICAgY2FudmFzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLFxuICAgICAgMCwgMCwgdywgaCxcbiAgICAgIHgsIHksIHcsIGhcbiAgICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5MYXllclxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5RWxlbWVudFxuICovXG5jbGFzcyBMYXllciBleHRlbmRzIERpc3BsYXlFbGVtZW50IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtEaXNwbGF5RWxlbWVudC5kZWZhdWx0c30gW29wdGlvbnNdIFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwge1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMsIHtcbiAgICAgIHdpZHRoOiA2NDAsXG4gICAgICBoZWlnaHQ6IDk2MCxcbiAgICB9KTtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLndpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgIHRoaXMuZ3JpZFggPSBuZXcgR3JpZChvcHRpb25zLndpZHRoLCAxNik7XG4gICAgdGhpcy5ncmlkWSA9IG5ldyBHcmlkKG9wdGlvbnMuaGVpZ2h0LCAxNik7XG4gICAgdGhpcy5yZW5kZXJDaGlsZEJ5U2VsZiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSBIVE1MQ2FudmFzRWxlbWVudCBcbiAgICAgKi9cbiAgICB0aGlzLmRvbUVsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXN9IGNhbnZhc1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGRyYXcoY2FudmFzKSB7XG4gICAgaWYgKCF0aGlzLmRvbUVsZW1lbnQpIHJldHVybiA7XG5cbiAgICB2YXIgaW1hZ2UgPSB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgY2FudmFzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLFxuICAgICAgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCxcbiAgICAgIC10aGlzLndpZHRoKnRoaXMub3JpZ2luWCwgLXRoaXMuaGVpZ2h0KnRoaXMub3JpZ2luWSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRcbiAgICAgICk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LkNhbnZhc0xheWVyXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkxheWVyXG4gKi9cbmNsYXNzIENhbnZhc0xheWVyIGV4dGVuZHMgTGF5ZXIge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Rpc3BsYXlFbGVtZW50LmRlZmF1bHRzfSBvcHRpb25zIFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcygpO1xuICAgIHRoaXMuY2FudmFzLndpZHRoICA9IHRoaXMud2lkdGg7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IENhbnZhc1JlbmRlcmVyKHRoaXMuY2FudmFzKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQgPSB0aGlzLmNhbnZhcy5kb21FbGVtZW50O1xuXG4gICAgdGhpcy5vbignZW50ZXJmcmFtZScsXG4gICAgLyoqIEB0aGlzIENhbnZhc0xheWVyICovXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGVtcCA9IHRoaXMuX3dvcmxkTWF0cml4O1xuICAgICAgdGhpcy5fd29ybGRNYXRyaXggPSBudWxsO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcyk7XG4gICAgICB0aGlzLl93b3JsZE1hdHJpeCA9IHRlbXA7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDYW52YXN9IGNhbnZhc1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGRyYXcoY2FudmFzKSB7XG4gICAgdmFyIGltYWdlID0gdGhpcy5kb21FbGVtZW50O1xuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSxcbiAgICAgIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsXG4gICAgICAtdGhpcy53aWR0aCp0aGlzLm9yaWdpblgsIC10aGlzLmhlaWdodCp0aGlzLm9yaWdpblksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XG4gICAgICApO1xuICB9XG59XG5cbnZhciBUSFJFRSA9IHBoaW5hLmdsb2JhbFsnVEhSRUUnXTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5UaHJlZUxheWVyXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkxheWVyXG4gKi9cbmNsYXNzIFRocmVlTGF5ZXIgZXh0ZW5kcyBMYXllciB7XG5cbiAgLy8gc2NlbmU6IG51bGwsXG4gIC8vIGNhbWVyYTogbnVsbCxcbiAgLy8gbGlnaHQ6IG51bGwsXG4gIC8vIHJlbmRlcmVyOiBudWxsLFxuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblxuICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCA3NSwgb3B0aW9ucy53aWR0aCAvIG9wdGlvbnMuaGVpZ2h0LCAxLCAxMDAwMCApO1xuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSAxMDAwO1xuXG4gICAgdGhpcy5saWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCAweGZmZmZmZiwgMSApO1xuICAgIHRoaXMubGlnaHQucG9zaXRpb24uc2V0KCAxLCAxLCAxICkubm9ybWFsaXplKCk7XG4gICAgdGhpcy5zY2VuZS5hZGQoIHRoaXMubGlnaHQgKTtcblxuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcigpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggMHhmMGYwZjAgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUoIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0ICk7XG5cbiAgICB0aGlzLm9uKCdlbnRlcmZyYW1lJyxcbiAgICAvKiogQHRoaXMgVGhyZWVMYXllciAqL1xuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIoIHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhICk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaGFwZeOCr+ODqeOCueOCquODl+OCt+ODp+ODs1xuICogQHR5cGVkZWYge3tcbiAqICAgcGFkZGluZz86IG51bWJlcixcbiAqICAgYmFja2dyb3VuZENvbG9yPzogaW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXNTdHlsZSxcbiAqICAgZmlsbD86IGltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzU3R5bGUgfCBmYWxzZSxcbiAqICAgc3Ryb2tlPzogaW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXNTdHlsZSB8IGZhbHNlLFxuICogICBzdHJva2VXaWR0aD86IG51bWJlcixcbiAqICAgbGluZUNhcD86IENhbnZhc0xpbmVDYXAsXG4gKiAgIGxpbmVKb2luPzogQ2FudmFzTGluZUpvaW4sXG4gKiAgIHNoYWRvdz86IHN0cmluZyB8IGZhbHNlLFxuICogICBzaGFkb3dCbHVyPzogbnVtYmVyLFxuICogfSAmIGltcG9ydCgnLi4vZGlzcGxheS9kaXNwbGF5ZWxlbWVudCcpLkRpc3BsYXlFbGVtZW50T3B0aW9ucyB9IFNoYXBlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuU2hhcGVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuUGxhaW5FbGVtZW50XG4gKi9cbmNsYXNzIFNoYXBlIGV4dGVuZHMgUGxhaW5FbGVtZW50IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtTaGFwZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMgfHwge30sIHBoaW5hLmRpc3BsYXkuU2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgU2hhcGUuZGVmYXVsdHMpO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLnBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmc7XG5cbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIHRoaXMuZmlsbCA9IG9wdGlvbnMuZmlsbDtcbiAgICB0aGlzLnN0cm9rZSA9IG9wdGlvbnMuc3Ryb2tlO1xuICAgIHRoaXMuc3Ryb2tlV2lkdGggPSBvcHRpb25zLnN0cm9rZVdpZHRoO1xuICAgIHRoaXMubGluZUNhcCA9IG9wdGlvbnMubGluZUNhcDtcbiAgICB0aGlzLmxpbmVKb2luID0gb3B0aW9ucy5saW5lSm9pbjtcblxuICAgIHRoaXMuc2hhZG93ID0gb3B0aW9ucy5zaGFkb3c7XG4gICAgdGhpcy5zaGFkb3dCbHVyID0gb3B0aW9ucy5zaGFkb3dCbHVyO1xuXG4gICAgdGhpcy53YXRjaERyYXcgPSB0cnVlO1xuICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG5cbiAgICAvKiogQHRoaXMgU2hhcGUgKi9cbiAgICB2YXIgY2hlY2tSZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHJlbmRlclxuICAgICAgaWYgKHRoaXMud2F0Y2hEcmF3ICYmIHRoaXMuX2RpcnR5RHJhdyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnJlbmRlcih0aGlzLmNhbnZhcyk7XG4gICAgICAgIHRoaXMuX2RpcnR5RHJhdyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9uKCdlbnRlcmZyYW1lJywgY2hlY2tSZW5kZXIpO1xuICAgIHRoaXMub24oJ2FkZGVkJywgY2hlY2tSZW5kZXIpO1xuICB9XG5cbiAgY2FsY0NhbnZhc1dpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLndpZHRoICsgdGhpcy5wYWRkaW5nKjI7XG4gIH1cblxuICBjYWxjQ2FudmFzSGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLmhlaWdodCArIHRoaXMucGFkZGluZyoyO1xuICB9XG5cbiAgY2FsY0NhbnZhc1NpemUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogdGhpcy5jYWxjQ2FudmFzV2lkdGgoKSxcbiAgICAgIGhlaWdodDogdGhpcy5jYWxjQ2FudmFzSGVpZ2h0KCksXG4gICAgfTtcbiAgfVxuXG4gIGlzU3Ryb2thYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnN0cm9rZSAmJiAwIDwgdGhpcy5zdHJva2VXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdmlydHVhbFxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gX2NhbnZhcyBcbiAgICogQHJldHVybnMge2FueX1cbiAgICovXG4gIHByZXJlbmRlcihfY2FudmFzKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBAdmlydHVhbFxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gX2NhbnZhcyBcbiAgICogQHJldHVybnMge2FueX1cbiAgICovXG4gIHBvc3RyZW5kZXIoX2NhbnZhcykge1xuXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICByZW5kZXJGaWxsKGNhbnZhcykge1xuICAgIGNhbnZhcy5maWxsKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHJlbmRlclN0cm9rZShjYW52YXMpIHtcbiAgICBjYW52YXMuc3Ryb2tlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHJlbmRlcihjYW52YXMpIHtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0O1xuICAgIC8vIOODquOCteOCpOOCulxuICAgIHZhciBzaXplID0gdGhpcy5jYWxjQ2FudmFzU2l6ZSgpO1xuICAgIGNhbnZhcy5zZXRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcbiAgICAvLyDjgq/jg6rjgqLjgqvjg6njg7xcbiAgICBjYW52YXMuY2xlYXJDb2xvcih0aGlzLmJhY2tncm91bmRDb2xvcik7XG4gICAgLy8g5Lit5b+D44Gr5bqn5qiZ44KS56e75YuVXG4gICAgY2FudmFzLnRyYW5zZm9ybUNlbnRlcigpO1xuXG4gICAgLy8g5o+P55S75YmN5Yem55CGXG4gICAgdGhpcy5wcmVyZW5kZXIodGhpcy5jYW52YXMpO1xuXG4gICAgLy8g44K544OI44Ot44O844Kv5o+P55S7XG4gICAgaWYgKHRoaXMuaXNTdHJva2FibGUoKSkge1xuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXNTdHlsZX0gKi8odGhpcy5zdHJva2UpO1xuICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoO1xuICAgICAgY29udGV4dC5saW5lQ2FwID0gdGhpcy5saW5lQ2FwO1xuICAgICAgY29udGV4dC5saW5lSm9pbiA9IHRoaXMubGluZUpvaW47XG4gICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xuICAgICAgdGhpcy5yZW5kZXJTdHJva2UoY2FudmFzKTtcbiAgICB9XG5cbiAgICAvLyDloZfjgorjgaTjgbbjgZfmj4/nlLtcbiAgICBpZiAodGhpcy5maWxsKSB7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZmlsbDtcblxuICAgICAgLy8gc2hhZG93IOOBriBvbi9vZmZcbiAgICAgIGlmICh0aGlzLnNoYWRvdykge1xuICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3c7XG4gICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IHRoaXMuc2hhZG93Qmx1cjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlckZpbGwoY2FudmFzKTtcbiAgICB9XG5cbiAgICAvLyDmj4/nlLvlvozlh6bnkIZcbiAgICB0aGlzLnBvc3RyZW5kZXIodGhpcy5jYW52YXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44OX44Ot44OR44OG44Kj44KS55uj6KaW44GX44CB5aSJ5pu044GM44GC44Gj44Gf44KJ44OA44O844OG44Kj44OV44Op44Kw44KS56uL44Gm44Gm5YaN5o+P55S744KS5L+D44GZXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgd2F0Y2hSZW5kZXJQcm9wZXJ0eShrZXkpIHtcbiAgICAvLyB0aGlzLnByb3RvdHlwZS4kd2F0Y2goa2V5LCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICR3YXRjaC5jYWxsKHRoaXMucHJvdG90eXBlLCBrZXksIGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICBpZiAobmV3VmFsICE9PSBvbGRWYWwpIHtcbiAgICAgICAgdGhpcy5fZGlydHlEcmF3ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaGFwZS53YXRjaFJlbmRlclByb3BlcnR544KS44G+44Go44KB44Gm6KGM44GGXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgd2F0Y2hSZW5kZXJQcm9wZXJ0aWVzKGtleXMpIHtcbiAgICB2YXIgd2F0Y2hSZW5kZXJQcm9wZXJ0eSA9IHRoaXMud2F0Y2hSZW5kZXJQcm9wZXJ0eSB8fCBTaGFwZS53YXRjaFJlbmRlclByb3BlcnR5O1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHdhdGNoUmVuZGVyUHJvcGVydHkuY2FsbCh0aGlzLCBrZXkpO1xuICAgIH0sIHRoaXMpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7U2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5TaGFwZS5kZWZhdWx0cyA9IHtcbiAgd2lkdGg6IDY0LFxuICBoZWlnaHQ6IDY0LFxuICBwYWRkaW5nOiA4LFxuXG4gIGJhY2tncm91bmRDb2xvcjogJyNhYWEnLFxuICBmaWxsOiAnIzAwYScsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcbiAgbGluZUNhcDogJ3JvdW5kJyxcbiAgbGluZUpvaW46ICdyb3VuZCcsXG5cbiAgc2hhZG93OiBmYWxzZSxcbiAgc2hhZG93Qmx1cjogNCxcbn07XG5cbi8vIF9kZWZpbmVkXG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnRpZXMoW1xuICAnd2lkdGgnLFxuICAnaGVpZ2h0JyxcbiAgJ3JhZGl1cycsXG4gICdwYWRkaW5nJyxcbiAgJ2JhY2tncm91bmRDb2xvcicsXG4gICdmaWxsJyxcbiAgJ3N0cm9rZScsXG4gICdzdHJva2VXaWR0aCcsXG4gICdsaW5lQ2FwJyxcbiAgJ2xpbmVKb2luJyxcbiAgJ3NoYWRvdycsXG4gICdzaGFkb3dCbHVyJyxcbl0pO1xuXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgY29ybmVyUmFkaXVzPzogbnVtYmVyXG4gKiB9ICYgU2hhcGVPcHRpb25zIH0gUmVjdGFuZ2xlU2hhcGVPcHRpb25zXG4gKi9cblxuICAvKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LlJlY3RhbmdsZVNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKiDnn6nlvaLmj4/nlLvjgq/jg6njgrlcbiAqL1xuY2xhc3MgUmVjdGFuZ2xlU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVjdGFuZ2xlU2hhcGVPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LlJlY3RhbmdsZVNoYXBlLmRlZmF1bHRzKTtcbiAgICBvcHRpb25zID0gJHNhZmUuY2FsbCh7fSwgb3B0aW9uc3x8e30sIFJlY3RhbmdsZVNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5jb3JuZXJSYWRpdXMgPSBvcHRpb25zLmNvcm5lclJhZGl1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5yb3VuZFJlY3QoLXRoaXMud2lkdGgvMiwgLXRoaXMuaGVpZ2h0LzIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNvcm5lclJhZGl1cyk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtSZWN0YW5nbGVTaGFwZU9wdGlvbnN9XG4gKiBAc3RhdGljXG4gKi9cblJlY3RhbmdsZVNoYXBlLmRlZmF1bHRzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICdibHVlJyxcbiAgc3Ryb2tlOiAnI2FhYScsXG4gIHN0cm9rZVdpZHRoOiA0LFxuICBjb3JuZXJSYWRpdXM6IDAsXG59O1xuXG4vLyBfZGVmaW5lZFxuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKFJlY3RhbmdsZVNoYXBlLCAnY29ybmVyUmFkaXVzJyk7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICByYWRpdXM/OiBudW1iZXJcbiAqIH0gJiBTaGFwZU9wdGlvbnMgfSBDaXJjbGVTaGFwZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LkNpcmNsZVNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIENpcmNsZVNoYXBlIGV4dGVuZHMgU2hhcGUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NpcmNsZVNoYXBlT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucyB8fCB7fSwgcGhpbmEuZGlzcGxheS5DaXJjbGVTaGFwZS5kZWZhdWx0cyk7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnN8fHt9LCBDaXJjbGVTaGFwZS5kZWZhdWx0cyk7XG5cbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuc2V0Qm91bmRpbmdUeXBlKCdjaXJjbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5jaXJjbGUoMCwgMCwgdGhpcy5yYWRpdXMpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7Q2lyY2xlU2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5DaXJjbGVTaGFwZS5kZWZhdWx0cyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaWxsOiAncmVkJyxcbiAgc3Ryb2tlOiAnI2FhYScsXG4gIHN0cm9rZVdpZHRoOiA0LFxuICByYWRpdXM6IDMyLFxufTtcblxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5kaXNwbGF5LlRyaWFuZ2xlU2hhcGVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuU2hhcGVcbiAqL1xuY2xhc3MgVHJpYW5nbGVTaGFwZSBleHRlbmRzIFNoYXBlIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtDaXJjbGVTaGFwZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMgfHwge30sIHBoaW5hLmRpc3BsYXkuVHJpYW5nbGVTaGFwZS5kZWZhdWx0cyk7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnN8fHt9LCBUcmlhbmdsZVNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5zZXRCb3VuZGluZ1R5cGUoJ2NpcmNsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIoY2FudmFzKSB7XG4gICAgY2FudmFzLnBvbHlnb24oMCwgMCwgdGhpcy5yYWRpdXMsIDMpO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7Q2lyY2xlU2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5UcmlhbmdsZVNoYXBlLmRlZmF1bHRzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICdncmVlbicsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcblxuICByYWRpdXM6IDMyLFxufTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHNpZGVzPzogbnVtYmVyLFxuICogfSAmIENpcmNsZVNoYXBlT3B0aW9ucyB9IFBvbHlnb25TaGFwZU9wdGlvbnNcbiAqL1xuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBzaWRlSW5kZW50PzogbnVtYmVyLFxuICogfSAmIFBvbHlnb25TaGFwZU9wdGlvbnMgfSBTdGFyU2hhcGVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5TdGFyU2hhcGVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuU2hhcGVcbiAqL1xuY2xhc3MgU3RhclNoYXBlIGV4dGVuZHMgU2hhcGUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0YXJTaGFwZU9wdGlvbnN9IFtvcHRpb25zXSBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LlN0YXJTaGFwZS5kZWZhdWx0cyk7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnN8fHt9LCBTdGFyU2hhcGUuZGVmYXVsdHMpO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLnNldEJvdW5kaW5nVHlwZSgnY2lyY2xlJyk7XG4gICAgdGhpcy5zaWRlcyA9IG9wdGlvbnMuc2lkZXM7XG4gICAgdGhpcy5zaWRlSW5kZW50ID0gb3B0aW9ucy5zaWRlSW5kZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIoY2FudmFzKSB7XG4gICAgY2FudmFzLnN0YXIoMCwgMCwgdGhpcy5yYWRpdXMsIHRoaXMuc2lkZXMsIHRoaXMuc2lkZUluZGVudCk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtTdGFyU2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5TdGFyU2hhcGUuZGVmYXVsdHMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgZmlsbDogJ3llbGxvdycsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcblxuICByYWRpdXM6IDMyLFxuICBzaWRlczogNSxcbiAgc2lkZUluZGVudDogMC4zOCxcbn07XG5cbi8vIF9kZWZpbmVkXG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoU3RhclNoYXBlLCAnc2lkZXMnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChTdGFyU2hhcGUsICdzaWRlSW5kZW50Jyk7XG5cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5Qb2x5Z29uU2hhcGVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuU2hhcGVcbiAqL1xuY2xhc3MgUG9seWdvblNoYXBlIGV4dGVuZHMgU2hhcGUge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvbHlnb25TaGFwZU9wdGlvbnN9IFtvcHRpb25zXSBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS5kaXNwbGF5LlBvbHlnb25TaGFwZS5kZWZhdWx0cyk7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnN8fHt9LCBQb2x5Z29uU2hhcGUuZGVmYXVsdHMpO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLnNldEJvdW5kaW5nVHlwZSgnY2lyY2xlJyk7XG4gICAgdGhpcy5zaWRlcyA9IG9wdGlvbnMuc2lkZXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlcihjYW52YXMpIHtcbiAgICBjYW52YXMucG9seWdvbigwLCAwLCB0aGlzLnJhZGl1cywgdGhpcy5zaWRlcyk7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtQb2x5Z29uU2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5Qb2x5Z29uU2hhcGUuZGVmYXVsdHMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgZmlsbDogJ2N5YW4nLFxuICBzdHJva2U6ICcjYWFhJyxcbiAgc3Ryb2tlV2lkdGg6IDQsXG5cbiAgcmFkaXVzOiAzMixcbiAgc2lkZXM6IDUsXG59O1xuXG4vLyBkZWZpbmVkXG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoUG9seWdvblNoYXBlLCAnc2lkZXMnKTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGNvcm5lckFuZ2xlPzogbnVtYmVyLFxuICogfSAmIENpcmNsZVNoYXBlT3B0aW9ucyB9IEhlYXJ0U2hhcGVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5IZWFydFNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIEhlYXJ0U2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SGVhcnRTaGFwZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMgfHwge30sIHBoaW5hLmRpc3BsYXkuSGVhcnRTaGFwZS5kZWZhdWx0cyk7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnN8fHt9LCBIZWFydFNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5zZXRCb3VuZGluZ1R5cGUoJ2NpcmNsZScpO1xuICAgIHRoaXMuY29ybmVyQW5nbGUgPSBvcHRpb25zLmNvcm5lckFuZ2xlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIoY2FudmFzKSB7XG4gICAgY2FudmFzLmhlYXJ0KDAsIDAsIHRoaXMucmFkaXVzLCB0aGlzLmNvcm5lckFuZ2xlKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge0hlYXJ0U2hhcGVPcHRpb25zfVxuICogQHN0YXRpY1xuICovXG5IZWFydFNoYXBlLmRlZmF1bHRzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICdwaW5rJyxcbiAgc3Ryb2tlOiAnI2FhYScsXG4gIHN0cm9rZVdpZHRoOiA0LFxuXG4gIHJhZGl1czogMzIsXG4gIGNvcm5lckFuZ2xlOiA0NSxcbn07XG5cbi8vIGRlZmluZWRcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChIZWFydFNoYXBlLCAnY29ybmVyQW5nbGUnKTtcblxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHBhdGhzPzogVmVjdG9yMltdXG4gKiB9ICYgU2hhcGVPcHRpb25zIH0gUGF0aFNoYXBlT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmRpc3BsYXkuUGF0aFNoYXBlXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIFBhdGhTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgLy8gcGF0aHM6IG51bGwsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UGF0aFNoYXBlT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgLy8gb3B0aW9ucyA9ICh7fSkuJHNhZmUob3B0aW9ucyB8fCB7fSwgcGhpbmEuZGlzcGxheS5QYXRoU2hhcGUuZGVmYXVsdHMpO1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgUGF0aFNoYXBlLmRlZmF1bHRzKTtcblxuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMucGF0aHMgPSBvcHRpb25zLnBhdGhzIHx8IFtdO1xuICAgIHRoaXMubGluZUpvaW4gPSBvcHRpb25zLmxpbmVKb2luO1xuICAgIHRoaXMubGluZUNhcCA9IG9wdGlvbnMubGluZUNhcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1ZlY3RvcjJbXX0gcGF0aHNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRQYXRocyAocGF0aHMpIHtcbiAgICB0aGlzLnBhdGhzID0gcGF0aHM7XG4gICAgdGhpcy5fZGlydHlEcmF3ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzLnBhdGhzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fZGlydHlEcmF3ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1ZlY3RvcjJbXX0gcGF0aHMgXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgYWRkUGF0aHMgKHBhdGhzKSB7XG4gICAgW10ucHVzaC5hcHBseSh0aGlzLnBhdGhzLCBwYXRocyk7XG4gICAgdGhpcy5fZGlydHlEcmF3ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGFkZFBhdGggKHgsIHkpIHtcbiAgICB0aGlzLnBhdGhzLnB1c2gobmV3IFZlY3RvcjIoeCwgeSkpO1xuICAgIHRoaXMuX2RpcnR5RHJhdyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGlcbiAgICogQHJldHVybnMge1ZlY3RvcjJ9XG4gICAqL1xuICBnZXRQYXRoIChpKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aHNbaV07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1ZlY3RvcjJbXX0gcGF0aHMgXG4gICAqL1xuICBnZXRQYXRocyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aHM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICovXG4gIGNoYW5nZVBhdGggKGksIHgsIHkpIHtcbiAgICB0aGlzLnBhdGhzW2ldLnNldCh4LCB5KTtcbiAgICB0aGlzLl9kaXJ0eURyYXcgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt7d2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9fVxuICAgKi9cbiAgY2FsY0NhbnZhc1NpemUgKCkge1xuICAgIHZhciBwYXRocyA9IHRoaXMucGF0aHM7XG4gICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHRoaXMucGFkZGluZyAqIDIsXG4gICAgICAgIGhlaWdodDp0aGlzLnBhZGRpbmcgKiAyLFxuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIG1heFggPSAtSW5maW5pdHk7XG4gICAgdmFyIG1heFkgPSAtSW5maW5pdHk7XG4gICAgdmFyIG1pblggPSBJbmZpbml0eTtcbiAgICB2YXIgbWluWSA9IEluZmluaXR5O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhdGhzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB2YXIgcGF0aCA9IHBhdGhzW2ldO1xuICAgICAgaWYgKG1heFggPCBwYXRoLngpIHsgbWF4WCA9IHBhdGgueDsgfVxuICAgICAgaWYgKG1pblggPiBwYXRoLngpIHsgbWluWCA9IHBhdGgueDsgfVxuICAgICAgaWYgKG1heFkgPCBwYXRoLnkpIHsgbWF4WSA9IHBhdGgueTsgfVxuICAgICAgaWYgKG1pblkgPiBwYXRoLnkpIHsgbWluWSA9IHBhdGgueTsgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IE1hdGgubWF4KE1hdGguYWJzKG1heFgpLCBNYXRoLmFicyhtaW5YKSkgKiAyICsgdGhpcy5wYWRkaW5nICogMixcbiAgICAgIGhlaWdodDogTWF0aC5tYXgoTWF0aC5hYnMobWF4WSksIE1hdGguYWJzKG1pblkpKSAqIDIgKyB0aGlzLnBhZGRpbmcgKiAyLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGNhbGNDYW52YXNXaWR0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsY0NhbnZhc1NpemUoKS53aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY2FsY0NhbnZhc0hlaWdodCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsY0NhbnZhc1NpemUoKS5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlciAoY2FudmFzKSB7XG4gICAgdmFyIHBhdGhzID0gdGhpcy5wYXRocztcbiAgICBpZiAocGF0aHMubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGMgPSBjYW52YXMuY29udGV4dDtcbiAgICAgIHZhciBwID0gcGF0aHNbMF07XG4gICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgYy5tb3ZlVG8ocC54LCBwLnkpO1xuICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHBhdGhzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIHAgPSBwYXRoc1tpXTtcbiAgICAgICAgYy5saW5lVG8ocC54LCBwLnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge1BhdGhTaGFwZU9wdGlvbnN9XG4gKiBAc3RhdGljXG4gKi9cblBhdGhTaGFwZS5kZWZhdWx0cyA9IHtcbiAgZmlsbDogZmFsc2UsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50Jyxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgdGV4dD86IHN0cmluZ1xuICogICBmb250U2l6ZT86IG51bWJlclxuICogICBmb250V2VpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyXG4gKiAgIGZvbnRGYW1pbHk/OiBzdHJpbmdcbiAqICAgYWxpZ24/OiBDYW52YXNUZXh0QWxpZ25cbiAqICAgYmFzZWxpbmU/OiBDYW52YXNUZXh0QmFzZWxpbmVcbiAqICAgbGluZUhlaWdodD86IG51bWJlclxuICogfSAmIGltcG9ydChcIi4vc2hhcGVcIikuU2hhcGVPcHRpb25zIH0gTGFiZWxPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZGlzcGxheS5MYWJlbFxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5TaGFwZVxuICovXG5jbGFzcyBMYWJlbCBleHRlbmRzIFNoYXBlIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7TGFiZWxPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSB7IHRleHQ6IGFyZ3VtZW50c1swXSwgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzWzBdO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zfHx7fSwgTGFiZWwuZGVmYXVsdHMpO1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMsIHBoaW5hLmRpc3BsYXkuTGFiZWwuZGVmYXVsdHMpO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKiogQHR5cGUge3N0cmluZ3xudW1iZXJ9ICovXG4gICAgdGhpcy5fdGV4dDtcblxuICAgIHRoaXMudGV4dCA9IG9wdGlvbnMudGV4dDtcbiAgICB0aGlzLmZvbnRTaXplID0gb3B0aW9ucy5mb250U2l6ZTtcbiAgICB0aGlzLmZvbnRXZWlnaHQgPSBvcHRpb25zLmZvbnRXZWlnaHQ7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gb3B0aW9ucy5mb250RmFtaWx5O1xuICAgIHRoaXMuYWxpZ24gPSBvcHRpb25zLmFsaWduO1xuICAgIHRoaXMuYmFzZWxpbmUgPSBvcHRpb25zLmJhc2VsaW5lO1xuICAgIHRoaXMubGluZUhlaWdodCA9IG9wdGlvbnMubGluZUhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY2FsY0NhbnZhc1dpZHRoKCkge1xuICAgIHZhciB3aWR0aCA9IDA7XG4gICAgdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgIGNhbnZhcy5jb250ZXh0LmZvbnQgPSB0aGlzLmZvbnQ7XG4gICAgdGhpcy5fbGluZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgdyA9IGNhbnZhcy5jb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoO1xuICAgICAgaWYgKHdpZHRoIDwgdykge1xuICAgICAgICB3aWR0aCA9IHc7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgaWYgKHRoaXMuYWxpZ24gIT09ICdjZW50ZXInKSB3aWR0aCo9MjtcblxuICAgIHJldHVybiB3aWR0aCArIHRoaXMucGFkZGluZyoyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBjYWxjQ2FudmFzSGVpZ2h0KCkge1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLmZvbnRTaXplICogdGhpcy5fbGluZXMubGVuZ3RoO1xuICAgIGlmICh0aGlzLmJhc2VsaW5lICE9PSAnbWlkZGxlJykgaGVpZ2h0Kj0yO1xuICAgIHJldHVybiBoZWlnaHQqdGhpcy5saW5lSGVpZ2h0ICsgdGhpcy5wYWRkaW5nKjI7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtICB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHByZXJlbmRlcihjYW52YXMpIHtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0O1xuICAgIGNvbnRleHQuZm9udCA9IHRoaXMuZm9udDtcbiAgICBjb250ZXh0LnRleHRBbGlnbiA9IHRoaXMuYWxpZ247XG4gICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSB0aGlzLmJhc2VsaW5lO1xuXG4gICAgdmFyIGxpbmVzID0gdGhpcy5fbGluZXM7XG4gICAgdGhpcy5saW5lU2l6ZSA9IHRoaXMuZm9udFNpemUqdGhpcy5saW5lSGVpZ2h0O1xuICAgIHRoaXMuX29mZnNldCA9IC1NYXRoLmZsb29yKGxpbmVzLmxlbmd0aC8yKSp0aGlzLmxpbmVTaXplO1xuICAgIHRoaXMuX29mZnNldCArPSAoKGxpbmVzLmxlbmd0aCsxKSUyKSAqICh0aGlzLmxpbmVTaXplLzIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICByZW5kZXJGaWxsKGNhbnZhcykge1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmNvbnRleHQ7XG4gICAgdGhpcy5fbGluZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLCBpKSB7XG4gICAgICBjb250ZXh0LmZpbGxUZXh0KGxpbmUsIDAsIGkqdGhpcy5saW5lU2l6ZSt0aGlzLl9vZmZzZXQpO1xuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSAge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICByZW5kZXJTdHJva2UoY2FudmFzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuY29udGV4dDtcbiAgICB0aGlzLl9saW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsIGkpIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dChsaW5lLCAwLCBpKnRoaXMubGluZVNpemUrdGhpcy5fb2Zmc2V0KTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0ZXh0XG4gICAqIEByZXR1cm5zIHtzdHJpbmd8bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHRleHQoKSB7IHJldHVybiB0aGlzLl90ZXh0OyB9XG4gIHNldCB0ZXh0KHYpIHtcbiAgICB0aGlzLl90ZXh0ID0gdjtcbiAgICB0aGlzLl9saW5lcyA9ICh0aGlzLnRleHQgKyAnJykuc3BsaXQoJ1xcbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgZm9udCgpIHtcbiAgICByZXR1cm4gZm9ybWF0LmNhbGwoXCJ7Zm9udFdlaWdodH0ge2ZvbnRTaXplfXB4IHtmb250RmFtaWx5fVwiLCB0aGlzKTtcbiAgICAvLyByZXR1cm4gXCJ7Zm9udFdlaWdodH0ge2ZvbnRTaXplfXB4IHtmb250RmFtaWx5fVwiLmZvcm1hdCh0aGlzKTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGUge0xhYmVsT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuTGFiZWwuZGVmYXVsdHMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcblxuICBmaWxsOiAnYmxhY2snLFxuICBzdHJva2U6IG51bGwsXG4gIHN0cm9rZVdpZHRoOiAyLFxuXG4gIC8vIFxuICB0ZXh0OiAnSGVsbG8sIHdvcmxkIScsXG4gIC8vIFxuICBmb250U2l6ZTogMzIsXG4gIGZvbnRXZWlnaHQ6ICcnLFxuICBmb250RmFtaWx5OiBcIidIaXJhS2FrdVByb04tVzMnXCIsIC8vIEhpcmFnaW5vIG9yIEhlbHZldGljYSxcbiAgLy8gXG4gIGFsaWduOiAnY2VudGVyJyxcbiAgYmFzZWxpbmU6ICdtaWRkbGUnLFxuICBsaW5lSGVpZ2h0OiAxLjIsXG59O1xuXG4vLyBkZWZpbmVkXG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoTGFiZWwsICd0ZXh0Jyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoTGFiZWwsICdmb250U2l6ZScpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKExhYmVsLCAnZm9udFdlaWdodCcpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKExhYmVsLCAnZm9udEZhbWlseScpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKExhYmVsLCAnYWxpZ24nKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChMYWJlbCwgJ2Jhc2VsaW5lJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoTGFiZWwsICdsaW5lSGVpZ2h0Jyk7XG5cbi8qKlxuICogU3ByaXRl44Kv44Op44K544Gq44Gp44CBRnJhbWVBbmltYXRpb27jga50YXJnZXTjgajjgZfjgabpganmraPjgarlnotcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHNyY1JlY3Q6IGltcG9ydChcIi4uL2dlb20vcmVjdFwiKS5SZWN0XG4gKiAgIHdpZHRoOiBudW1iZXJcbiAqICAgaGVpZ2h0OiBudW1iZXJcbiAqIH0gJiBpbXBvcnQoXCIuL2FjY2Vzc29yeVwiKS5BY2Nlc3NvcnlUYXJnZXQgfSBGcmFtZUFuaW1hdGlvblRhcmdldFxuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFjY2Vzc29yeS5GcmFtZUFuaW1hdGlvblxuICogX2V4dGVuZHMgcGhpbmEuYWNjZXNzb3J5LkFjY2Vzc29yeVxuICogXG4gKiDjg5Xjg6zjg7zjg6DjgqLjg4vjg6Hjg7zjgrfjg6fjg7PliLblvqHjgpLooYzjgYZBY2Nlc3NvcnnmtL7nlJ/jgq/jg6njgrlcbiAqIFxuICog5LqI44KB44Ot44O844OJ77yI44OR44O844K577yJ44GX44Gf44K544OX44Op44Kk44OI44K344O844OISlNPTuODh+ODvOOCv+OCkuS9v+OBhOOAgVxuICogU3ByaXRl44Kv44Op44K544Gu44OV44Os44O844Og56+E5Zuy44KS5Yi25b6h44GZ44KL44GT44Go44Gn44Ki44OL44Oh44O844K344On44Oz44KS5a6f54++44GZ44KLXG4gKiBAc2VlIGh0dHBzOi8vcWlpdGEuY29tL2Fsa24yMDMvaXRlbXMvYTI4N2M3NTI0MTkzZjVmNGNhOTBcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIOS6iOOCgVwicGxheWVyX3NzXCLjgajjgYTjgYblkI3liY3jgafjgrnjg5fjg6njgqTjg4jjgrfjg7zjg4jnlLvlg4/jgIFKc29u44OH44O844K/44KS44Ki44K744OD44OI55m76Yyy44GX44Gm44GK44GPXG4gKiAvLyBwbGF5ZXJfc3Pjgavjga9cIndhbGtcIuOBqOOBhOOBhuWQjeWJjeOBruOCouODi+ODoeODvOOCt+ODp+ODs+OCkuWumue+qVxuICogY29uc3QgdGFyZ2V0ID0gbmV3IHBoaW5hLmRpc3BsYXkuU3ByaXRlKFwicGxheWVyX3NzXCIpO1xuICogY29uc3QgZnJhbWVBbmltID0gbmV3IHBoaW5hLmFjY2Vzc29yeS5GcmFtZUFuaW1hdGlvbihcInBsYXllcl9zc1wiKS5hdHRhY2hUbyh0YXJnZXQpO1xuICogZnJhbWVBbmltLmdvdG9BbmRQbGF5KFwid2Fsa1wiKTtcbiAqL1xuY2xhc3MgRnJhbWVBbmltYXRpb24gZXh0ZW5kcyBBY2Nlc3Nvcnkge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNzIOODreODvOODiea4iOOBv+OCueODl+ODqeOCpOODiOOCt+ODvOODiOODh+ODvOOCv0Fzc2V044Kt44O8XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihzcykge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiogQHR5cGUge0ZyYW1lQW5pbWF0aW9uVGFyZ2V0fSAqL1xuICAgIHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICog44K544OX44Op44Kk44OI44K344O844OI44Kq44OW44K444Kn44Kv44OIXG4gICAgICogXG4gICAgICogQHR5cGUge2ltcG9ydCgnLi4vYXNzZXQvc3ByaXRlc2hlZXQnKS5TcHJpdGVTaGVldH1cbiAgICAgKi9cbiAgICB0aGlzLnNzID0gQXNzZXRNYW5hZ2VyLmdldCgnc3ByaXRlc2hlZXQnLCBzcyk7XG5cbiAgICAvKipcbiAgICAgKiDlho3nlJ/kuK3jga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjga7jg4fjg7zjgr/jgqrjg5bjgrjjgqfjgq/jg4hcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vYXNzZXQvc3ByaXRlc2hlZXRcIikuU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb247XG5cbiAgICAvKipcbiAgICAgKiDlho3nlJ/kuK3jga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7PlkI1cbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7KHN0cmluZyB8IG51bWJlcikgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbk5hbWU7XG5cbiAgICAvKipcbiAgICAgKiDlgZzmraLnirbmhYtcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiDjg5Xjg6zjg7zjg6DjgrXjgqTjgrrjgavlkIjjgo/jgZvjgablr77osaHjga7luYXjg7vpq5jjgZXjgpLlpInjgYjjgovjgYvjganjgYbjgYtcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmZpdCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjg5Xjg6zjg7zjg6DjgpLooajjgZnjgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRGcmFtZUluZGV4O1xuXG4gICAgLyoqXG4gICAgICog44Ki44OL44Oh44O844K344On44Oz5pu05paw55So44Gu44Ki44OX44Oq44OV44Os44O844Og44Gu44Kr44Km44Oz44OI5YCkXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5mcmFtZTtcblxuICAgIC8qKlxuICAgICAqIOe1guS6huODleODqeOCsO+8mnRydWXjga7mmYLjga91cGRhdGXmmYLjgatjdXJyZW50RnJhbWVJbmRleOOBjOODquOCu+ODg+ODiOOBleOCjOOCi1xuICAgICAqIFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBfYXBwIEFwcOOCr+ODqeOCueOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgdXBkYXRlKF9hcHApIHtcbiAgICBpZiAodGhpcy5wYXVzZWQpIHJldHVybiA7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRBbmltYXRpb24pIHJldHVybiA7XG5cbiAgICBpZiAodGhpcy5maW5pc2hlZCkge1xuICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJyZW50RnJhbWVJbmRleCA9IDA7XG4gICAgICByZXR1cm4gO1xuICAgIH1cblxuICAgICsrdGhpcy5mcmFtZTtcbiAgICBpZiAodGhpcy5mcmFtZSV0aGlzLmN1cnJlbnRBbmltYXRpb24uZnJlcXVlbmN5ID09PSAwKSB7XG4gICAgICArK3RoaXMuY3VycmVudEZyYW1lSW5kZXg7XG4gICAgICB0aGlzLl91cGRhdGVGcmFtZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLlho3nlJ9cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBuYW1lIOOCouODi+ODoeODvOOCt+ODp+ODs+WQjVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtrZWVwPXRydWVdIOWQjOWQjeOCouODi+ODoeODvOOCt+ODp+ODs+OBjOOBmeOBp+OBq+WGjeeUn+S4reOBruWgtOWQiOOAgeOBneOBruOBvuOBvuOBq+OBmeOCi+OBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGdvdG9BbmRQbGF5KG5hbWUsIGtlZXApIHtcbiAgICBrZWVwID0gKGtlZXAgIT09IHVuZGVmaW5lZCkgPyBrZWVwIDogdHJ1ZTtcbiAgICBpZiAoa2VlcCAmJiB0aGlzLmN1cnJlbnRBbmltYXRpb25cbiAgICAgICAgICAgICAmJiBuYW1lID09PSB0aGlzLmN1cnJlbnRBbmltYXRpb25OYW1lXG4gICAgICAgICAgICAgJiYgdGhpcy5jdXJyZW50RnJhbWVJbmRleCA8IHRoaXMuY3VycmVudEFuaW1hdGlvbi5mcmFtZXMubGVuZ3RoXG4gICAgICAgICAgICAgJiYgIXRoaXMucGF1c2VkKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uTmFtZSA9IG5hbWU7XG4gICAgdGhpcy5mcmFtZSA9IDA7XG4gICAgdGhpcy5jdXJyZW50RnJhbWVJbmRleCA9IDA7XG4gICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID0gdGhpcy5zcy5nZXRBbmltYXRpb24obmFtZSk7XG4gICAgdGhpcy5fdXBkYXRlRnJhbWUoKTtcblxuICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgqLjg4vjg6Hjg7zjgrfjg6fjg7Plj4rjgbPjgZ3jga7lhpLpoK3jg5Xjg6zjg7zjg6DjgpLjgrvjg4Pjg4jlvozjgIHlgZzmraLnirbmhYvjgavjgZnjgotcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOOCouODi+ODoeODvOOCt+ODp+ODs+WQjVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGdvdG9BbmRTdG9wKG5hbWUpIHtcbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb25OYW1lID0gbmFtZTtcbiAgICB0aGlzLmZyYW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRGcmFtZUluZGV4ID0gMDtcbiAgICB0aGlzLmN1cnJlbnRBbmltYXRpb24gPSB0aGlzLnNzLmdldEFuaW1hdGlvbihuYW1lKTtcbiAgICB0aGlzLl91cGRhdGVGcmFtZSgpO1xuXG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Os44O844Og5pu05paw5Yem55CGXG4gICAqIFxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3VwZGF0ZUZyYW1lKCkge1xuICAgIGlmICghdGhpcy5jdXJyZW50QW5pbWF0aW9uKSByZXR1cm47XG5cbiAgICB2YXIgYW5pbSA9IHRoaXMuY3VycmVudEFuaW1hdGlvbjtcbiAgICBpZiAodGhpcy5jdXJyZW50RnJhbWVJbmRleCA+PSBhbmltLmZyYW1lcy5sZW5ndGgpIHtcbiAgICAgIGlmIChhbmltLm5leHQpIHtcbiAgICAgICAgdGhpcy5nb3RvQW5kUGxheShhbmltLm5leHQpO1xuICAgICAgICByZXR1cm4gO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYW5pbS5mcmFtZXNbdGhpcy5jdXJyZW50RnJhbWVJbmRleF07XG4gICAgdmFyIGZyYW1lID0gdGhpcy5zcy5nZXRGcmFtZShpbmRleCk7XG4gICAgdGhpcy50YXJnZXQuc3JjUmVjdC5zZXQoZnJhbWUueCwgZnJhbWUueSwgZnJhbWUud2lkdGgsIGZyYW1lLmhlaWdodCk7XG5cbiAgICBpZiAodGhpcy5maXQpIHtcbiAgICAgIHRoaXMudGFyZ2V0LndpZHRoID0gZnJhbWUud2lkdGg7XG4gICAgICB0aGlzLnRhcmdldC5oZWlnaHQgPSBmcmFtZS5oZWlnaHQ7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICB4OiBudW1iZXJcbiAqICAgeTogbnVtYmVyXG4gKiAgIHNldEludGVyYWN0aXZlOiAoZmxhZzpib29sZWFuKSA9PiBhbnlcbiAqIH0gJiBpbXBvcnQoXCIuL2FjY2Vzc29yeVwiKS5BY2Nlc3NvcnlBdHRhY2hhYmxlIH0gRmxpY2thYmxlVGFyZ2V0XG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYWNjZXNzb3J5LkZsaWNrYWJsZVxuICogRmxpY2thYmxlXG4gKiBfZXh0ZW5kcyBwaGluYS5hY2Nlc3NvcnkuQWNjZXNzb3J5XG4gKi9cbmNsYXNzIEZsaWNrYWJsZSBleHRlbmRzIEFjY2Vzc29yeSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0ZsaWNrYWJsZVRhcmdldH0gdGFyZ2V0XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICBzdXBlcih0YXJnZXQpO1xuXG4gICAgLyoqIEB0eXBlIHtGbGlja2FibGVUYXJnZXR9ICovXG4gICAgdGhpcy50YXJnZXQ7XG5cbiAgICAvKipcbiAgICAgKiDjg5Xjg6rjg4Pjgq/plovlp4vkvY3nva5cbiAgICAgKi9cbiAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gICAgLyoqXG4gICAgICog5pGp5pOm5YCkXG4gICAgICogQGRlZmF1bHQgMC45XG4gICAgICovXG4gICAgdGhpcy5mcmljdGlvbiA9IDAuOTtcblxuICAgIC8qKlxuICAgICAqIOmAn+W6puODmeOCr+ODiOODq1xuICAgICAqL1xuICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgVmVjdG9yMigwLCAwKTtcblxuICAgIC8qKlxuICAgICAqIOS4iuS4i+OBruenu+WLleOCkuioseWPr+OBmeOCi+OBi+OBqeOBhuOBi++8iOWIneacn+WApO+8mnRydWXvvIlcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiDlt6blj7Pjga7np7vli5XjgpLoqLHlj6/jgZnjgovjgYvjganjgYbjgYvvvIjliJ3mnJ/lgKTvvJp0cnVl77yJXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHRoaXMuaG9yaXpvbnRhbCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiDjgq3jg6Pjg4Pjgrfjg6XjgZfjgZ/lt67liIblgKRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5jYWNoZUxpc3QgPSBbXTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLm9uKCdhdHRhY2hlZCcsIFxuICAgIC8qKiBAdGhpcyB7RmxpY2thYmxlfSAqL1xuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50YXJnZXQuc2V0SW50ZXJhY3RpdmUodHJ1ZSk7XG5cbiAgICAgIHRoaXMudGFyZ2V0Lm9uKCdwb2ludHN0YXJ0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICBzZWxmLmluaXRpYWxQb3NpdGlvbi5zZXQodGhpcy54LCB0aGlzLnkpO1xuICAgICAgICBzZWxmLnZlbG9jaXR5LnNldCgwLCAwKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy50YXJnZXQub24oJ3BvaW50c3RheScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKHNlbGYuaG9yaXpvbnRhbCkge1xuICAgICAgICAgIHRoaXMueCArPSBlLnBvaW50ZXIuZHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYudmVydGljYWwpIHtcbiAgICAgICAgICB0aGlzLnkgKz0gZS5wb2ludGVyLmR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuY2FjaGVMaXN0Lmxlbmd0aCA+IDMpIHNlbGYuY2FjaGVMaXN0LnNoaWZ0KCk7XG4gICAgICAgIHNlbGYuY2FjaGVMaXN0LnB1c2goZS5wb2ludGVyLmRlbHRhUG9zaXRpb24uY2xvbmUoKSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy50YXJnZXQub24oJ3BvaW50ZW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyDli5XjgY3jga7jgYLjgosgZGVsdGEgcG9zaXRpb24g44KS5b6M44KN44GL44KJ5qSc57Si44CAXG4gICAgICAgIHZhciBkZWx0YSA9IHNlbGYuY2FjaGVMaXN0LnJldmVyc2UoKS5maW5kKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4gdi5sZW5ndGhTcXVhcmVkKCkgPiAxMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNsZWFyLmNhbGwoc2VsZi5jYWNoZUxpc3QpO1xuICAgICAgICAvLyBzZWxmLmNhY2hlTGlzdC5jbGVhcigpO1xuXG4gICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgIHNlbGYudmVsb2NpdHkueCA9IGRlbHRhLng7XG4gICAgICAgICAgc2VsZi52ZWxvY2l0eS55ID0gZGVsdGEueTtcblxuICAgICAgICAgIHNlbGYuZmxhcmUoJ2ZsaWNrc3RhcnQnLCB7XG4gICAgICAgICAgICBkaXJlY3Rpb246IGRlbHRhLm5vcm1hbGl6ZSgpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNlbGYuZmxhcmUoJ2ZsaWNrY2FuY2VsJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZWxmLmZsYXJlKCdmbGljaycpO1xuICAgICAgICAvLyBzZWxmLmZsYXJlKCdmbGlja2VuZCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog5pu05paw6Zai5pWwXG4gICAqIEBwYXJhbSB7Kn0gX2FwcCBBcHDjgq/jg6njgrnjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHVwZGF0ZShfYXBwKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkgcmV0dXJuIDtcblxuICAgIHRoaXMudmVsb2NpdHkueCAqPSB0aGlzLmZyaWN0aW9uO1xuICAgIHRoaXMudmVsb2NpdHkueSAqPSB0aGlzLmZyaWN0aW9uO1xuXG4gICAgaWYgKHRoaXMuaG9yaXpvbnRhbCkge1xuICAgICAgdGhpcy50YXJnZXQucG9zaXRpb24ueCArPSB0aGlzLnZlbG9jaXR5Lng7XG4gICAgfVxuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICB0aGlzLnRhcmdldC5wb3NpdGlvbi55ICs9IHRoaXMudmVsb2NpdHkueTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5L2N572u44O76YCf5bqm44KS44OV44Oq44OD44Kv5YmN44Gr5oi744GZXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMudGFyZ2V0LnggPSB0aGlzLmluaXRpYWxQb3NpdGlvbi54O1xuICAgIHRoaXMudGFyZ2V0LnkgPSB0aGlzLmluaXRpYWxQb3NpdGlvbi55O1xuICAgIHRoaXMudmVsb2NpdHkuc2V0KDAsIDApO1xuXG4gICAgLy8gVE9ETzogXG4gICAgLy8gdGhpcy5zZXRJbnRlcmFjdGl2ZShmYWxzZSk7XG4gICAgLy8gdGhpcy50d2VlbmVyLmNsZWFyKClcbiAgICAvLyAgICAgLm1vdmUodGhpcy5pbml0aWFsWCwgdGhpcy5pbml0aWFsWSwgNTAwLCBcImVhc2VPdXRFbGFzdGljXCIpXG4gICAgLy8gICAgIC5jYWxsKGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgICAgIHRoaXMuc2V0SW50ZXJhY3RpdmUodHJ1ZSk7XG4gICAgLy8gICAgICAgICB0aGlzLmZpcmUodG0uZXZlbnQuRXZlbnQoXCJiYWNrZW5kXCIpKTtcbiAgICAvLyAgICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjg6rjg4Pjgq/lj6/og73jgavjgZnjgotcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBlbmFibGUoKSB7XG4gICAgdGhpcy5fZW5hYmxlID0gdHJ1ZTtcbiAgfVxuXG59XG5cbi8vIFRPRE86IEVsZW1lbnTlgbTjgaflkbzjgbbvvJ9cbi8vIHBoaW5hLmFwcC5FbGVtZW50LnByb3RvdHlwZS5nZXR0ZXIoJ2ZsaWNrYWJsZScsIGZ1bmN0aW9uKCkge1xuLy8gICBpZiAoIXRoaXMuX2ZsaWNrYWJsZSkge1xuLy8gICAgIHRoaXMuX2ZsaWNrYWJsZSA9IHBoaW5hLmFjY2Vzc29yeS5GbGlja2FibGUoKS5hdHRhY2hUbyh0aGlzKTtcbi8vICAgfVxuLy8gICByZXR1cm4gdGhpcy5fZmxpY2thYmxlO1xuLy8gfSk7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgcG9zaXRpb246IGltcG9ydChcIi4uL2dlb20vdmVjdG9yMlwiKS5QcmltaXRpdmVWZWN0b3IyXG4gKiB9ICYgaW1wb3J0KFwiLi9hY2Nlc3NvcnlcIikuQWNjZXNzb3J5QXR0YWNoYWJsZSB9IFBoeXNpY2FsVGFyZ2V0XG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYWNjZXNzb3J5LlBoeXNpY2FsXG4gKiDmnKznianjgafjga/jgarjgYTjga7jgaflkI3liY3lpInjgYjjgovjgYvjgoJcbiAqIEZha2VQaHlzaWNhbCBvciBNYXJpb1BoeXNpY2FsIG9yIExpZVBoeXNpY2FsXG4gKiBSZXRyb1B5c2ljYWwgb3IgUHlzaWNhTGlrZVxuICogX2V4dGVuZHMgcGhpbmEuYWNjZXNzb3J5LkFjY2Vzc29yeVxuICovXG5jbGFzcyBQaHlzaWNhbCBleHRlbmRzIEFjY2Vzc29yeSAge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtQaHlzaWNhbFRhcmdldH0gdGFyZ2V0XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQpIHtcbiAgICBzdXBlcih0YXJnZXQpO1xuXG4gICAgLyoqXG4gICAgICog44GL44GL44Gj44Gm44GE44KL5Yqb44Gu44OZ44Kv44OI44OrXG4gICAgICovXG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWN0b3IyKDAsIDApO1xuXG4gICAgLyoqXG4gICAgICog6YeN5Yqb44OZ44Kv44OI44OrXG4gICAgICovXG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IFZlY3RvcjIoMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiDmkanmk6blgKRcbiAgICAgKiBAZGVmYXVsdCAxLjBcbiAgICAgKi9cbiAgICB0aGlzLmZyaWN0aW9uID0gMS4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOmWouaVsFxuICAgKiBAcGFyYW0geyp9IF9hcHAgQXBw44Kv44Op44K544Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICB1cGRhdGUoX2FwcCkge1xuICAgIHZhciB0ID0gLyoqIEB0eXBlIHtQaHlzaWNhbFRhcmdldH0gKi8odGhpcy50YXJnZXQpO1xuXG4gICAgdGhpcy52ZWxvY2l0eS54ICo9IHRoaXMuZnJpY3Rpb247XG4gICAgdGhpcy52ZWxvY2l0eS55ICo9IHRoaXMuZnJpY3Rpb247XG5cbiAgICB0aGlzLnZlbG9jaXR5LnggKz0gdGhpcy5ncmF2aXR5Lng7XG4gICAgdGhpcy52ZWxvY2l0eS55ICs9IHRoaXMuZ3Jhdml0eS55O1xuXG4gICAgdC5wb3NpdGlvbi54ICs9IHRoaXMudmVsb2NpdHkueDtcbiAgICB0LnBvc2l0aW9uLnkgKz0gdGhpcy52ZWxvY2l0eS55O1xuICB9XG5cbiAgLyoqXG4gICAqIOWKm+ODmeOCr+ODiOODq+OCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZvcmNlKHgsIHkpIHtcbiAgICB0aGlzLnZlbG9jaXR5LnNldCh4LCB5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlipvjg5njgq/jg4jjg6vjgavlgKTjgpLliqDnrpdcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBhZGRGb3JjZSh4LCB5KSB7XG4gICAgdGhpcy52ZWxvY2l0eS54ICs9IHg7XG4gICAgdGhpcy52ZWxvY2l0eS55ICs9IHk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog6YeN5Yqb44OZ44Kv44OI44Or44KS44K744OD44OIXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0R3Jhdml0eSh4LCB5KSB7XG4gICAgdGhpcy5ncmF2aXR5LnNldCh4LCB5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmkanmk6blgKTjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0RnJpY3Rpb24oZnIpIHtcbiAgICB0aGlzLmZyaWN0aW9uID0gZnI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuLy8gcGhpbmEuYXBwLkVsZW1lbnQucHJvdG90eXBlLmdldHRlcigncGh5c2ljYWwnLCBmdW5jdGlvbigpIHtcbi8vICAgaWYgKCF0aGlzLl9waHlzaWNhbCkge1xuLy8gICAgIHRoaXMuX3BoeXNpY2FsID0gcGhpbmEuYWNjZXNzb3J5LlBoeXNpY2FsKCkuYXR0YWNoVG8odGhpcyk7XG4vLyAgIH1cbi8vICAgcmV0dXJuIHRoaXMuX3BoeXNpY2FsO1xuLy8gfSk7XG5cbi8qKiBAdHlwZWRlZiB7c3RyaW5nIHwgaW1wb3J0KFwiLi9maWxlXCIpLkZpbGVBc3NldExvYWRQYXJhbSB8IGFueX0gQXNzZXRTcmMg5Z+65pys55qE44Gr44Gv5paH5a2X5YiX44Gg44GMQXNzZXTnqK7poZ7jgavjgojjgaPjgablpInjgo/jgosgKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuQXNzZXRcbiAqIF9leHRlbmRzIHBoaW5hLnV0aWwuRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIEFzc2V0IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuICAvLyBzZXJ2ZXJFcnJvcjogZmFsc2UsXG4gIC8vIG5vdEZvdW5kOiBmYWxzZSxcbiAgLy8gbG9hZEVycm9yOiBmYWxzZSxcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlcnZlckVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5ub3RGb3VuZCA9IGZhbHNlO1xuICAgIHRoaXMubG9hZEVycm9yID0gZmFsc2U7XG5cbiAgICAvKiogQHR5cGUge0Fzc2V0U3JjfSAqL1xuICAgIHRoaXMuc3JjID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXNzZXRTcmN9IHNyY1xuICAgKiBAcmV0dXJucyB7Rmxvd31cbiAgICovXG4gIGxvYWQoc3JjKSB7XG4gICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgcmV0dXJuIG5ldyBGbG93KHRoaXMuX2xvYWQuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICog44Ot44O844OJ5riI44G/44GL44Gp44GG44GLXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNMb2FkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCouOCu+ODg+ODiOeorumhnuOBq+W/nOOBmOOBpuOCteODluOCr+ODqeOCueOBp+OCquODvOODkOODvOODqeOCpOODiVxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueSkgPT4gYW55fSByZXNvbHZlXG4gICAqL1xuICBfbG9hZChyZXNvbHZlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmxvYWRlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdmlydHVhbFxuICAgKiDjg63jg7zjg4nlpLHmlZfmmYLjgavjg4Djg5/jg7zjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIGxvYWREdW1teSgpIHsgfVxuXG59XG5cbnZhciBnZXRGaXJzdCA9IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBmaXJzdC5nZXQuY2FsbChhcnJheSk7IH07XG52YXIgZ2V0TGFzdCA9IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBsYXN0LmdldC5jYWxsKGFycmF5KTsgfTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuVGV4dHVyZVxuICogX2V4dGVuZHMgcGhpbmEuYXNzZXQuQXNzZXRcbiAqL1xuY2xhc3MgVGV4dHVyZSBleHRlbmRzIEFzc2V0IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqIEB0eXBlIHtIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fSAqL1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IG5ldyBJbWFnZSgpO1xuICAgIFxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3JjO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueSkgPT4gYW55fSByZXNvbHZlXG4gICAqL1xuICBfbG9hZChyZXNvbHZlKSB7XG4gICAgdGhpcy5kb21FbGVtZW50ID0gbmV3IEltYWdlKCk7XG5cbiAgICB2YXIgaXNMb2NhbCA9IChsb2NhdGlvbi5wcm90b2NvbCA9PSAnZmlsZTonKTtcbiAgICBpZiAoICFpc0xvY2FsICYmICEoL15kYXRhOi8udGVzdCh0aGlzLnNyYykpICkgO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuZG9tRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBzZWxmLmxvYWRlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKHNlbGYpO1xuICAgIH07XG4gICAgLyoqIEBwYXJhbSB7RXZlbnR9IGUgKi9cbiAgICB0aGlzLmRvbUVsZW1lbnQub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0LmNhbGwoXCJbcGhpbmEuanNdIG5vdCBmb3VuZCBgezB9YCFcIiwgdGhpcy5zcmMpKTtcbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJbcGhpbmEuanNdIG5vdCBmb3VuZCBgezB9YCFcIi5mb3JtYXQodGhpcy5zcmMpKTtcblxuICAgICAgLy8gdmFyIGtleSA9IHNlbGYuc3JjLnNwbGl0KCcvJykubGFzdC5yZXBsYWNlKCcucG5nJywgJycpLnNwbGl0KCc/JykuZmlyc3Quc3BsaXQoJyMnKS5maXJzdDtcbiAgICAgIHZhciBrZXkgPSBnZXRGaXJzdChcbiAgICAgICAgZ2V0Rmlyc3QoXG4gICAgICAgICAgZ2V0TGFzdChcbiAgICAgICAgICAgIHNlbGYuc3JjLnNwbGl0KCcvJylcbiAgICAgICAgICApLnJlcGxhY2UoJy5wbmcnLCAnJykuc3BsaXQoJz8nKVxuICAgICAgICApLnNwbGl0KCcjJylcbiAgICAgICk7XG5cbiAgICAgIC8vIOWei+OCouOCteODvOOCt+ODp+ODs1xuICAgICAgdmFyIHRhcmdldCA9IC8qKiBAdHlwZSB7SFRNTEltYWdlRWxlbWVudH0gKi8gKGUudGFyZ2V0KTtcbiAgICAgIHRhcmdldC5vbmVycm9yID0gbnVsbDtcbiAgICAgIHRhcmdldC5zcmMgPSBcImh0dHA6Ly9kdW1teWltYWdlLmNvbS8xMjh4MTI4LzQ0NDQ0NC9lZWVlZWUmdGV4dD1cIiArIGtleTtcbiAgICB9O1xuXG4gICAgdGhpcy5kb21FbGVtZW50LnNyYyA9IHRoaXMuc3JjO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWsOOBn+OBq1RleHR1cmXjgpLjgq/jg63jg7zjg7PnlJ/miJDjgZfjgabov5TjgZlcbiAgICogQHJldHVybnMge1RleHR1cmV9XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICB2YXIgaW1hZ2UgPSB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMoKS5zZXRTaXplKGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuICAgIHZhciB0ID0gbmV3IFRleHR1cmUoKTtcbiAgICBjYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgIHQuZG9tRWxlbWVudCA9IGNhbnZhcy5kb21FbGVtZW50O1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7eyByOiBudW1iZXI7IGc6IG51bWJlcjsgYjogbnVtYmVyOyB9fSBbY29sb3JdXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgdHJhbnNtaXQoY29sb3IpIHtcbiAgICAvLyBpbWFnYeOCquODluOCuOOCp+OCr+ODiOOCkuOCsuODg+ODiFxuICAgIHZhciBpbWFnZSA9IHRoaXMuZG9tRWxlbWVudDtcbiAgICAvLyDmlrDopo9jYW52YXPkvZzmiJBcbiAgICB2YXIgY2FudmFzID0gbmV3IENhbnZhcygpLnNldFNpemUoaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG4gICAgLy8g5paw6KaPY2FudmFz44Gr5o+P55S7XG4gICAgY2FudmFzLmNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICAvLyBjYW52YXPlhajkvZPjga7jgqTjg6Hjg7zjgrjjg4fjg7zjgr/phY3liJfjgpLjgrLjg4Pjg4hcbiAgICB2YXIgaW1hZ2VEYXRhID0gY2FudmFzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgdmFyIGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcbiAgICAvLyDpgI/pgY7oibLjga7mjIflrprjgYzjgarjgZHjgozjgbDlt6bkuIrjga5yZ2LlgKTjgpLmir3lh7pcbiAgICB2YXIgciA9IChjb2xvciAhPT0gdW5kZWZpbmVkKSA/IGNvbG9yLnIgOiBkYXRhWzBdO1xuICAgIHZhciBnID0gKGNvbG9yICE9PSB1bmRlZmluZWQpID8gY29sb3IuZyA6IGRhdGFbMV07XG4gICAgdmFyIGIgPSAoY29sb3IgIT09IHVuZGVmaW5lZCkgPyBjb2xvci5iIDogZGF0YVsyXTtcbiAgICAvLyDphY3liJfjgpI06KaB57Sg55uu44GL44KJNOOBpOmjm+OBs++8iOOCouODq+ODleOCoeWApO+8ieOBp+ODq+ODvOODl1xuICAgIC8vICgzKS5zdGVwKGRhdGEubGVuZ3RoLCA0LCBmdW5jdGlvbihpKSB7XG4gICAgc3RlcC5jYWxsKDMsIGRhdGEubGVuZ3RoLCA0LCBmdW5jdGlvbihpKSB7XG4gICAgICAvLyByZ2LlgKTjgpLpgIbnrpfjgafjgrLjg4Pjg4jjgZfjgIHlt6bkuIrjga5yZ2Ljgajmr5TovINcbiAgICAgIGlmIChkYXRhW2kgLSAzXSA9PT0gciAmJiBkYXRhW2kgLSAyXSA9PT0gZyAmJiBkYXRhW2kgLSAxXSA9PT0gYikge1xuICAgICAgICAvLyDkuIDoh7TjgZfjgZ/loLTlkIjjga/jgqLjg6vjg5XjgqHlgKTjgpLmm7jjgY3mj5vjgYjjgotcbiAgICAgICAgZGF0YVtpXSA9IDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8g5pu444GN5o+b44GI44Gf44Kk44Oh44O844K444OH44O844K/44KSY2FudmFz44Gr5oi744GZXG4gICAgY2FudmFzLmNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBjYW52YXMuZG9tRWxlbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7KHBpeGVsOiBVaW50OENsYW1wZWRBcnJheSwgaW5kZXg6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGltYWdlRGF0YTogSW1hZ2VEYXRhICk9PiB2b2lkfSBGaWx0ZXJGdW5jXG4gICAqIEBwYXJhbSB7RmlsdGVyRnVuYyB8IEZpbHRlckZ1bmNbXX0gZmlsdGVyc1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGZpbHRlcihmaWx0ZXJzKSB7XG4gICAgaWYgKCFmaWx0ZXJzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbHRlcnMpKSB7XG4gICAgICBmaWx0ZXJzID0gW2ZpbHRlcnNdO1xuICAgIH1cbiAgICB2YXIgaW1hZ2UgPSB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgdmFyIHcgPSBpbWFnZS53aWR0aDtcbiAgICB2YXIgaCA9IGltYWdlLmhlaWdodDtcbiAgICB2YXIgY2FudmFzID0gbmV3IENhbnZhcygpLnNldFNpemUodywgaCk7XG5cbiAgICAvKiogQHR5cGUge0ltYWdlRGF0YX0gKi9cbiAgICB2YXIgaW1hZ2VEYXRhID0gbnVsbDtcblxuICAgIGNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgaW1hZ2VEYXRhID0gY2FudmFzLmNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHcsIGgpO1xuICAgIGZpbHRlcnMuZm9yRWFjaCggZnVuY3Rpb24gKGZuKSB7XG4gICAgICBpZiAodHlwZW9mIGZuID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gaC50aW1lcyggZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdGltZXMuY2FsbChoLCBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgIC8vIHcudGltZXMoIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgdGltZXMuY2FsbCh3LCBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgdmFyIGkgPSAoeSAqIHcgKyB4KSAqIDQ7XG4gICAgICAgICAgICB2YXIgcGl4ZWwgPSBpbWFnZURhdGEuZGF0YS5zbGljZShpLCBpICsgNCk7XG4gICAgICAgICAgICBmbihwaXhlbCwgaSwgeCwgeSwgaW1hZ2VEYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY2FudmFzLmNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgdGhpcy5kb21FbGVtZW50ID0gY2FudmFzLmRvbUVsZW1lbnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hc3NldC5Tb3VuZFxuICogX2V4dGVuZHMgcGhpbmEuYXNzZXQuQXNzZXRcbiAqL1xuY2xhc3MgU291bmQgZXh0ZW5kcyBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9sb29wID0gZmFsc2U7XG4gICAgdGhpcy5fbG9vcFN0YXJ0ID0gMDtcbiAgICB0aGlzLl9sb29wRW5kID0gMDtcbiAgICB0aGlzLl9wbGF5YmFja1JhdGUgPSAxO1xuICAgIHRoaXMuY29udGV4dCA9IFNvdW5kLmdldEF1ZGlvQ29udGV4dCgpO1xuICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXG4gICAgLyoqIEB0eXBlIHsoQXVkaW9CdWZmZXJTb3VyY2VOb2RlIHwgT3NjaWxsYXRvck5vZGUpP30gKi9cbiAgICB0aGlzLnNvdXJjZTtcblxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3JjO1xuICB9XG5cbiAgLyoqXG4gICAqIOmfs+a6kOOCkuWGjeeUn1xuICAgKiDpn7PmupDntYLkuobmmYLjgatcImVuZGVkXCLjgqTjg5njg7Pjg4jjgpLnmbrnlJ9cbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbd2hlbj0wXSDmjIflrprjga7np5LmlbDjgIHlho3nlJ/jgpLpgYXjgonjgZvjgotcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0g6Z+z5rqQ44Gu44Gp44Gu5pmC6ZaT5L2N572u44Gn5YaN55Sf44GZ44KL44GL44KS56eS5pWw5oyH5a6aXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb25dIOWGjeeUn+aZgumWk+OCkuenkuaVsOaMh+WumlxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHBsYXkod2hlbiwgb2Zmc2V0LCBkdXJhdGlvbikge1xuICAgIHdoZW4gPSB3aGVuID8gd2hlbiArIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSA6IDA7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBpZiAodGhpcy5zb3VyY2UpIDtcblxuICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICB2YXIgYnVmZmVyID0gc291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgIHNvdXJjZS5sb29wID0gdGhpcy5fbG9vcDtcbiAgICBzb3VyY2UubG9vcFN0YXJ0ID0gdGhpcy5fbG9vcFN0YXJ0O1xuICAgIHNvdXJjZS5sb29wRW5kID0gdGhpcy5fbG9vcEVuZDtcbiAgICBzb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gdGhpcy5fcGxheWJhY2tSYXRlO1xuXG4gICAgLy8gY29ubmVjdFxuICAgIHNvdXJjZS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdChTb3VuZC5nZXRNYXN0ZXJHYWluKCkpO1xuXG4gICAgLy8gcGxheVxuICAgIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzb3VyY2Uuc3RhcnQod2hlbiwgb2Zmc2V0LCBkdXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc291cmNlLnN0YXJ0KHdoZW4sIG9mZnNldCk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgcGxheSBlbmRcbiAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBmdW5jdGlvbigpe1xuICAgICAgdGhpcy5mbGFyZSgnZW5kZWQnKTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YaN55Sf44KS5YGc5q2i77yI5YaN55Sf5Lit44Gn44Gq44GL44Gj44Gf5pmC44Gv5L2V44KC44GX44Gq44GE77yJICBcbiAgICog5YaN55Sf5Lit44Gg44Gj44Gf5aC05ZCI44CB5ZCM5pmC44GrXCJzdG9wXCIsIFwiZW5kZWRcIuOCpOODmeODs+ODiOOCkueZuueBq+OBmeOCi1xuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzdG9wKCkge1xuICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgLy8gc3RvcCDjgZnjgovjgaggc291cmNlLmVuZGVk44KC55m654Gr44GZ44KLXG4gICAgICB0aGlzLnNvdXJjZS5zdG9wICYmIHRoaXMuc291cmNlLnN0b3AoMCk7XG4gICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgICB0aGlzLmZsYXJlKCdzdG9wJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YaN55Sf44KS5LiA5pmC5YGc5q2iXG4gICAqIOWQjOaZguOBq1wicGF1c2VcIuOCpOODmeODs+ODiOOCkueZuueBq+OBmeOCi1xuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBwYXVzZSgpIHtcbiAgICAvKiogQHR5cGUge0F1ZGlvQnVmZmVyU291cmNlTm9kZX0gKi9cbiAgICAodGhpcy5zb3VyY2UpLnBsYXliYWNrUmF0ZS52YWx1ZSA9IDA7XG4gICAgdGhpcy5mbGFyZSgncGF1c2UnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlho3nlJ/jgpLlho3plotcbiAgICog5ZCM5pmC44GrXCJyZXN1bWVcIuOCpOODmeODs+ODiOOCkueZuueBq+OBmeOCi1xuICAgKiBcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZXN1bWUoKSB7XG4gICAgLyoqIEB0eXBlIHtBdWRpb0J1ZmZlclNvdXJjZU5vZGV9ICovXG4gICAgKHRoaXMuc291cmNlKS5wbGF5YmFja1JhdGUudmFsdWUgPSB0aGlzLl9wbGF5YmFja1JhdGU7XG4gICAgdGhpcy5mbGFyZSgncmVzdW1lJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICog5pyq5a6f6KOFXG4gICAqIFxuICAgKiBAcGFyYW0geyp9IHR5cGUgXG4gICAqL1xuICBfb3NjaWxsYXRvcih0eXBlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cbiAgICB2YXIgb3NjaWxsYXRvciA9IGNvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuXG4gICAgLy8gU2luZSB3YXZlIGlzIHR5cGUgPSDigJxzaW5l4oCdXG4gICAgLy8gU3F1YXJlIHdhdmUgaXMgdHlwZSA9IOKAnHNxdWFyZeKAnVxuICAgIC8vIFNhd3Rvb3RoIHdhdmUgaXMgdHlwZSA9IOKAnHNhd+KAnVxuICAgIC8vIFRyaWFuZ2xlIHdhdmUgaXMgdHlwZSA9IOKAnHRyaWFuZ2xl4oCdXG4gICAgLy8gQ3VzdG9tIHdhdmUgaXMgdHlwZSA9IOKAnGN1c3RvbeKAnSBcbiAgICBvc2NpbGxhdG9yLnR5cGUgPSB0eXBlIHx8ICdzaW5lJztcblxuICAgIHRoaXMuc291cmNlID0gb3NjaWxsYXRvcjtcbiAgICAvLyBjb25uZWN0XG4gICAgdGhpcy5zb3VyY2UuY29ubmVjdChjb250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdWRpb0J1ZmZlcuOBi+OCieODreODvOODiVxuICAgKiBcbiAgICogQHBhcmFtIHtBdWRpb0J1ZmZlcn0gW2J1ZmZlcl0gXG4gICAqL1xuICBsb2FkRnJvbUJ1ZmZlcihidWZmZXIpIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgIC8vIHNldCBkZWZhdWx0IGJ1ZmZlclxuICAgIGlmICghYnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlciggMSwgNDQxMDAsIDQ0MTAwICk7XG4gICAgICB2YXIgY2hhbm5lbCA9IGJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcblxuICAgICAgZm9yKCB2YXIgaT0wOyBpIDwgY2hhbm5lbC5sZW5ndGg7IGkrKyApXG4gICAgICB7XG4gICAgICAgIGNoYW5uZWxbaV0gPSBNYXRoLnNpbiggaSAvIDEwMCAqIE1hdGguUEkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNvdXJjZVxuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOODq+ODvOODl+ioreWumlxuICAgKiBcbiAgICogQHBhcmFtIHtib29sZWFufSBsb29wXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0TG9vcChsb29wKSB7XG4gICAgdGhpcy5sb29wID0gbG9vcDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fplovlp4vkvY3nva7jgpLnp5LmlbDjgafoqK3lrppcbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb29wU3RhcnRcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRMb29wU3RhcnQobG9vcFN0YXJ0KSB7XG4gICAgdGhpcy5sb29wU3RhcnQgPSBsb29wU3RhcnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX57WC5LqG5L2N572u44KS56eS5pWw44Gn6Kit5a6aXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gbG9vcEVuZFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldExvb3BFbmQobG9vcEVuZCkge1xuICAgIHRoaXMubG9vcEVuZCA9IGxvb3BFbmQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDlho3nlJ/pgJ/luqbjgpLoqK3lrppcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQXVkaW9CdWZmZXJTb3VyY2VOb2RlL3BsYXliYWNrUmF0ZVxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBsYXliYWNrUmF0ZVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldFBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpIHtcbiAgICB0aGlzLnBsYXliYWNrUmF0ZSA9IHBsYXliYWNrUmF0ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55KSA9PiBhbnl9IHJcbiAgICovXG4gIF9sb2FkKHIpIHtcbiAgICBpZiAoL15kYXRhOi8udGVzdCh0aGlzLnNyYykpIHtcbiAgICAgIHRoaXMuX2xvYWRGcm9tVVJJU2NoZW1lKHIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX2xvYWRGcm9tRmlsZShyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55KSA9PiBhbnl9IHJcbiAgICovXG4gIF9sb2FkRnJvbUZpbGUocikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciB4bWwgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4bWwub3BlbignR0VUJywgdGhpcy5zcmMpO1xuICAgIHhtbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh4bWwucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAoWzIwMCwgMjAxLCAwXS5pbmRleE9mKHhtbC5zdGF0dXMpICE9PSAtMSkge1xuXG4gICAgICAgICAgLy8g6Z+z5qW944OQ44Kk44OK44Oq44O844OH44O844K/XG4gICAgICAgICAgdmFyIGRhdGEgPSB4bWwucmVzcG9uc2U7XG5cbiAgICAgICAgICAvLyB3ZWJhdWRpbyDnlKjjgavlpInmj5tcbiAgICAgICAgICBzZWxmLmNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGRhdGEsIGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgICAgICAgc2VsZi5sb2FkRnJvbUJ1ZmZlcihidWZmZXIpO1xuICAgICAgICAgICAgcihzZWxmKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIumfs+WjsOODleOCoeOCpOODq+OBruODh+OCs+ODvOODieOBq+WkseaVl+OBl+OBvuOBl+OBn+OAgihcIiArIHNlbGYuc3JjICsgXCIpXCIpO1xuICAgICAgICAgICAgcihzZWxmKTtcbiAgICAgICAgICAgIHNlbGYuZmxhcmUoJ2RlY29kZWVycm9yJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh4bWwuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAvLyBub3QgZm91bmRcblxuICAgICAgICAgIHNlbGYubG9hZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLm5vdEZvdW5kPSB0cnVlO1xuICAgICAgICAgIHIoc2VsZik7XG4gICAgICAgICAgc2VsZi5mbGFyZSgnbG9hZGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5mbGFyZSgnbm90Zm91bmQnKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIOOCteODvOODkOODvOOCqOODqeODvFxuXG4gICAgICAgICAgc2VsZi5sb2FkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuc2VydmVyRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIHIoc2VsZik7XG4gICAgICAgICAgc2VsZi5mbGFyZSgnbG9hZGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5mbGFyZSgnc2VydmVyZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB4bWwucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcblxuICAgIHhtbC5zZW5kKG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueSkgPT4gYW55fSByXG4gICAqL1xuICBfbG9hZEZyb21VUklTY2hlbWUocikge1xuICAgIHZhciBieXRlU3RyaW5nID0gJyc7XG4gICAgaWYgKHRoaXMuc3JjLnNwbGl0KCcsJylbMF0uaW5kZXhPZignYmFzZTY0JykgPj0gMCkge1xuICAgICAgYnl0ZVN0cmluZyA9IGF0b2IodGhpcy5zcmMuc3BsaXQoJywnKVsxXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYnl0ZVN0cmluZyA9IHVuZXNjYXBlKHRoaXMuc3JjLnNwbGl0KCcsJylbMV0pO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbGVuID0gYnl0ZVN0cmluZy5sZW5ndGg7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgICBmb3IgKHZhciBpPTA7IGk8bGVuOyArK2kpIHtcbiAgICAgIGJ1ZmZlcltpXSA9IGJ5dGVTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG5cbiAgICAvLyB3ZWJhdWRpbyDnlKjjgavlpInmj5tcbiAgICB0aGlzLmNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGJ1ZmZlci5idWZmZXIsIGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgc2VsZi5sb2FkRnJvbUJ1ZmZlcihidWZmZXIpO1xuICAgICAgcihzZWxmKTtcbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIumfs+WjsOODleOCoeOCpOODq+OBruODh+OCs+ODvOODieOBq+WkseaVl+OBl+OBvuOBl+OBn+OAgihcIiArIHNlbGYuc3JjICsgXCIpXCIpO1xuICAgICAgc2VsZi5sb2FkZWQgPSB0cnVlO1xuICAgICAgcihzZWxmKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICog44OA44Of44O844OQ44OD44OV44Kh44KS44Ot44O844OJXG4gICAqL1xuICBsb2FkRHVtbXkoKSB7XG4gICAgdGhpcy5sb2FkRnJvbUJ1ZmZlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOmfs+mHj1xuICAgKi9cbiAgZ2V0IHZvbHVtZSgpICB7IHJldHVybiB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWU7IH1cbiAgc2V0IHZvbHVtZSh2KSB7IHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IHY7IH1cblxuICAvKipcbiAgICog44Or44O844OX6Kit5a6aXG4gICAqL1xuICBnZXQgbG9vcCgpICB7IHJldHVybiB0aGlzLl9sb29wOyB9XG4gIHNldCBsb29wKHYpIHtcbiAgICB0aGlzLl9sb29wID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fplovlp4vmmYLplpPkvY3nva4oc2Vjb25kKVxuICAgKi9cbiAgZ2V0IGxvb3BTdGFydCgpICB7IHJldHVybiB0aGlzLl9sb29wU3RhcnQ7IH1cbiAgc2V0IGxvb3BTdGFydCh2KSB7XG4gICAgdGhpcy5fbG9vcFN0YXJ0ID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fntYLkuobmmYLplpPkvY3nva4oc2Vjb25kKVxuICAgKi9cbiAgZ2V0IGxvb3BFbmQoKSAgeyByZXR1cm4gdGhpcy5fbG9vcEVuZDsgfVxuICBzZXQgbG9vcEVuZCh2KSB7XG4gICAgdGhpcy5fbG9vcEVuZCA9IHY7XG4gIH1cblxuICAvKipcbiAgICog5YaN55Sf6YCf5bqmXG4gICAqL1xuICBnZXQgcGxheWJhY2tSYXRlKCkgeyByZXR1cm4gdGhpcy5fcGxheWJhY2tSYXRlOyB9XG4gIHNldCBwbGF5YmFja1JhdGUodikge1xuICAgIHRoaXMuX3BsYXliYWNrUmF0ZSA9IHY7XG4gICAgdGhpcy5zb3VyY2UgPSAvKiogQHR5cGUge0F1ZGlvQnVmZmVyU291cmNlTm9kZX0gKi8odGhpcy5zb3VyY2UpO1xuICAgIGlmICh0aGlzLnNvdXJjZSAmJiB0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgIT09IDApIHtcbiAgICAgIHRoaXMuc291cmNlLnBsYXliYWNrUmF0ZS52YWx1ZSA9IHY7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCv+ODvOOBruOCsuOCpOODs+ODjuODvOODieOCkui/lOOBl+OBvuOBmeOAgiAgXG4gICAqIEdhaW5Ob2Rl44GM5pyq55Sf5oiQ44Gu5aC05ZCI44Gv55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCXG4gICAqIEByZXR1cm5zIHtHYWluTm9kZX1cbiAgICovXG4gIHN0YXRpYyBnZXRNYXN0ZXJHYWluKCkge1xuICAgIGlmKCF0aGlzLl9tYXN0ZXJHYWluKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMuZ2V0QXVkaW9Db250ZXh0KCk7XG4gICAgICB0aGlzLl9tYXN0ZXJHYWluID0gY29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICB0aGlzLl9tYXN0ZXJHYWluLmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tYXN0ZXJHYWluO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlYkF1ZGlv44Gu44Kz44Oz44OG44Kt44K544OI44KS55Sf5oiQ44GX44Gm6L+U44GX44G+44GZ44CCICBcbiAgICog44GZ44Gn44Gr55Sf5oiQ5riI44G/44Gu5aC05ZCI44Gv44Gd44KM44KS6L+U44GX44G+44GZ44CCICBcbiAgICogV2ViQXVkaW/mnKrjgrXjg53jg7zjg4jjga7loLTlkIjjga9udWxs44KS6L+U44GX44G+44GZ44CCXG4gICAqIEByZXR1cm5zIHtBdWRpb0NvbnRleHQgfCBudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldEF1ZGlvQ29udGV4dCgpIHtcbiAgICBpZiAoIVN1cHBvcnQud2ViQXVkaW8pIHJldHVybiBudWxsO1xuXG4gICAgaWYgKHRoaXMuY29udGV4dCkgcmV0dXJuIHRoaXMuY29udGV4dDtcblxuICAgIHZhciBnID0gcGhpbmEuZ2xvYmFsO1xuICAgIHZhciBjb250ZXh0ID0gbnVsbDtcblxuICAgIGlmIChnLkF1ZGlvQ29udGV4dCkge1xuICAgICAgY29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZ1snd2Via2l0QXVkaW9Db250ZXh0J10pIHtcbiAgICAgIGNvbnRleHQgPSBuZXcgZ1snd2Via2l0QXVkaW9Db250ZXh0J10oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZ1snbW96QXVkaW9Db250ZXh0J10pIHtcbiAgICAgIGNvbnRleHQgPSBuZXcgZ1snbW96QXVkaW9Db250ZXh0J10oKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544K/44O86Z+z6YeP44KS5Y+W5b6XXG4gICAqL1xuICBzdGF0aWMgZ2V0IHZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYXN0ZXJHYWluKCkuZ2Fpbi52YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg57jgrnjgr/jg7zpn7Pph4/jgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHN0YXRpYyBzZXQgdm9sdW1lKHYpIHtcbiAgICB0aGlzLmdldE1hc3RlckdhaW4oKS5nYWluLnZhbHVlID0gdjtcbiAgfVxufVxuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hc3NldC5TY3JpcHRcbiAqIF9leHRlbmRzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKi9cbmNsYXNzIFNjcmlwdCBleHRlbmRzIEFzc2V0IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIFxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3JjO1xuICB9XG5cbiAgX2xvYWQocmVzb2x2ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQuc3JjID0gdGhpcy5zcmM7XG5cbiAgICB0aGlzLmRvbUVsZW1lbnQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHNlbGYpO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kb21FbGVtZW50KTtcbiAgfVxuXG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3ByaXRlU2hlZXRGcmFtZURhdGFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB4IOODleODrOODvOODoOW3puS4injluqfmqJlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB5IOODleODrOODvOODoOW3puS4innluqfmqJlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aCDjg5Xjg6zjg7zjg6DmqKrluYVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoZWlnaHQg44OV44Os44O844Og57im5bmFXG4gKi9cblxuIC8qKlxuICog5ZCE44Ki44OL44Oh44O844K344On44Oz44Gu6Kmz57SwXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTcHJpdGVTaGVldEFuaW1hdGlvbkRhdGFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyW119IGZyYW1lcyDjg5Xjg6zjg7zjg6Dnlarlj7fpoIbjga7mlbDliJcgZXgpIFswLCAxLCAyXVxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudW1iZXJ9IG5leHQg54++44Ki44OL44Oh44O844K344On44Oz57WC5LqG5pmC44Gr56e76KGM44GX44Gf44GE44Ki44OL44Oh44O844K344On44Oz5ZCN44CB44Or44O844OX44GV44Gb44Gf44GE5aC05ZCI44Gv5ZCM44GY44Ki44OL44Oh44O844K344On44Oz44KS5oyH5a6aXG4gKiBAcHJvcGVydHkge251bWJlcn0gZnJlcXVlbmN5IOODleODrOODvOODoOabtOaWsOmgu+W6pu+8iOmWk+malO+8iVxuICovXG5cbi8qKlxuICogU3ByaXRlU2hlZXRBbmltYXRpb25EYXRh44Gu6YWN5YiX54mIXG4gKiBAdHlwZWRlZiB7W1xuICogICBudW1iZXIsIC8vIOmWi+Wni+ODleODrOODvOODoGluZGV4XG4gKiAgIG51bWJlciwgLy8g57WC5LqG44OV44Os44O844OgaW5kZXhcbiAqICAgc3RyaW5nIHwgbnVtYmVyLCAvLyBuZXh0XG4gKiAgIG51bWJlciAgLy8gZnJlcXVlbmN5XG4gKiBdfSBTcHJpdGVTaGVldEFuaW1hdGlvbkRhdGFBcnJheVxuICovXG5cbi8qKlxuICog44Ki44OL44Oh44O844K344On44Oz44OG44O844OW44OrXG4gKiBAdHlwZWRlZiB7e1xuICogICBba2V5IGluIChzdHJpbmcgfCBudW1iZXIpXTogU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhXG4gKiB9fSBTcHJpdGVTaGVldEFuaW1hdGlvblRhYmxlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTcHJpdGVTaGVldEZyYW1lU2V0dXBQYXJhbVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHdpZHRoIO+8keODleODrOODvOODoOOBruaoquW5hVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodCDvvJHjg5Xjg6zjg7zjg6Djga7nuKbluYVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByb3dzIOaoquOBruODleODrOODvOODoOaVsFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvbHMg57im44Gu44OV44Os44O844Og5pWwXG4gKi9cblxuLyoqXG4gKiBTcHJpdGVTaGVldOOCr+ODqeOCueOCu+ODg+ODiOOCouODg+ODl+eUqOOBruODh+ODvOOCv+OCquODluOCuOOCp+OCr+ODiFxuICogQHR5cGVkZWYge09iamVjdH0gU3ByaXRlU2hlZXRTZXR1cFBhcmFtXG4gKiBAcHJvcGVydHkge1Nwcml0ZVNoZWV0RnJhbWVTZXR1cFBhcmFtfSBmcmFtZSDjg5Xjg6zjg7zjg6Djga7jgrXjgqTjgrrjg7vliIblibLmlbDjg4fjg7zjgr9cbiAqIEBwcm9wZXJ0eSB7e1xuICogICBba2V5IGluIChzdHJpbmcgfCBudW1iZXIpXTogU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhIHwgU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhQXJyYXlcbiAqIH19IGFuaW1hdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hc3NldC5TcHJpdGVTaGVldFxuICogX2V4dGVuZHMgcGhpbmEuYXNzZXQuQXNzZXRcbiAqL1xuY2xhc3MgU3ByaXRlU2hlZXQgZXh0ZW5kcyBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIGpzb27jg5XjgqHjgqTjg6vjgbjjga7jg5HjgrnmloflrZfliJfjgIHjgoLjgZfjgY/jga9qc29u44OH44O844K/44Kq44OW44K444Kn44Kv44OI44Gd44Gu44KC44GuXG4gICAgICogQHR5cGUge3N0cmluZyB8IFNwcml0ZVNoZWV0U2V0dXBQYXJhbX1cbiAgICAgKi9cbiAgICB0aGlzLnNyYztcblxuICAgIC8qKlxuICAgICAqIOe3j+ODleODrOODvOODoOaVsFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5mcmFtZTtcblxuICAgIC8qKiBAdHlwZSB7U3ByaXRlU2hlZXRGcmFtZURhdGFbXX0gKi9cbiAgICB0aGlzLmZyYW1lcztcblxuICAgIC8qKiBAdHlwZSB7U3ByaXRlU2hlZXRBbmltYXRpb25UYWJsZX0gKi9cbiAgICB0aGlzLmFuaW1hdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTcHJpdGVTaGVldFNldHVwUGFyYW19IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIHNldHVwKHBhcmFtcykge1xuICAgIHRoaXMuX3NldHVwRnJhbWUocGFyYW1zLmZyYW1lKTtcbiAgICB0aGlzLl9zZXR1cEFuaW0ocGFyYW1zLmFuaW1hdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0geyhhcmcwOiB0aGlzKSA9PiB2b2lkfSByZXNvbHZlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX2xvYWQocmVzb2x2ZSkge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnNyYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciB4bWwgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHhtbC5vcGVuKCdHRVQnLCB0aGlzLnNyYyk7XG4gICAgICB4bWwub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh4bWwucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmIChbMjAwLCAyMDEsIDBdLmluZGV4T2YoeG1sLnN0YXR1cykgIT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHhtbC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgICAgIHNlbGYuc2V0dXAoanNvbik7XG5cbiAgICAgICAgICAgIHJlc29sdmUoc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB4bWwuc2VuZChudWxsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnNldHVwKHRoaXMuc3JjKTtcbiAgICAgIHJlc29sdmUoc2VsZik7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTcHJpdGVTaGVldEZyYW1lU2V0dXBQYXJhbX0gZnJhbWVcbiAgICovXG4gIF9zZXR1cEZyYW1lKGZyYW1lKSB7XG4gICAgLyoqIEB0eXBlIHtTcHJpdGVTaGVldEZyYW1lRGF0YVtdfSAqL1xuICAgIHZhciBmcmFtZXMgPSB0aGlzLmZyYW1lcyA9IFtdO1xuICAgIHZhciB1bml0V2lkdGggPSBmcmFtZS53aWR0aDtcbiAgICB2YXIgdW5pdEhlaWdodCA9IGZyYW1lLmhlaWdodDtcblxuICAgIHZhciBjb3VudCA9IGZyYW1lLnJvd3MgKiBmcmFtZS5jb2xzO1xuICAgIHRoaXMuZnJhbWUgPSBjb3VudDtcblxuICAgIHRpbWVzLmNhbGwoY291bnQsIGZ1bmN0aW9uKGkpIHtcbiAgICAvLyAoY291bnQpLnRpbWVzKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHZhciB4SW5kZXggPSBpJWZyYW1lLmNvbHM7XG4gICAgICB2YXIgeUluZGV4ID0gKGkvZnJhbWUuY29scyl8MDtcblxuICAgICAgZnJhbWVzLnB1c2goe1xuICAgICAgICB4OiB4SW5kZXgqdW5pdFdpZHRoLFxuICAgICAgICB5OiB5SW5kZXgqdW5pdEhlaWdodCxcbiAgICAgICAgd2lkdGg6IHVuaXRXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiB1bml0SGVpZ2h0LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTcHJpdGVTaGVldFNldHVwUGFyYW1bXCJhbmltYXRpb25zXCJdfSBhbmltYXRpb25zXG4gICAqL1xuICBfc2V0dXBBbmltKGFuaW1hdGlvbnMpIHtcbiAgICB0aGlzLmFuaW1hdGlvbnMgPSB7fTtcblxuICAgIC8vIOODh+ODleOCqeODq+ODiOOCouODi+ODoeODvOOCt+ODp+ODs1xuICAgIHRoaXMuYW5pbWF0aW9uc1tcImRlZmF1bHRcIl0gPSB7XG4gICAgICAgIGZyYW1lczogcmFuZ2UuY2FsbChbXSwgMCwgdGhpcy5mcmFtZSksXG4gICAgICAgIC8vIGZyYW1lczogW10ucmFuZ2UoMCwgdGhpcy5mcmFtZSksXG4gICAgICAgIG5leHQ6IFwiZGVmYXVsdFwiLFxuICAgICAgICBmcmVxdWVuY3k6IDEsXG4gICAgfTtcblxuICAgIC8vIGFuaW1hdGlvbnMuZm9ySW4oXG4gICAgZm9ySW4uY2FsbChhbmltYXRpb25zLCBcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7U3ByaXRlU2hlZXR9XG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGtleVxuICAgICAqIEBwYXJhbSB7U3ByaXRlU2hlZXRBbmltYXRpb25EYXRhIHwgU3ByaXRlU2hlZXRBbmltYXRpb25EYXRhQXJyYXl9IHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGFuaW0gPSB2YWx1ZTtcblxuICAgICAgaWYgKGFuaW0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnNba2V5XSA9IHtcbiAgICAgICAgICBmcmFtZXM6IHJhbmdlLmNhbGwoW10sIGFuaW1bMF0sIGFuaW1bMV0pLFxuICAgICAgICAgIC8vIGZyYW1lczogW10ucmFuZ2UoYW5pbVswXSwgYW5pbVsxXSksXG4gICAgICAgICAgbmV4dDogYW5pbVsyXSxcbiAgICAgICAgICBmcmVxdWVuY3k6IGFuaW1bM10gfHwgMSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnNba2V5XSA9IHtcbiAgICAgICAgICBmcmFtZXM6IGFuaW0uZnJhbWVzLFxuICAgICAgICAgIG5leHQ6IGFuaW0ubmV4dCxcbiAgICAgICAgICBmcmVxdWVuY3k6IGFuaW0uZnJlcXVlbmN5IHx8IDFcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleODrOODvOODoOOCkuWPluW+l1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge1Nwcml0ZVNoZWV0RnJhbWVEYXRhfVxuICAgKi9cbiAgZ2V0RnJhbWUoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZXNbaW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBbbmFtZT1cImRlZmF1bHRcIl1cbiAgICogQHJldHVybnMge1Nwcml0ZVNoZWV0QW5pbWF0aW9uRGF0YX1cbiAgICovXG4gIGdldEFuaW1hdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IChuYW1lICE9PSB1bmRlZmluZWQpID8gbmFtZSA6IFwiZGVmYXVsdFwiO1xuICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbnNbbmFtZV07XG4gIH1cblxufVxuXG4vKiogQHR5cGVkZWYge3N0cmluZ3xudW1iZXJ8bnVsbH0gRm9udE5hbWUg5Z+65pys44Gvc3RyaW5n5Z6LICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmFzc2V0LkZvbnRcbiAqIF9leHRlbmRzIHBoaW5hLmFzc2V0LkFzc2V0XG4gKi9cbmNsYXNzIEZvbnQgZXh0ZW5kcyBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSB7Rm9udE5hbWV9ICovXG4gICAgdGhpcy5mb250TmFtZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICogQHJldHVybnMge0Zsb3d9XG4gICAqL1xuICBsb2FkKHBhdGgpIHtcbiAgICB0aGlzLnNyYyA9IHBhdGg7XG5cbiAgICB2YXIgcmVnID0gLyguKikoPzpcXC4oW14uXSskKSkvO1xuICAgIHZhciBrZXkgPSB0aGlzLmZvbnROYW1lIHx8IGxhc3QuZ2V0LmNhbGwocGF0aC5tYXRjaChyZWcpWzFdLnNwbGl0KCcvJykpOyAgICAvL+ODleOCqeODs+ODiOWQjeaMh+WumuOBjOeEoeOBhOWgtOWQiOOBr3BhdGjjga7mi6HlvLXlrZDliY3jgpLkvb/nlKhcbiAgICAvLyB2YXIga2V5ID0gdGhpcy5mb250TmFtZSB8fCBwYXRoLm1hdGNoKHJlZylbMV0uc3BsaXQoJy8nKS5sYXN0OyAgICAvL+ODleOCqeODs+ODiOWQjeaMh+WumuOBjOeEoeOBhOWgtOWQiOOBr3BhdGjjga7mi6HlvLXlrZDliY3jgpLkvb/nlKhcbiAgICB2YXIgdHlwZSA9IHBhdGgubWF0Y2gocmVnKVsyXTtcbiAgICB2YXIgZm9ybWF0JDEgPSBcInVua25vd25cIjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJ0dGZcIjpcbiAgICAgICAgZm9ybWF0JDEgPSBcInRydWV0eXBlXCI7IGJyZWFrO1xuICAgICAgY2FzZSBcIm90ZlwiOlxuICAgICAgICBmb3JtYXQkMSA9IFwib3BlbnR5cGVcIjsgYnJlYWs7XG4gICAgICBjYXNlIFwid29mZlwiOlxuICAgICAgICBmb3JtYXQkMSA9IFwid29mZlwiOyBicmVhaztcbiAgICAgIGNhc2UgXCJ3b2ZmMlwiOlxuICAgICAgICBmb3JtYXQkMSA9IFwid29mZjJcIjsgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLndhcm4oXCLjgrXjg53jg7zjg4jjgZfjgabjgYTjgarjgYTjg5Xjgqnjg7Pjg4jlvaLlvI/jgafjgZnjgIIoXCIgKyBwYXRoICsgXCIpXCIpO1xuICAgIH1cbiAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdCQxO1xuICAgIHRoaXMuZm9udE5hbWUgPSBrZXk7XG5cbiAgICBpZiAoZm9ybWF0JDEgIT09IFwidW5rbm93blwiKSB7XG4gICAgICB2YXIgdGV4dCA9IGZvcm1hdC5jYWxsKFwiQGZvbnQtZmFjZSB7IGZvbnQtZmFtaWx5OiAnezB9Jzsgc3JjOiB1cmwoezF9KSBmb3JtYXQoJ3syfScpOyB9XCIsIGtleSwgcGF0aCwgZm9ybWF0JDEpO1xuICAgICAgLy8gdmFyIHRleHQgPSBcIkBmb250LWZhY2UgeyBmb250LWZhbWlseTogJ3swfSc7IHNyYzogdXJsKHsxfSkgZm9ybWF0KCd7Mn0nKTsgfVwiLmZvcm1hdChrZXksIHBhdGgsIGZvcm1hdCk7XG4gICAgICB2YXIgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkXCIpO1xuICAgICAgdmFyIGZvbnRGYWNlU3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgaWYgKGZvbnRGYWNlU3R5bGVFbGVtZW50LmlubmVyVGV4dCkge1xuICAgICAgICBmb250RmFjZVN0eWxlRWxlbWVudC5pbm5lclRleHQgPSB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9udEZhY2VTdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgfVxuICAgICAgZS5hcHBlbmRDaGlsZChmb250RmFjZVN0eWxlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBGbG93KHRoaXMuX2xvYWQuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsoYXJnMDogRm9udCkgPT4gdm9pZH0gcmVzb2x2ZVxuICAgKi9cbiAgX2xvYWQocmVzb2x2ZSkge1xuICAgIGlmICh0aGlzLmZvcm1hdCAhPT0gXCJ1bmtub3duXCIpIHtcbiAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKHRoaXMuZm9udE5hbWUsIFxuICAgICAgLyoqIEB0aGlzIHtGb250fSAqL1xuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZSh0aGlzKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgIHJlc29sdmUodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Rm9udE5hbWV9IGZvbnRcbiAgICogQHBhcmFtIHsoKSA9PiBhbnl9IFtjYWxsYmFja11cbiAgICovXG4gIF9jaGVja0xvYWRlZCAoZm9udCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY2FudmFzID0gbmV3IENhbnZhcygpO1xuICAgIHZhciBERUZBVUxUX0ZPTlQgPSBjYW52YXMuY29udGV4dC5mb250LnNwbGl0KCcgJylbMV07XG4gICAgY2FudmFzLmNvbnRleHQuZm9udCA9ICc0MHB4ICcgKyBERUZBVUxUX0ZPTlQ7XG5cbiAgICB2YXIgY2hlY2tUZXh0ID0gXCIxMjM0NTY3ODkwLV5cXFxccXdlcnR5dWlvcEBbYXNkZmdoamtsOzpdenhjdmJubSwuL1xcIVxcXCIjJCUmJygpPX58UVdFUlRZVUlPUGB7QVNERkdISktMKyp9WlhDVkJOTTw+P1/vvJHvvJLvvJPvvJTvvJXvvJbvvJfvvJjvvJnvvJDvvI3vvL7vv6XvvZHvvZfvvYXvvZLvvZTvvZnvvZXvvYnvvY/vvZDvvYHvvZPvvYTvvYbvvYfvvYjvvYrvvYvvvYzvvZrvvZjvvYPvvZbvvYLvvY7vvY3vvIzvvI7jgYLjgYTjgYbjgYvjgZXjgZ/jgarjgpLjgpPmmYLjga/ph5HjgarjgopcIjtcbiAgICAvLyDnibnmrormloflrZflr77lv5xcbiAgICBjaGVja1RleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGYwNGIpO1xuXG4gICAgdmFyIGJlZm9yZSA9IGNhbnZhcy5jb250ZXh0Lm1lYXN1cmVUZXh0KGNoZWNrVGV4dCkud2lkdGg7XG4gICAgY2FudmFzLmNvbnRleHQuZm9udCA9ICc0MHB4ICcgKyBmb250ICsgJywgJyArIERFRkFVTFRfRk9OVDtcblxuICAgIHZhciB0aW1lb3V0Q291bnQgPSAzMDtcbiAgICB2YXIgY2hlY2tMb2FkRm9udCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhZnRlciA9IGNhbnZhcy5jb250ZXh0Lm1lYXN1cmVUZXh0KGNoZWNrVGV4dCkud2lkdGg7XG4gICAgICBpZiAoYWZ0ZXIgIT09IGJlZm9yZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoLS10aW1lb3V0Q291bnQgPiAwKSB7XG4gICAgICAgICAgc2V0VGltZW91dChjaGVja0xvYWRGb250LCAxMDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwidGltZW91dCBmb250IGxvYWRpbmdcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNoZWNrTG9hZEZvbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ZvbnROYW1lfSBuYW1lXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgc2V0Rm9udE5hbWUobmFtZSkge1xuICAgIGlmICh0aGlzLmxvYWRlZCkge1xuICAgICAgY29uc29sZS53YXJuKFwi44OV44Kp44Oz44OI5ZCN44GvTG9hZOWJjeOBq+OBruOBv+ioreWumuOBjOWHuuadpeOBvuOBmShcIiArIG5hbWUgKyBcIilcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGhpcy5mb250TmFtZSA9IG5hbWU7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0ZvbnROYW1lfVxuICAgKi9cbiAgZ2V0Rm9udE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9udE5hbWU7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHBhdGg6IHN0cmluZyxcbiAqICAgZGF0YVR5cGU6IFwieG1sXCJ8IFwianNvblwiLFxuICogfX0gRmlsZUFzc2V0TG9hZFBhcmFtXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuRmlsZVxuICogX2V4dGVuZHMgcGhpbmEuYXNzZXQuQXNzZXRcbiAqL1xuY2xhc3MgRmlsZSBleHRlbmRzIEFzc2V0IHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRhdGFUeXBlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgX2xvYWQocmVzb2x2ZSkge1xuXG4gICAgdmFyIHBhcmFtcyA9IHt9O1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnNyYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICRleHRlbmQuY2FsbChwYXJhbXMsIHtcbiAgICAgIC8vIHBhcmFtcy4kZXh0ZW5kKHtcbiAgICAgICAgcGF0aDogdGhpcy5zcmMsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMuc3JjID09PSAnb2JqZWN0Jykge1xuICAgICAgJGV4dGVuZC5jYWxsKHBhcmFtcywgdGhpcy5zcmMpO1xuICAgICAgLy8gcGFyYW1zLiRleHRlbmQodGhpcy5zcmMpO1xuICAgIH1cblxuICAgICRzYWZlLmNhbGwocGFyYW1zLCB7XG4gICAgLy8gcGFyYW1zLiRzYWZlKHtcbiAgICAgIHBhdGg6ICcnLFxuICAgICAgZGF0YVR5cGU6ICd0ZXh0JyxcbiAgICB9KTtcblxuICAgIC8vIGxvYWRcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHhtbCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhtbC5vcGVuKCdHRVQnLCBwYXJhbXMucGF0aCk7XG4gICAgeG1sLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHhtbC5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgIGlmIChbMjAwLCAyMDEsIDBdLmluZGV4T2YoeG1sLnN0YXR1cykgIT09IC0xKSB7XG4gICAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd8RG9jdW1lbnR9ICovXG4gICAgICAgICAgdmFyIGRhdGEgPSB4bWwucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgICAgaWYgKHBhcmFtcy5kYXRhVHlwZSA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5kYXRhVHlwZSA9PT0gJ3htbCcpIHtcbiAgICAgICAgICAgIGRhdGEgPSAobmV3IERPTVBhcnNlcigpKS5wYXJzZUZyb21TdHJpbmcoZGF0YSwgXCJ0ZXh0L3htbFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5kYXRhVHlwZSA9IHBhcmFtcy5kYXRhVHlwZTtcblxuICAgICAgICAgIHNlbGYuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgcmVzb2x2ZShzZWxmKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB4bWwuc2VuZChudWxsKTtcbiAgICAvLyB0aGlzLmRvbUVsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcbiAgICAvLyB0aGlzLmRvbUVsZW1lbnQuc3JjID0gdGhpcy5zcmM7XG5cbiAgICAvLyB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gdGhpcy5kb21FbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vICAgc2VsZi5sb2FkZWQgPSB0cnVlO1xuICAgIC8vICAgcmVzb2x2ZShzZWxmKTtcbiAgICAvLyB9O1xuICB9XG5cbn1cblxuLyoqXG4gKiBhc3NldEtleeOBrnZhbHVl44Gv6YCa5bi444Gvc3RyaW5n77yI44OR44K55paH5a2X5YiX77yJXG4gKiDjgZ/jgaDjgZfjg5Hjg7zjgrnmuIjjgb9qc29u44Gq44Gp44Gu54m55q6K44Gq5b2i5byP44KC5Y+X44GR5LuY44GR44KL44Gf44KB44CBYW555Z6L44Go44GX44Gm44GE44KLXG4gKiBAdHlwZWRlZiB7e1xuICogICBbYXNzZXRUeXBlOiBzdHJpbmddOiB7XG4gKiAgICAgW2Fzc2V0S2V5OiBzdHJpbmddOiBhbnlcbiAqICAgfVxuICogfX0gQXNzZXRMb2FkZXJMb2FkUGFyYW1cbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5hc3NldC5Bc3NldExvYWRlclxuICogX2V4dGVuZHMgcGhpbmEudXRpbC5FdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgQXNzZXRMb2FkZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHt7IGNhY2hlOiBib29sZWFuIH19IFtwYXJhbXNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gcGFyYW1zID0gKHBhcmFtcyB8fCB7fSkuJHNhZmUoe1xuICAgIC8vICAgY2FjaGU6IHRydWUsXG4gICAgLy8gfSk7XG4gICAgcGFyYW1zID0gJHNhZmUuY2FsbChwYXJhbXN8fHt9LCB7IGNhY2hlOiB0cnVlIH0pO1xuXG4gICAgdGhpcy5hc3NldHMgPSB7fTtcbiAgICB0aGlzLmNhY2hlID0gcGFyYW1zLmNhY2hlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXNzZXRMb2FkZXJMb2FkUGFyYW19IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7Rmxvd31cbiAgICovXG4gIGxvYWQocGFyYW1zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBmbG93cyA9IFtdO1xuXG4gICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIGZvckluLmNhbGwocGFyYW1zLCBmdW5jdGlvbihfdHlwZSwgYXNzZXRzKSB7XG4gICAgLy8gcGFyYW1zLmZvckluKGZ1bmN0aW9uKHR5cGUsIGFzc2V0cykge1xuICAgICAgbGVuZ3RoICs9IE9iamVjdC5rZXlzKGFzc2V0cykubGVuZ3RoO1xuICAgIH0pO1xuICAgIFxuICAgIGZvckluLmNhbGwocGFyYW1zLCBmdW5jdGlvbih0eXBlLCBhc3NldHMpIHtcbiAgICAvLyBwYXJhbXMuZm9ySW4oZnVuY3Rpb24odHlwZSwgYXNzZXRzKSB7XG4gICAgICBmb3JJbi5jYWxsKGFzc2V0cywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgLy8gYXNzZXRzLmZvckluKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBBc3NldExvYWRlci5hc3NldExvYWRGdW5jdGlvbnNbdHlwZV07XG4gICAgICAgIHZhciBmbG93ID0gZnVuYyhrZXksIHZhbHVlKTtcbiAgICAgICAgZmxvdy50aGVuKGZ1bmN0aW9uKGFzc2V0KSB7XG4gICAgICAgICAgaWYgKHNlbGYuY2FjaGUpIHtcbiAgICAgICAgICAgIEFzc2V0TWFuYWdlci5zZXQodHlwZSwga2V5LCBhc3NldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuZmxhcmUoJ3Byb2dyZXNzJywge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBhc3NldDogYXNzZXQsXG4gICAgICAgICAgICBwcm9ncmVzczogKCsrY291bnRlci9sZW5ndGgpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZmxvd3MucHVzaChmbG93KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG5cbiAgICBpZiAoc2VsZi5jYWNoZSkge1xuXG4gICAgICBzZWxmLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUucHJvZ3Jlc3MgPj0gMS4wKSB7XG4gICAgICAgICAgLy8gbG9hZOWkseaVl+aZguOAgeWvvuetllxuXG4gICAgICAgICAgZm9ySW4uY2FsbChwYXJhbXMsIGZ1bmN0aW9uKHR5cGUsIGFzc2V0cykge1xuICAgICAgICAgIC8vIHBhcmFtcy5mb3JJbihmdW5jdGlvbih0eXBlLCBhc3NldHMpIHtcbiAgICAgICAgICAgIGZvckluLmNhbGwoYXNzZXRzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBhc3NldHMuZm9ySW4oZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgYXNzZXQgPSBBc3NldE1hbmFnZXIuZ2V0KHR5cGUsIGtleSk7XG4gICAgICAgICAgICAgIGlmIChhc3NldC5sb2FkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHVtbXkgPSBBc3NldE1hbmFnZXIuZ2V0KHR5cGUsICdkdW1teScpO1xuICAgICAgICAgICAgICAgIGlmIChkdW1teSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGR1bW15LmxvYWRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkdW1teS5sb2FkRHVtbXkoKTtcbiAgICAgICAgICAgICAgICAgICAgZHVtbXkubG9hZEVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBBc3NldE1hbmFnZXIuc2V0KHR5cGUsIGtleSwgZHVtbXkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBhc3NldC5sb2FkRHVtbXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIEZsb3cuYWxsKGZsb3dzKS50aGVuKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIHNlbGYuZmxhcmUoJ2xvYWQnKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqLjgrvjg4Pjg4jnqK7poZ7jgavlv5zjgZjjgZ/jg63jg7zjg4nplqLmlbDjgpLnmbvpjLJcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGtleSDjgqLjgrvjg4Pjg4jjgr/jgqTjg5flkI1cbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55KT0+IEZsb3d9IGZ1bmMgRmxvd+OCpOODs+OCueOCv+ODs+OCueOCkui/lOOBmemWouaVsFxuICAgKi9cbiAgc3RhdGljIHJlZ2lzdGVyKGtleSwgZnVuYykge1xuICAgIHRoaXMuYXNzZXRMb2FkRnVuY3Rpb25zW2tleV0gPSBmdW5jO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuLyoqXG4gKiDnmbvpjLLmuIjjgb/jgqLjgrvjg4Pjg4jjg63jg7zjg4nplqLmlbBcbiAqL1xuQXNzZXRMb2FkZXIuYXNzZXRMb2FkRnVuY3Rpb25zID0ge1xuICBpbWFnZTogZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgdmFyIHRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xuICAgIHZhciBmbG93ID0gdGV4dHVyZS5sb2FkKHBhdGgpO1xuICAgIHJldHVybiBmbG93O1xuICB9LFxuICBzb3VuZDogZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgdmFyIHNvdW5kID0gbmV3IFNvdW5kKCk7XG4gICAgdmFyIGZsb3cgPSBzb3VuZC5sb2FkKHBhdGgpO1xuICAgIHJldHVybiBmbG93O1xuICB9LFxuICBzcHJpdGVzaGVldDogZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgdmFyIHNzID0gbmV3IFNwcml0ZVNoZWV0KCk7XG4gICAgdmFyIGZsb3cgPSBzcy5sb2FkKHBhdGgpO1xuICAgIHJldHVybiBmbG93O1xuICB9LFxuICBzY3JpcHQ6IGZ1bmN0aW9uKGtleSwgcGF0aCkge1xuICAgIHZhciBzY3JpcHQgPSBuZXcgU2NyaXB0KCk7XG4gICAgcmV0dXJuIHNjcmlwdC5sb2FkKHBhdGgpO1xuICB9LFxuICBmb250OiBmdW5jdGlvbihrZXksIHBhdGgpIHtcbiAgICB2YXIgZm9udCA9IG5ldyBGb250KCk7XG4gICAgZm9udC5zZXRGb250TmFtZShrZXkpO1xuICAgIHJldHVybiBmb250LmxvYWQocGF0aCk7XG4gIH0sXG4gIGpzb246IGZ1bmN0aW9uKGtleSwgcGF0aCkge1xuICAgIHZhciB0ZXh0ID0gbmV3IEZpbGUoKTtcbiAgICByZXR1cm4gdGV4dC5sb2FkKHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgfSk7XG4gIH0sXG4gIHhtbDogZnVuY3Rpb24oa2V5LCBwYXRoKSB7XG4gICAgdmFyIHRleHQgPSBuZXcgRmlsZSgpO1xuICAgIHJldHVybiB0ZXh0LmxvYWQoe1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIGRhdGFUeXBlOiBcInhtbFwiLFxuICAgIH0pO1xuICB9LFxuICB0ZXh0OiBmdW5jdGlvbihrZXksIHBhdGgpIHtcbiAgICB2YXIgdGV4dCA9IG5ldyBGaWxlKCk7XG4gICAgcmV0dXJuIHRleHQubG9hZChwYXRoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuYXNzZXQuU291bmRNYW5hZ2VyXG4gKiDlhajjgabjga7jgq/jg6njgrnjg6Hjg7Pjg5Djg7zjgYxzdGF0aWPjgarpnZnnmoTjgq/jg6njgrlcbiAqIOOCteOCpuODs+ODieOBruWGjeeUn+OBr+WfuuacrOOBk+OCjOOCkuS9v+OBhlxuICogXG4gKiAjIyMgUmVmXG4gKiAtIGh0dHA6Ly9ldm9sdmUucmVpbnRyb2R1Y2luZy5jb20vX3NvdXJjZS9jbGFzc2VzL2FzMy9Tb3VuZE1hbmFnZXIvU291bmRNYW5hZ2VyLmh0bWxcbiAqIC0gaHR0cHM6Ly9naXRodWIuY29tL25pY2tsb2Nrd29vZC9Tb3VuZE1hbmFnZXJcbiAqL1xuY2xhc3MgU291bmRNYW5hZ2VyIHtcbiAgLy8gdm9sdW1lOiAwLjgsXG4gIC8vIG11c2ljVm9sdW1lOiAwLjgsXG4gIC8vIG11dGVGbGFnOiBmYWxzZSxcbiAgLy8gY3VycmVudE11c2ljOiBudWxsLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSDjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZfjgarjgYRcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICog6Z+z5rqQ44KS5YaN55SfXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDpn7PmupDjgq3jg7zlkI1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3aGVuPTBdIOaMh+WumuOBruenkuaVsOOAgeWGjeeUn+OCkumBheOCieOBm+OCi1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSDpn7PmupDjga7jganjga7mmYLplpPkvY3nva7jgaflho3nlJ/jgZnjgovjgYvjgpLnp5LmlbDmjIflrppcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkdXJhdGlvbl0g5YaN55Sf5pmC6ZaT44KS56eS5pWw5oyH5a6aXG4gICAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2Fzc2V0L3NvdW5kJykuU291bmR9XG4gICAqL1xuICBzdGF0aWMgcGxheShuYW1lLCB3aGVuLCBvZmZzZXQsIGR1cmF0aW9uKSB7XG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL2Fzc2V0L3NvdW5kJykuU291bmR9ICovXG4gICAgdmFyIHNvdW5kID0gQXNzZXRNYW5hZ2VyLmdldCgnc291bmQnLCBuYW1lKTtcblxuICAgIHNvdW5kLnZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lKCk7XG4gICAgc291bmQucGxheSh3aGVuLCBvZmZzZXQsIGR1cmF0aW9uKTtcblxuICAgIHJldHVybiBzb3VuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSDmnKrlrp/oo4Xjga7jgZ/jgoFcbiAgICovXG4gIHN0YXRpYyBzdG9wKCkge1xuICAgIC8vIFRPRE86IFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIOacquWun+ijheOBruOBn+OCgVxuICAgKi9cbiAgc3RhdGljIHBhdXNlKCkge1xuICAgIC8vIFRPRE86IFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlIOacquWun+ijheOBruOBn+OCgVxuICAgKi9cbiAgc3RhdGljIGZhZGUoKSB7XG4gICAgLy8gVE9ETzogXG4gIH1cblxuICAvKipcbiAgICog6YCa5bi444K144Km44Oz44OJ6Z+z6YeP44KS44K744OD44OIXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gdm9sdW1lXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICB0aGlzLnZvbHVtZSA9IHZvbHVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDpgJrluLjjgrXjgqbjg7Pjg4npn7Pph4/jgpLlj5blvpdcbiAgICogXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgZ2V0Vm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnZvbHVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5/jg6Xjg7zjg4hcbiAgICogXG4gICAqIEByZXR1cm5zIHtTb3VuZE1hbmFnZXJ9XG4gICAqL1xuICBzdGF0aWMgbXV0ZSgpIHtcbiAgICB0aGlzLm11dGVGbGFnID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5jdXJyZW50TXVzaWMpIHtcbiAgICAgIHRoaXMuY3VycmVudE11c2ljLnZvbHVtZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODn+ODpeODvOODiOino+mZpFxuICAgKiBcbiAgICogQHJldHVybnMge1NvdW5kTWFuYWdlcn1cbiAgICovXG4gIHN0YXRpYyB1bm11dGUoKSB7XG4gICAgdGhpcy5tdXRlRmxhZyA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYykge1xuICAgICAgdGhpcy5jdXJyZW50TXVzaWMudm9sdW1lID0gdGhpcy5nZXRWb2x1bWVNdXNpYygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5/jg6Xjg7zjg4jnirbmhYvjgYvjganjgYbjgYtcbiAgICogXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzTXV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRlRmxhZztcbiAgfVxuXG4gIC8qKlxuICAgKiDpn7Pmpb3ns7vjga7pn7PmupDjgpLlho3nlJ/vvJrjg6vjg7zjg5fjga7mnInnhKHjgarjganjgpLntLDjgYvjgY/oqr/mlbTlj6/og71cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOmfs+a6kOOCreODvOWQjVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2ZhZGVUaW1lXSDmjIflrprmmYLplpPjgpLjgYvjgZHjgabpn7Pph4/jg5Xjgqfjg7zjg4njgqTjg7PjgILljZjkvY3jga/jg5/jg6rnp5JcbiAgICogQHBhcmFtIHtib29sZWFufSBbbG9vcF0g44Or44O844OX44GZ44KL44GL44Gp44GG44GL44CCRGVmYXVsdDogdHJ1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3doZW49MF0g5oyH5a6a44Gu56eS5pWw44CB5YaN55Sf44KS6YGF44KJ44Gb44KLXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIOmfs+a6kOOBruOBqeOBruaZgumWk+S9jee9ruOBp+WGjeeUn+OBmeOCi+OBi+OCkuenkuaVsOaMh+WumlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2R1cmF0aW9uXSDlho3nlJ/mmYLplpPjgpLnp5LmlbDmjIflrppcbiAgICogQHJldHVybnMge2ltcG9ydCgnLi4vYXNzZXQvc291bmQnKS5Tb3VuZH0g5YaN55Sf44GX44GfU291bmTjgq/jg6njgrlcbiAgICovXG4gIHN0YXRpYyBwbGF5TXVzaWMobmFtZSwgZmFkZVRpbWUsIGxvb3AsIHdoZW4sIG9mZnNldCwgZHVyYXRpb24pIHtcbiAgICBsb29wID0gKGxvb3AgIT09IHVuZGVmaW5lZCkgPyBsb29wIDogdHJ1ZTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYykge1xuICAgICAgdGhpcy5zdG9wTXVzaWMoZmFkZVRpbWUpO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9hc3NldC9zb3VuZCcpLlNvdW5kfSAqL1xuICAgIHZhciBtdXNpYyA9IEFzc2V0TWFuYWdlci5nZXQoJ3NvdW5kJywgbmFtZSk7XG5cbiAgICBtdXNpYy5zZXRMb29wKGxvb3ApO1xuICAgIG11c2ljLnBsYXkod2hlbiwgb2Zmc2V0LCBkdXJhdGlvbik7XG5cbiAgICBpZiAoZmFkZVRpbWUgPiAwKSB7XG4gICAgICB2YXIgY291bnQgPSAzMjtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciB1bml0VGltZSA9IGZhZGVUaW1lL2NvdW50O1xuICAgICAgdmFyIHZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lTXVzaWMoKTtcblxuICAgICAgbXVzaWMudm9sdW1lID0gMDtcbiAgICAgIHZhciBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb3VudGVyICs9IDE7XG4gICAgICAgIHZhciByYXRlID0gY291bnRlci9jb3VudDtcbiAgICAgICAgbXVzaWMudm9sdW1lID0gcmF0ZSp2b2x1bWU7XG5cbiAgICAgICAgaWYgKHJhdGUgPj0gMSkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSwgdW5pdFRpbWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG11c2ljLnZvbHVtZSA9IHRoaXMuZ2V0Vm9sdW1lTXVzaWMoKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRNdXNpYyA9IG11c2ljO1xuXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE11c2ljO1xuICB9XG5cbiAgLyoqXG4gICAqIOmfs+alveOCkuWBnOatolxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtmYWRlVGltZV0g5oyH5a6a5pmC6ZaT44KS44GL44GR44Gm6Z+z6YeP44OV44Kn44O844OJ44Ki44Km44OI44CC5Y2Y5L2N44Gv44Of44Oq56eSXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIHN0b3BNdXNpYyhmYWRlVGltZSkge1xuICAgIGlmICghdGhpcy5jdXJyZW50TXVzaWMpIHsgcmV0dXJuIDsgfVxuXG4gICAgdmFyIG11c2ljID0gdGhpcy5jdXJyZW50TXVzaWM7XG4gICAgdGhpcy5jdXJyZW50TXVzaWMgPSBudWxsO1xuXG4gICAgaWYgKGZhZGVUaW1lID4gMCkge1xuICAgICAgdmFyIGNvdW50ID0gMzI7XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgdW5pdFRpbWUgPSBmYWRlVGltZS9jb3VudDtcbiAgICAgIHZhciB2b2x1bWUgPSB0aGlzLmdldFZvbHVtZU11c2ljKCk7XG5cbiAgICAgIG11c2ljLnZvbHVtZSA9IDA7XG4gICAgICB2YXIgaWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgY291bnRlciArPSAxO1xuICAgICAgICB2YXIgcmF0ZSA9IGNvdW50ZXIvY291bnQ7XG4gICAgICAgIG11c2ljLnZvbHVtZSA9IHZvbHVtZSooMS1yYXRlKTtcblxuICAgICAgICBpZiAocmF0ZSA+PSAxKSB7XG4gICAgICAgICAgbXVzaWMuc3RvcCgpO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSwgdW5pdFRpbWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG11c2ljLnN0b3AoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6Z+z5qW944KS5LiA5pmC5YGc5q2iXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyBwYXVzZU11c2ljKCkge1xuICAgIGlmICghdGhpcy5jdXJyZW50TXVzaWMpIHsgcmV0dXJuIDsgfVxuICAgIHRoaXMuY3VycmVudE11c2ljLnBhdXNlKCk7XG4gIH1cblxuICAvKipcbiAgICog6Z+z5qW944KS5YaN6ZaLXG4gICAqIFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHN0YXRpYyByZXN1bWVNdXNpYygpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudE11c2ljKSB7IHJldHVybiA7IH1cbiAgICB0aGlzLmN1cnJlbnRNdXNpYy5yZXN1bWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDpn7Pmpb3jga7pn7Pph4/jgpLoqK3lrppcbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWVcbiAgICogQHJldHVybnMge1NvdW5kTWFuYWdlcn1cbiAgICovXG4gIHN0YXRpYyBzZXRWb2x1bWVNdXNpYyh2b2x1bWUpIHtcbiAgICB0aGlzLm11c2ljVm9sdW1lID0gdm9sdW1lO1xuICAgIGlmICh0aGlzLmN1cnJlbnRNdXNpYykge1xuICAgICAgdGhpcy5jdXJyZW50TXVzaWMudm9sdW1lID0gdm9sdW1lO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOmfs+alveOBrumfs+mHj+OCkuWPluW+l1xuICAgKiBcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXRWb2x1bWVNdXNpYygpIHtcbiAgICByZXR1cm4gdGhpcy5tdXNpY1ZvbHVtZTtcbiAgfVxuXG59XG5cbi8qKlxuICog6YCa5bi444K144Km44Oz44OJ77yIU0XvvInpn7Pph49cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cblNvdW5kTWFuYWdlci52b2x1bWUgPSAwLjg7XG5cbi8qKlxuICog6Z+z5qW96Z+z6YePXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5Tb3VuZE1hbmFnZXIubXVzaWNWb2x1bWUgPSAwLjg7XG5cbi8qKlxuICog44Of44Ol44O844OI54q25oWLXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqL1xuU291bmRNYW5hZ2VyLm11dGVGbGFnID0gZmFsc2U7XG5cbi8qKlxuICog5YaN55Sf5Lit44Gu6Z+z5qW96Z+z5rqQXG4gKiBAdHlwZSB7aW1wb3J0KCcuLi9hc3NldC9zb3VuZCcpLlNvdW5kIHwgbnVsbH1cbiAqL1xuU291bmRNYW5hZ2VyLmN1cnJlbnRNdXNpYyA9IG51bGw7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgdGV4dD86IHN0cmluZyxcbiAqICAgZm9udENvbG9yPzogaW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlLFxuICogICBmb250U2l6ZT86IG51bWJlcixcbiAqICAgZm9udFdlaWdodD86IHN0cmluZyB8IG51bWJlcixcbiAqICAgZm9udEZhbWlseT86IHN0cmluZyxcbiAqICAgY29ybmVyUmFkaXVzPzogbnVtYmVyXG4gKiB9ICYgaW1wb3J0KCcuLi9kaXNwbGF5L3NoYXBlJykuU2hhcGVPcHRpb25zIH0gQnV0dG9uT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnVpLkJ1dHRvblxuICogQnV0dG9uXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LlNoYXBlXG4gKi9cbmNsYXNzIEJ1dHRvbiBleHRlbmRzIFNoYXBlIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7QnV0dG9uT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwob3B0aW9ucyB8fCB7fSwgQnV0dG9uLmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0gKG9wdGlvbnMgfHwge30pLiRzYWZlKHBoaW5hLnVpLkJ1dHRvbi5kZWZhdWx0cyk7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvcm5lclJhZGl1cyA9IG9wdGlvbnMuY29ybmVyUmFkaXVzO1xuICAgIHRoaXMudGV4dCAgICAgICAgID0gb3B0aW9ucy50ZXh0O1xuICAgIHRoaXMuZm9udENvbG9yICAgID0gb3B0aW9ucy5mb250Q29sb3I7XG4gICAgdGhpcy5mb250U2l6ZSAgICAgPSBvcHRpb25zLmZvbnRTaXplO1xuICAgIHRoaXMuZm9udFdlaWdodCAgICAgPSBvcHRpb25zLmZvbnRXZWlnaHQ7XG4gICAgdGhpcy5mb250RmFtaWx5ICAgPSBvcHRpb25zLmZvbnRGYW1pbHk7XG5cbiAgICB0aGlzLnNldEludGVyYWN0aXZlKHRydWUpO1xuICAgIHRoaXMub24oJ3BvaW50ZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZsYXJlKCdwdXNoJyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKGNhbnZhcykge1xuICAgIGNhbnZhcy5yb3VuZFJlY3QoLXRoaXMud2lkdGgvMiwgLXRoaXMuaGVpZ2h0LzIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNvcm5lclJhZGl1cyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcG9zdHJlbmRlcihjYW52YXMpIHtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0O1xuICAgIC8vIHRleHRcbiAgICB2YXIgZm9udCA9IGZvcm1hdC5jYWxsKFwie2ZvbnRXZWlnaHR9IHtmb250U2l6ZX1weCB7Zm9udEZhbWlseX1cIiwgdGhpcyk7XG4gICAgLy8gdmFyIGZvbnQgPSBcIntmb250V2VpZ2h0fSB7Zm9udFNpemV9cHgge2ZvbnRGYW1pbHl9XCIuZm9ybWF0KHRoaXMpO1xuICAgIGNvbnRleHQuZm9udCA9IGZvbnQ7XG4gICAgY29udGV4dC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5mb250Q29sb3I7XG4gICAgY29udGV4dC5maWxsVGV4dCh0aGlzLnRleHQsIDAsIDApO1xuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7QnV0dG9uT3B0aW9uc31cbiAqIEBzdGF0aWNcbiAqL1xuQnV0dG9uLmRlZmF1bHRzID0ge1xuICB3aWR0aDogMjAwLFxuICBoZWlnaHQ6IDgwLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICdoc2woMjAwLCA4MCUsIDYwJSknLFxuICBzdHJva2U6IG51bGwsXG5cbiAgY29ybmVyUmFkaXVzOiA4LFxuICB0ZXh0OiAnSGVsbG8nLFxuICBmb250Q29sb3I6ICd3aGl0ZScsXG4gIGZvbnRTaXplOiAzMixcbiAgZm9udFdlaWdodDogJycsXG4gIGZvbnRGYW1pbHk6IFwiJ0hpcmFLYWt1UHJvTi1XMydcIiwgLy8gSGlyYWdpbm8gb3IgSGVsdmV0aWNhLFxufTtcblxuLy8gZGVmaW5lZFxuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKEJ1dHRvbiwgJ2Nvcm5lclJhZGl1cycpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKEJ1dHRvbiwgJ3RleHQnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChCdXR0b24sICdmb250Q29sb3InKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChCdXR0b24sICdmb250U2l6ZScpO1xuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKEJ1dHRvbiwgJ2ZvbnRGYW1pbHknKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICB2YWx1ZT86IG51bWJlclxuICogICBtYXhWYWx1ZT86IG51bWJlclxuICogICBnYXVnZUNvbG9yPzogaW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlXG4gKiAgIGFuaW1hdGlvbj86IGJvb2xlYW5cbiAqICAgY29ybmVyUmFkaXVzPzogbnVtYmVyXG4gKiB9ICYgaW1wb3J0KCcuLi9kaXNwbGF5L3NoYXBlJykuU2hhcGVPcHRpb25zIH0gR2F1Z2VPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudWkuR2F1Z2VcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuU2hhcGVcbiAqIFxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGxpZmVHYXVnZSA9IG5ldyBHYXVnZSh7XG4gKiAgIGZpbGw6IFwiZ3JheVwiLCAvLyBHYXVnZSBiYWNrZ3JvdW5kIGNvbG9yXG4gKiAgIGdhdWdlQ29sb3I6IFwicmVkXCIsIC8vIEdhdWdlIG1haW4gY29sb3JcbiAqICAgc3Ryb2tlOiBcImJsYWNrXCIgLy8gR2F1Z2UgZnJhbWUgY29sb3JcbiAqICAgbWF4VmFsdWU6IDIwMCxcbiAqICAgYW5pbWF0aW9uOiB0cnVlLFxuICogfSlcbiAqIFxuICogaWYgKHBsYXllckRhbWFnZWQpIHtcbiAqICAgbGlmZUdhdWdlLnZhbHVlIC09IDEwXG4gKiB9XG4gKiBcbiAqL1xuY2xhc3MgR2F1Z2UgZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7R2F1Z2VPcHRpb25zfSBbb3B0aW9uc10gXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwoe30sIG9wdGlvbnMgfHwge30sIEdhdWdlLmRlZmF1bHRzKTtcbiAgICAvLyBvcHRpb25zID0gKHt9KS4kc2FmZShvcHRpb25zIHx8IHt9LCBwaGluYS51aS5HYXVnZS5kZWZhdWx0cyk7XG4gICAgXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fdmFsdWUgPSAob3B0aW9ucy52YWx1ZSAhPT0gdW5kZWZpbmVkKSA/IG9wdGlvbnMudmFsdWUgOiBvcHRpb25zLm1heFZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn0g5pyA5aSn5YCkXG4gICAgICovXG4gICAgdGhpcy5tYXhWYWx1ZSA9IG9wdGlvbnMubWF4VmFsdWU7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlfSDjgrLjg7zjgrjjga7oibJcbiAgICAgKi9cbiAgICB0aGlzLmdhdWdlQ29sb3IgPSBvcHRpb25zLmdhdWdlQ29sb3I7XG4gICAgXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn0g5pyA5aSn5YCkXG4gICAgICovXG4gICAgdGhpcy5jb3JuZXJSYWRpdXMgPSBvcHRpb25zLmNvcm5lclJhZGl1cztcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9IOimi+OBn+ebruOBruWApFxuICAgICAqL1xuICAgIHRoaXMudmlzdWFsVmFsdWUgPSAob3B0aW9ucy52YWx1ZSAhPT0gdW5kZWZpbmVkKSA/IG9wdGlvbnMudmFsdWUgOiBvcHRpb25zLm1heFZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59IOOCouODi+ODoeODvOOCt+ODp+ODs+OBleOBm+OCi+OBi+OBqeOBhuOBi1xuICAgICAqL1xuICAgIHRoaXMuYW5pbWF0aW9uID0gb3B0aW9ucy5hbmltYXRpb247XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSDjgqLjg4vjg6Hjg7zjgrfjg6fjg7PlrozkuobmmYLplpPjgpLjg5/jg6rnp5LmjIflrppcbiAgICAgKiBAZGVmYXVsdCAxMDAwXG4gICAgICovXG4gICAgdGhpcy5hbmltYXRpb25UaW1lID0gMSoxMDAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOa6gOOCv+ODs+OBi+OCkuODgeOCp+ODg+OCr1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRnVsbCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gdGhpcy5tYXhWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnqbrjgaPjgb3jgYvjgpLjg4Hjgqfjg4Pjgq9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBjbGFtcCh2YWx1ZSwgMCwgdGhpcy5tYXhWYWx1ZSk7XG4gICAgLy8gdmFsdWUgPSBNYXRoLmNsYW1wKHZhbHVlLCAwLCB0aGlzLm1heFZhbHVlKTtcblxuICAgIC8vIGVuZCB3aGVuIG5vdyB2YWx1ZSBlcXVhbCB2YWx1ZSBvZiBhcmd1bWVudFxuICAgIGlmICh0aGlzLnZhbHVlID09PSB2YWx1ZSkgcmV0dXJuIDtcblxuICAgIC8vIGZpcmUgdmFsdWUgY2hhbmdlIGV2ZW50XG4gICAgdGhpcy5mbGFyZSgnY2hhbmdlJyk7XG5cbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBNYXRoLmFicyh0aGlzLnZpc3VhbFZhbHVlLXZhbHVlKTtcbiAgICAgIHZhciB0aW1lID0gKHJhbmdlL3RoaXMubWF4VmFsdWUpKnRoaXMuYW5pbWF0aW9uVGltZTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy50d2VlbmVyLm9udHdlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fZGlydHlEcmF3ID0gdHJ1ZTtcbiAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgIHRoaXMudHdlZW5lclxuICAgICAgICAuY2xlYXIoKVxuICAgICAgICAudG8oeyd2aXN1YWxWYWx1ZSc6IHZhbHVlfSwgdGltZSlcbiAgICAgICAgLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5mbGFyZSgnY2hhbmdlZCcpO1xuICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgdGhpcy5mbGFyZSgnZW1wdHknKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0Z1bGwoKSkge1xuICAgICAgICAgICAgdGhpcy5mbGFyZSgnZnVsbCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy52aXN1YWxWYWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5mbGFyZSgnY2hhbmdlZCcpO1xuICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICAgIHRoaXMuZmxhcmUoJ2VtcHR5Jyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLmlzRnVsbCgpKSB7XG4gICAgICAgIHRoaXMuZmxhcmUoJ2Z1bGwnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSYXRlKCkge1xuICAgIHZhciByYXRlID0gdGhpcy52aXN1YWxWYWx1ZS90aGlzLm1heFZhbHVlO1xuICAgIHJldHVybiByYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIoY2FudmFzKSB7XG4gICAgY2FudmFzLnJvdW5kUmVjdCgtdGhpcy53aWR0aC8yLCAtdGhpcy5oZWlnaHQvMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMuY29ybmVyUmFkaXVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcG9zdHJlbmRlcihjYW52YXMpIHtcbiAgICB2YXIgcmF0ZSA9IHRoaXMuZ2V0UmF0ZSgpO1xuICAgIGNhbnZhcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZ2F1Z2VDb2xvcjtcbiAgICBjYW52YXMuY29udGV4dC5zYXZlKCk7XG4gICAgY2FudmFzLmNvbnRleHQuY2xpcCgpO1xuICAgIGNhbnZhcy5maWxsUmVjdCgtdGhpcy53aWR0aC8yLCAtdGhpcy5oZWlnaHQvMiwgdGhpcy53aWR0aCpyYXRlLCB0aGlzLmhlaWdodCk7XG4gICAgY2FudmFzLmNvbnRleHQucmVzdG9yZSgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICBzZXQgdmFsdWUodikge1xuICAgIHRoaXMuc2V0VmFsdWUodik7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtHYXVnZU9wdGlvbnN9XG4gKiBAc3RhdGljXG4gKi9cbkdhdWdlLmRlZmF1bHRzID0ge1xuICB3aWR0aDogMjU2LFxuICBoZWlnaHQ6IDMyLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGZpbGw6ICd3aGl0ZScsXG4gIHN0cm9rZTogJyNhYWEnLFxuICBzdHJva2VXaWR0aDogNCxcbiAgbWF4VmFsdWU6IDEwMCxcbiAgZ2F1Z2VDb2xvcjogJyM0NGYnLFxuICBjb3JuZXJSYWRpdXM6IDAsXG4gIGFuaW1hdGlvbjogdHJ1ZVxufTtcblxuLy8gZGVmaW5lZFxuU2hhcGUud2F0Y2hSZW5kZXJQcm9wZXJ0eS5jYWxsKEdhdWdlLCAndmFsdWUnKTtcblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydHkuY2FsbChHYXVnZSwgJ21heFZhbHVlJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoR2F1Z2UsICdnYXVnZUNvbG9yJyk7XG5TaGFwZS53YXRjaFJlbmRlclByb3BlcnR5LmNhbGwoR2F1Z2UsICdjb3JuZXJSYWRpdXMnKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBhbnRpY2xvY2t3aXNlPzogYm9vbGVhblxuICogICBzaG93UGVyY2VudGFnZT86IGJvb2xlYW5cbiAqIH0gJiBHYXVnZU9wdGlvbnMgfSBDaXJjbGVHYXVnZU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS51aS5DaXJjbGVHYXVnZVxuICogX2V4dGVuZHMgcGhpbmEudWkuR2F1Z2VcbiAqL1xuY2xhc3MgQ2lyY2xlR2F1Z2UgZXh0ZW5kcyBHYXVnZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2lyY2xlR2F1Z2VPcHRpb25zfSBbb3B0aW9uc10gXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwob3B0aW9ucyB8fCB7fSwge1xuICAgIC8vIG9wdGlvbnMgPSAob3B0aW9ucyB8fCB7fSkuJHNhZmUoe1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgZmlsbDogJyNhYWEnLFxuICAgICAgc3Ryb2tlOiAnIzIyMicsXG5cbiAgICAgIHJhZGl1czogNjQsXG4gICAgICBhbnRpY2xvY2t3aXNlOiB0cnVlLFxuICAgICAgc2hvd1BlcmNlbnRhZ2U6IGZhbHNlLCAvLyBUT0RPXG4gICAgfSk7XG5cbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuc2V0Qm91bmRpbmdUeXBlKCdjaXJjbGUnKTtcblxuICAgIHRoaXMucmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgdGhpcy5hbnRpY2xvY2t3aXNlID0gb3B0aW9ucy5hbnRpY2xvY2t3aXNlO1xuICAgIHRoaXMuc2hvd1BlcmNlbnRhZ2UgPSBvcHRpb25zLnNob3dQZXJjZW50YWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBfY2FudmFzIFxuICAgKi9cbiAgcHJlcmVuZGVyKF9jYW52YXMpIHtcbiAgICB2YXIgcmF0ZSA9IHRoaXMuZ2V0UmF0ZSgpO1xuICAgIHZhciBlbmQgPSAoTWF0aC5QSSoyKSpyYXRlO1xuICAgIHRoaXMuc3RhcnRBbmdsZSA9IDA7XG4gICAgdGhpcy5lbmRBbmdsZSA9IGVuZDtcblxuICAgIHRoaXMuY2FudmFzLnJvdGF0ZSgtTWF0aC5QSSowLjUpO1xuICAgIHRoaXMuY2FudmFzLnNjYWxlKDEsIC0xKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcmVuZGVyRmlsbChjYW52YXMpIHtcbiAgICBjYW52YXMuZmlsbFBpZSgwLCAwLCB0aGlzLnJhZGl1cywgdGhpcy5zdGFydEFuZ2xlLCB0aGlzLmVuZEFuZ2xlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2dyYXBoaWNzL2NhbnZhcycpLkNhbnZhc30gY2FudmFzIFxuICAgKi9cbiAgcmVuZGVyU3Ryb2tlKGNhbnZhcykge1xuICAgIGNhbnZhcy5zdHJva2VBcmMoMCwgMCwgdGhpcy5yYWRpdXMsIHRoaXMuc3RhcnRBbmdsZSwgdGhpcy5lbmRBbmdsZSk7XG4gIH1cblxuICBwb3N0cmVuZGVyKCkge1xuICAgIC8vIGlmICh0aGlzLnNob3dQZXJjZW50YWdlKSB7XG4gICAgLy8gICAvLyBUT0RPOlxuICAgIC8vICAgdmFyIGxlZnQgPSBNYXRoLm1heCgwLCB0aGlzLmxpbWl0LXRoaXMudGltZSk7XG4gICAgLy8gICB0aGlzLmxhYmVsLnRleHQgPSBNYXRoLmNlaWwobGVmdC8xMDAwKSsnJztcbiAgICAvLyB9XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHZlcnRpY2FsQWxpZ24/OiBudW1iZXIgfCBrZXlvZiBMYWJlbEFyZWEudmVydGljYWxBbGlnblRvT2Zmc2V0TWFwXG4gKiAgIGFsaWduPzoga2V5b2YgTGFiZWxBcmVhLmFsaWduVG9PZmZzZXRNYXAsXG4gKiAgIGJhc2VsaW5lPzogQ2FudmFzVGV4dEJhc2VsaW5lLFxuICogICBzY3JvbGw/OiBWZWN0b3IyXG4gKiAgIHNjcm9sbFg/OiBudW1iZXJcbiAqICAgc2Nyb2xsWT86IG51bWJlclxuICogfSAmIGltcG9ydCgnLi4vZGlzcGxheS9sYWJlbCcpLkxhYmVsT3B0aW9ucyB9IExhYmVsQXJlYU9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHt7W2ZvbnROYW1lOiBzdHJpbmddOiB7W2NoYXJhY3Rlcjogc3RyaW5nXTogbnVtYmVyIH19fVxuICovXG52YXIgdGV4dFdpZHRoQ2FjaGUgPSB7fTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEudWkuTGFiZWxBcmVhXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkxhYmVsXG4gKi9cbmNsYXNzIExhYmVsQXJlYSBleHRlbmRzIExhYmVsIHtcblxuICAvLyBfbGluZVVwZGF0ZTogdHJ1ZSxcblxuICAvKipcbiAgICogQHBhcmFtIHtMYWJlbEFyZWFPcHRpb25zfSBvcHRpb25zIFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zLCBMYWJlbEFyZWEuZGVmYXVsdHMpO1xuICAgIC8vIG9wdGlvbnMgPSB7fS4kc2FmZShvcHRpb25zLCBMYWJlbEFyZWEuZGVmYXVsdHMpO1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5fbGluZVVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy52ZXJ0aWNhbEFsaWduID0gb3B0aW9ucy52ZXJ0aWNhbEFsaWduO1xuICAgIHRoaXMuc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwgfHwgbmV3IFZlY3RvcjIoKTtcbiAgICB0aGlzLnNjcm9sbFggPSBvcHRpb25zLnNjcm9sbFg7XG4gICAgdGhpcy5zY3JvbGxZID0gb3B0aW9ucy5zY3JvbGxZO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBjYWxjQ2FudmFzV2lkdGggKCkge1xuICAgIHJldHVybiB0aGlzLndpZHRoICsgdGhpcy5wYWRkaW5nICogMjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY2FsY0NhbnZhc0hlaWdodCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0ICsgdGhpcy5wYWRkaW5nICogMjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0T2Zmc2V0WSAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnZlcnRpY2FsQWxpZ24gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbEFsaWduO1xuICAgIH1cbiAgICByZXR1cm4gTGFiZWxBcmVhLnZlcnRpY2FsQWxpZ25Ub09mZnNldE1hcFt0aGlzLnZlcnRpY2FsQWxpZ25dIHx8IDA7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldE9mZnNldFggKCkge1xuICAgIHJldHVybiBMYWJlbEFyZWEuYWxpZ25Ub09mZnNldE1hcFt0aGlzLmFsaWduXSB8fCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt7IFtjaGFyYWN0ZXI6IHN0cmluZ106IG51bWJlciB9fVxuICAgKi9cbiAgZ2V0VGV4dFdpZHRoQ2FjaGUgKCkge1xuICAgIHZhciBjYWNoZSA9IHRleHRXaWR0aENhY2hlW3RoaXMuZm9udF07XG4gICAgcmV0dXJuIGNhY2hlIHx8ICh0ZXh0V2lkdGhDYWNoZVt0aGlzLmZvbnRdID0ge30pO1xuICB9XG4gIFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gbGluZXMg5paH56ugXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0g5pW05b2i5riI44G/5paH5a2X44Op44Kk44OzXG4gICAqL1xuICBzcGxpY2VMaW5lcyAobGluZXMpIHtcbiAgICB2YXIgcm93V2lkdGggPSB0aGlzLndpZHRoO1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5jYW52YXMuY29udGV4dDtcbiAgICBjb250ZXh0LmZvbnQgPSB0aGlzLmZvbnQ7XG5cbiAgICB2YXIgY2FjaGUgPSB0aGlzLmdldFRleHRXaWR0aENhY2hlKCk7XG5cbiAgICAvLyB1cGRhdGUgY2FjaGVcbiAgICBlYWNoLmNhbGwodGhpcy5fdGV4dCwgZnVuY3Rpb24oY2gpIHtcbiAgICAvLyB0aGlzLl90ZXh0LmVhY2goZnVuY3Rpb24oY2gpIHtcbiAgICAgIGlmICghY2FjaGVbY2hdKSB7XG4gICAgICAgIGNhY2hlW2NoXSA9IGNvbnRleHQubWVhc3VyZVRleHQoY2gpLndpZHRoO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHZhciBsb2NhbExpbmVzID0gW107XG4gICAgbGluZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICBcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIHZhciB0b3RhbFdpZHRoID0gMDtcblxuICAgICAgLy8g44Gv44G/5Ye644Gm44GE44Gf44KJ5by35Yi255qE44Gr5pS56KGM44GZ44KLXG4gICAgICBlYWNoLmNhbGwobGluZSwgZnVuY3Rpb24oY2gpIHtcbiAgICAgIC8vIGxpbmUuZWFjaChmdW5jdGlvbihjaCkge1xuICAgICAgICB2YXIgdyA9IGNhY2hlW2NoXTtcblxuICAgICAgICBpZiAoKHRvdGFsV2lkdGgrdykgPiByb3dXaWR0aCkge1xuICAgICAgICAgIGxvY2FsTGluZXMucHVzaChzdHIpO1xuICAgICAgICAgIHN0ciA9ICcnO1xuICAgICAgICAgIHRvdGFsV2lkdGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RyICs9IGNoO1xuICAgICAgICB0b3RhbFdpZHRoICs9IHc7XG4gICAgICB9KTtcblxuICAgICAgLy8g5q6L44KK44KSIHB1c2gg44GZ44KLXG4gICAgICBsb2NhbExpbmVzLnB1c2goc3RyKTtcblxuICAgIH0pO1xuICAgIFxuXG4gICAgcmV0dXJuIGxvY2FsTGluZXM7XG4gIH1cbiAgXG4gIGdldExpbmVzICgpIHtcbiAgICBpZiAodGhpcy5fbGluZVVwZGF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saW5lcztcbiAgICB9XG4gICAgdGhpcy5fbGluZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdmFyIGxpbmVzID0gKHRoaXMudGV4dCArICcnKS5zcGxpdCgnXFxuJyk7XG4gICAgaWYgKHRoaXMud2lkdGggPCAxKSB7XG4gICAgICB0aGlzLl9saW5lcyA9IGxpbmVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX2xpbmVzID0gdGhpcy5zcGxpY2VMaW5lcyhsaW5lcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2xpbmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICBwcmVyZW5kZXIgKGNhbnZhcykge1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmNvbnRleHQ7XG4gICAgY29udGV4dC5mb250ID0gdGhpcy5mb250O1xuICAgIGNvbnRleHQudGV4dEFsaWduID0gdGhpcy5hbGlnbjtcbiAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9IHRoaXMuYmFzZWxpbmU7XG5cbiAgICB2YXIgdGV4dCA9IHRoaXMudGV4dCArICcnO1xuICAgIHZhciBsaW5lcyA9IHRoaXMuZ2V0TGluZXMoKTtcbiAgICB2YXIgbGVuZ3RoID0gbGluZXMubGVuZ3RoO1xuICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgdmFyIGZvbnRTaXplID0gdGhpcy5mb250U2l6ZTtcbiAgICB2YXIgbGluZVNpemUgPSBmb250U2l6ZSAqIHRoaXMubGluZUhlaWdodDtcbiAgICB2YXIgb2Zmc2V0WCA9IHRoaXMuZ2V0T2Zmc2V0WCgpICogd2lkdGg7XG4gICAgdmFyIG9mZnNldFkgPSB0aGlzLmdldE9mZnNldFkoKTtcbiAgICBpZiAob2Zmc2V0WSA9PT0gMCkge1xuICAgICAgb2Zmc2V0WSA9IC1NYXRoLmZsb29yKGxlbmd0aCAvIDIpICogbGluZVNpemU7XG4gICAgICBvZmZzZXRZICs9ICgobGVuZ3RoICsgMSkgJSAyKSAqIChsaW5lU2l6ZSAvIDIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvZmZzZXRZIDwgMCkge1xuICAgICAgb2Zmc2V0WSAqPSBoZWlnaHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb2Zmc2V0WSA9IG9mZnNldFkgKiBoZWlnaHQgLSBsZW5ndGggKiBsaW5lU2l6ZSArIGxpbmVTaXplO1xuICAgIH1cblxuICAgIG9mZnNldFkgLT0gdGhpcy5zY3JvbGxZO1xuICAgIG9mZnNldFggLT0gdGhpcy5zY3JvbGxYO1xuICAgIHZhciBzdGFydCA9IChvZmZzZXRZICsgaGVpZ2h0IC8gMikgLyAtbGluZVNpemUgfCAwO1xuICAgIGlmIChzdGFydCA8IDApIHsgc3RhcnQgPSAwOyB9XG5cbiAgICB2YXIgZW5kID0gKGhlaWdodCAvIDIgLSBvZmZzZXRZICsgbGluZVNpemUgKiAyKSAvIGxpbmVTaXplIHwgMDtcbiAgICBsaW5lcyA9IGxpbmVzLmZpbHRlcihmdW5jdGlvbihsaW5lLCBpKSB7XG4gICAgICByZXR1cm4gc3RhcnQgPD0gaSAmJiBlbmQgPiBpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5saW5lcyA9IGxpbmVzO1xuICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICB0aGlzLmxpbmVTaXplID0gbGluZVNpemU7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vZ3JhcGhpY3MvY2FudmFzJykuQ2FudmFzfSBjYW52YXMgXG4gICAqL1xuICByZW5kZXJGaWxsIChjYW52YXMpIHtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0O1xuICAgIHZhciBvZmZzZXRYID0gdGhpcy5vZmZzZXRYO1xuICAgIHZhciBvZmZzZXRZID0gdGhpcy5vZmZzZXRZO1xuICAgIHZhciBsaW5lU2l6ZSA9IHRoaXMubGluZVNpemU7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydDtcbiAgICB0aGlzLmxpbmVzLmZvckVhY2goZnVuY3Rpb24obGluZSwgaSkge1xuICAgICAgY29udGV4dC5maWxsVGV4dChsaW5lLCBvZmZzZXRYLCAoc3RhcnQgKyBpKSAqIGxpbmVTaXplICsgb2Zmc2V0WSk7XG4gICAgfSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy9jYW52YXMnKS5DYW52YXN9IGNhbnZhcyBcbiAgICovXG4gIHJlbmRlclN0cm9rZSAoY2FudmFzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuY29udGV4dDtcbiAgICB2YXIgb2Zmc2V0WCA9IHRoaXMub2Zmc2V0WDtcbiAgICB2YXIgb2Zmc2V0WSA9IHRoaXMub2Zmc2V0WTtcbiAgICB2YXIgbGluZVNpemUgPSB0aGlzLmxpbmVTaXplO1xuICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnQ7XG4gICAgdGhpcy5saW5lcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsIGkpIHtcbiAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dChsaW5lLCBvZmZzZXRYLCAoc3RhcnQgKyBpKSAqIGxpbmVTaXplICsgb2Zmc2V0WSk7XG4gICAgfSwgdGhpcyk7XG4gIH1cblxuICBnZXQgdGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgfVxuICBzZXQgdGV4dCh2KSB7XG4gICAgdGhpcy5fdGV4dCA9IHY7XG4gIH1cblxuICBnZXQgc2Nyb2xsWCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JvbGwueDtcbiAgfVxuICBzZXQgc2Nyb2xsWCh2KSB7XG4gICAgdGhpcy5zY3JvbGwueCA9IHY7XG4gIH1cblxuICBnZXQgc2Nyb2xsWSgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JvbGwueTtcbiAgfVxuICBzZXQgc2Nyb2xsWSh2KSB7XG4gICAgdGhpcy5zY3JvbGwueSA9IHY7XG4gIH1cbiAgXG4gIC8vIF9zdGF0aWM6IHtcbiAgLy8gICBkZWZhdWx0czoge1xuICAvLyAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gIC8vICAgICBhbGlnbjogJ2xlZnQnLFxuICAvLyAgICAgYmFzZWxpbmU6ICd0b3AnLFxuICAvLyAgICAgd2lkdGg6IDMyMCxcbiAgLy8gICAgIGhlaWdodDogMzIwLFxuICAvLyAgICAgc2Nyb2xsWDogMCxcbiAgLy8gICAgIHNjcm9sbFk6IDAsXG4gIC8vICAgfSxcbiAgLy8gICBhbGlnblRvT2Zmc2V0TWFwOiB7XG4gIC8vICAgICBzdGFydDogLTAuNSxcbiAgLy8gICAgIGxlZnQ6IC0wLjUsXG4gIC8vICAgICBjZW50ZXI6IDAsXG4gIC8vICAgICBlbmQ6IDAuNSxcbiAgLy8gICAgIHJpZ2h0OiAwLjUsXG4gIC8vICAgfSxcblxuICAvLyAgIHZlcnRpY2FsQWxpZ25Ub09mZnNldE1hcDoge1xuICAvLyAgICAgdG9wOiAtMC41LFxuICAvLyAgICAgY2VudGVyOiAwLFxuICAvLyAgICAgbWlkZGxlOiAwLFxuICAvLyAgICAgYm90dG9tOiAwLjUsXG4gIC8vICAgfSxcbiAgLy8gfSxcblxuICAvLyBfZGVmaW5lZDogZnVuY3Rpb24oKSB7XG4gIC8vICAgdmFyIGZ1bmMgPSBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAvLyAgICAgaWYoKHRoaXMuX2xpbmVVcGRhdGUgPT09IGZhbHNlKSAmJiAobmV3VmFsICE9PSBvbGRWYWwpKXtcbiAgLy8gICAgICAgdGhpcy5fbGluZVVwZGF0ZSA9IHRydWU7XG4gIC8vICAgICB9XG4gIC8vICAgfTtcblxuICAvLyAgIFtcbiAgLy8gICAgICd0ZXh0JyxcbiAgLy8gICAgICd3aWR0aCcsXG4gIC8vICAgICAnZm9udFNpemUnLFxuICAvLyAgICAgJ2ZvbnRXZWlnaHQnLFxuICAvLyAgICAgJ2ZvbnRGYW1pbHknXG4gIC8vICAgXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAvLyAgICAgdGhpcy4kd2F0Y2goa2V5LCBmdW5jKTtcbiAgLy8gICB9LCB0aGlzLnByb3RvdHlwZSk7XG5cbiAgLy8gICBwaGluYS5kaXNwbGF5LlNoYXBlLndhdGNoUmVuZGVyUHJvcGVydGllcy5jYWxsKHRoaXMgLFtcbiAgLy8gICAgICd2ZXJ0aWNhbEFsaWduJyxcbiAgLy8gICAgICd0ZXh0JyxcbiAgLy8gICAgICdzY3JvbGwnLFxuICAvLyAgICAgJ3Njcm9sbFgnLFxuICAvLyAgICAgJ3Njcm9sbFknXG4gIC8vICAgXSk7XG4gIC8vIH0sXG5cbiAgLyoqXG4gICAqIOacquWumue+qVxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGVuYWJsZVNjcm9sbCgpIHtcbiAgICAvLyAgIHRoaXMuc2V0SW50ZXJhY3RpdmUodHJ1ZSk7XG4gICAgLy8gICB2YXIgcGh5c2ljYWwgPSBwaGluYS5hY2Nlc3NvcnkuUGh5c2ljYWwoKTtcbiAgICAvLyAgIHBoeXNpY2FsLmF0dGFjaFRvKHRoaXMpO1xuICAgIC8vICAgcGh5c2ljYWwuZnJpY3Rpb24gPSAwLjg7XG4gICAgLy8gICB2YXIgbGFzdEZvcmNlID0gMDtcbiAgICAvLyAgIHZhciBsYXN0TW92ZSA9IDA7XG4gICAgLy8gICB0aGlzLm9uKCdwb2ludHN0YXJ0JywgZnVuY3Rpb24oZSl7XG4gICAgLy8gICAgIGxhc3RGb3JjZSA9IHBoeXNpY2FsLnZlbG9jaXR5Lnk7XG4gICAgLy8gICAgIGxhc3RNb3ZlID0gMDtcbiAgICAvLyAgICAgcGh5c2ljYWwuZm9yY2UoMCwgMCk7XG4gICAgLy8gICB9KTtcbiAgICAvLyAgIHRoaXMub24oJ3BvaW50bW92ZScsIGZ1bmN0aW9uKGUpe1xuICAgIC8vICAgICB2YXIgcCA9IGUucG9pbnRlci5kZWx0YVBvc2l0aW9uO1xuICAgIC8vICAgICBsYXN0TW92ZSA9IHAueTtcbiAgICAvLyAgICAgdGhpcy5zY3JvbGxZICs9IGxhc3RNb3ZlO1xuICAgIC8vICAgfSk7XG5cbiAgICAvLyAgIHRoaXMub24oJ3BvaW50ZW5kJywgZnVuY3Rpb24oZSl7XG4gICAgLy8gICAgIHBoeXNpY2FsLmZvcmNlKDAsIGxhc3RGb3JjZSArIGxhc3RNb3ZlKTtcbiAgICAvLyAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG4vKipcbiAqIEB0eXBlIHtMYWJlbEFyZWFPcHRpb25zfVxuICovXG5MYWJlbEFyZWEuZGVmYXVsdHMgPSB7XG4gIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICBhbGlnbjogJ2xlZnQnLFxuICBiYXNlbGluZTogJ3RvcCcsXG4gIHdpZHRoOiAzMjAsXG4gIGhlaWdodDogMzIwLFxuICBzY3JvbGxYOiAwLFxuICBzY3JvbGxZOiAwLFxufTtcbkxhYmVsQXJlYS5hbGlnblRvT2Zmc2V0TWFwID0ge1xuICBzdGFydDogLTAuNSxcbiAgbGVmdDogLTAuNSxcbiAgY2VudGVyOiAwLFxuICBlbmQ6IDAuNSxcbiAgcmlnaHQ6IDAuNSxcbn07XG5MYWJlbEFyZWEudmVydGljYWxBbGlnblRvT2Zmc2V0TWFwID0ge1xuICB0b3A6IC0wLjUsXG4gIGNlbnRlcjogMCxcbiAgbWlkZGxlOiAwLFxuICBib3R0b206IDAuNSxcbn1cblxuLy8gZGVmaW5lZFxuOyhmdW5jdGlvbigpIHtcbiAgdmFyIGZ1bmMgPSBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgIGlmKCh0aGlzLl9saW5lVXBkYXRlID09PSBmYWxzZSkgJiYgKG5ld1ZhbCAhPT0gb2xkVmFsKSl7XG4gICAgICB0aGlzLl9saW5lVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgW1xuICAgICd0ZXh0JyxcbiAgICAnd2lkdGgnLFxuICAgICdmb250U2l6ZScsXG4gICAgJ2ZvbnRXZWlnaHQnLFxuICAgICdmb250RmFtaWx5J1xuICBdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgJHdhdGNoLmNhbGwodGhpcywga2V5LCBmdW5jKTtcbiAgICAvLyB0aGlzLiR3YXRjaChrZXksIGZ1bmMpO1xuICB9LCBMYWJlbEFyZWEucHJvdG90eXBlKTtcbn0pKCk7XG5cblNoYXBlLndhdGNoUmVuZGVyUHJvcGVydGllcy5jYWxsKExhYmVsQXJlYSAsW1xuICAndmVydGljYWxBbGlnbicsXG4gICd0ZXh0JyxcbiAgJ3Njcm9sbCcsXG4gICdzY3JvbGxYJyxcbiAgJ3Njcm9sbFknXG5dKTtcblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZWZmZWN0LldhdmVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuQ2lyY2xlU2hhcGVcbiAqL1xuY2xhc3MgV2F2ZSBleHRlbmRzIENpcmNsZVNoYXBlIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZGlzcGxheS9zaGFwZVwiKS5DaXJjbGVTaGFwZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKG9wdGlvbnMgfHwge30sIHtcbiAgICAvLyBvcHRpb25zID0gKG9wdGlvbnMgfHwge30pLiRzYWZlKHtcbiAgICAgIGZpbGw6ICd3aGl0ZScsXG4gICAgICBzdHJva2U6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB2YXIgdHdlZW5lciA9IG5ldyBUd2VlbmVyKCkuYXR0YWNoVG8odGhpcyk7XG4gICAgdHdlZW5lclxuICAgICAgLnRvKHtzY2FsZVg6Miwgc2NhbGVZOjIsIGFscGhhOjB9LCA1MDApXG4gICAgICAuY2FsbChmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgIH0sIHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLnNvY2lhbC5Ud2l0dGVyXG4gKiAjIFR3aXR0ZXIg44Gu5YWx5pyJ44Oq44Oz44Kv44KS55Sf5oiQ44GZ44KL44Kv44Op44K5XG4gKiBUd2l0dGVyIOOBruWFseacieODquODs+OCr+OBriBVUkwg44KS55Sf5oiQ44GX44Gm44GP44KM44KL44Kv44Op44K544Gn44GZ44CCXG4gKi9cbmNsYXNzIFR3aXR0ZXIge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OBr+WtmOWcqOOBl+OBvuOBmeOBjOOCpOODs+OCueOCv+ODs+OCueODoeODs+ODkOOBr+OBguOCiuOBvuOBm+OCk+OAglxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHBoaW5hLnNvY2lhbC5Ud2l0dGVyLmNyZWF0ZVVSTFxuICAgKiBAc3RhdGljXG4gICAqIFR3aXR0ZXLjga7lhbHmnInjg6rjg7Pjgq/jgpLnlJ/miJDjgZfjgb7jgZnjgILlvJXmlbDjgavjgqrjg5bjgrjjgqfjgq/jg4jjgpLmuKHjgZnjgZPjgajjgafmp5jjgIXjgarjg5Hjg6njg6Hjg7zjgr/jg7zjgpLoqK3lrprlh7rmnaXjgb7jgZnjgILlvJXmlbDjga7jgqrjg5bjgrjjgqfjgq/jg4jjga8ge0BsaW5rICNwaGluYS5zb2NpYWwuVHdpdHRlci5kZWZhdWx0c30g44Gn5a6J5YWo5ouh5by144GV44KM44G+44GZ44CCXG4gICAqIFxuICAgKiAjIyMgRXhhbXBsZVxuICAgKiAgICAgcGhpbmEuc29jaWFsLlR3aXR0ZXIuY3JlYXRlVVJMKCk7IC8vID0+IGh0dHA6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dGV4dD1IZWxsbyUyQyUyMHdvcmxkISZoYXNodGFncz1qYXZhc2NyaXB0JTJDcGhpbmEmdXJsPXvnj77lnKjjga5VUkx9XG4gICAqIFxuICAgKiAgICAgcGhpbmEuc29jaWFsLlR3aXR0ZXIuY3JlYXRlVVJMKHtcbiAgICogICAgICAgdGV4dDogJ1RoaXMgaXMgdGV4dCcsXG4gICAqICAgICAgIGhhc2h0YWdzOiAnaGFzaHRhZzEsaGFzaHRhZzInLFxuICAgKiAgICAgICB1cmw6ICdodHRwOi8vcGhpbmFqcy5jb20nXG4gICAqICAgICB9KTsgLy8gPT4gaHR0cDovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PVRoaXMlMjBpcyUyMHRleHQmaGFzaHRhZ3M9aGFzaHRhZzElMkNoYXNodGFnMiZ1cmw9aHR0cCUzQSUyRiUyRnBoaW5hanMuY29tXG4gICAqIFxuICAgKiAgICAgcGhpbmEuc29jaWFsLlR3aXR0ZXIuY3JlYXRlVVJMKHtcbiAgICogICAgICAgdGV4dDogJ1RoaXMgaXMgdGV4dCcsXG4gICAqICAgICAgIGhhc2h0YWdzOiAnaGFzaHRhZzEsaGFzaHRhZzInLFxuICAgKiAgICAgICB1cmw6ICdodHRwOi8vcGhpbmFqcy5jb20nLFxuICAgKiAgICAgICBvdGhlcjogJ1RoaXMgaXMgb3RoZXInLy/oqK3lrprpoIXnm67jga/pganlvZPjgavlopfjgoTjgZvjgotcbiAgICogICAgIH0pOyAvLyA9PiBodHRwOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3RleHQ9VGhpcyUyMGlzJTIwdGV4dCZoYXNodGFncz1oYXNodGFnMSUyQ2hhc2h0YWcyJnVybD1odHRwJTNBJTJGJTJGcGhpbmFqcy5jb20mb3RoZXI9VGhpcyUyMGlzJTIwb3RoZXJcbiAgICogXG4gICAqICAgICBwaGluYS5zb2NpYWwuVHdpdHRlci5jcmVhdGVVUkwoe1xuICAgKiAgICAgICB1cmw6ICdodHRwOi8vcGhpbmFqcy5jb20nXG4gICAqICAgICB9KTsgLy8gPT4gaHR0cDovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD91cmw9aHR0cCUzQSUyRiUyRnBoaW5hanMuY29tJnRleHQ9SGVsbG8lMkMlMjB3b3JsZCEmaGFzaHRhZ3M9amF2YXNjcmlwdCUyQ3BoaW5hXG4gICAqIFxuICAgKiBAcGFyYW0ge1R3aXR0ZXIuZGVmYXVsdHN9IG9wdGlvbnNcbiAgICogQHJldHVybiB7U3RyaW5nfSBUd2l0dGVyIOOBruWFseacieODquODs+OCr1xuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVVSTCAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKG9wdGlvbnMgfHwge30sIFR3aXR0ZXIuZGVmYXVsdHMpO1xuICAgIC8vIG9wdGlvbnMgPSAob3B0aW9ucyB8fCB7fSkuJHNhZmUodGhpcy5kZWZhdWx0cyk7XG5cbiAgICB2YXIgcXVlcmllcyA9IFtdO1xuICAgIHZhciBldWMgPSBlbmNvZGVVUklDb21wb25lbnQ7XG4gICAgZm9ySW4uY2FsbChvcHRpb25zLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgLy8gb3B0aW9ucy5mb3JJbihmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RyID0ga2V5ICsgJz0nICsgZXVjKHZhbHVlKTtcbiAgICAgIHF1ZXJpZXMucHVzaChzdHIpO1xuICAgIH0pO1xuXG4gICAgdmFyIHVybCA9IGZvcm1hdC5jYWxsKCd7YmFzZVVSTH0ve3R5cGV9P3txdWVyeX0nLCB7XG4gICAgLy8gdmFyIHVybCA9ICd7YmFzZVVSTH0ve3R5cGV9P3txdWVyeX0nLmZvcm1hdCh7XG4gICAgICBiYXNlVVJMOiB0aGlzLmJhc2VVUkwsXG4gICAgICAvLyB0eXBlOiBvcHRpb25zLnR5cGUsXG4gICAgICB0eXBlOiAndHdlZXQnLFxuICAgICAgcXVlcnk6IHF1ZXJpZXMuam9pbignJicpLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG59XG5cblxuLyoqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW3BoaW5hLnNvY2lhbC5Ud2l0dGVyLmJhc2VVUkwgPSAnaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQnXVxuICogVHdpdHRlciDjga7lhbHmnInjg6rjg7Pjgq/jga7jg5njg7zjgrnjgajjgarjgosgVVJMIOOBp+OBmeOAglxuICogXG4gKiBAc3RhdGljXG4gKi9cblR3aXR0ZXIuYmFzZVVSTCA9ICdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudCc7XG5cbi8qKlxuICogQHByb3BlcnR5IHtPYmplY3R9IHBoaW5hLnNvY2lhbC5Ud2l0dGVyLmRlZmF1bHRzXG4gKiDjg4fjg5Xjgqnjg6vjg4jlgKTjgpLmoLzntI3jgZfjgabjgYTjgovjgqrjg5bjgrjjgqfjgq/jg4jjgafjgZnjgIJ7QGxpbmsgI3BoaW5hLnNvY2lhbC5Ud2l0dGVyLmRlZmF1bHRzLnRleHR9LCB7QGxpbmsgI3BoaW5hLnNvY2lhbC5Ud2l0dGVyLmRlZmF1bHRzLmhhc2h0YWdzfSwge0BsaW5rICNwaGluYS5zb2NpYWwuVHdpdHRlci5kZWZhdWx0cy51cmx9IOOCkuWGheWMheOBl+OBpuOBhOOBvuOBmeOAglxuICogXG4gKiBAc3RhdGljXG4gKi9cblR3aXR0ZXIuZGVmYXVsdHMgPSB7XG4gIC8vIHR5cGU6ICd0d2VldCcsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbcGhpbmEuc29jaWFsLlR3aXR0ZXIuZGVmYXVsdHMudGV4dCA9ICdIZWxsbywgV29ybGQnXVxuICAgKiDjg4fjg5Xjgqnjg6vjg4jjgafjg4TjgqTjg7zjg4jjgavlkKvjgb7jgozjgovmloflrZfliJfjgafjgZnjgIJcbiAgICogXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHRleHQ6ICdIZWxsbywgd29ybGQhJyxcblxuICAvLyBzY3JlZW5fbmFtZTogJ3BoaV9qcCcsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbcGhpbmEuc29jaWFsLlR3aXR0ZXIuZGVmYXVsdHMuaGFzaHRhZ3MgPSAnamF2YXNjcmlwdCwgcGhpbmFfanMnXVxuICAgKiDjg4fjg5Xjgqnjg6vjg4jjgafjg4TjgqTjg7zjg4jjgavlkKvjgb7jgozjgovjg4/jg4Pjgrfjg6Xjgr/jgrDjgafjgZnjgIJcbiAgICogXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIGhhc2h0YWdzOiAnamF2YXNjcmlwdCxwaGluYV9qcycsXG5cbiAgLy8gdXJsOiAnaHR0cDovL2dpdGh1Yi5jb20vcGhpLWpwL3BoaW5hLmpzJyxcblxuICAvKipcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFtwaGluYS5zb2NpYWwuVHdpdHRlci5kZWZhdWx0cy51cmwgPSBwaGluYS5nbG9iYWwubG9jYXRpb24gJiYgcGhpbmEuZ2xvYmFsLmxvY2F0aW9uLmhyZWZdXG4gICAqIOODh+ODleOCqeODq+ODiOOBp+ODhOOCpOODvOODiOOBq+WQq+OBvuOCjOOCiyBVUkwg44Gn44GZ44CCXG4gICAqIFxuICAgKiBAc3RhdGljXG4gICAqL1xuICB1cmw6IHBoaW5hLmdsb2JhbC5sb2NhdGlvbiAmJiBwaGluYS5nbG9iYWwubG9jYXRpb24uaHJlZlxuXG4gIC8vIHZpYTogJ3BoaV9qcCcsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGNsYXNzTmFtZTogc3RyaW5nIHwgKG5ldyAoLi4uYXJnczogYW55KT0+IGFueSlcbiAqICAgbGFiZWw6IGltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsXG4gKiAgIGFyZ3VtZW50cz86IGFueVxuICogICBuZXh0TGFiZWw/OiBpbXBvcnQoXCIuLi9hcHAvc2NlbmVcIikuU2NlbmVMYWJlbFxuICogICBuZXh0QXJndW1lbnRzPzogYW55XG4gKiB9fSBTY2VuZURhdGFcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHN0YXJ0TGFiZWw6IGltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsXG4gKiAgIHNjZW5lczogU2NlbmVEYXRhW11cbiAqIH19IE1hbmFnZXJTY2VuZVBhcmFtc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdhbWUuTWFuYWdlclNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5hcHAuU2NlbmVcbiAqL1xuY2xhc3MgTWFuYWdlclNjZW5lIGV4dGVuZHMgU2NlbmUge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtNYW5hZ2VyU2NlbmVQYXJhbXN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKiBAdHlwZSBTY2VuZURhdGFbXSAqL1xuICAgIHRoaXMuc2NlbmVzO1xuICAgIC8qKiBAdHlwZSBudW1iZXIgKi9cbiAgICB0aGlzLnNjZW5lSW5kZXg7XG5cbiAgICB0aGlzLnNldFNjZW5lcyhwYXJhbXMuc2NlbmVzKTtcblxuICAgIHRoaXMub24oXCJlbnRlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZ290b1NjZW5lKHBhcmFtcy5zdGFydExhYmVsIHx8IDApO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLm9uKFwicmVzdW1lXCIsIHRoaXMub25uZXh0LmJpbmQodGhpcykpO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGUg5pyq5L2/55SoXG4gICAgICovXG4gICAgdGhpcy5jb21tb25Bcmd1bWVudHMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzY2VuZXMg44KS44K744OD44OIXG4gICAqIFxuICAgKiBAcGFyYW0ge1NjZW5lRGF0YVtdfSBzY2VuZXNcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBzZXRTY2VuZXMoc2NlbmVzKSB7XG4gICAgdGhpcy5zY2VuZXMgPSBzY2VuZXM7XG4gICAgdGhpcy5zY2VuZUluZGV4ID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFNjZW5l44Kv44Op44K544KS44Kk44Oz44K544K/44Oz44K55YyW44GX44Gm6L+U44GZXG4gICAqIFxuICAgKiBAcGFyYW0ge1NjZW5lRGF0YX0gZGF0YSBTY2VuZeODh+ODvOOCv1xuICAgKiBAcGFyYW0ge2FueX0gYXJncyDjgqTjg7Pjgrnjgr/jg7PjgrnljJbjga7pmpvjga7jgrPjg7Pjgrnjg4jjg6njgq/jgr/jga7lvJXmlbBcbiAgICogQHJldHVybnMge1NjZW5lfVxuICAgKi9cbiAgX2luc3RhbnRpYXRlU2NlbmUoZGF0YSwgYXJncykge1xuICAgIC8vIFNjZW5l5Yid5pyf5YyW5byV5pWwXG4gICAgLy8gdHlwZXNjcmlwdOOBjOS9leaVheOBi2FyZ3VtZW50c+OBq+WPjeW/nOOBl+OBpuS9meioiOOBquW8leaVsOWumue+qeOCkueUn+aIkOOBmeOCi+OBn+OCgeOAgeaWh+Wtl+WIl+WPgueFp+OBqOOBmeOCi1xuICAgIHZhciBpbml0QXJndW1lbnRzID0gJGV4dGVuZC5jYWxsKHt9LCBkYXRhW1wiYXJndW1lbnRzXCJdLCBhcmdzKTtcbiAgICAvLyB2YXIgaW5pdEFyZ3VtZW50cyA9IHt9LiRleHRlbmQoZGF0YS5hcmd1bWVudHMsIGFyZ3MpO1xuXG4gICAgLyoqIEB0eXBlIHtTY2VuZX0gKi9cbiAgICB2YXIgc2NlbmU7XG5cbiAgICAvKiogQHR5cGUgeyhuZXcgKGFyZ3M6IGFueSk9PiBhbnkpfSAqL1xuICAgIHZhciBTY2VuZUNvbnN0cnVjdG9yO1xuICAgIGlmICh0eXBlb2YgZGF0YS5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyDmloflrZfliJflnovjga7loLTlkIjvvJpwaGluYS5kZWZpbmXjgIHjgYLjgovjgYTjga/jgrDjg63jg7zjg5Djg6vjgrnjgrPjg7zjg5fvvIh3aW5kb3fvvInjgavnm7TmjqXlrprnvqnjgZXjgozjgZ/jgq/jg6njgrnjga7mloflrZfliJdcbiAgICAgIFNjZW5lQ29uc3RydWN0b3IgPSBwaGluYS51c2luZyhkYXRhLmNsYXNzTmFtZSk7XG4gICAgICBpZiAodHlwZW9mIFNjZW5lQ29uc3RydWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgU2NlbmVDb25zdHJ1Y3RvciA9IHBoaW5hLnVzaW5nKCdwaGluYS5nYW1lLicgKyBkYXRhLmNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YS5jbGFzc05hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIOmWouaVsOWei+OBruWgtOWQiO+8mue0lOeyi+OBqmNsYXNz44Go6KaL44Gq44GZXG4gICAgICBTY2VuZUNvbnN0cnVjdG9yID0gZGF0YS5jbGFzc05hbWU7XG4gICAgfVxuICAgIHNjZW5lID0gbmV3IFNjZW5lQ29uc3RydWN0b3IoaW5pdEFyZ3VtZW50cyk7XG5cbiAgICAvLyDmrKHjgrfjg7zjg7Pjg5Hjg6njg6Hjg7zjgr/jgYznhKHjgYTloLTlkIjjga7lh6bnkIZcbiAgICBpZiAoIXNjZW5lLm5leHRMYWJlbCkge1xuICAgICAgc2NlbmUubmV4dExhYmVsID0gZGF0YS5uZXh0TGFiZWw7XG4gICAgfVxuICAgIGlmICghc2NlbmUubmV4dEFyZ3VtZW50cykge1xuICAgICAgc2NlbmUubmV4dEFyZ3VtZW50cyA9IGRhdGEubmV4dEFyZ3VtZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gc2NlbmVcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgZfjgZ9sYWJlbOOBq+WvvuW/nOOBmeOCi+OCt+ODvOODs+OBuOmjm+OBtiAgXG4gICAqIFNjZW5l44Kv44Op44K544KS44Kk44Oz44K544K/44Oz44K55YyW44GX44GmYXBw44GrcmVwbGFjZVNjZW5l44GV44Gb44KLICBcbiAgICogXG4gICAqIEBwYXJhbSAge2ltcG9ydChcIi4uL2FwcC9zY2VuZVwiKS5TY2VuZUxhYmVsfSBsYWJlbCDjgrfjg7zjg7Pjg6njg5njg6tcbiAgICogQHBhcmFtICB7YW55fSBbYXJnc10gU2NlbmXjgavjgo/jgZ/jgZnlvJXmlbDjgYzjgYLjgovloLTlkIjjgavmjIflrppcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZXBsYWNlU2NlbmUobGFiZWwsIGFyZ3MpIHtcbiAgICB2YXIgaW5kZXggPSAodHlwZW9mIGxhYmVsID09ICdzdHJpbmcnKSA/IHRoaXMubGFiZWxUb0luZGV4KGxhYmVsKSA6IGxhYmVsfHwwO1xuICAgIGlmICghdGhpcy5zY2VuZXNbaW5kZXhdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGZvcm1hdC5jYWxsKCdwaGluYS5qcyBlcnJvcjogYHswfWAg44Gr5a++5b+c44GZ44KL44K344O844Oz44GM44GC44KK44G+44Gb44KTLicsIGxhYmVsKSk7XG4gICAgfVxuICAgIHZhciBzY2VuZSA9IHRoaXMuX2luc3RhbnRpYXRlU2NlbmUodGhpcy5zY2VuZXNbaW5kZXhdLCBhcmdzKTtcbiAgICB0aGlzLmFwcC5yZXBsYWNlU2NlbmUoc2NlbmUpO1xuICAgIHRoaXMuc2NlbmVJbmRleCA9IGluZGV4O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GX44GfbGFiZWzjgavlr77lv5zjgZnjgovjgrfjg7zjg7Pjgbjpo5vjgbYgIFxuICAgKiByZXBsYWNlU2NlbmXjgajjga7pgZXjgYTjga9hcHAucmVwbGFjZVNjZW5l44Gn44Gv44Gq44GP44CBXG4gICAqIGFwcC5wdXNoU2NlbmXjgpLlrp/ooYzjgZnjgovngrlcbiAgICogXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vYXBwL3NjZW5lXCIpLlNjZW5lTGFiZWx9IGxhYmVsIOOCt+ODvOODs+ODqeODmeODq1xuICAgKiBAcGFyYW0ge2FueX0gYXJncyBTY2VuZeOCs+ODs+OCueODiOODqeOCr+OCv+OBruW8leaVsFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGdvdG9TY2VuZShsYWJlbCwgYXJncykge1xuICAgIHZhciBpbmRleCA9ICh0eXBlb2YgbGFiZWwgPT0gJ3N0cmluZycpID8gdGhpcy5sYWJlbFRvSW5kZXgobGFiZWwpIDogbGFiZWx8fDA7XG4gICAgaWYgKCF0aGlzLnNjZW5lc1tpbmRleF0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0LmNhbGwoJ3BoaW5hLmpzIGVycm9yOiBgezB9YCDjgavlr77lv5zjgZnjgovjgrfjg7zjg7PjgYzjgYLjgorjgb7jgZvjgpMuJywgbGFiZWwpKTtcbiAgICB9XG4gICAgdmFyIHNjZW5lID0gdGhpcy5faW5zdGFudGlhdGVTY2VuZSh0aGlzLnNjZW5lc1tpbmRleF0sIGFyZ3MpO1xuICAgIHRoaXMuYXBwLnB1c2hTY2VuZShzY2VuZSk7XG4gICAgdGhpcy5zY2VuZUluZGV4ID0gaW5kZXg7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgrfjg7zjg7Pjgbjpo5vjgbYgIFxuICAgKiDjgrfjg7zjg7PjgYzlrZjlnKjjgZfjgarjgYTloLTlkIjjgIFcImZpbmlzaFwi44Kk44OZ44Oz44OI44KS55m654Gr44GX44Gm57WC5LqGXG4gICAqIFxuICAgKiBAcGFyYW0ge2FueX0gYXJncyDmrKHjga5TY2VuZeOCs+ODs+OCueODiOODqeOCr+OCv+OBruW8leaVsFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIGdvdG9OZXh0KGFyZ3MpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuc2NlbmVzW3RoaXMuc2NlbmVJbmRleF07XG4gICAgdmFyIG5leHRJbmRleCA9IG51bGw7XG5cbiAgICBpZiAoZGF0YS5uZXh0TGFiZWwpIHtcbiAgICAgIC8vIOasoeOBruODqeODmeODq+OBjOioreWumuOBleOCjOOBpuOBhOOBn+WgtOWQiFxuICAgICAgbmV4dEluZGV4ID0gdGhpcy5sYWJlbFRvSW5kZXgoZGF0YS5uZXh0TGFiZWwpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnNjZW5lSW5kZXgrMSA8IHRoaXMuc2NlbmVzLmxlbmd0aCkge1xuICAgICAgLy8gaW5kZXjkuIrjga7mrKHjga7jgrfjg7zjg7Pjgavpgbfnp7tcbiAgICAgIG5leHRJbmRleCA9IHRoaXMuc2NlbmVJbmRleCsxO1xuICAgIH1cblxuICAgIGlmIChuZXh0SW5kZXggIT09IG51bGwpIHtcbiAgICAgIHRoaXMuZ290b1NjZW5lKG5leHRJbmRleCwgYXJncyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5mbGFyZShcImZpbmlzaFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLlj5blvpdcbiAgICogXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXRDdXJyZW50SW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NlbmVJbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jgrfjg7zjg7Pjga7jg6njg5njg6vjgpLlj5blvpdcbiAgICogXG4gICAqIEByZXR1cm5zIHtpbXBvcnQoXCIuLi9hcHAvc2NlbmVcIikuU2NlbmVMYWJlbH0gbGFiZWxcbiAgICovXG4gIGdldEN1cnJlbnRMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2VuZXNbdGhpcy5zY2VuZUluZGV4XS5sYWJlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njg5njg6vjgYvjgonjgqTjg7Pjg4fjg4Pjgq/jgrnjgavlpInmj5tcbiAgICogXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vYXBwL3NjZW5lXCIpLlNjZW5lTGFiZWx9IGxhYmVsXG4gICAqL1xuICBsYWJlbFRvSW5kZXgobGFiZWwpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuc2NlbmVzLmZpbHRlcihmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YS5sYWJlbCA9PSBsYWJlbDtcbiAgICB9KVswXTtcblxuICAgIHJldHVybiB0aGlzLnNjZW5lcy5pbmRleE9mKGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+ODh+ODg+OCr+OCueOBi+OCieODqeODmeODq+OBq+WkieaPm1xuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEByZXR1cm5zIHtpbXBvcnQoXCIuLi9hcHAvc2NlbmVcIikuU2NlbmVMYWJlbH0gbGFiZWxcbiAgICovXG4gIGluZGV4VG9MYWJlbChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNjZW5lc1tpbmRleF0ubGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICoge0BsaW5rIEJhc2VBcHAjcG9wU2NlbmV9IOOBrumam+OBq3Jlc3VtZeOCpOODmeODs+ODiOe1jOeUseOBp+Wun+ihjOOBleOCjOOAgVxuICAgKiDlr77lv5zjgZnjgovmrKHjga7jgrfjg7zjg7Pjgavnp7vooYzjgZnjgotcbiAgICogXG4gICAqIEBwYXJhbSB7eyBwcmV2U2NlbmU6IHsgbmV4dExhYmVsOiBpbXBvcnQoXCIuLi9hcHAvc2NlbmVcIikuU2NlbmVMYWJlbDsgbmV4dEFyZ3VtZW50czogYW55OyB9OyB9fSBlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgb25uZXh0KGUpIHtcbiAgICB2YXIgbmV4dExhYmVsID0gZS5wcmV2U2NlbmUubmV4dExhYmVsO1xuICAgIHZhciBuZXh0QXJndW1lbnRzID0gZS5wcmV2U2NlbmUubmV4dEFyZ3VtZW50cztcbiAgICBpZiAobmV4dExhYmVsKSB7XG4gICAgICB0aGlzLmdvdG9TY2VuZShuZXh0TGFiZWwsIG5leHRBcmd1bWVudHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZ290b05leHQobmV4dEFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBsaWU/OiBib29sZWFuLFxuICogICBleGl0VHlwZT86ICdhdXRvJ1xuICogICBhc3NldHM/OiBpbXBvcnQoXCIuLi9hc3NldC9hc3NldGxvYWRlclwiKS5Bc3NldExvYWRlckxvYWRQYXJhbVxuICogfSAmIGltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgfSBMb2FkaW5nU2NlbmVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5Mb2FkaW5nU2NlbmVcbiAqIF9leHRlbmRzIHBoaW5hLmRpc3BsYXkuRGlzcGxheVNjZW5lXG4gKi9cbmNsYXNzIExvYWRpbmdTY2VuZSBleHRlbmRzIERpc3BsYXlTY2VuZSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0xvYWRpbmdTY2VuZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkc2FmZS5jYWxsKHt9LCBvcHRpb25zLCBMb2FkaW5nU2NlbmUuZGVmYXVsdHMpO1xuICAgIC8vIG9wdGlvbnMgPSAoe30pLiRzYWZlKG9wdGlvbnMsIHBoaW5hLmdhbWUuTG9hZGluZ1NjZW5lLmRlZmF1bHRzKTtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuZ2F1Z2UgPSBuZXcgR2F1Z2Uoe1xuICAgICAgdmFsdWU6IDAsXG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIGhlaWdodDogMTIsXG4gICAgICBmaWxsOiAnI2FhYScsXG4gICAgICBzdHJva2U6IGZhbHNlLFxuICAgICAgZ2F1Z2VDb2xvcjogJ2hzbGEoMjAwLCAxMDAlLCA4MCUsIDAuOCknLFxuICAgICAgcGFkZGluZzogMCxcbiAgICB9KS5hZGRDaGlsZFRvKHRoaXMpXG4gICAgICAuc2V0UG9zaXRpb24oXG4gICAgICAgIHRoaXMuZ3JpZFguY2VudGVyKCksXG4gICAgICAgIDAsXG4gICAgICApXG4gICAgICAuc2V0T3JpZ2luKFxuICAgICAgICAwLjUsIFxuICAgICAgICAwXG4gICAgICApO1xuICAgIC8vIHRoaXMuZnJvbUpTT04oe1xuICAgIC8vICAgY2hpbGRyZW46IHtcbiAgICAvLyAgICAgZ2F1Z2U6IHtcbiAgICAvLyAgICAgICBjbGFzc05hbWU6ICdwaGluYS51aS5HYXVnZScsXG4gICAgLy8gICAgICAgYXJndW1lbnRzOiB7XG4gICAgLy8gICAgICAgICB2YWx1ZTogMCxcbiAgICAvLyAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgIC8vICAgICAgICAgaGVpZ2h0OiAxMixcbiAgICAvLyAgICAgICAgIGZpbGw6ICcjYWFhJyxcbiAgICAvLyAgICAgICAgIHN0cm9rZTogZmFsc2UsXG4gICAgLy8gICAgICAgICBnYXVnZUNvbG9yOiAnaHNsYSgyMDAsIDEwMCUsIDgwJSwgMC44KScsXG4gICAgLy8gICAgICAgICBwYWRkaW5nOiAwLFxuICAgIC8vICAgICAgIH0sXG4gICAgLy8gICAgICAgeDogdGhpcy5ncmlkWC5jZW50ZXIoKSxcbiAgICAvLyAgICAgICB5OiAwLFxuICAgIC8vICAgICAgIG9yaWdpblk6IDAsXG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcblxuICAgIHZhciBsb2FkZXIgPSBuZXcgQXNzZXRMb2FkZXIoKTtcblxuICAgIGlmIChvcHRpb25zLmxpZSkge1xuICAgICAgdGhpcy5nYXVnZS5hbmltYXRpb25UaW1lID0gMTAqMTAwMDtcbiAgICAgIHRoaXMuZ2F1Z2UudmFsdWUgPSA5MDtcblxuICAgICAgbG9hZGVyLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZ2F1Z2UuYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICAgIHRoaXMuZ2F1Z2UudmFsdWUgPSAxMDA7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZ2F1Z2UuYW5pbWF0aW9uVGltZSA9IDEwMDtcbiAgICAgIGxvYWRlci5vbigncHJvZ3Jlc3MnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMuZ2F1Z2UudmFsdWUgPSBlLnByb2dyZXNzICogMTAwO1xuICAgICAgfS5iaW5kKHRoaXMpKSA7XG4gICAgfVxuXG4gICAgdGhpcy5nYXVnZS5vbignZnVsbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKG9wdGlvbnMuZXhpdFR5cGUgPT09ICdhdXRvJykge1xuICAgICAgICB0aGlzLmFwcC5wb3BTY2VuZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5mbGFyZSgnbG9hZGVkJyk7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIGxvYWRlci5sb2FkKG9wdGlvbnMuYXNzZXRzKTtcbiAgfVxuXG59XG5cbi8qKiBAdHlwZSBMb2FkaW5nU2NlbmVPcHRpb25zICovXG5Mb2FkaW5nU2NlbmUuZGVmYXVsdHMgPSB7XG4gIGV4aXRUeXBlOiAnYXV0bycsXG4gIGxpZTogZmFsc2UsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNwbGFzaFNjZW5lT3B0aW9uRXh0ZW5kXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2ltYWdlVVJMXSDooajnpLrjgZnjgovjgrnjg5fjg6njg4Pjgrfjg6XnlLvlg4/jg5HjgrlcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBwaGluYS5nYW1lLlNwbGFzaFNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlTY2VuZVxuICovXG5jbGFzcyBTcGxhc2hTY2VuZSBleHRlbmRzIERpc3BsYXlTY2VuZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vZGlzcGxheS9kaXNwbGF5c2NlbmVcIikuRGlzcGxheVNjZW5lT3B0aW9uc30gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIGRlZmF1bHRzID0gU3BsYXNoU2NlbmUuZGVmYXVsdHM7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICB2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG4gICAgdGV4dHVyZS5sb2FkKGRlZmF1bHRzLmltYWdlVVJMKS50aGVuKFxuICAgIC8qKiBAdGhpcyBTcGxhc2hTY2VuZSAqL1xuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiDliJ3mnJ/ljJbplqLmlbBcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuc3ByaXRlID0gbmV3IFNwcml0ZSh0aGlzLnRleHR1cmUpLmFkZENoaWxkVG8odGhpcyk7XG5cbiAgICB0aGlzLnNwcml0ZS5zZXRQb3NpdGlvbih0aGlzLmdyaWRYLmNlbnRlcigpLCB0aGlzLmdyaWRZLmNlbnRlcigpKTtcbiAgICB0aGlzLnNwcml0ZS5hbHBoYSA9IDA7XG5cbiAgICB0aGlzLnNwcml0ZS50d2VlbmVyXG4gICAgICAuY2xlYXIoKVxuICAgICAgLnRvKHthbHBoYToxfSwgNTAwLCAnZWFzZU91dEN1YmljJylcbiAgICAgIC53YWl0KDEwMDApXG4gICAgICAudG8oe2FscGhhOjB9LCA1MDAsICdlYXNlT3V0Q3ViaWMnKVxuICAgICAgLndhaXQoMjUwKVxuICAgICAgLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgfSwgdGhpcylcbiAgICAgIDtcbiAgfVxuXG59XG5cbi8qKiBAdHlwZSB7aW1wb3J0KFwiLi4vZGlzcGxheS9kaXNwbGF5c2NlbmVcIikuRGlzcGxheVNjZW5lT3B0aW9ucyAmIFNwbGFzaFNjZW5lT3B0aW9uRXh0ZW5kfSAqL1xuU3BsYXNoU2NlbmUuZGVmYXVsdHMgPSB7XG4gIGltYWdlVVJMOiAnaHR0cDovL2Nkbi5yYXdnaXQuY29tL3BoaS1qcC9waGluYS5qcy9kZXZlbG9wL2xvZ28ucG5nJyxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVGl0bGVTY2VuZU9wdGlvbkV4dGVuZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0aXRsZV0g44K/44Kk44OI44Or5paH5a2X5YiXXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW21lc3NhZ2VdIOacquS9v+eUqFxuICogQHByb3BlcnR5IHtpbXBvcnQoXCIuLi9ncmFwaGljcy9jYW52YXNcIikuQ2FudmFzU3R5bGV9IFtmb250Q29sb3JdIOOCv+OCpOODiOODq+ODqeODmeODq+OBruiJslxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtiYWNrZ3JvdW5kSW1hZ2VdIOacquS9v+eUqFxuICogQHByb3BlcnR5IHtcInRvdWNoXCJ8XCJcIn0gW2V4aXRUeXBlXSBcInRvdWNoXCLmjIflrprmmYLjgavoh6rli5Xjgafjgr/jg4Pjg4Hpgbfnp7vjgqTjg5njg7Pjg4jjgpLku5jkuI5cbiAqIFxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgJiBUaXRsZVNjZW5lT3B0aW9uRXh0ZW5kfSBUaXRsZVNjZW5lT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdhbWUuVGl0bGVTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5U2NlbmVcbiAqL1xuY2xhc3MgVGl0bGVTY2VuZSBleHRlbmRzIERpc3BsYXlTY2VuZSB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1RpdGxlU2NlbmVPcHRpb25zfSBbcGFyYW1zXVxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgcGFyYW1zID0gJHNhZmUuY2FsbCh7fSwgcGFyYW1zLCBUaXRsZVNjZW5lLmRlZmF1bHRzKTtcbiAgICAvLyBwYXJhbXMgPSAoe30pLiRzYWZlKHBhcmFtcywgcGhpbmEuZ2FtZS5UaXRsZVNjZW5lLmRlZmF1bHRzKTtcbiAgICBzdXBlcihwYXJhbXMpO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgdGhpcy5mcm9tSlNPTih7XG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICB0aXRsZUxhYmVsOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBMYWJlbCxcbiAgICAgICAgICAvLyBjbGFzc05hbWU6ICdwaGluYS5kaXNwbGF5LkxhYmVsJyxcbiAgICAgICAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgICAgIHRleHQ6IHBhcmFtcy50aXRsZSxcbiAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBzdHJva2U6IGZhbHNlLFxuICAgICAgICAgICAgZm9udFNpemU6IDY0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeDogdGhpcy5ncmlkWC5jZW50ZXIoKSxcbiAgICAgICAgICB5OiB0aGlzLmdyaWRZLnNwYW4oNCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZXhpdFR5cGUgPT09ICd0b3VjaCcpIHtcbiAgICAgIHRoaXMuZnJvbUpTT04oe1xuICAgICAgICBjaGlsZHJlbjoge1xuICAgICAgICAgIHRvdWNoTGFiZWw6IHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogTGFiZWwsXG4gICAgICAgICAgICAvLyBjbGFzc05hbWU6ICdwaGluYS5kaXNwbGF5LkxhYmVsJyxcbiAgICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgICB0ZXh0OiBcIlRPVUNIIFNUQVJUXCIsXG4gICAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICAgIHN0cm9rZTogZmFsc2UsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAzMixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgICAgICAgICAgeTogdGhpcy5ncmlkWS5zcGFuKDEyKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub24oJ3BvaW50ZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXhpdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuLyoqXG4gKiBAdHlwZSB7VGl0bGVTY2VuZU9wdGlvbnN9XG4gKi9cblRpdGxlU2NlbmUuZGVmYXVsdHMgPSB7XG4gIHRpdGxlOiAncGhpbmEuanMgZ2FtZXMnLFxuICBtZXNzYWdlOiAnJyxcblxuICBmb250Q29sb3I6ICd3aGl0ZScsXG4gIGJhY2tncm91bmRDb2xvcjogJ2hzbCgyMDAsIDgwJSwgNjQlKScsXG4gIGJhY2tncm91bmRJbWFnZTogJycsXG5cbiAgZXhpdFR5cGU6ICd0b3VjaCcsXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGZvbnRDb2xvcj86IHN0cmluZyxcbiAqICAgZXhpdFR5cGU/OiAndG91Y2gnXG4gKiB9ICYgaW1wb3J0KFwiLi4vZGlzcGxheS9kaXNwbGF5c2NlbmVcIikuRGlzcGxheVNjZW5lT3B0aW9ucyB9IFBhdXNlU2NlbmVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5QYXVzZVNjZW5lXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkRpc3BsYXlTY2VuZVxuICovXG5jbGFzcyBQYXVzZVNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7UGF1c2VTY2VuZU9wdGlvbnN9IFtwYXJhbXNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSAkc2FmZS5jYWxsKHt9LCBwYXJhbXMsIFBhdXNlU2NlbmUuZGVmYXVsdHMpO1xuICAgIC8vIHBhcmFtcyA9ICh7fSkuJHNhZmUocGFyYW1zLCBwaGluYS5nYW1lLlBhdXNlU2NlbmUuZGVmYXVsdHMpO1xuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IHBhcmFtcy5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICB0aGlzLmZyb21KU09OKHtcbiAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICBjbGFzc05hbWU6IExhYmVsLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgdGV4dDogJ1BhdXNlJyxcbiAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBzdHJva2U6IG51bGwsXG4gICAgICAgICAgICBmb250U2l6ZTogNDgsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuY2VudGVyKCksXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLmV4aXRUeXBlID09PSAndG91Y2gnKSB7XG4gICAgICB0aGlzLm9uKCdwb2ludGVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV4aXQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKiBAdHlwZSBQYXVzZVNjZW5lT3B0aW9ucyAqL1xuUGF1c2VTY2VuZS5kZWZhdWx0cyA9ICB7XG4gIGZvbnRDb2xvcjogJ3doaXRlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnaHNsYSgwLCAwJSwgMCUsIDAuODUpJyxcblxuICBleGl0VHlwZTogJ3RvdWNoJyxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVzdWx0U2NlbmVPcHRpb25FeHRlbmRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2NvcmVdIFtkZXNjcmlwdGlvbl1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbWVzc2FnZV0gW2Rlc2NyaXB0aW9uXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtoYXNodGFnc10gW2Rlc2NyaXB0aW9uXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt1cmxdIFtkZXNjcmlwdGlvbl1cbiAqIEBwcm9wZXJ0eSB7XCJ0b3VjaFwifSBbZXhpdFR5cGVdIFtkZXNjcmlwdGlvbl1cbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KFwiLi4vZ3JhcGhpY3MvY2FudmFzXCIpLkNhbnZhc1N0eWxlfSBbZm9udENvbG9yXSBbZGVzY3JpcHRpb25dXG4gKiBAcHJvcGVydHkge2ltcG9ydChcIi4uL2dyYXBoaWNzL2NhbnZhc1wiKS5DYW52YXNTdHlsZX0gW2JhY2tncm91bmRDb2xvcl1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYmFja2dyb3VuZEltYWdlXSDmnKrkvb/nlKhcbiAqIFxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgJiBSZXN1bHRTY2VuZU9wdGlvbkV4dGVuZH0gUmVzdWx0U2NlbmVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5SZXN1bHRTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5U2NlbmVcbiAqL1xuY2xhc3MgUmVzdWx0U2NlbmUgZXh0ZW5kcyBEaXNwbGF5U2NlbmUge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtSZXN1bHRTY2VuZU9wdGlvbnN9IFtwYXJhbXNdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSAkc2FmZS5jYWxsKHt9LCBwYXJhbXMsIFJlc3VsdFNjZW5lLmRlZmF1bHRzKTtcbiAgICAvLyBwYXJhbXMgPSAoe30pLiRzYWZlKHBhcmFtcywgcGhpbmEuZ2FtZS5SZXN1bHRTY2VuZS5kZWZhdWx0cyk7XG4gICAgc3VwZXIocGFyYW1zKTtcblxuICAgIHZhciBtZXNzYWdlID0gZm9ybWF0LmNhbGwocGFyYW1zLm1lc3NhZ2UsIHBhcmFtcyk7XG4gICAgLy8gdmFyIG1lc3NhZ2UgPSBwYXJhbXMubWVzc2FnZS5mb3JtYXQocGFyYW1zKTtcblxuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gcGFyYW1zLmJhY2tncm91bmRDb2xvcjtcblxuICAgIHRoaXMuZnJvbUpTT04oe1xuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgc2NvcmVUZXh0OiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBMYWJlbCxcbiAgICAgICAgICAvLyBjbGFzc05hbWU6ICdwaGluYS5kaXNwbGF5LkxhYmVsJyxcbiAgICAgICAgICBhcmd1bWVudHM6IHtcbiAgICAgICAgICAgIHRleHQ6ICdzY29yZScsXG4gICAgICAgICAgICBmaWxsOiBwYXJhbXMuZm9udENvbG9yLFxuICAgICAgICAgICAgc3Ryb2tlOiBudWxsLFxuICAgICAgICAgICAgZm9udFNpemU6IDQ4LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeDogdGhpcy5ncmlkWC5zcGFuKDgpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuc3Bhbig0KSxcbiAgICAgICAgfSxcbiAgICAgICAgc2NvcmVMYWJlbDoge1xuICAgICAgICAgIGNsYXNzTmFtZTogTGFiZWwsXG4gICAgICAgICAgLy8gY2xhc3NOYW1lOiAncGhpbmEuZGlzcGxheS5MYWJlbCcsXG4gICAgICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgICAgICB0ZXh0OiBwYXJhbXMuc2NvcmUrJycsXG4gICAgICAgICAgICBmaWxsOiBwYXJhbXMuZm9udENvbG9yLFxuICAgICAgICAgICAgc3Ryb2tlOiBudWxsLFxuICAgICAgICAgICAgZm9udFNpemU6IDcyLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeDogdGhpcy5ncmlkWC5zcGFuKDgpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuc3Bhbig2KSxcbiAgICAgICAgfSxcblxuICAgICAgICBtZXNzYWdlTGFiZWw6IHtcbiAgICAgICAgICBjbGFzc05hbWU6IExhYmVsLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgdGV4dDogbWVzc2FnZSxcbiAgICAgICAgICAgIGZpbGw6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBzdHJva2U6IG51bGwsXG4gICAgICAgICAgICBmb250U2l6ZTogMzIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuc3Bhbig5KSxcbiAgICAgICAgfSxcblxuICAgICAgICBzaGFyZUJ1dHRvbjoge1xuICAgICAgICAgIGNsYXNzTmFtZTogQnV0dG9uLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLnVpLkJ1dHRvbicsXG4gICAgICAgICAgYXJndW1lbnRzOiBbe1xuICAgICAgICAgICAgdGV4dDogJ+KYhScsXG4gICAgICAgICAgICB3aWR0aDogMTI4LFxuICAgICAgICAgICAgaGVpZ2h0OiAxMjgsXG4gICAgICAgICAgICBmb250Q29sb3I6IHBhcmFtcy5mb250Q29sb3IsXG4gICAgICAgICAgICBmb250U2l6ZTogNTAsXG4gICAgICAgICAgICBjb3JuZXJSYWRpdXM6IDY0LFxuICAgICAgICAgICAgZmlsbDogJ3JnYmEoMjQwLCAyNDAsIDI0MCwgMC41KScsXG4gICAgICAgICAgICAvLyBzdHJva2U6ICcjYWFhJyxcbiAgICAgICAgICAgIC8vIHN0cm9rZVdpZHRoOiAyLFxuICAgICAgICAgIH1dLFxuICAgICAgICAgIHg6IHRoaXMuZ3JpZFguY2VudGVyKC0zKSxcbiAgICAgICAgICB5OiB0aGlzLmdyaWRZLnNwYW4oMTIpLFxuICAgICAgICB9LFxuICAgICAgICBwbGF5QnV0dG9uOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBCdXR0b24sXG4gICAgICAgICAgLy8gY2xhc3NOYW1lOiAncGhpbmEudWkuQnV0dG9uJyxcbiAgICAgICAgICBhcmd1bWVudHM6IFt7XG4gICAgICAgICAgICB0ZXh0OiAn4pa2JyxcbiAgICAgICAgICAgIHdpZHRoOiAxMjgsXG4gICAgICAgICAgICBoZWlnaHQ6IDEyOCxcbiAgICAgICAgICAgIGZvbnRDb2xvcjogcGFyYW1zLmZvbnRDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiA1MCxcbiAgICAgICAgICAgIGNvcm5lclJhZGl1czogNjQsXG4gICAgICAgICAgICBmaWxsOiAncmdiYSgyNDAsIDI0MCwgMjQwLCAwLjUpJyxcbiAgICAgICAgICAgIC8vIHN0cm9rZTogJyNhYWEnLFxuICAgICAgICAgICAgLy8gc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgeDogdGhpcy5ncmlkWC5jZW50ZXIoMyksXG4gICAgICAgICAgeTogdGhpcy5ncmlkWS5zcGFuKDEyKSxcblxuICAgICAgICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgICAgICAgIG9ucHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXQoKTtcbiAgICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLmV4aXRUeXBlID09PSAndG91Y2gnKSB7XG4gICAgICB0aGlzLm9uKCdwb2ludGVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV4aXQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSBCdXR0b24gJiB7b25jbGljazogRnVuY3Rpb259ICovXG4gICAgdGhpcy5zaGFyZUJ1dHRvbjtcblxuICAgIHRoaXMuc2hhcmVCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRleHQgPSBmb3JtYXQuY2FsbCgnU2NvcmU6IHswfVxcbnsxfScsIHBhcmFtcy5zY29yZSwgbWVzc2FnZSk7XG4gICAgICAvLyB2YXIgdGV4dCA9ICdTY29yZTogezB9XFxuezF9Jy5mb3JtYXQocGFyYW1zLnNjb3JlLCBtZXNzYWdlKTtcbiAgICAgIHZhciB1cmwgPSBUd2l0dGVyLmNyZWF0ZVVSTCh7XG4gICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgIGhhc2h0YWdzOiBwYXJhbXMuaGFzaHRhZ3MsXG4gICAgICAgIHVybDogcGFyYW1zLnVybCxcbiAgICAgIH0pO1xuICAgICAgd2luZG93Lm9wZW4odXJsLCAnc2hhcmUgd2luZG93JywgJ3dpZHRoPTQ4MCwgaGVpZ2h0PTMyMCcpO1xuICAgIH07XG4gIH1cblxufVxuXG4vKiogQHR5cGUge1Jlc3VsdFNjZW5lT3B0aW9uc30gKi9cblJlc3VsdFNjZW5lLmRlZmF1bHRzID0ge1xuICBzY29yZTogMTYsXG5cbiAgbWVzc2FnZTogJ3RoaXMgaXMgcGhpbmEuanMgcHJvamVjdC4nLFxuICBoYXNodGFnczogJ3BoaW5hX2pzLGdhbWUsamF2YXNjcmlwdCcsXG4gIHVybDogcGhpbmEuZ2xvYmFsLmxvY2F0aW9uICYmIHBoaW5hLmdsb2JhbC5sb2NhdGlvbi5ocmVmLFxuXG4gIGZvbnRDb2xvcjogJ3doaXRlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnaHNsKDIwMCwgODAlLCA2NCUpJyxcbiAgYmFja2dyb3VuZEltYWdlOiAnJyxcbn07XG5cbi8qKlxuICog44OH44OV44Kp44Or44OI44K344O844Oz44Gu44Kq44OX44K344On44Oz57Wx5ZCI5Z6LXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcIi4vdGl0bGVzY2VuZVwiKS5UaXRsZVNjZW5lT3B0aW9uc1xuICogJiBpbXBvcnQoXCIuL3BhdXNlc2NlbmVcIikuUGF1c2VTY2VuZU9wdGlvbnNcbiAqICYgaW1wb3J0KFwiLi9yZXN1bHRzY2VuZVwiKS5SZXN1bHRTY2VuZU9wdGlvbnNcbiAqICYgaW1wb3J0KFwiLi4vZ2FtZS9sb2FkaW5nc2NlbmVcIikuTG9hZGluZ1NjZW5lT3B0aW9uc1xuICogfSBEZWZhdWx0U2NlbmVPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBzY2VuZXM/OiBpbXBvcnQoXCIuL21hbmFnZXJzY2VuZVwiKS5TY2VuZURhdGFbXVxuICogICBzdGFydExhYmVsPzogaW1wb3J0KFwiLi4vYXBwL3NjZW5lXCIpLlNjZW5lTGFiZWxcbiAqICAgYXV0b1BhdXNlPzogYm9vbGVhblxuICogICBkZWJ1Zz86IGJvb2xlYW5cbiAqICAgbG9hZGluZ1NjZW5lPzogdHlwZW9mIERpc3BsYXlTY2VuZVxuICogICBwYXVzZVNjZW5lPzogdHlwZW9mIERpc3BsYXlTY2VuZVxuICogfSBcbiAqICYgaW1wb3J0KFwiLi4vZGlzcGxheS9jYW52YXNhcHBcIikuQ2FudmFzQXBwT3B0aW9uc1xuICogfSBHYW1lQXBwT3B0aW9uc1xuICovXG5cbi8qKlxuICog44OH44OV44Kp44Or44OI44GubWFpbiBjbGFzc1xuICovXG5jbGFzcyBEZWZhdWx0TWFpblNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIGNvbnNvbGUubG9nKCdUaGlzIGlzIE1haW5TY2VuZScpO1xuICB9XG59XG4vKipcbiAqIOOCr+ODqeOCueOBjHBoaW5hLmRlZmluZeOBq+OCiOOBo+OBpuWumue+qe+8iOOCsOODreODvOODkOODq+OBq+Wumue+qe+8ieOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi+OCkuODgeOCp+ODg+OCr1xuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSDjgq/jg6njgrnlkI3jgIJwaGluYS5nYW1lW2NsYXNzTmFtZV3jgaflrprnvqnjgZXjgozjgabjgYTjgovjgYvjgoLoqr/jgbnjgotcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0dhbWVDbGFzc0RlZmluZWQoY2xhc3NOYW1lKSB7XG4gIGlmIChcbiAgICB0eXBlb2YgcGhpbmEudXNpbmcoY2xhc3NOYW1lKSA9PT0gJ2Z1bmN0aW9uJ1xuICAgIHx8IHR5cGVvZiBwaGluYS51c2luZygncGhpbmEuZ2FtZS4nICsgY2xhc3NOYW1lKSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAY2xhc3MgcGhpbmEuZ2FtZS5HYW1lQXBwXG4gKiBfZXh0ZW5kcyBwaGluYS5kaXNwbGF5LkNhbnZhc0FwcFxuICovXG5jbGFzcyBHYW1lQXBwIGV4dGVuZHMgQ2FudmFzQXBwIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7R2FtZUFwcE9wdGlvbnMgJiBEZWZhdWx0U2NlbmVPcHRpb25zfSBbb3B0aW9uc11cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHtHYW1lQXBwT3B0aW9uc30gKi8oJHNhZmUuY2FsbChvcHRpb25zIHx8IHt9LCB7XG4gICAgLy8gb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KS4kc2FmZSh7XG4gICAgICBzdGFydExhYmVsOiAndGl0bGUnLFxuICAgIH0pKTtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKiBAdHlwZSB7YW55fSBkYXQuR1VJ44Kk44Oz44K544K/44Oz44K5ICovXG4gICAgdGhpcy5ndWkgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgc3RhcnRMYWJlbCA9IG9wdGlvbnMuc3RhcnRMYWJlbCB8fCAndGl0bGUnO1xuXG4gICAgdmFyIHNjZW5lcyA9IG9wdGlvbnMuc2NlbmVzIHx8IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBpc0dhbWVDbGFzc0RlZmluZWQoXCJTcGxhc2hTY2VuZVwiKSA/IFwiU3BsYXNoU2NlbmVcIiA6IFNwbGFzaFNjZW5lLFxuICAgICAgICBsYWJlbDogJ3NwbGFzaCcsXG4gICAgICAgIG5leHRMYWJlbDogJ3RpdGxlJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogaXNHYW1lQ2xhc3NEZWZpbmVkKFwiVGl0bGVTY2VuZVwiKSA/IFwiVGl0bGVTY2VuZVwiIDogVGl0bGVTY2VuZSxcbiAgICAgICAgbGFiZWw6ICd0aXRsZScsXG4gICAgICAgIG5leHRMYWJlbDogJ21haW4nLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiBpc0dhbWVDbGFzc0RlZmluZWQoXCJNYWluU2NlbmVcIikgPyBcIk1haW5TY2VuZVwiIDogRGVmYXVsdE1haW5TY2VuZSxcbiAgICAgICAgbGFiZWw6ICdtYWluJyxcbiAgICAgICAgbmV4dExhYmVsOiAncmVzdWx0JyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogaXNHYW1lQ2xhc3NEZWZpbmVkKFwiUmVzdWx0U2NlbmVcIikgPyBcIlJlc3VsdFNjZW5lXCIgOiBSZXN1bHRTY2VuZSxcbiAgICAgICAgbGFiZWw6ICdyZXN1bHQnLFxuICAgICAgICBuZXh0TGFiZWw6ICd0aXRsZScsXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBzY2VuZXMgPSBlYWNoJDEuY2FsbChzY2VuZXMsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIHMuYXJndW1lbnRzID0gcy5hcmd1bWVudHMgfHwgb3B0aW9ucztcbiAgICB9KTtcblxuICAgIHZhciBzY2VuZSA9IG5ldyBNYW5hZ2VyU2NlbmUoe1xuICAgICAgc3RhcnRMYWJlbDogc3RhcnRMYWJlbCxcbiAgICAgIHNjZW5lczogc2NlbmVzLFxuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuYXNzZXRzKSB7XG4gICAgICAvLyDjg63jg7zjg4fjgqPjg7PjgrDvvJplc23niYjjgafjga/ni6zoh6rjga5Mb2FkaW5nU2NlbmXjga/jgqrjg5fjgrfjg6fjg7PjgafmuKHjgZvjgovjgojjgYbjgavjgZnjgotcblxuICAgICAgdmFyIGxvYWRpbmdPcHRpb25zID0gJGV4dGVuZC5jYWxsKHt9LCBvcHRpb25zLCB7XG4gICAgICAvLyB2YXIgbG9hZGluZ09wdGlvbnMgPSAoe30pLiRleHRlbmQob3B0aW9ucywge1xuICAgICAgICBleGl0VHlwZTogJycsXG4gICAgICB9KTtcbiAgICAgIC8vIOOCsOODreODvOODkOODq+Wumue+qeOBrkxvYWRpbmdTY2VuZeOCkuaOouOBme+8iOW+k+adpe+8iVxuICAgICAgLy8gLT4g44Gq44GR44KM44Gw44Kq44OX44K344On44Oz44KS44OB44Kn44OD44KvIFxuICAgICAgLy8gLT4g44GT44KM44KC44Gq44GR44KM44Gw44OH44OV44Kp44Or44OI44GuTG9hZGluZ1NjZW5l44KS5L2/44GGXG4gICAgICB2YXIgZGVmaW5lZExvYWRpbmdDbGFzcyA9IHBoaW5hLnVzaW5nKFwiTG9hZGluZ1NjZW5lXCIpIHx8IHBoaW5hLnVzaW5nKFwicGhpbmEuZ2FtZS5Mb2FkaW5nU2NlbmVcIik7XG4gICAgICB2YXIgbG9hZGluZyA9ICh0eXBlb2YgZGVmaW5lZExvYWRpbmdDbGFzcyA9PT0gJ2Z1bmN0aW9uJykgXG4gICAgICAgID8gZGVmaW5lZExvYWRpbmdDbGFzcyhsb2FkaW5nT3B0aW9ucylcbiAgICAgICAgOiAob3B0aW9ucy5sb2FkaW5nU2NlbmUgIT0gbnVsbClcbiAgICAgICAgICA/IG5ldyBvcHRpb25zLmxvYWRpbmdTY2VuZShsb2FkaW5nT3B0aW9ucykgXG4gICAgICAgICAgOiBuZXcgTG9hZGluZ1NjZW5lKGxvYWRpbmdPcHRpb25zKVxuICAgICAgO1xuICAgICAgdGhpcy5yZXBsYWNlU2NlbmUobG9hZGluZyk7XG5cbiAgICAgIGxvYWRpbmcub25sb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlU2NlbmUoc2NlbmUpO1xuICAgICAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgIHRoaXMuX2VuYWJsZURlYnVnZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnJlcGxhY2VTY2VuZShzY2VuZSk7XG4gICAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICB0aGlzLl9lbmFibGVEZWJ1Z2dlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiHquWLleOBp+ODneODvOOCuuOBmeOCi1xuICAgIC8vIGVzbeeJiOOBp+OBr+eLrOiHquOBruODneODvOOCuuOCt+ODvOODs+OBr+OCquODl+OCt+ODp+ODs+OBp+a4oeOBmVxuICAgIC8vIOW8leaVsOOBjOa4oeOBm+OBquOBhOOBruOBr+WFg+OBi+OCiVxuICAgIGlmIChvcHRpb25zLmF1dG9QYXVzZSkge1xuICAgICAgdGhpcy5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGVmaW5lZFBhdXNlU2NlbmUgPSBwaGluYS51c2luZyhcInBoaW5hLmdhbWUuUGF1c2VTY2VuZVwiKTtcbiAgICAgICAgdmFyIHBhdXNlU2NlbmUgPSAodHlwZW9mIGRlZmluZWRQYXVzZVNjZW5lID09PSAnZnVuY3Rpb24nKSBcbiAgICAgICAgICA/IGRlZmluZWRQYXVzZVNjZW5lKCkgXG4gICAgICAgICAgOiAob3B0aW9ucy5wYXVzZVNjZW5lKSBcbiAgICAgICAgICAgID8gbmV3IG9wdGlvbnMucGF1c2VTY2VuZShvcHRpb25zKSBcbiAgICAgICAgICAgIDogbmV3IFBhdXNlU2NlbmUoKTtcbiAgICAgICAgdGhpcy5wdXNoU2NlbmUocGF1c2VTY2VuZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9lbmFibGVEZWJ1Z2dlcigpIHtcbiAgICBpZiAodGhpcy5ndWkpIHJldHVybiA7XG5cbiAgICB0aGlzLmVuYWJsZURhdEdVSShcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7R2FtZUFwcH1cbiAgICAgKiBAcGFyYW0ge3sgYWRkRm9sZGVyOiAoYXJnMDogc3RyaW5nKSA9PiBhbnk7IH19IGd1aSBEYXQuZ3Vp44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgZnVuY3Rpb24oZ3VpKSB7XG4gICAgICB2YXIgZiA9IGd1aS5hZGRGb2xkZXIoJ3NjZW5lcycpO1xuICAgICAgdmFyIGZ1bmNzID0ge307XG4gICAgICBlYWNoJDEuY2FsbCgvKiogQHR5cGUge01hbmFnZXJTY2VuZX0gKi8odGhpcy5yb290U2NlbmUpLnNjZW5lcywgZnVuY3Rpb24oc2NlbmUpIHtcbiAgICAgIC8vIHRoaXMucm9vdFNjZW5lLnNjZW5lcy5lYWNoKGZ1bmN0aW9uKHNjZW5lKSB7XG4gICAgICAgIGZ1bmNzW3NjZW5lLmxhYmVsXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMucm9vdFNjZW5lLnJlcGxhY2VTY2VuZShzY2VuZS5sYWJlbCk7XG4gICAgICAgICAgY29uc29sZS5sb2codGhpcy5fc2NlbmVzLmxlbmd0aCk7XG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIGZvckluLmNhbGwoZnVuY3MsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIC8vIGZ1bmNzLmZvckluKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgZi5hZGQoZnVuY3MsIGtleSk7XG4gICAgICB9KTtcbiAgICAgIGYub3BlbigpO1xuXG4gICAgICB0aGlzLmd1aSA9IGd1aTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG59XG5cbi8qKlxuICogQXBw44Kv44Op44K557Wx5ZCI5Z6LXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9hcHAvYmFzZWFwcCcpLkJhc2VBcHAgfCBpbXBvcnQoJy4uL2Rpc3BsYXkvZG9tYXBwJykuRG9tQXBwIHwgaW1wb3J0KCcuLi9kaXNwbGF5L2NhbnZhc2FwcCcpLkNhbnZhc0FwcCB8IEdhbWVBcHB9IEFwcFVuaW9uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDb3VudFNjZW5lT3B0aW9uRXh0ZW5kXG4gKiBAcHJvcGVydHkge251bWJlcnxudW1iZXJbXX0gW2NvdW50XSDjgqvjgqbjg7Pjg4jjg4Djgqbjg7Plm57mlbDjgILphY3liJfjgafmuKHjgZfjgZ/loLTlkIjjgIHjgZ3jga7pgIbpoIbjgafjgqvjgqbjg7Pjg4jjg4Djgqbjg7PjgpLooYzjgYZcbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KFwiLi4vaW5kZXguZXNtXCIpLkNhbnZhc1N0eWxlfSBbZm9udENvbG9yXSDjg5Xjgqnjg7Pjg4jjga7oibJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZm9udFNpemVdIOODleOCqeODs+ODiOOCteOCpOOCulxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtleGl0VHlwZV0gJ2F1dG8n44Gu44Go44GN44CB6Ieq5YuV44GncG9wU2NlbmVcbiAqIFxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2Rpc3BsYXkvZGlzcGxheXNjZW5lXCIpLkRpc3BsYXlTY2VuZU9wdGlvbnMgJiBDb3VudFNjZW5lT3B0aW9uRXh0ZW5kfSBDb3VudFNjZW5lT3B0aW9uc1xuICovXG5cbi8qKlxuICogQGNsYXNzIHBoaW5hLmdhbWUuQ291bnRTY2VuZVxuICogX2V4dGVuZHMgcGhpbmEuZGlzcGxheS5EaXNwbGF5U2NlbmVcbiAqIFxuICog6Ieq5YuV44Gn44Kr44Km44Oz44OI44OA44Km44Oz44KS6KGM44GG5LiA5pmC55SoU2NlbmVcbiAqIOODoeOCpOODs+OBruOCt+ODvOODs+OBp+OCsuODvOODoOmWi+Wni+WJjeOBq3B1c2hTY2VuZeOBmeOCi+OBruOBjOS4gOiIrOeahOOBquS9v+OBhOaWuVxuICovXG5jbGFzcyBDb3VudFNjZW5lIGV4dGVuZHMgRGlzcGxheVNjZW5lIHtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7Q291bnRTY2VuZU9wdGlvbnN9IFtvcHRpb25zXVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9ICRzYWZlLmNhbGwob3B0aW9ucyB8fCB7fSwgQ291bnRTY2VuZS5kZWZhdWx0cyk7XG4gICAgLy8gb3B0aW9ucyA9IChvcHRpb25zIHx8IHt9KS4kc2FmZShwaGluYS5nYW1lLkNvdW50U2NlbmUuZGVmYXVsdHMpO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcblxuICAgIHRoaXMuZnJvbUpTT04oe1xuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICBjbGFzc05hbWU6IExhYmVsLFxuICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3BoaW5hLmRpc3BsYXkuTGFiZWwnLFxuICAgICAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICAgICAgZmlsbDogb3B0aW9ucy5mb250Q29sb3IsXG4gICAgICAgICAgICBmb250U2l6ZTogb3B0aW9ucy5mb250U2l6ZSxcbiAgICAgICAgICAgIHN0cm9rZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB4OiB0aGlzLmdyaWRYLmNlbnRlcigpLFxuICAgICAgICAgIHk6IHRoaXMuZ3JpZFkuY2VudGVyKCksXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKiogQHR5cGUge0xhYmVsfSAqL1xuICAgIHRoaXMubGFiZWw7XG5cbiAgICAvKiogQHR5cGUge251bWJlcltdfSAqL1xuICAgIHRoaXMuY291bnRMaXN0O1xuXG4gICAgaWYgKG9wdGlvbnMuY291bnQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5jb3VudExpc3QgPSBjbG9uZS5jYWxsKG9wdGlvbnMuY291bnQpLnJldmVyc2UoKTtcbiAgICAgIC8vIHRoaXMuY291bnRMaXN0ID0gb3B0aW9ucy5jb3VudC5jbG9uZSgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNvdW50TGlzdCA9IHJhbmdlLmNhbGwoW10sIDEsIG9wdGlvbnMuY291bnQrMSk7XG4gICAgICAvLyB0aGlzLmNvdW50TGlzdCA9IEFycmF5LnJhbmdlKDEsIG9wdGlvbnMuY291bnQrMSk7XG4gICAgfVxuICAgIHRoaXMuY291bnRlciA9IHRoaXMuY291bnRMaXN0Lmxlbmd0aDtcbiAgICB0aGlzLmV4aXRUeXBlID0gb3B0aW9ucy5leGl0VHlwZTtcblxuICAgIHRoaXMuX3VwZGF0ZUNvdW50KCk7XG4gIH1cblxuICBfdXBkYXRlQ291bnQoKSB7XG4gICAgdmFyIGVuZEZsYWcgPSB0aGlzLmNvdW50ZXIgPD0gMDtcbiAgICB2YXIgaW5kZXggPSAtLXRoaXMuY291bnRlcjtcblxuICAgIHRoaXMubGFiZWwudGV4dCA9IHRoaXMuY291bnRMaXN0W2luZGV4XTtcblxuICAgIHRoaXMubGFiZWwuc2NhbGUuc2V0KDEsIDEpO1xuICAgIHRoaXMubGFiZWwudHdlZW5lclxuICAgICAgLmNsZWFyKClcbiAgICAgIC50byh7XG4gICAgICAgIHNjYWxlWDogMSxcbiAgICAgICAgc2NhbGVZOiAxLFxuICAgICAgICBhbHBoYTogMSxcbiAgICAgIH0sIDI1MClcbiAgICAgIC53YWl0KDUwMClcbiAgICAgIC50byh7XG4gICAgICAgIHNjYWxlWDogMS41LFxuICAgICAgICBzY2FsZVk6IDEuNSxcbiAgICAgICAgYWxwaGE6IDAuMFxuICAgICAgfSwgMjUwKVxuICAgICAgLmNhbGwoXG4gICAgICAvKiogQHRoaXMgQ291bnRTY2VuZSAqL1xuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPD0gMCkge1xuICAgICAgICAgIHRoaXMuZmxhcmUoJ2ZpbmlzaCcpO1xuICAgICAgICAgIGlmICh0aGlzLmV4aXRUeXBlID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcFNjZW5lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvdW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICB9XG5cbn1cblxuLyoqIEB0eXBlIHtDb3VudFNjZW5lT3B0aW9uc30gKi9cbkNvdW50U2NlbmUuZGVmYXVsdHMgPSB7XG4gIGNvdW50OiAzLFxuXG4gIHdpZHRoOiA2NDAsXG4gIGhlaWdodDogOTYwLFxuXG4gIGZvbnRDb2xvcjogJ3doaXRlJyxcbiAgZm9udFNpemU6IDE2NCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSg1MCwgNTAsIDUwLCAxKScsXG5cbiAgZXhpdFR5cGU6ICdhdXRvJyxcbn07XG5cbmV4cG9ydCB7IEFjY2VsZXJvbWV0ZXIsIEFjY2Vzc29yeSwgQWpheCwgYXJyYXlFeHRlbnNpb25zIGFzIEFycmF5RXgsIGFycmF5U3RhdGljRXh0ZW5zaW9ucyBhcyBBcnJheUV4U3RhdGljLCBBc3NldCwgQXNzZXRMb2FkZXIsIEFzc2V0TWFuYWdlciwgQmFzZUFwcCwgQnV0dG9uLCBDYW52YXMsIENhbnZhc0FwcCwgQ2FudmFzTGF5ZXIsIENhbnZhc1JlbmRlcmVyLCBDaGFuZ2VEaXNwYXRjaGVyLCBDaXJjbGUsIENpcmNsZUdhdWdlLCBDaXJjbGVTaGFwZSwgQ29sbGlzaW9uLCBDb2xvciwgQ291bnRTY2VuZSwgRGlzcGxheUVsZW1lbnQsIERpc3BsYXlTY2VuZSwgRG9tQXBwLCBEcmFnZ2FibGUsIEVsZW1lbnQsIEV2ZW50RGlzcGF0Y2hlciwgRmlsZSwgRmxpY2thYmxlLCBGbG93LCBGb250LCBGcmFtZUFuaW1hdGlvbiwgR2FtZUFwcCwgUGhpbmFHYW1lcGFkIGFzIEdhbWVwYWQsIEdhbWVwYWRNYW5hZ2VyLCBHYXVnZSwgR3JpZCwgSGVhcnRTaGFwZSwgSW5wdXQsIEludGVyYWN0aXZlLCBLZXlib2FyZCwgTGFiZWwsIExhYmVsQXJlYSwgTGF5ZXIsIExvYWRpbmdTY2VuZSwgTWFuYWdlclNjZW5lLCBtYXRoRXh0ZW5zaW9ucyBhcyBNYXRoRXgsIE1hdHJpeDMzLCBNb3VzZSwgbnVtYmVyRXh0ZW5zaW9ucyBhcyBOdW1iZXJFeCwgT2JqZWN0MkQsIG9iamVjdEV4dGVuc2lvbnMgYXMgT2JqZWN0RXgsIFBhdGhTaGFwZSwgUGF1c2VTY2VuZSwgUGh5c2ljYWwsIFBsYWluRWxlbWVudCwgUG9seWdvblNoYXBlLCBRdWVyeVN0cmluZywgUmFuZG9tLCBSZWN0LCBSZWN0YW5nbGVTaGFwZSwgUmVzdWx0U2NlbmUsIFNjZW5lLCBTY3JpcHQsIFNoYXBlLCBTb3VuZCwgU291bmRNYW5hZ2VyLCBTcGxhc2hTY2VuZSwgU3ByaXRlLCBTcHJpdGVTaGVldCwgU3RhclNoYXBlLCBzdHJpbmdFeHRlbnNpb25zIGFzIFN0cmluZ0V4LCBTdXBwb3J0LCBUZXh0dXJlLCBUaHJlZUxheWVyLCBUaWNrZXIsIFRpdGxlU2NlbmUsIFRvdWNoJDEgYXMgVG91Y2gsIFRvdWNoTGlzdCwgVHJpYW5nbGVTaGFwZSwgVHdlZW4sIFR3ZWVuZXIsIFR3aXR0ZXIsIFVwZGF0ZXIsIFZlY3RvcjIsIFZlY3RvcjMsIFdhdmUsIGRhdGVFeHRlbnNpb25zIGFzIGRhdGVFeCwgZGF0ZVN0YXRpY0V4dGVuc2lvbnMgYXMgZGF0ZUV4U3RhdGljLCBleHRlbmRCdWlsdEluT2JqZWN0LCBleHRlbmRFdmVudE9iamVjdCwgcGhpbmEgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgKiBhcyBYTUxMb2FkZXIgZnJvbSBcIi4vdGlsZWRtYXAvWE1MTG9hZGVyXCI7XG5leHBvcnQgKiBhcyBUaWxlU2V0IGZyb20gXCIuL3RpbGVkbWFwL1RpbGVzZXRcIlxuZXhwb3J0ICogYXMgVGlsZWRNYXAgZnJvbSBcIi4vdGlsZWRtYXAvVGlsZWRtYXBcIjtcbiJdLCJzb3VyY2VSb290IjoiIn0=